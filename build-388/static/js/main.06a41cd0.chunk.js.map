{"version":3,"sources":["i18n/index.js","serviceWorker.js","loading.js","index.js"],"names":["resources","en","translation","de","deTranslations","fa","i18n","use","initReactI18next","init","fallbackLng","lng","keySeparator","interpolation","escapeValue","Boolean","window","location","hostname","match","Loading","props","className","width","height","r","cx","cy","fill","stroke","strokeWidth","strokeDashoffset","strokeDasharray","rotate","keyframes","StyledLoading","styled","App","lazy","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oxQAOMA,EAAY,CAChBC,GAAI,CACFC,Y,OAGFC,GAAI,CACFD,YAAaE,GAGfC,GAAI,CACFH,Y,QAIJI,IAAKC,IAAIC,KAAkBC,KAAK,CAC9BT,YACAU,YAAa,KACbC,IAAK,KAELC,cAAc,EAEdC,cAAe,CACbC,aAAa,KAIFR,EAAf,ECrBoBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sLCdN,IAAMC,EAAU,SAAAC,GACd,OACE,yBAAKC,UAAWD,EAAMC,WACpB,yBAAKC,MAAM,MAAMC,OAAO,OACtB,4BACEC,EAAE,KACFC,GAAG,KACHC,GAAG,KACHC,KAAK,OACLC,OAAO,UACPC,YAAY,IACZC,iBAAiB,IACjBC,gBAAgB,QAElB,4BACEP,EAAE,KACFC,GAAG,KACHC,GAAG,KACHC,KAAK,OACLC,OAAO,QACPC,YAAY,KACZC,iBAAiB,KACjBC,gBAAgB,SAGpB,8CAKAC,EAASC,YAAH,KA+DGC,EArDOC,YAAOhB,GAAV,6EAAGgB,CAAH,yrBAkBFH,GCxDXI,EAAMC,gBAAK,kBAAM,uDAEvBC,IAASC,OACP,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAACJ,EAAD,OAEFK,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.06a41cd0.chunk.js","sourcesContent":["import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport deTranslations from './locales/de.json';\nimport enTranslations from './locales/en.json';\nimport faTranslations from './locales/fa.json';\n\nconst resources = {\n  en: {\n    translation: enTranslations\n  },\n\n  de: {\n    translation: deTranslations\n  },\n\n  fa: {\n    translation: faTranslations\n  }\n};\n\ni18n.use(initReactI18next).init({\n  resources,\n  fallbackLng: 'en',\n  lng: 'en',\n\n  keySeparator: false,\n\n  interpolation: {\n    escapeValue: false\n  }\n});\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//; -*- mode: rjsx;-*-\nimport React from 'react';\nimport styled, { keyframes } from 'styled-components/macro';\n\nconst Loading = props => {\n  return (\n    <div className={props.className}>\n      <svg width=\"192\" height=\"192\">\n        <circle\n          r=\"82\"\n          cx=\"96\"\n          cy=\"96\"\n          fill=\"none\"\n          stroke=\"#00bdc4\"\n          strokeWidth=\"8\"\n          strokeDashoffset=\"0\"\n          strokeDasharray=\"515\"\n        ></circle>\n        <circle\n          r=\"82\"\n          cx=\"96\"\n          cy=\"96\"\n          fill=\"none\"\n          stroke=\"white\"\n          strokeWidth=\"14\"\n          strokeDashoffset=\"20\"\n          strokeDasharray=\"515\"\n        ></circle>\n      </svg>\n      <span>Loading...</span>\n    </div>\n  );\n};\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst StyledLoading = styled(Loading)`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n  width: 12rem;\n  height: 12rem;\n  transition: opacity 0.5s 0.5s, visibility 0s 1s;\n\n  svg {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 1;\n    opacity: 1;\n    animation: ${rotate} 6s infinite linear;\n  }\n\n  svg circle {\n    position: absolute;\n    top: 0;\n    left: 0;\n    position: absolute;\n  }\n\n  circle:nth-of-type(2) {\n    animation: circleCover1 3s infinite linear;\n    transform-origin: 50% 50%;\n  }\n\n  circle:nth-of-type(3) {\n    transform-origin: 50% 50%;\n    transform: rotateX(180deg) rotateZ(-16deg);\n  }\n\n  span {\n    text-align: center;\n    position: absolute;\n    max-width: 80%;\n    max-height: 80%;\n    transform: translate(-50%, -50%);\n    top: 50%;\n    left: 50%;\n    position: absolute;\n    font-style: italic;\n    font-size: 1.25rem;\n    color: #666;\n  }\n`;\n\nexport default StyledLoading;\n","import React, { lazy, Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './i18n';\nimport * as serviceWorker from './serviceWorker';\nimport Loading from './loading';\n\nconst App = lazy(() => import('./App'));\n\nReactDOM.render(\n  <Suspense fallback={<Loading />}>\n    <App />\n  </Suspense>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}