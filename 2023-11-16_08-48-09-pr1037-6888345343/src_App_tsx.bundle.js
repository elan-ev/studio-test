"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkopencast_studio"] = self["webpackChunkopencast_studio"] || []).push([["src_App_tsx"],{

/***/ "./src/icons/keyboard.svg":
/*!********************************!*\
  !*** ./src/icons/keyboard.svg ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _rect, _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nconst SvgKeyboard = props => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: \"1em\",\n  height: \"1em\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\",\n  strokeWidth: 2,\n  viewBox: \"0 0 24 24\"\n}, props), _rect || (_rect = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\n  width: 22,\n  height: 14,\n  x: 1,\n  y: 5,\n  rx: 1,\n  ry: 1\n})), _path || (_path = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n  d: \"M6 9h.001M10 9h.001M14 9h.001M18 9h.001M8 12h.001M12 12h.001M16 12h.001M6 15h12\"\n})));\n/* harmony default export */ __webpack_exports__[\"default\"] = (SvgKeyboard);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaWNvbnMva2V5Ym9hcmQuc3ZnIiwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5jYXN0LXN0dWRpby8uL3NyYy9pY29ucy9rZXlib2FyZC5zdmc/NmMzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX3JlY3QsIF9wYXRoO1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmNvbnN0IFN2Z0tleWJvYXJkID0gcHJvcHMgPT4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX2V4dGVuZHMoe1xuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB3aWR0aDogXCIxZW1cIixcbiAgaGVpZ2h0OiBcIjFlbVwiLFxuICBmaWxsOiBcIm5vbmVcIixcbiAgc3Ryb2tlOiBcImN1cnJlbnRDb2xvclwiLFxuICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gIHN0cm9rZUxpbmVqb2luOiBcInJvdW5kXCIsXG4gIHN0cm9rZVdpZHRoOiAyLFxuICB2aWV3Qm94OiBcIjAgMCAyNCAyNFwiXG59LCBwcm9wcyksIF9yZWN0IHx8IChfcmVjdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicmVjdFwiLCB7XG4gIHdpZHRoOiAyMixcbiAgaGVpZ2h0OiAxNCxcbiAgeDogMSxcbiAgeTogNSxcbiAgcng6IDEsXG4gIHJ5OiAxXG59KSksIF9wYXRoIHx8IChfcGF0aCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTYgOWguMDAxTTEwIDloLjAwMU0xNCA5aC4wMDFNMTggOWguMDAxTTggMTJoLjAwMU0xMiAxMmguMDAxTTE2IDEyaC4wMDFNNiAxNWgxMlwiXG59KSkpO1xuZXhwb3J0IGRlZmF1bHQgU3ZnS2V5Ym9hcmQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/icons/keyboard.svg\n");

/***/ }),

/***/ "./src/icons/step-current.svg":
/*!************************************!*\
  !*** ./src/icons/step-current.svg ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _circle, _circle2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nconst SvgStepCurrent = props => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: \"1em\",\n  height: \"1em\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\",\n  strokeWidth: 2,\n  className: \"step-current_svg__feather step-current_svg__feather-circle\",\n  viewBox: \"0 0 24 24\"\n}, props), _circle || (_circle = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n  cx: 12,\n  cy: 12,\n  r: 10\n})), _circle2 || (_circle2 = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n  cx: 12,\n  cy: 12,\n  r: 3,\n  fill: \"currentColor\"\n})));\n/* harmony default export */ __webpack_exports__[\"default\"] = (SvgStepCurrent);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaWNvbnMvc3RlcC1jdXJyZW50LnN2ZyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5jYXN0LXN0dWRpby8uL3NyYy9pY29ucy9zdGVwLWN1cnJlbnQuc3ZnP2FjZWIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jaXJjbGUsIF9jaXJjbGUyO1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmNvbnN0IFN2Z1N0ZXBDdXJyZW50ID0gcHJvcHMgPT4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX2V4dGVuZHMoe1xuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB3aWR0aDogXCIxZW1cIixcbiAgaGVpZ2h0OiBcIjFlbVwiLFxuICBmaWxsOiBcIm5vbmVcIixcbiAgc3Ryb2tlOiBcImN1cnJlbnRDb2xvclwiLFxuICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gIHN0cm9rZUxpbmVqb2luOiBcInJvdW5kXCIsXG4gIHN0cm9rZVdpZHRoOiAyLFxuICBjbGFzc05hbWU6IFwic3RlcC1jdXJyZW50X3N2Z19fZmVhdGhlciBzdGVwLWN1cnJlbnRfc3ZnX19mZWF0aGVyLWNpcmNsZVwiLFxuICB2aWV3Qm94OiBcIjAgMCAyNCAyNFwiXG59LCBwcm9wcyksIF9jaXJjbGUgfHwgKF9jaXJjbGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XG4gIGN4OiAxMixcbiAgY3k6IDEyLFxuICByOiAxMFxufSkpLCBfY2lyY2xlMiB8fCAoX2NpcmNsZTIgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XG4gIGN4OiAxMixcbiAgY3k6IDEyLFxuICByOiAzLFxuICBmaWxsOiBcImN1cnJlbnRDb2xvclwiXG59KSkpO1xuZXhwb3J0IGRlZmF1bHQgU3ZnU3RlcEN1cnJlbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/icons/step-current.svg\n");

/***/ }),

/***/ "./src/icons/step-done.svg":
/*!*********************************!*\
  !*** ./src/icons/step-done.svg ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nconst SvgStepDone = props => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: \"1em\",\n  height: \"1em\",\n  fill: \"currentColor\",\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\",\n  className: \"step-done_svg__feather step-done_svg__feather-circle\",\n  viewBox: \"0 0 24 24\"\n}, props), _path || (_path = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n  d: \"M12 1A11 11 0 0 0 1 12a11 11 0 0 0 11 11 11 11 0 0 0 11-11A11 11 0 0 0 12 1zm5 7a1 1 0 0 1 .707.293 1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414 0l-3-3a1 1 0 0 1 0-1.414 1 1 0 0 1 1.414 0L10 14.586l6.293-6.293A1 1 0 0 1 17 8z\"\n})));\n/* harmony default export */ __webpack_exports__[\"default\"] = (SvgStepDone);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaWNvbnMvc3RlcC1kb25lLnN2ZyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5jYXN0LXN0dWRpby8uL3NyYy9pY29ucy9zdGVwLWRvbmUuc3ZnPzY4ZDMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9wYXRoO1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmNvbnN0IFN2Z1N0ZXBEb25lID0gcHJvcHMgPT4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX2V4dGVuZHMoe1xuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB3aWR0aDogXCIxZW1cIixcbiAgaGVpZ2h0OiBcIjFlbVwiLFxuICBmaWxsOiBcImN1cnJlbnRDb2xvclwiLFxuICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gIHN0cm9rZUxpbmVqb2luOiBcInJvdW5kXCIsXG4gIGNsYXNzTmFtZTogXCJzdGVwLWRvbmVfc3ZnX19mZWF0aGVyIHN0ZXAtZG9uZV9zdmdfX2ZlYXRoZXItY2lyY2xlXCIsXG4gIHZpZXdCb3g6IFwiMCAwIDI0IDI0XCJcbn0sIHByb3BzKSwgX3BhdGggfHwgKF9wYXRoID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgMUExMSAxMSAwIDAgMCAxIDEyYTExIDExIDAgMCAwIDExIDExIDExIDExIDAgMCAwIDExLTExQTExIDExIDAgMCAwIDEyIDF6bTUgN2ExIDEgMCAwIDEgLjcwNy4yOTMgMSAxIDAgMCAxIDAgMS40MTRsLTcgN2ExIDEgMCAwIDEtMS40MTQgMGwtMy0zYTEgMSAwIDAgMSAwLTEuNDE0IDEgMSAwIDAgMSAxLjQxNCAwTDEwIDE0LjU4Nmw2LjI5My02LjI5M0ExIDEgMCAwIDEgMTcgOHpcIlxufSkpKTtcbmV4cG9ydCBkZWZhdWx0IFN2Z1N0ZXBEb25lOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/icons/step-done.svg\n");

/***/ }),

/***/ "./src/steps/review/cut-here-icon.svg":
/*!********************************************!*\
  !*** ./src/steps/review/cut-here-icon.svg ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nconst SvgCutHereIcon = props => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  \"aria-hidden\": \"true\",\n  viewBox: \"0 0 100 90\",\n  width: \"1em\",\n  height: \"1em\"\n}, props), _g || (_g = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n  fill: \"currentColor\"\n}, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n  d: \"M49.7.002c-2.91.059-5.75 1.49-7.44 4.08a8.837 8.837 0 0 0-1.42 5.29c-.08.122-.986 1.51-1.13 1.72-.13-.2-.997-1.54-1.08-1.66a8.838 8.838 0 0 0-1.4-5.29c-1.68-2.59-4.51-4.04-7.42-4.11a9.028 9.028 0 0 0-5.09 1.41c-4.18 2.66-5.4 8.27-2.72 12.4 2.56 3.96 7.83 5.24 11.9 3.02l.992 1.53c-2.84 4.35-4.9 7.5-6.74 10.3-3.09 4.73-1.94 8.93 2.01 11.5l9.47-14.5 9.45 14.6c3.96-2.55 5.13-6.75 2.06-11.5-1.84-2.84-3.9-6.03-6.74-10.4l1.04-1.59c4.1 2.23 9.37.974 12-2.97 2.03-3.1 1.85-7.03-.114-9.93a8.883 8.883 0 0 0-2.55-2.49 8.938 8.938 0 0 0-5.08-1.43zm.09 5.96a3.038 3.038 0 0 1 1.7.499c.357.23.65.514.872.835.668.962.712 2.24.018 3.31-.926 1.42-2.74 1.8-4.17.882-1.43-.92-1.82-2.73-.89-4.14.58-.886 1.51-1.37 2.47-1.38zm-20.1.023c.963.017 1.89.504 2.46 1.39.92 1.42.525 3.22-.906 4.14s-3.25.521-4.17-.9c-.92-1.42-.525-3.22.906-4.14a3.07 3.07 0 0 1 1.71-.492zm10 24.1a1.83 1.81 0 0 0-1.83 1.81v3.62a1.83 1.81 0 0 0 1.83 1.81 1.83 1.81 0 0 0 1.83-1.81v-3.62a1.83 1.81 0 0 0-1.83-1.81zm0 10.9a1.83 1.81 0 0 0-1.83 1.81v3.62a1.83 1.81 0 0 0 1.83 1.81 1.83 1.81 0 0 0 1.83-1.81v-3.62a1.83 1.81 0 0 0-1.83-1.81zm-1.5 8.8a2.43 2.42 0 0 0-2.43 2.42v35.4a2.43 2.42 0 0 0 2.43 2.42h8.94v-4.83h-6.51v-30.6h6.1v-4.83zm6.51 8.86v22.5h55.2v-4.83h-3.22a1.71 1.71 0 0 1-1.72-1.71v-9.47c0-.946.767-1.71 1.72-1.71h3.22v-4.83zm6.59 4.83h14.4c.954 0 1.72.762 1.72 1.71v9.47c0 .946-.767 1.71-1.72 1.71h-14.4a1.71 1.71 0 0 1-1.72-1.71v-9.47c0-.946.767-1.71 1.72-1.71zm22.7 0h14.4c.954 0 1.72.762 1.72 1.71v9.47c0 .946-.767 1.71-1.72 1.71h-14.4a1.71 1.71 0 0 1-1.72-1.71v-9.47c0-.946.77-1.71 1.72-1.71z\"\n}), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n  d: \"M0 58.6v4.83h2.44c.954 0 1.72.762 1.72 1.71v9.47c0 .946-.768 1.71-1.72 1.71H0v4.83h31.8v-22.5zm10.8 4.83h14.4c.954 0 1.72.762 1.72 1.71v9.47c0 .946-.768 1.71-1.72 1.71H10.8a1.71 1.71 0 0 1-1.72-1.71v-9.47c0-.946.768-1.71 1.72-1.71z\",\n  opacity: 0.2\n}))));\n/* harmony default export */ __webpack_exports__[\"default\"] = (SvgCutHereIcon);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RlcHMvcmV2aWV3L2N1dC1oZXJlLWljb24uc3ZnIiwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5jYXN0LXN0dWRpby8uL3NyYy9zdGVwcy9yZXZpZXcvY3V0LWhlcmUtaWNvbi5zdmc/ZDgxOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2c7XG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuY29uc3QgU3ZnQ3V0SGVyZUljb24gPSBwcm9wcyA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfZXh0ZW5kcyh7XG4gIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsXG4gIHZpZXdCb3g6IFwiMCAwIDEwMCA5MFwiLFxuICB3aWR0aDogXCIxZW1cIixcbiAgaGVpZ2h0OiBcIjFlbVwiXG59LCBwcm9wcyksIF9nIHx8IChfZyA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCB7XG4gIGZpbGw6IFwiY3VycmVudENvbG9yXCJcbn0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTQ5LjcuMDAyYy0yLjkxLjA1OS01Ljc1IDEuNDktNy40NCA0LjA4YTguODM3IDguODM3IDAgMCAwLTEuNDIgNS4yOWMtLjA4LjEyMi0uOTg2IDEuNTEtMS4xMyAxLjcyLS4xMy0uMi0uOTk3LTEuNTQtMS4wOC0xLjY2YTguODM4IDguODM4IDAgMCAwLTEuNC01LjI5Yy0xLjY4LTIuNTktNC41MS00LjA0LTcuNDItNC4xMWE5LjAyOCA5LjAyOCAwIDAgMC01LjA5IDEuNDFjLTQuMTggMi42Ni01LjQgOC4yNy0yLjcyIDEyLjQgMi41NiAzLjk2IDcuODMgNS4yNCAxMS45IDMuMDJsLjk5MiAxLjUzYy0yLjg0IDQuMzUtNC45IDcuNS02Ljc0IDEwLjMtMy4wOSA0LjczLTEuOTQgOC45MyAyLjAxIDExLjVsOS40Ny0xNC41IDkuNDUgMTQuNmMzLjk2LTIuNTUgNS4xMy02Ljc1IDIuMDYtMTEuNS0xLjg0LTIuODQtMy45LTYuMDMtNi43NC0xMC40bDEuMDQtMS41OWM0LjEgMi4yMyA5LjM3Ljk3NCAxMi0yLjk3IDIuMDMtMy4xIDEuODUtNy4wMy0uMTE0LTkuOTNhOC44ODMgOC44ODMgMCAwIDAtMi41NS0yLjQ5IDguOTM4IDguOTM4IDAgMCAwLTUuMDgtMS40M3ptLjA5IDUuOTZhMy4wMzggMy4wMzggMCAwIDEgMS43LjQ5OWMuMzU3LjIzLjY1LjUxNC44NzIuODM1LjY2OC45NjIuNzEyIDIuMjQuMDE4IDMuMzEtLjkyNiAxLjQyLTIuNzQgMS44LTQuMTcuODgyLTEuNDMtLjkyLTEuODItMi43My0uODktNC4xNC41OC0uODg2IDEuNTEtMS4zNyAyLjQ3LTEuMzh6bS0yMC4xLjAyM2MuOTYzLjAxNyAxLjg5LjUwNCAyLjQ2IDEuMzkuOTIgMS40Mi41MjUgMy4yMi0uOTA2IDQuMTRzLTMuMjUuNTIxLTQuMTctLjljLS45Mi0xLjQyLS41MjUtMy4yMi45MDYtNC4xNGEzLjA3IDMuMDcgMCAwIDEgMS43MS0uNDkyem0xMCAyNC4xYTEuODMgMS44MSAwIDAgMC0xLjgzIDEuODF2My42MmExLjgzIDEuODEgMCAwIDAgMS44MyAxLjgxIDEuODMgMS44MSAwIDAgMCAxLjgzLTEuODF2LTMuNjJhMS44MyAxLjgxIDAgMCAwLTEuODMtMS44MXptMCAxMC45YTEuODMgMS44MSAwIDAgMC0xLjgzIDEuODF2My42MmExLjgzIDEuODEgMCAwIDAgMS44MyAxLjgxIDEuODMgMS44MSAwIDAgMCAxLjgzLTEuODF2LTMuNjJhMS44MyAxLjgxIDAgMCAwLTEuODMtMS44MXptLTEuNSA4LjhhMi40MyAyLjQyIDAgMCAwLTIuNDMgMi40MnYzNS40YTIuNDMgMi40MiAwIDAgMCAyLjQzIDIuNDJoOC45NHYtNC44M2gtNi41MXYtMzAuNmg2LjF2LTQuODN6bTYuNTEgOC44NnYyMi41aDU1LjJ2LTQuODNoLTMuMjJhMS43MSAxLjcxIDAgMCAxLTEuNzItMS43MXYtOS40N2MwLS45NDYuNzY3LTEuNzEgMS43Mi0xLjcxaDMuMjJ2LTQuODN6bTYuNTkgNC44M2gxNC40Yy45NTQgMCAxLjcyLjc2MiAxLjcyIDEuNzF2OS40N2MwIC45NDYtLjc2NyAxLjcxLTEuNzIgMS43MWgtMTQuNGExLjcxIDEuNzEgMCAwIDEtMS43Mi0xLjcxdi05LjQ3YzAtLjk0Ni43NjctMS43MSAxLjcyLTEuNzF6bTIyLjcgMGgxNC40Yy45NTQgMCAxLjcyLjc2MiAxLjcyIDEuNzF2OS40N2MwIC45NDYtLjc2NyAxLjcxLTEuNzIgMS43MWgtMTQuNGExLjcxIDEuNzEgMCAwIDEtMS43Mi0xLjcxdi05LjQ3YzAtLjk0Ni43Ny0xLjcxIDEuNzItMS43MXpcIlxufSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTAgNTguNnY0LjgzaDIuNDRjLjk1NCAwIDEuNzIuNzYyIDEuNzIgMS43MXY5LjQ3YzAgLjk0Ni0uNzY4IDEuNzEtMS43MiAxLjcxSDB2NC44M2gzMS44di0yMi41em0xMC44IDQuODNoMTQuNGMuOTU0IDAgMS43Mi43NjIgMS43MiAxLjcxdjkuNDdjMCAuOTQ2LS43NjggMS43MS0xLjcyIDEuNzFIMTAuOGExLjcxIDEuNzEgMCAwIDEtMS43Mi0xLjcxdi05LjQ3YzAtLjk0Ni43NjgtMS43MSAxLjcyLTEuNzF6XCIsXG4gIG9wYWNpdHk6IDAuMlxufSkpKSk7XG5leHBvcnQgZGVmYXVsdCBTdmdDdXRIZXJlSWNvbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/steps/review/cut-here-icon.svg\n");

/***/ }),

/***/ "./src/steps/review/cut-marker.svg":
/*!*****************************************!*\
  !*** ./src/steps/review/cut-marker.svg ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nconst SvgCutMarker = props => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: \"1em\",\n  height: \"1em\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\",\n  strokeWidth: 2,\n  viewBox: \"0 0 24 24\"\n}, props), _path || (_path = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n  d: \"M14 21h-4V3h4\"\n})));\n/* harmony default export */ __webpack_exports__[\"default\"] = (SvgCutMarker);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RlcHMvcmV2aWV3L2N1dC1tYXJrZXIuc3ZnIiwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuY2FzdC1zdHVkaW8vLi9zcmMvc3RlcHMvcmV2aWV3L2N1dC1tYXJrZXIuc3ZnPzAyOGEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9wYXRoO1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmNvbnN0IFN2Z0N1dE1hcmtlciA9IHByb3BzID0+IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9leHRlbmRzKHtcbiAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgd2lkdGg6IFwiMWVtXCIsXG4gIGhlaWdodDogXCIxZW1cIixcbiAgZmlsbDogXCJub25lXCIsXG4gIHN0cm9rZTogXCJjdXJyZW50Q29sb3JcIixcbiAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiLFxuICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiLFxuICBzdHJva2VXaWR0aDogMixcbiAgdmlld0JveDogXCIwIDAgMjQgMjRcIlxufSwgcHJvcHMpLCBfcGF0aCB8fCAoX3BhdGggPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xNCAyMWgtNFYzaDRcIlxufSkpKTtcbmV4cG9ydCBkZWZhdWx0IFN2Z0N1dE1hcmtlcjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/steps/review/cut-marker.svg\n");

/***/ }),

/***/ "./src/steps/review/cut-out-icon.svg":
/*!*******************************************!*\
  !*** ./src/steps/review/cut-out-icon.svg ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nconst SvgCutOutIcon = props => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  \"aria-hidden\": \"true\",\n  viewBox: \"0 0 100 65\",\n  width: \"1em\",\n  height: \"1em\"\n}, props), _path || (_path = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M24.6 0c-.447 0-.894.171-1.24.511l-3.07 3.05a1.73 1.73 0 0 0 0 2.46l58.8 58.5c.685.681 1.79.681 2.47 0l3.07-3.05a1.73 1.73 0 0 0 0-2.46l-6.68-6.64h22v-7.32h-15.6c-1.44 0-2.6-1.15-2.6-2.59v-14.3c0-1.43 1.16-2.59 2.6-2.59h15.6v-7.32h-56.4L25.75.551A1.75 1.75 0 0 0 24.51.04zM0 18.2v7.32h3.7c1.44 0 2.6 1.15 2.6 2.59v14.3C6.3 43.84 5.14 45 3.7 45H0v7.32h55.8l-15.4-15.3v5.36c0 1.43-1.16 2.59-2.6 2.59H16c-1.44 0-2.6-1.15-2.6-2.59v-14.3c0-1.43 1.16-2.59 2.6-2.59h12.8l-7.36-7.32zm51 7.32h21c1.44 0 2.6 1.15 2.6 2.59v14.3c0 1.43-1.16 2.59-2.6 2.59h-1.4z\"\n})));\n/* harmony default export */ __webpack_exports__[\"default\"] = (SvgCutOutIcon);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RlcHMvcmV2aWV3L2N1dC1vdXQtaWNvbi5zdmciLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5jYXN0LXN0dWRpby8uL3NyYy9zdGVwcy9yZXZpZXcvY3V0LW91dC1pY29uLnN2Zz9kMGQzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfcGF0aDtcbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5jb25zdCBTdmdDdXRPdXRJY29uID0gcHJvcHMgPT4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX2V4dGVuZHMoe1xuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuICB2aWV3Qm94OiBcIjAgMCAxMDAgNjVcIixcbiAgd2lkdGg6IFwiMWVtXCIsXG4gIGhlaWdodDogXCIxZW1cIlxufSwgcHJvcHMpLCBfcGF0aCB8fCAoX3BhdGggPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBmaWxsOiBcImN1cnJlbnRDb2xvclwiLFxuICBkOiBcIk0yNC42IDBjLS40NDcgMC0uODk0LjE3MS0xLjI0LjUxMWwtMy4wNyAzLjA1YTEuNzMgMS43MyAwIDAgMCAwIDIuNDZsNTguOCA1OC41Yy42ODUuNjgxIDEuNzkuNjgxIDIuNDcgMGwzLjA3LTMuMDVhMS43MyAxLjczIDAgMCAwIDAtMi40NmwtNi42OC02LjY0aDIydi03LjMyaC0xNS42Yy0xLjQ0IDAtMi42LTEuMTUtMi42LTIuNTl2LTE0LjNjMC0xLjQzIDEuMTYtMi41OSAyLjYtMi41OWgxNS42di03LjMyaC01Ni40TDI1Ljc1LjU1MUExLjc1IDEuNzUgMCAwIDAgMjQuNTEuMDR6TTAgMTguMnY3LjMyaDMuN2MxLjQ0IDAgMi42IDEuMTUgMi42IDIuNTl2MTQuM0M2LjMgNDMuODQgNS4xNCA0NSAzLjcgNDVIMHY3LjMyaDU1LjhsLTE1LjQtMTUuM3Y1LjM2YzAgMS40My0xLjE2IDIuNTktMi42IDIuNTlIMTZjLTEuNDQgMC0yLjYtMS4xNS0yLjYtMi41OXYtMTQuM2MwLTEuNDMgMS4xNi0yLjU5IDIuNi0yLjU5aDEyLjhsLTcuMzYtNy4zMnptNTEgNy4zMmgyMWMxLjQ0IDAgMi42IDEuMTUgMi42IDIuNTl2MTQuM2MwIDEuNDMtMS4xNiAyLjU5LTIuNiAyLjU5aC0xLjR6XCJcbn0pKSk7XG5leHBvcnQgZGVmYXVsdCBTdmdDdXRPdXRJY29uOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/steps/review/cut-out-icon.svg\n");

/***/ }),

/***/ "./src/App.tsx":
/*!*********************!*\
  !*** ./src/App.tsx ***!
  \*********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   App: function() { return /* binding */ App; }\n/* harmony export */ });\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var react_beforeunload__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-beforeunload */ \"./node_modules/react-beforeunload/dist/react-beforeunload.js\");\n/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./layout */ \"./src/layout/index.tsx\");\n/* harmony import */ var _ui_global_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui/global-style */ \"./src/ui/global-style.tsx\");\n/* harmony import */ var _studio_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./studio-state */ \"./src/studio-state.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\n\n\n\n\n\n\n\nconst App = () => {\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_ui_global_style__WEBPACK_IMPORTED_MODULE_2__.GlobalStyle, {}), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PreventClose, {}), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.ColorSchemeProvider, {\n      children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_layout__WEBPACK_IMPORTED_MODULE_1__.Root, {})\n    })]\n  });\n};\n\n/** Prevent closing the tab if recordings exists and they have not been saved. */\nconst PreventClose = () => {\n  const {\n    recordings,\n    upload\n  } = (0,_studio_state__WEBPACK_IMPORTED_MODULE_3__.useStudioState)();\n  const downloaded = recordings.every(rec => rec.downloaded);\n  const uploaded = upload.state === \"uploaded\";\n  const uploading = upload.state === \"uploading\";\n  (0,react_beforeunload__WEBPACK_IMPORTED_MODULE_5__.useBeforeunload)(event => {\n    if (recordings?.length > 0 && !uploaded && !downloaded || uploading) {\n      event.preventDefault();\n    }\n  });\n  return null;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvQXBwLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUlBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmNhc3Qtc3R1ZGlvLy4vc3JjL0FwcC50c3g/MWM2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2xvclNjaGVtZVByb3ZpZGVyIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcbmltcG9ydCB7IHVzZUJlZm9yZXVubG9hZCB9IGZyb20gXCJyZWFjdC1iZWZvcmV1bmxvYWRcIjtcblxuaW1wb3J0IHsgUm9vdCB9IGZyb20gXCIuL2xheW91dFwiO1xuaW1wb3J0IHsgR2xvYmFsU3R5bGUgfSBmcm9tIFwiLi91aS9nbG9iYWwtc3R5bGVcIjtcbmltcG9ydCB7IHVzZVN0dWRpb1N0YXRlIH0gZnJvbSBcIi4vc3R1ZGlvLXN0YXRlXCI7XG5cblxuXG5leHBvcnQgY29uc3QgQXBwOiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgcmV0dXJuIDw+XG4gICAgPEdsb2JhbFN0eWxlIC8+XG4gICAgPFByZXZlbnRDbG9zZSAvPlxuICAgIDxDb2xvclNjaGVtZVByb3ZpZGVyPlxuICAgICAgPFJvb3QgLz5cbiAgICA8L0NvbG9yU2NoZW1lUHJvdmlkZXI+XG4gIDwvPjtcbn07XG5cbi8qKiBQcmV2ZW50IGNsb3NpbmcgdGhlIHRhYiBpZiByZWNvcmRpbmdzIGV4aXN0cyBhbmQgdGhleSBoYXZlIG5vdCBiZWVuIHNhdmVkLiAqL1xuY29uc3QgUHJldmVudENsb3NlID0gKCkgPT4ge1xuICBjb25zdCB7IHJlY29yZGluZ3MsIHVwbG9hZCB9ID0gdXNlU3R1ZGlvU3RhdGUoKTtcbiAgY29uc3QgZG93bmxvYWRlZCA9IHJlY29yZGluZ3MuZXZlcnkocmVjID0+IHJlYy5kb3dubG9hZGVkKTtcbiAgY29uc3QgdXBsb2FkZWQgPSB1cGxvYWQuc3RhdGUgPT09IFwidXBsb2FkZWRcIjtcbiAgY29uc3QgdXBsb2FkaW5nID0gdXBsb2FkLnN0YXRlID09PSBcInVwbG9hZGluZ1wiO1xuXG4gIHVzZUJlZm9yZXVubG9hZChldmVudCA9PiB7XG4gICAgaWYgKChyZWNvcmRpbmdzPy5sZW5ndGggPiAwICYmICF1cGxvYWRlZCAmJiAhZG93bmxvYWRlZCkgfHwgdXBsb2FkaW5nKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/App.tsx\n");

/***/ }),

/***/ "./src/about.tsx":
/*!***********************!*\
  !*** ./src/about.tsx ***!
  \***********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   About: function() { return /* binding */ About; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var _defines__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defines */ \"./src/defines.ts\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ \"./src/util/index.tsx\");\n/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./layout */ \"./src/layout/index.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\nvar _ref2 =  false ? 0 : {\n  name: \"19vfa1r-About\",\n  styles: \"svg{margin-right:8px;vertical-align:middle;};label:About;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL2Fib3V0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEySFciLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvYWJvdXQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgRmlHbG9iZSwgRmlNYWlsLCBGaVBob25lIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5cbmltcG9ydCB7IERFRklORVMgfSBmcm9tIFwiLi9kZWZpbmVzXCI7XG5pbXBvcnQgeyBDT0xPUlMgfSBmcm9tIFwiLi91dGlsXCI7XG5pbXBvcnQgeyBPdmVybGF5Qm94IH0gZnJvbSBcIi4vbGF5b3V0XCI7XG5cblxudHlwZSBQcm9wcyA9IHtcbiAgY2xvc2U6ICgpID0+IHZvaWQ7XG59O1xuXG5leHBvcnQgY29uc3QgQWJvdXQ6IFJlYWN0LkZDPFByb3BzPiA9ICh7IGNsb3NlIH0pID0+IChcbiAgPE92ZXJsYXlCb3ggbWF4V2lkdGg9ezgwMH0gY2xvc2U9e2Nsb3NlfSB0aXRsZT1cIk9wZW5jYXN0IFN0dWRpb1wiPlxuICAgIDxhcnRpY2xlIGNzcz17e1xuICAgICAgcDoge1xuICAgICAgICBtYXJnaW46IFwiOHB4IDBcIixcbiAgICAgIH0sXG4gICAgICBoMjoge1xuICAgICAgICBtYXJnaW5Ub3A6IDI0LFxuICAgICAgICBtYXJnaW5Cb3R0b206IDQsXG4gICAgICAgIGZvbnRTaXplOiAyMSxcbiAgICAgIH0sXG4gICAgICBhOiB7XG4gICAgICAgIGNvbG9yOiBDT0xPUlMuYWNjZW50NyxcbiAgICAgICAgXCImOmhvdmVyXCI6IHtcbiAgICAgICAgICB0ZXh0RGVjb3JhdGlvbjogXCJub25lXCIsXG4gICAgICAgICAgY29sb3I6IENPTE9SUy5hY2NlbnQ4LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9fT5cbiAgICAgIDxwPlxuICAgICAgICBBIHdlYi1iYXNlZCByZWNvcmRpbmcgc3R1ZGlvIGZvciA8YSBocmVmPVwiaHR0cHM6Ly9vcGVuY2FzdC5vcmdcIj5PcGVuY2FzdDwvYT4uXG4gICAgICA8L3A+XG4gICAgICA8cD5cbiAgICAgICAgT3BlbmNhc3QgU3R1ZGlvIGFsbG93cyB5b3UgdG8gcmVjb3JkIHlvdXIgY2FtZXJhLCB5b3VyIGRpc3BsYXkgYW5kIHlvdXIgbWljcm9waG9uZcq8cyBhdWRpby5cbiAgICAgICAgWW91IGNhbiB0aGVuIGVpdGhlciBkb3dubG9hZCB5b3VyIHJlY29yZGluZ3Mgb3IgdXBsb2FkIHRoZW0gZGlyZWN0bHkgdG8gYW4gT3BlbmNhc3RcbiAgICAgICAgaW5zdGFuY2UgKHVzdWFsbHkgdGhlIG9uZSBvZiB5b3VyIHVuaXZlcnNpdHkpLlxuICAgICAgPC9wPlxuICAgICAgPHA+XG4gICAgICAgIFRoaXMgaXMgZnJlZSBzb2Z0d2FyZSB1bmRlciB0aGUgdGVybXMgb2YgdGhle1wiIFwifVxuICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2VsYW4tZXYvb3BlbmNhc3Qtc3R1ZGlvL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcIj5cbiAgICAgICAgICBNSVQgTGljZW5zZVxuICAgICAgICA8L2E+e1wiIFwifVxuICAgICAgICBkZXZlbG9wZWQgYnkgdGhlIDxhIGhyZWY9XCJodHRwczovL2VsYW4tZXYuZGVcIj5FTEFOIGUuVi48L2E+IGluIGNvb3BlcmF0aW9uXG4gICAgICAgIHdpdGggdGhlIDxhIGhyZWY9XCJodHRwczovL2V0aHouY2hcIj5FVEggWsO8cmljaDwvYT4uXG4gICAgICA8L3A+XG5cbiAgICAgIDxoMj5Ib3cgaXQgd29ya3M8L2gyPlxuICAgICAgPHA+XG4gICAgICAgIE9wZW5jYXN0IFN0dWRpbyB1c2VzIHRoZSByZWNvcmRpbmcgY2FwYWJpbGl0aWVzIGJ1aWx0IGludG8gbW9kZXJuIGJyb3dzZXJzIHRvIHJlY29yZFxuICAgICAgICBhdWRpbyBhbmQgdmlkZW8gc3RyZWFtcy4gVGhlIHJlY29yZGluZyBoYXBwZW5zIGluIHRoZSB1c2VyyrxzIGJyb3dzZXIgYW5kIG5vIHNlcnZlciBpc1xuICAgICAgICBpbnZvbHZlZCBpbiB0aGUgcmVjb3JkaW5nLlxuICAgICAgPC9wPlxuXG4gICAgICB7REVGSU5FUy5zaG93TGVnYWxOb3RpY2VzICYmIChcbiAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgIDxoMj5TdXBwb3J0PC9oMj5cbiAgICAgICAgICA8cD5cbiAgICAgICAgICAgIElmIHlvdSBhcmUgZXhwZXJpZW5jaW5nIGFueSBkaWZmaWN1bHRpZXMgb3IgZm91bmQgYW55IGJ1Z3MsXG4gICAgICAgICAgICBwbGVhc2UgdGFrZSBhIGxvb2sgYXQgdGhle1wiIFwifVxuICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9lbGFuLWV2L29wZW5jYXN0LXN0dWRpby9pc3N1ZXNcIj5cbiAgICAgICAgICAgICAgaXNzdWUgdHJhY2tlciBvbiBHaXRIdWJcbiAgICAgICAgICAgIDwvYT4uXG4gICAgICAgICAgICBCZWZvcmUgZmlsaW5nIGEgbmV3IGlzc3VlLCBwbGVhc2UgY2hlY2sgaWYgb25lIGFib3V0IHlvdXIgdG9waWMgYWxyZWFkeSBleGlzdHMuXG4gICAgICAgICAgICBXZSByZWd1bGFybHkgY2hlY2sgaW5jb21pbmcgaXNzdWVzIGFuZCBkbyBvdXIgYmVzdCB0byBhZGRyZXNzIGJ1Z3MgaW4gYSB0aW1lbHkgbWFubmVyLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8cD5cbiAgICAgICAgICAgIElmIHlvdSBhcmUgaW50ZXJlc3RlZCBpbiBhZGRpdGlvbmFsIGRldmVsb3BtZW50XG4gICAgICAgICAgICBvciB3YW50IHRvIHN1cHBvcnQgdGhlIGRldmVsb3BtZW50IG9mIE9wZW5jYXN0IFN0dWRpbywgcGxlYXNlIGNvbnRhY3R7XCIgXCJ9XG4gICAgICAgICAgICA8YSBocmVmPVwibWFpbHRvOm9wZW5jYXN0LXN1cHBvcnRAZWxhbi1ldi5kZVwiPlxuICAgICAgICAgICAgICBvcGVuY2FzdC1zdXBwb3J0QGVsYW4tZXYuZGVcbiAgICAgICAgICAgIDwvYT4uXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgKX1cblxuICAgICAgPGgyPkNyZWRpdHM8L2gyPlxuICAgICAgPHA+XG4gICAgICAgIFRoYW5rcyB0byB0aGUgZm9sbG93aW5nIHBlb3BsZSBhbmQgaW5zdGl0dXRpb25zIGZvciBjb250cmlidXRpbmcgdG8gdGhpcyBwcm9qZWN0OlxuICAgICAgPC9wPlxuICAgICAgPHVsPlxuICAgICAgICA8bGk+XG4gICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9zbGFtcHVua1wiPkR1bmNhbiBTbWl0aDwvYT4gZm9yIHN0YXJ0aW5nIHRoaXNcbiAgICAgICAgICBwcm9qZWN0XG4gICAgICAgIDwvbGk+XG4gICAgICAgIDxsaT5cbiAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2NpbHQtdWN0XCI+VW5pdmVyc2l0eSBvZiBDYXBlIFRvd24gKENJTFQpPC9hPlxuICAgICAgICAgIHtcIiBcIn1mb3IgbGV0dGluZyBEdW5jYW4gc3RhcnQgdGhlIHByb2plY3RcbiAgICAgICAgPC9saT5cbiAgICAgICAgPGxpPlxuICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2V0aHouY2hcIj5FVEggWsO8cmljaDwvYT4gZm9yIGZpbmFuY2lhbCBzdXBwb3J0IGFuZFxuICAgICAgICAgIHRlc3RpbmdcbiAgICAgICAgPC9saT5cbiAgICAgICAgPGxpPlxuICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vZWxhbi1ldlwiPkVMQU4gZS5WLjwvYT4gZm9yIHRoZSByZS1pbXBsZW1lbnRhdGlvblxuICAgICAgICAgIGFuZCB0aGUgb25nb2luZyBkZXZlbG9wbWVudFxuICAgICAgICA8L2xpPlxuICAgICAgICA8bGk+XG4gICAgICAgICAgQW5kIG1hbnkgbWVtYmVycyBmcm9tIHRoZSBPcGVuY2FzdCBjb21tdW5pdHkgd2hvIGhlbHBlZCBhbG9uZyB0aGUgd2F5LlxuICAgICAgICA8L2xpPlxuICAgICAgPC91bD5cblxuICAgICAge0RFRklORVMuc2hvd0xlZ2FsTm90aWNlcyAmJiA8PlxuICAgICAgICA8aDI+RUxBTiBlLlYuPC9oMj5cblxuICAgICAgICA8cD5cbiAgICAgICAgICBUaGUgZS1sZWFybmluZyBhY2FkZW1pYyBuZXR3b3JrIChFTEFOIGUuVi4pIGlzIGEgR2VybWFuIG5vbi1wcm9maXQgb3JnYW5pemF0aW9uIHN1cHBvcnRpbmdcbiAgICAgICAgICBoaWdoZXItZWR1Y2F0aW9uIG9yZ2FuaXphdGlvbnMgaW4gYWxsIG1hdHRlcnMgcmVsYXRlZCB0byBlLWxlYXJuaW5nLiBPdXIgc2VydmljZXMgaW5jbHVkZVxuICAgICAgICAgIHByYWN0aWNhbCB0aXBzIGFib3V0IGhvdyB0byB1c2UgZGlnaXRhbCB0ZWNobm9sb2dpZXMgaW4gZWR1Y2F0aW9uLCBsZWdhbCBhZHZpY2UgYW5kXG4gICAgICAgICAgZGV2ZWxvcG1lbnQgb2YgZnJlZSwgb3Blbi1zb3VyY2Ugc29mdHdhcmUgdG8gc3VwcG9ydCBlZHVjYXRpb24uXG4gICAgICAgIDwvcD5cblxuICAgICAgICA8aDM+Q29udGFjdDwvaDM+XG5cbiAgICAgICAgPHA+XG4gICAgICAgICAgRHIuIE5vcmJlcnQgS2xlaW5lZmVsZCwgR2VzY2jDpGZ0c2bDvGhyZXJcbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICBLYXJsc3RyLiAyM1xuICAgICAgICAgIDxiciAvPlxuICAgICAgICAgIEQtMjYxMjMgT2xkZW5idXJnXG4gICAgICAgIDwvcD5cblxuICAgICAgICA8cCBjc3M9e3sgc3ZnOiB7IG1hcmdpblJpZ2h0OiA4LCB2ZXJ0aWNhbEFsaWduOiBcIm1pZGRsZVwiIH0gfX0+XG4gICAgICAgICAgPEZpR2xvYmUgLz5cbiAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9lbGFuLWV2LmRlXCI+ZWxhbi1ldi5kZTwvYT5cbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICA8RmlNYWlsIC8+XG4gICAgICAgICAgPGEgaHJlZj1cIm1haWx0bzprb250YWt0QGVsYW4tZXYuZGVcIj5rb250YWt0QGVsYW4tZXYuZGU8L2E+XG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgPEZpUGhvbmUgLz5cbiAgICAgICAgICA8YSBocmVmPVwidGVsOis0OTQ0MTk5ODY2NjEwXCI+KzQ5JnRoaW5zcDs0NDEgOTk4JnRoaW5zcDs2NjYmdGhpbnNwOzEwPC9hPlxuICAgICAgICA8L3A+XG5cbiAgICAgICAgPHA+XG4gICAgICAgICAgUmVnaXN0ZXJnZXJpY2h0OiBBbXRzZ2VyaWNodCBPbGRlbmJ1cmdcbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICBSZWdpc3Rlcm51bW1lcjogVlIgMjAwNjQ0XG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgVVN0Li1JRC1Oci46IERFIDI2NTkwMTM5MlxuICAgICAgICA8L3A+XG4gICAgICA8Lz59XG5cbiAgICAgIDxoMj5WZXJzaW9uPC9oMj5cbiAgICAgIDxwPlxuICAgICAgICBCdWlsZCBkYXRlIHtERUZJTkVTLmJ1aWxkRGF0ZSA/PyBcIj9cIn0sXG4gICAgICAgIGNvbW1pdHtcIiBcIn1cbiAgICAgICAgPGFcbiAgICAgICAgICBhcmlhLWxhYmVsPVwiR2l0IGNvbW1pdCBvbiBHaXRIdWJcIlxuICAgICAgICAgIGhyZWY9e1wiaHR0cHM6Ly9naXRodWIuY29tL2VsYW4tZXYvb3BlbmNhc3Qtc3R1ZGlvL2NvbW1pdC9cIiArIERFRklORVMuY29tbWl0U2hhfVxuICAgICAgICA+XG4gICAgICAgICAge0RFRklORVMuY29tbWl0U2hhID8/IFwiP1wifVxuICAgICAgICA8L2E+LlxuICAgICAgPC9wPlxuICAgIDwvYXJ0aWNsZT5cbiAgPC9PdmVybGF5Qm94PlxuKTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst About = _ref => {\n  let {\n    close\n  } = _ref;\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_layout__WEBPACK_IMPORTED_MODULE_3__.OverlayBox, {\n    maxWidth: 800,\n    close: close,\n    title: \"Opencast Studio\",\n    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"article\", {\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_5__.css)({\n        p: {\n          margin: \"8px 0\"\n        },\n        h2: {\n          marginTop: 24,\n          marginBottom: 4,\n          fontSize: 21\n        },\n        a: {\n          color: _util__WEBPACK_IMPORTED_MODULE_2__.COLORS.accent7,\n          \"&:hover\": {\n            textDecoration: \"none\",\n            color: _util__WEBPACK_IMPORTED_MODULE_2__.COLORS.accent8\n          }\n        }\n      },  false ? 0 : \";label:About;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL2Fib3V0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFjYSIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9hYm91dC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBGaUdsb2JlLCBGaU1haWwsIEZpUGhvbmUgfSBmcm9tIFwicmVhY3QtaWNvbnMvZmlcIjtcblxuaW1wb3J0IHsgREVGSU5FUyB9IGZyb20gXCIuL2RlZmluZXNcIjtcbmltcG9ydCB7IENPTE9SUyB9IGZyb20gXCIuL3V0aWxcIjtcbmltcG9ydCB7IE92ZXJsYXlCb3ggfSBmcm9tIFwiLi9sYXlvdXRcIjtcblxuXG50eXBlIFByb3BzID0ge1xuICBjbG9zZTogKCkgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCBjb25zdCBBYm91dDogUmVhY3QuRkM8UHJvcHM+ID0gKHsgY2xvc2UgfSkgPT4gKFxuICA8T3ZlcmxheUJveCBtYXhXaWR0aD17ODAwfSBjbG9zZT17Y2xvc2V9IHRpdGxlPVwiT3BlbmNhc3QgU3R1ZGlvXCI+XG4gICAgPGFydGljbGUgY3NzPXt7XG4gICAgICBwOiB7XG4gICAgICAgIG1hcmdpbjogXCI4cHggMFwiLFxuICAgICAgfSxcbiAgICAgIGgyOiB7XG4gICAgICAgIG1hcmdpblRvcDogMjQsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogNCxcbiAgICAgICAgZm9udFNpemU6IDIxLFxuICAgICAgfSxcbiAgICAgIGE6IHtcbiAgICAgICAgY29sb3I6IENPTE9SUy5hY2NlbnQ3LFxuICAgICAgICBcIiY6aG92ZXJcIjoge1xuICAgICAgICAgIHRleHREZWNvcmF0aW9uOiBcIm5vbmVcIixcbiAgICAgICAgICBjb2xvcjogQ09MT1JTLmFjY2VudDgsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH19PlxuICAgICAgPHA+XG4gICAgICAgIEEgd2ViLWJhc2VkIHJlY29yZGluZyBzdHVkaW8gZm9yIDxhIGhyZWY9XCJodHRwczovL29wZW5jYXN0Lm9yZ1wiPk9wZW5jYXN0PC9hPi5cbiAgICAgIDwvcD5cbiAgICAgIDxwPlxuICAgICAgICBPcGVuY2FzdCBTdHVkaW8gYWxsb3dzIHlvdSB0byByZWNvcmQgeW91ciBjYW1lcmEsIHlvdXIgZGlzcGxheSBhbmQgeW91ciBtaWNyb3Bob25lyrxzIGF1ZGlvLlxuICAgICAgICBZb3UgY2FuIHRoZW4gZWl0aGVyIGRvd25sb2FkIHlvdXIgcmVjb3JkaW5ncyBvciB1cGxvYWQgdGhlbSBkaXJlY3RseSB0byBhbiBPcGVuY2FzdFxuICAgICAgICBpbnN0YW5jZSAodXN1YWxseSB0aGUgb25lIG9mIHlvdXIgdW5pdmVyc2l0eSkuXG4gICAgICA8L3A+XG4gICAgICA8cD5cbiAgICAgICAgVGhpcyBpcyBmcmVlIHNvZnR3YXJlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGV7XCIgXCJ9XG4gICAgICAgIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vZWxhbi1ldi9vcGVuY2FzdC1zdHVkaW8vYmxvYi9tYXN0ZXIvTElDRU5TRVwiPlxuICAgICAgICAgIE1JVCBMaWNlbnNlXG4gICAgICAgIDwvYT57XCIgXCJ9XG4gICAgICAgIGRldmVsb3BlZCBieSB0aGUgPGEgaHJlZj1cImh0dHBzOi8vZWxhbi1ldi5kZVwiPkVMQU4gZS5WLjwvYT4gaW4gY29vcGVyYXRpb25cbiAgICAgICAgd2l0aCB0aGUgPGEgaHJlZj1cImh0dHBzOi8vZXRoei5jaFwiPkVUSCBaw7xyaWNoPC9hPi5cbiAgICAgIDwvcD5cblxuICAgICAgPGgyPkhvdyBpdCB3b3JrczwvaDI+XG4gICAgICA8cD5cbiAgICAgICAgT3BlbmNhc3QgU3R1ZGlvIHVzZXMgdGhlIHJlY29yZGluZyBjYXBhYmlsaXRpZXMgYnVpbHQgaW50byBtb2Rlcm4gYnJvd3NlcnMgdG8gcmVjb3JkXG4gICAgICAgIGF1ZGlvIGFuZCB2aWRlbyBzdHJlYW1zLiBUaGUgcmVjb3JkaW5nIGhhcHBlbnMgaW4gdGhlIHVzZXLKvHMgYnJvd3NlciBhbmQgbm8gc2VydmVyIGlzXG4gICAgICAgIGludm9sdmVkIGluIHRoZSByZWNvcmRpbmcuXG4gICAgICA8L3A+XG5cbiAgICAgIHtERUZJTkVTLnNob3dMZWdhbE5vdGljZXMgJiYgKFxuICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgPGgyPlN1cHBvcnQ8L2gyPlxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAgSWYgeW91IGFyZSBleHBlcmllbmNpbmcgYW55IGRpZmZpY3VsdGllcyBvciBmb3VuZCBhbnkgYnVncyxcbiAgICAgICAgICAgIHBsZWFzZSB0YWtlIGEgbG9vayBhdCB0aGV7XCIgXCJ9XG4gICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2VsYW4tZXYvb3BlbmNhc3Qtc3R1ZGlvL2lzc3Vlc1wiPlxuICAgICAgICAgICAgICBpc3N1ZSB0cmFja2VyIG9uIEdpdEh1YlxuICAgICAgICAgICAgPC9hPi5cbiAgICAgICAgICAgIEJlZm9yZSBmaWxpbmcgYSBuZXcgaXNzdWUsIHBsZWFzZSBjaGVjayBpZiBvbmUgYWJvdXQgeW91ciB0b3BpYyBhbHJlYWR5IGV4aXN0cy5cbiAgICAgICAgICAgIFdlIHJlZ3VsYXJseSBjaGVjayBpbmNvbWluZyBpc3N1ZXMgYW5kIGRvIG91ciBiZXN0IHRvIGFkZHJlc3MgYnVncyBpbiBhIHRpbWVseSBtYW5uZXIuXG4gICAgICAgICAgPC9wPlxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAgSWYgeW91IGFyZSBpbnRlcmVzdGVkIGluIGFkZGl0aW9uYWwgZGV2ZWxvcG1lbnRcbiAgICAgICAgICAgIG9yIHdhbnQgdG8gc3VwcG9ydCB0aGUgZGV2ZWxvcG1lbnQgb2YgT3BlbmNhc3QgU3R1ZGlvLCBwbGVhc2UgY29udGFjdHtcIiBcIn1cbiAgICAgICAgICAgIDxhIGhyZWY9XCJtYWlsdG86b3BlbmNhc3Qtc3VwcG9ydEBlbGFuLWV2LmRlXCI+XG4gICAgICAgICAgICAgIG9wZW5jYXN0LXN1cHBvcnRAZWxhbi1ldi5kZVxuICAgICAgICAgICAgPC9hPi5cbiAgICAgICAgICA8L3A+XG4gICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICApfVxuXG4gICAgICA8aDI+Q3JlZGl0czwvaDI+XG4gICAgICA8cD5cbiAgICAgICAgVGhhbmtzIHRvIHRoZSBmb2xsb3dpbmcgcGVvcGxlIGFuZCBpbnN0aXR1dGlvbnMgZm9yIGNvbnRyaWJ1dGluZyB0byB0aGlzIHByb2plY3Q6XG4gICAgICA8L3A+XG4gICAgICA8dWw+XG4gICAgICAgIDxsaT5cbiAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL3NsYW1wdW5rXCI+RHVuY2FuIFNtaXRoPC9hPiBmb3Igc3RhcnRpbmcgdGhpc1xuICAgICAgICAgIHByb2plY3RcbiAgICAgICAgPC9saT5cbiAgICAgICAgPGxpPlxuICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vY2lsdC11Y3RcIj5Vbml2ZXJzaXR5IG9mIENhcGUgVG93biAoQ0lMVCk8L2E+XG4gICAgICAgICAge1wiIFwifWZvciBsZXR0aW5nIER1bmNhbiBzdGFydCB0aGUgcHJvamVjdFxuICAgICAgICA8L2xpPlxuICAgICAgICA8bGk+XG4gICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vZXRoei5jaFwiPkVUSCBaw7xyaWNoPC9hPiBmb3IgZmluYW5jaWFsIHN1cHBvcnQgYW5kXG4gICAgICAgICAgdGVzdGluZ1xuICAgICAgICA8L2xpPlxuICAgICAgICA8bGk+XG4gICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9lbGFuLWV2XCI+RUxBTiBlLlYuPC9hPiBmb3IgdGhlIHJlLWltcGxlbWVudGF0aW9uXG4gICAgICAgICAgYW5kIHRoZSBvbmdvaW5nIGRldmVsb3BtZW50XG4gICAgICAgIDwvbGk+XG4gICAgICAgIDxsaT5cbiAgICAgICAgICBBbmQgbWFueSBtZW1iZXJzIGZyb20gdGhlIE9wZW5jYXN0IGNvbW11bml0eSB3aG8gaGVscGVkIGFsb25nIHRoZSB3YXkuXG4gICAgICAgIDwvbGk+XG4gICAgICA8L3VsPlxuXG4gICAgICB7REVGSU5FUy5zaG93TGVnYWxOb3RpY2VzICYmIDw+XG4gICAgICAgIDxoMj5FTEFOIGUuVi48L2gyPlxuXG4gICAgICAgIDxwPlxuICAgICAgICAgIFRoZSBlLWxlYXJuaW5nIGFjYWRlbWljIG5ldHdvcmsgKEVMQU4gZS5WLikgaXMgYSBHZXJtYW4gbm9uLXByb2ZpdCBvcmdhbml6YXRpb24gc3VwcG9ydGluZ1xuICAgICAgICAgIGhpZ2hlci1lZHVjYXRpb24gb3JnYW5pemF0aW9ucyBpbiBhbGwgbWF0dGVycyByZWxhdGVkIHRvIGUtbGVhcm5pbmcuIE91ciBzZXJ2aWNlcyBpbmNsdWRlXG4gICAgICAgICAgcHJhY3RpY2FsIHRpcHMgYWJvdXQgaG93IHRvIHVzZSBkaWdpdGFsIHRlY2hub2xvZ2llcyBpbiBlZHVjYXRpb24sIGxlZ2FsIGFkdmljZSBhbmRcbiAgICAgICAgICBkZXZlbG9wbWVudCBvZiBmcmVlLCBvcGVuLXNvdXJjZSBzb2Z0d2FyZSB0byBzdXBwb3J0IGVkdWNhdGlvbi5cbiAgICAgICAgPC9wPlxuXG4gICAgICAgIDxoMz5Db250YWN0PC9oMz5cblxuICAgICAgICA8cD5cbiAgICAgICAgICBEci4gTm9yYmVydCBLbGVpbmVmZWxkLCBHZXNjaMOkZnRzZsO8aHJlclxuICAgICAgICAgIDxiciAvPlxuICAgICAgICAgIEthcmxzdHIuIDIzXG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgRC0yNjEyMyBPbGRlbmJ1cmdcbiAgICAgICAgPC9wPlxuXG4gICAgICAgIDxwIGNzcz17eyBzdmc6IHsgbWFyZ2luUmlnaHQ6IDgsIHZlcnRpY2FsQWxpZ246IFwibWlkZGxlXCIgfSB9fT5cbiAgICAgICAgICA8RmlHbG9iZSAvPlxuICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2VsYW4tZXYuZGVcIj5lbGFuLWV2LmRlPC9hPlxuICAgICAgICAgIDxiciAvPlxuICAgICAgICAgIDxGaU1haWwgLz5cbiAgICAgICAgICA8YSBocmVmPVwibWFpbHRvOmtvbnRha3RAZWxhbi1ldi5kZVwiPmtvbnRha3RAZWxhbi1ldi5kZTwvYT5cbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICA8RmlQaG9uZSAvPlxuICAgICAgICAgIDxhIGhyZWY9XCJ0ZWw6KzQ5NDQxOTk4NjY2MTBcIj4rNDkmdGhpbnNwOzQ0MSA5OTgmdGhpbnNwOzY2NiZ0aGluc3A7MTA8L2E+XG4gICAgICAgIDwvcD5cblxuICAgICAgICA8cD5cbiAgICAgICAgICBSZWdpc3RlcmdlcmljaHQ6IEFtdHNnZXJpY2h0IE9sZGVuYnVyZ1xuICAgICAgICAgIDxiciAvPlxuICAgICAgICAgIFJlZ2lzdGVybnVtbWVyOiBWUiAyMDA2NDRcbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICBVU3QuLUlELU5yLjogREUgMjY1OTAxMzkyXG4gICAgICAgIDwvcD5cbiAgICAgIDwvPn1cblxuICAgICAgPGgyPlZlcnNpb248L2gyPlxuICAgICAgPHA+XG4gICAgICAgIEJ1aWxkIGRhdGUge0RFRklORVMuYnVpbGREYXRlID8/IFwiP1wifSxcbiAgICAgICAgY29tbWl0e1wiIFwifVxuICAgICAgICA8YVxuICAgICAgICAgIGFyaWEtbGFiZWw9XCJHaXQgY29tbWl0IG9uIEdpdEh1YlwiXG4gICAgICAgICAgaHJlZj17XCJodHRwczovL2dpdGh1Yi5jb20vZWxhbi1ldi9vcGVuY2FzdC1zdHVkaW8vY29tbWl0L1wiICsgREVGSU5FUy5jb21taXRTaGF9XG4gICAgICAgID5cbiAgICAgICAgICB7REVGSU5FUy5jb21taXRTaGEgPz8gXCI/XCJ9XG4gICAgICAgIDwvYT4uXG4gICAgICA8L3A+XG4gICAgPC9hcnRpY2xlPlxuICA8L092ZXJsYXlCb3g+XG4pO1xuIl19 */\"),\n      children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n        children: [\"A web-based recording studio for \", (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"a\", {\n          href: \"https://opencast.org\",\n          children: \"Opencast\"\n        }), \".\"]\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n        children: \"Opencast Studio allows you to record your camera, your display and your microphone\\u02BCs audio. You can then either download your recordings or upload them directly to an Opencast instance (usually the one of your university).\"\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n        children: [\"This is free software under the terms of the\", \" \", (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"a\", {\n          href: \"https://github.com/elan-ev/opencast-studio/blob/master/LICENSE\",\n          children: \"MIT License\"\n        }), \" \", \"developed by the \", (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"a\", {\n          href: \"https://elan-ev.de\",\n          children: \"ELAN e.V.\"\n        }), \" in cooperation with the \", (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"a\", {\n          href: \"https://ethz.ch\",\n          children: \"ETH Z\\xFCrich\"\n        }), \".\"]\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"h2\", {\n        children: \"How it works\"\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n        children: \"Opencast Studio uses the recording capabilities built into modern browsers to record audio and video streams. The recording happens in the user\\u02BCs browser and no server is involved in the recording.\"\n      }), _defines__WEBPACK_IMPORTED_MODULE_1__.DEFINES.showLegalNotices && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), {\n        children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"h2\", {\n          children: \"Support\"\n        }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n          children: [\"If you are experiencing any difficulties or found any bugs, please take a look at the\", \" \", (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"a\", {\n            href: \"https://github.com/elan-ev/opencast-studio/issues\",\n            children: \"issue tracker on GitHub\"\n          }), \". Before filing a new issue, please check if one about your topic already exists. We regularly check incoming issues and do our best to address bugs in a timely manner.\"]\n        }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n          children: [\"If you are interested in additional development or want to support the development of Opencast Studio, please contact\", \" \", (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"a\", {\n            href: \"mailto:opencast-support@elan-ev.de\",\n            children: \"opencast-support@elan-ev.de\"\n          }), \".\"]\n        })]\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"h2\", {\n        children: \"Credits\"\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n        children: \"Thanks to the following people and institutions for contributing to this project:\"\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"ul\", {\n        children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"li\", {\n          children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"a\", {\n            href: \"https://github.com/slampunk\",\n            children: \"Duncan Smith\"\n          }), \" for starting this project\"]\n        }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"li\", {\n          children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"a\", {\n            href: \"https://github.com/cilt-uct\",\n            children: \"University of Cape Town (CILT)\"\n          }), \" \", \"for letting Duncan start the project\"]\n        }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"li\", {\n          children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"a\", {\n            href: \"https://ethz.ch\",\n            children: \"ETH Z\\xFCrich\"\n          }), \" for financial support and testing\"]\n        }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"li\", {\n          children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"a\", {\n            href: \"https://github.com/elan-ev\",\n            children: \"ELAN e.V.\"\n          }), \" for the re-implementation and the ongoing development\"]\n        }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"li\", {\n          children: \"And many members from the Opencast community who helped along the way.\"\n        })]\n      }), _defines__WEBPACK_IMPORTED_MODULE_1__.DEFINES.showLegalNotices && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"h2\", {\n          children: \"ELAN e.V.\"\n        }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n          children: \"The e-learning academic network (ELAN e.V.) is a German non-profit organization supporting higher-education organizations in all matters related to e-learning. Our services include practical tips about how to use digital technologies in education, legal advice and development of free, open-source software to support education.\"\n        }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"h3\", {\n          children: \"Contact\"\n        }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n          children: [\"Dr. Norbert Kleinefeld, Gesch\\xE4ftsf\\xFChrer\", (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"br\", {}), \"Karlstr. 23\", (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"br\", {}), \"D-26123 Oldenburg\"]\n        }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n          css: _ref2,\n          children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_6__.FiGlobe, {}), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"a\", {\n            href: \"https://elan-ev.de\",\n            children: \"elan-ev.de\"\n          }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"br\", {}), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_6__.FiMail, {}), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"a\", {\n            href: \"mailto:kontakt@elan-ev.de\",\n            children: \"kontakt@elan-ev.de\"\n          }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"br\", {}), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_6__.FiPhone, {}), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"a\", {\n            href: \"tel:+4944199866610\",\n            children: \"+49\\u2009441 998\\u2009666\\u200910\"\n          })]\n        }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n          children: [\"Registergericht: Amtsgericht Oldenburg\", (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"br\", {}), \"Registernummer: VR 200644\", (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"br\", {}), \"USt.-ID-Nr.: DE 265901392\"]\n        })]\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"h2\", {\n        children: \"Version\"\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n        children: [\"Build date \", _defines__WEBPACK_IMPORTED_MODULE_1__.DEFINES.buildDate ?? \"?\", \", commit\", \" \", (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"a\", {\n          \"aria-label\": \"Git commit on GitHub\",\n          href: \"https://github.com/elan-ev/opencast-studio/commit/\" + _defines__WEBPACK_IMPORTED_MODULE_1__.DEFINES.commitSha,\n          children: _defines__WEBPACK_IMPORTED_MODULE_1__.DEFINES.commitSha ?? \"?\"\n        }), \".\"]\n      })]\n    })\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/about.tsx\n");

/***/ }),

/***/ "./src/capturer.tsx":
/*!**************************!*\
  !*** ./src/capturer.tsx ***!
  \**************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startAudioCapture: function() { return /* binding */ startAudioCapture; },\n/* harmony export */   startDisplayCapture: function() { return /* binding */ startDisplayCapture; },\n/* harmony export */   startUserCapture: function() { return /* binding */ startUserCapture; },\n/* harmony export */   stopAudioCapture: function() { return /* binding */ stopAudioCapture; },\n/* harmony export */   stopCapture: function() { return /* binding */ stopCapture; },\n/* harmony export */   stopDisplayCapture: function() { return /* binding */ stopDisplayCapture; },\n/* harmony export */   stopUserCapture: function() { return /* binding */ stopUserCapture; }\n/* harmony export */ });\nconst mergeHeightConstraint = (maxHeight, videoConstraints, fallbackIdeal) => {\n  const maxField = maxHeight && {\n    max: maxHeight\n  };\n  const constraintIdeal = typeof videoConstraints?.height === \"number\" ? videoConstraints.height : videoConstraints.height?.ideal;\n  const ideal = constraintIdeal ?? fallbackIdeal;\n  const idealField = ideal && (maxHeight ? {\n    ideal: Math.min(ideal, maxHeight)\n  } : {\n    ideal\n  });\n  return {\n    height: {\n      ...maxField,\n      ...idealField\n    }\n  };\n};\nasync function startAudioCapture(dispatch, deviceId) {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: deviceId ? {\n        deviceId\n      } : true,\n      video: false\n    });\n    stream.getTracks().forEach(track => {\n      track.onended = () => {\n        dispatch({\n          type: \"AUDIO_UNEXPECTED_END\"\n        });\n      };\n    });\n    dispatch({\n      type: \"SHARE_AUDIO\",\n      stream\n    });\n  } catch (err) {\n    // TODO: there several types of exceptions; certainly we should differentiate here one day\n    console.error(\"Error: \" + err);\n    dispatch({\n      type: \"BLOCK_AUDIO\"\n    });\n  }\n}\nasync function startDisplayCapture(dispatch, settings) {\n  let videoConstraints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const maxFps = settings.display?.maxFps ? {\n    frameRate: {\n      max: settings.display.maxFps\n    }\n  } : {};\n  const height = mergeHeightConstraint(settings.display?.maxHeight, videoConstraints);\n  const constraints = {\n    video: {\n      cursor: \"always\",\n      ...maxFps,\n      ...videoConstraints,\n      ...height\n    },\n    audio: false\n  };\n  try {\n    const stream = await navigator.mediaDevices.getDisplayMedia(constraints);\n    stream.getTracks().forEach(track => {\n      track.onended = () => {\n        dispatch({\n          type: \"DISPLAY_UNEXPECTED_END\"\n        });\n      };\n    });\n    dispatch({\n      type: \"SHARE_DISPLAY\",\n      stream\n    });\n  } catch (err) {\n    // TODO: there 7 types of exceptions; certainly we should differentiate here one day\n    console.error(\"Error: \" + err);\n    dispatch({\n      type: \"BLOCK_DISPLAY\"\n    });\n  }\n}\nasync function startUserCapture(dispatch, settings, videoConstraints) {\n  const maxFps = settings.camera?.maxFps ? {\n    frameRate: {\n      max: settings.camera.maxFps\n    }\n  } : {};\n  const height = mergeHeightConstraint(settings.camera?.maxHeight, videoConstraints, 1080);\n  const constraints = {\n    video: {\n      facingMode: \"user\",\n      ...videoConstraints,\n      ...maxFps,\n      ...height\n    },\n    audio: false\n  };\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    stream.getTracks().forEach(track => {\n      track.onended = () => {\n        dispatch({\n          type: \"USER_UNEXPECTED_END\"\n        });\n      };\n    });\n    dispatch({\n      type: \"SHARE_USER\",\n      stream\n    });\n  } catch (err) {\n    // TODO: there 7 types of exceptions; certainly we should differentiate here one day\n    console.error(\"Error: \" + err);\n    dispatch({\n      type: \"BLOCK_USER\"\n    });\n  }\n}\n\n// ----------------------------------------------------------------------------\n\nfunction stopCapture(_ref, dispatch) {\n  let {\n    audioStream,\n    displayStream,\n    userStream\n  } = _ref;\n  stopAudioCapture(audioStream, dispatch);\n  stopDisplayCapture(displayStream, dispatch);\n  stopUserCapture(userStream, dispatch);\n}\nfunction stopAudioCapture(stream, dispatch) {\n  stream?.getTracks().forEach(track => track.stop());\n  dispatch({\n    type: \"UNSHARE_AUDIO\"\n  });\n}\nfunction stopDisplayCapture(stream, dispatch) {\n  stream?.getTracks().forEach(track => track.stop());\n  dispatch({\n    type: \"UNSHARE_DISPLAY\"\n  });\n}\nfunction stopUserCapture(stream, dispatch) {\n  stream?.getTracks().forEach(track => track.stop());\n  dispatch({\n    type: \"UNSHARE_USER\"\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY2FwdHVyZXIudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFJQTtBQUtBO0FBQUE7QUFBQTtBQUNBO0FBR0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFLQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFPQTtBQU5BO0FBQUE7QUFBQTtBQUlBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuY2FzdC1zdHVkaW8vLi9zcmMvY2FwdHVyZXIudHN4PzU1NmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2V0dGluZ3MgfSBmcm9tIFwiLi9zZXR0aW5nc1wiO1xuaW1wb3J0IHsgRGlzcGF0Y2hlciB9IGZyb20gXCIuL3N0dWRpby1zdGF0ZVwiO1xuXG5cbmNvbnN0IG1lcmdlSGVpZ2h0Q29uc3RyYWludCA9IChcbiAgbWF4SGVpZ2h0OiBudW1iZXIgfCB1bmRlZmluZWQsXG4gIHZpZGVvQ29uc3RyYWludHM6IE1lZGlhVHJhY2tDb25zdHJhaW50cyxcbiAgZmFsbGJhY2tJZGVhbD86IG51bWJlcixcbikgPT4ge1xuICBjb25zdCBtYXhGaWVsZCA9IG1heEhlaWdodCAmJiB7IG1heDogbWF4SGVpZ2h0IH07XG4gIGNvbnN0IGNvbnN0cmFpbnRJZGVhbCA9IHR5cGVvZiB2aWRlb0NvbnN0cmFpbnRzPy5oZWlnaHQgPT09IFwibnVtYmVyXCJcbiAgICA/IHZpZGVvQ29uc3RyYWludHMuaGVpZ2h0XG4gICAgOiB2aWRlb0NvbnN0cmFpbnRzLmhlaWdodD8uaWRlYWw7XG4gIGNvbnN0IGlkZWFsID0gY29uc3RyYWludElkZWFsID8/IGZhbGxiYWNrSWRlYWw7XG4gIGNvbnN0IGlkZWFsRmllbGQgPSBpZGVhbCAmJiAobWF4SGVpZ2h0ID8geyBpZGVhbDogTWF0aC5taW4oaWRlYWwsIG1heEhlaWdodCkgfSA6IHsgaWRlYWwgfSk7XG5cbiAgcmV0dXJuIHsgaGVpZ2h0OiB7IC4uLm1heEZpZWxkLCAuLi5pZGVhbEZpZWxkIH0gfTtcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdGFydEF1ZGlvQ2FwdHVyZShkaXNwYXRjaDogRGlzcGF0Y2hlciwgZGV2aWNlSWQ/OiBDb25zdHJhaW5ET01TdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzdHJlYW0gPSBhd2FpdCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7XG4gICAgICBhdWRpbzogZGV2aWNlSWQgPyB7IGRldmljZUlkIH0gOiB0cnVlLFxuICAgICAgdmlkZW86IGZhbHNlLFxuICAgIH0pO1xuICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHtcbiAgICAgIHRyYWNrLm9uZW5kZWQgPSAoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHsgdHlwZTogXCJBVURJT19VTkVYUEVDVEVEX0VORFwiIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGRpc3BhdGNoKHsgdHlwZTogXCJTSEFSRV9BVURJT1wiLCBzdHJlYW0gfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIFRPRE86IHRoZXJlIHNldmVyYWwgdHlwZXMgb2YgZXhjZXB0aW9uczsgY2VydGFpbmx5IHdlIHNob3VsZCBkaWZmZXJlbnRpYXRlIGhlcmUgb25lIGRheVxuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnIpO1xuXG4gICAgZGlzcGF0Y2goeyB0eXBlOiBcIkJMT0NLX0FVRElPXCIgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0YXJ0RGlzcGxheUNhcHR1cmUoXG4gIGRpc3BhdGNoOiBEaXNwYXRjaGVyLFxuICBzZXR0aW5nczogU2V0dGluZ3MsXG4gIHZpZGVvQ29uc3RyYWludHM6IE1lZGlhVHJhY2tDb25zdHJhaW50cyA9IHt9LFxuKSB7XG4gIGNvbnN0IG1heEZwcyA9IHNldHRpbmdzLmRpc3BsYXk/Lm1heEZwc1xuICAgID8geyBmcmFtZVJhdGU6IHsgbWF4OiBzZXR0aW5ncy5kaXNwbGF5Lm1heEZwcyB9IH1cbiAgICA6IHt9O1xuICBjb25zdCBoZWlnaHQgPSBtZXJnZUhlaWdodENvbnN0cmFpbnQoc2V0dGluZ3MuZGlzcGxheT8ubWF4SGVpZ2h0LCB2aWRlb0NvbnN0cmFpbnRzKTtcblxuICBjb25zdCBjb25zdHJhaW50cyA9IHtcbiAgICB2aWRlbzoge1xuICAgICAgY3Vyc29yOiBcImFsd2F5c1wiLFxuICAgICAgLi4ubWF4RnBzLFxuICAgICAgLi4udmlkZW9Db25zdHJhaW50cyxcbiAgICAgIC4uLmhlaWdodCxcbiAgICB9LFxuICAgIGF1ZGlvOiBmYWxzZSxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IHN0cmVhbSA9IGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0RGlzcGxheU1lZGlhKGNvbnN0cmFpbnRzKTtcbiAgICBzdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaCh0cmFjayA9PiB7XG4gICAgICB0cmFjay5vbmVuZGVkID0gKCkgPT4ge1xuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IFwiRElTUExBWV9VTkVYUEVDVEVEX0VORFwiIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGRpc3BhdGNoKHsgdHlwZTogXCJTSEFSRV9ESVNQTEFZXCIsIHN0cmVhbSB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gVE9ETzogdGhlcmUgNyB0eXBlcyBvZiBleGNlcHRpb25zOyBjZXJ0YWlubHkgd2Ugc2hvdWxkIGRpZmZlcmVudGlhdGUgaGVyZSBvbmUgZGF5XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yOiBcIiArIGVycik7XG5cbiAgICBkaXNwYXRjaCh7IHR5cGU6IFwiQkxPQ0tfRElTUExBWVwiIH0pO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdGFydFVzZXJDYXB0dXJlKFxuICBkaXNwYXRjaDogRGlzcGF0Y2hlcixcbiAgc2V0dGluZ3M6IFNldHRpbmdzLFxuICB2aWRlb0NvbnN0cmFpbnRzOiBNZWRpYVRyYWNrQ29uc3RyYWludHMsXG4pIHtcbiAgY29uc3QgbWF4RnBzID0gc2V0dGluZ3MuY2FtZXJhPy5tYXhGcHNcbiAgICA/IHsgZnJhbWVSYXRlOiB7IG1heDogc2V0dGluZ3MuY2FtZXJhLm1heEZwcyB9IH1cbiAgICA6IHt9O1xuICBjb25zdCBoZWlnaHQgPSBtZXJnZUhlaWdodENvbnN0cmFpbnQoc2V0dGluZ3MuY2FtZXJhPy5tYXhIZWlnaHQsIHZpZGVvQ29uc3RyYWludHMsIDEwODApO1xuXG4gIGNvbnN0IGNvbnN0cmFpbnRzID0ge1xuICAgIHZpZGVvOiB7XG4gICAgICBmYWNpbmdNb2RlOiBcInVzZXJcIixcbiAgICAgIC4uLnZpZGVvQ29uc3RyYWludHMsXG4gICAgICAuLi5tYXhGcHMsXG4gICAgICAuLi5oZWlnaHQsXG4gICAgfSxcbiAgICBhdWRpbzogZmFsc2UsXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBzdHJlYW0gPSBhd2FpdCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShjb25zdHJhaW50cyk7XG4gICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xuICAgICAgdHJhY2sub25lbmRlZCA9ICgpID0+IHtcbiAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBcIlVTRVJfVU5FWFBFQ1RFRF9FTkRcIiB9KTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBcIlNIQVJFX1VTRVJcIiwgc3RyZWFtIH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBUT0RPOiB0aGVyZSA3IHR5cGVzIG9mIGV4Y2VwdGlvbnM7IGNlcnRhaW5seSB3ZSBzaG91bGQgZGlmZmVyZW50aWF0ZSBoZXJlIG9uZSBkYXlcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyKTtcblxuICAgIGRpc3BhdGNoKHsgdHlwZTogXCJCTE9DS19VU0VSXCIgfSk7XG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZnVuY3Rpb24gc3RvcENhcHR1cmUoXG4gIHsgYXVkaW9TdHJlYW0sIGRpc3BsYXlTdHJlYW0sIHVzZXJTdHJlYW0gfToge1xuICAgIGF1ZGlvU3RyZWFtOiBNZWRpYVN0cmVhbSB8IG51bGw7XG4gICAgZGlzcGxheVN0cmVhbTogTWVkaWFTdHJlYW0gfCBudWxsO1xuICAgIHVzZXJTdHJlYW06IE1lZGlhU3RyZWFtIHwgbnVsbDtcbiAgfSxcbiAgZGlzcGF0Y2g6IERpc3BhdGNoZXIsXG4pIHtcbiAgc3RvcEF1ZGlvQ2FwdHVyZShhdWRpb1N0cmVhbSwgZGlzcGF0Y2gpO1xuICBzdG9wRGlzcGxheUNhcHR1cmUoZGlzcGxheVN0cmVhbSwgZGlzcGF0Y2gpO1xuICBzdG9wVXNlckNhcHR1cmUodXNlclN0cmVhbSwgZGlzcGF0Y2gpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RvcEF1ZGlvQ2FwdHVyZShzdHJlYW06IE1lZGlhU3RyZWFtIHwgbnVsbCwgZGlzcGF0Y2g6IERpc3BhdGNoZXIpIHtcbiAgc3RyZWFtPy5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHRyYWNrLnN0b3AoKSk7XG4gIGRpc3BhdGNoKHsgdHlwZTogXCJVTlNIQVJFX0FVRElPXCIgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdG9wRGlzcGxheUNhcHR1cmUoc3RyZWFtOiBNZWRpYVN0cmVhbSB8IG51bGwsIGRpc3BhdGNoOiBEaXNwYXRjaGVyKSB7XG4gIHN0cmVhbT8uZ2V0VHJhY2tzKCkuZm9yRWFjaCh0cmFjayA9PiB0cmFjay5zdG9wKCkpO1xuICBkaXNwYXRjaCh7IHR5cGU6IFwiVU5TSEFSRV9ESVNQTEFZXCIgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdG9wVXNlckNhcHR1cmUoc3RyZWFtOiBNZWRpYVN0cmVhbSB8IG51bGwsIGRpc3BhdGNoOiBEaXNwYXRjaGVyKSB7XG4gIHN0cmVhbT8uZ2V0VHJhY2tzKCkuZm9yRWFjaCh0cmFjayA9PiB0cmFjay5zdG9wKCkpO1xuICBkaXNwYXRjaCh7IHR5cGU6IFwiVU5TSEFSRV9VU0VSXCIgfSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/capturer.tsx\n");

/***/ }),

/***/ "./src/i18n/languages.tsx":
/*!********************************!*\
  !*** ./src/i18n/languages.tsx ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nconst languages = [{\n  short: \"en\",\n  long: \"English\",\n  rtl: false\n}, {\n  short: \"de\",\n  long: \"Deutsch\",\n  rtl: false\n}, {\n  short: \"nl\",\n  long: \"Nederlands\",\n  rtl: false\n}, {\n  short: \"es\",\n  long: \"Español\",\n  rtl: false\n}, {\n  short: \"fa\",\n  long: \"فارسی\",\n  rtl: true\n}, {\n  short: \"fr\",\n  long: \"Français\",\n  rtl: false\n}, {\n  short: \"sl\",\n  long: \"Slovenščina\",\n  rtl: false\n}, {\n  short: \"zh\",\n  long: \"简体中文\",\n  rtl: false\n}];\n/* harmony default export */ __webpack_exports__[\"default\"] = (languages);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaTE4bi9sYW5ndWFnZXMudHN4IiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5jYXN0LXN0dWRpby8uL3NyYy9pMThuL2xhbmd1YWdlcy50c3g/YmViZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBsYW5ndWFnZXMgPSBbXG4gIHsgc2hvcnQ6IFwiZW5cIiwgbG9uZzogXCJFbmdsaXNoXCIsIHJ0bDogZmFsc2UgfSxcbiAgeyBzaG9ydDogXCJkZVwiLCBsb25nOiBcIkRldXRzY2hcIiwgcnRsOiBmYWxzZSB9LFxuICB7IHNob3J0OiBcIm5sXCIsIGxvbmc6IFwiTmVkZXJsYW5kc1wiLCBydGw6IGZhbHNlIH0sXG4gIHsgc2hvcnQ6IFwiZXNcIiwgbG9uZzogXCJFc3Bhw7FvbFwiLCBydGw6IGZhbHNlIH0sXG4gIHsgc2hvcnQ6IFwiZmFcIiwgbG9uZzogXCLZgdin2LHYs9uMXCIsIHJ0bDogdHJ1ZSB9LFxuICB7IHNob3J0OiBcImZyXCIsIGxvbmc6IFwiRnJhbsOnYWlzXCIsIHJ0bDogZmFsc2UgfSxcbiAgeyBzaG9ydDogXCJzbFwiLCBsb25nOiBcIlNsb3ZlbsWhxI1pbmFcIiwgcnRsOiBmYWxzZSB9LFxuICB7IHNob3J0OiBcInpoXCIsIGxvbmc6IFwi566A5L2T5Lit5paHXCIsIHJ0bDogZmFsc2UgfSxcbl07XG5cbmV4cG9ydCBkZWZhdWx0IGxhbmd1YWdlcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/i18n/languages.tsx\n");

/***/ }),

/***/ "./src/layout/header.tsx":
/*!*******************************!*\
  !*** ./src/layout/header.tsx ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Header: function() { return /* binding */ Header; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react_icons_hi__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-icons/hi */ \"./node_modules/react-icons/hi/index.esm.js\");\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _defines__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../defines */ \"./src/defines.ts\");\n/* harmony import */ var _icons_keyboard_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../icons/keyboard.svg */ \"./src/icons/keyboard.svg\");\n/* harmony import */ var _i18n_languages__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../i18n/languages */ \"./src/i18n/languages.tsx\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _shortcuts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shortcuts */ \"./src/shortcuts.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Header = _ref => {\n  let {\n    setOverlayBoxState,\n    inert\n  } = _ref;\n  const {\n    scheme,\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.useColorScheme)();\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(\"header\", {\n    inert: inert ? \"\" : null,\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n      backgroundColor: (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.match)(scheme, {\n        \"light\": () => _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral60,\n        \"dark\": () => _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral20,\n        \"dark-high-contrast\": () => \"black\",\n        \"light-high-contrast\": () => \"black\"\n      }),\n      color: isHighContrast ? \"white\" : \"inherit\",\n      height: \"var(--header-height)\",\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      ...(scheme === \"dark-high-contrast\" ? {\n        borderBottom: \"1px solid white\"\n      } : {\n        paddingBottom: 1\n      })\n    },  false ? 0 : \";label:Header;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL2xheW91dC9oZWFkZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBCOEMiLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvbGF5b3V0L2hlYWRlci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIaU91dGxpbmVUcmFuc2xhdGUgfSBmcm9tIFwicmVhY3QtaWNvbnMvaGlcIjtcbmltcG9ydCB7IEZpSW5mbywgRmlNb29uIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5pbXBvcnQge1xuICBIZWFkZXJNZW51SXRlbVByb3BzLCB1c2VDb2xvclNjaGVtZSwgV2l0aEhlYWRlck1lbnUsIGNoZWNrYm94TWVudUl0ZW0sIFByb3RvQnV0dG9uLFxuICBzY3JlZW5XaWR0aEF0TW9zdCwgbWF0Y2gsXG59IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBERUZJTkVTIH0gZnJvbSBcIi4uL2RlZmluZXNcIjtcbmltcG9ydCBLZXlib2FyZEljb24gZnJvbSBcIi4uL2ljb25zL2tleWJvYXJkLnN2Z1wiO1xuaW1wb3J0IGxhbmd1YWdlcyBmcm9tIFwiLi4vaTE4bi9sYW5ndWFnZXNcIjtcbmltcG9ydCB7IEJSRUFLUE9JTlRTLCBDT0xPUlMsIGZvY3VzU3R5bGUgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHsgT3ZlcmxheUJveFN0YXRlIH0gZnJvbSBcIi5cIjtcbmltcG9ydCB7IFNIT1JUQ1VUUywgU2hvcnRjdXRLZXlzLCB1c2VTaG9ydGN1dCwgdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cyB9IGZyb20gXCIuLi9zaG9ydGN1dHNcIjtcblxuXG50eXBlIFByb3BzID0ge1xuICBzZXRPdmVybGF5Qm94U3RhdGU6IChzdGF0ZTogT3ZlcmxheUJveFN0YXRlKSA9PiB2b2lkO1xuICBpbmVydDogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBjb25zdCBIZWFkZXI6IFJlYWN0LkZDPFByb3BzPiA9ICh7IHNldE92ZXJsYXlCb3hTdGF0ZSwgaW5lcnQgfSkgPT4ge1xuICBjb25zdCB7IHNjaGVtZSwgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8aGVhZGVyIHsuLi57IGluZXJ0OiBpbmVydCA/IFwiXCIgOiBudWxsIH19IGNzcz17e1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBtYXRjaChzY2hlbWUsIHtcbiAgICAgICAgXCJsaWdodFwiOiAoKSA9PiBDT0xPUlMubmV1dHJhbDYwLFxuICAgICAgICBcImRhcmtcIjogKCkgPT4gQ09MT1JTLm5ldXRyYWwyMCxcbiAgICAgICAgXCJkYXJrLWhpZ2gtY29udHJhc3RcIjogKCkgPT4gXCJibGFja1wiLFxuICAgICAgICBcImxpZ2h0LWhpZ2gtY29udHJhc3RcIjogKCkgPT4gXCJibGFja1wiLFxuICAgICAgfSksXG4gICAgICBjb2xvcjogaXNIaWdoQ29udHJhc3QgPyBcIndoaXRlXCIgOiBcImluaGVyaXRcIixcbiAgICAgIGhlaWdodDogXCJ2YXIoLS1oZWFkZXItaGVpZ2h0KVwiLFxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICBqdXN0aWZ5Q29udGVudDogXCJzcGFjZS1iZXR3ZWVuXCIsXG4gICAgICAuLi5zY2hlbWUgPT09IFwiZGFyay1oaWdoLWNvbnRyYXN0XCJcbiAgICAgICAgPyB7IGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgd2hpdGVcIiB9XG4gICAgICAgIDogeyBwYWRkaW5nQm90dG9tOiAxIH0sXG4gICAgfX0+XG4gICAgICA8TG9nbyAvPlxuICAgICAgPEJ1dHRvbnMgey4uLnsgc2V0T3ZlcmxheUJveFN0YXRlIH19Lz5cbiAgICA8L2hlYWRlcj5cbiAgKTtcbn07XG5cbmNvbnN0IExvZ286IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCBwYXRoID0gKGZpbGVuYW1lOiBzdHJpbmcpID0+IERFRklORVMucHVibGljUGF0aFxuICAgICsgKERFRklORVMucHVibGljUGF0aC5lbmRzV2l0aChcIi9cIikgPyBcIlwiIDogXCIvXCIpXG4gICAgKyBmaWxlbmFtZTtcblxuICByZXR1cm4gKFxuICAgIDxwaWN0dXJlIGNzcz17e1xuICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgb3BhY2l0eTogdXNlQ29sb3JTY2hlbWUoKS5zY2hlbWUgPT09IFwiZGFya1wiID8gMC44IDogMS4wLFxuICAgICAgcGFkZGluZ0xlZnQ6IDgsXG4gICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgXCI+ICpcIjoge1xuICAgICAgICBoZWlnaHQ6IFwiY2FsYygxMDAlIC0gMTJweClcIixcbiAgICAgIH0sXG4gICAgICBbc2NyZWVuV2lkdGhBdE1vc3QoNDEwKV06IHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IDAsXG4gICAgICB9LFxuICAgIH19PlxuICAgICAgPHNvdXJjZSBtZWRpYT1cIihtaW4td2lkdGg6IDkyMHB4KVwiIHNyY1NldD17cGF0aChcImxvZ28td2lkZS5zdmdcIil9IC8+XG4gICAgICA8aW1nIHNyYz17cGF0aChcImxvZ28tbmFycm93LnN2Z1wiKX0gYWx0PVwiT3BlbmNhc3QgU3R1ZGlvIExvZ29cIiAvPlxuICAgIDwvcGljdHVyZT5cbiAgKTtcbn07XG5cbmNvbnN0IEJ1dHRvbnM6IFJlYWN0LkZDPFBpY2s8UHJvcHMsIFwic2V0T3ZlcmxheUJveFN0YXRlXCI+PiA9ICh7IHNldE92ZXJsYXlCb3hTdGF0ZSB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZ2FwOiAxNixcbiAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAyNCxcbiAgICAgIFtzY3JlZW5XaWR0aEF0TW9zdCg0MTApXToge1xuICAgICAgICBnYXA6IDIsXG4gICAgICAgIHBhZGRpbmdSaWdodDogOCxcbiAgICAgIH0sXG4gICAgfX0+XG4gICAgICA8TGFuZ3VhZ2VCdXR0b24gLz5cbiAgICAgIDxUaGVtZUJ1dHRvbiAvPlxuICAgICAgPFNob3J0Q3V0c0J1dHRvbiBvcGVuPXsoKSA9PiBzZXRPdmVybGF5Qm94U3RhdGUoXCJzaG9ydGN1dHNcIil9IC8+XG4gICAgICA8SW5mb0J1dHRvbiBvcGVuPXsoKSA9PiBzZXRPdmVybGF5Qm94U3RhdGUoXCJpbmZvXCIpfSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgTGFuZ3VhZ2VCdXR0b246IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCB7IHQsIGkxOG4gfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IGlzQ3VycmVudExhbmd1YWdlID0gKGxhbmd1YWdlOiBzdHJpbmcpID0+IGxhbmd1YWdlID09PSBpMThuLnJlc29sdmVkTGFuZ3VhZ2U7XG5cbiAgY29uc3QgbWVudUl0ZW1zID0gT2JqZWN0LnZhbHVlcyhsYW5ndWFnZXMpLm1hcChsbmcgPT4gY2hlY2tib3hNZW51SXRlbSh7XG4gICAgY2hlY2tlZDogaXNDdXJyZW50TGFuZ3VhZ2UobG5nLnNob3J0KSxcbiAgICBjaGlsZHJlbjogPD57bG5nLmxvbmd9PC8+LFxuICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgIGlmICghaXNDdXJyZW50TGFuZ3VhZ2UobG5nLnNob3J0KSkge1xuICAgICAgICBpMThuLmNoYW5nZUxhbmd1YWdlKGxuZy5zaG9ydCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSkpO1xuXG4gIGNvbnN0IGxhYmVsID0gdChcImhlYWRlci5sYW5ndWFnZS5sYWJlbFwiKTtcbiAgcmV0dXJuIChcbiAgICA8V2l0aEhlYWRlck1lbnVcbiAgICAgIG1lbnU9e3tcbiAgICAgICAgbGFiZWwsXG4gICAgICAgIGl0ZW1zOiBtZW51SXRlbXMsXG4gICAgICAgIGJyZWFrcG9pbnQ6IEJSRUFLUE9JTlRTLnNtYWxsLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8SGVhZGVyQnV0dG9uIGljb249ezxIaU91dGxpbmVUcmFuc2xhdGUgLz59IGxhYmVsPXtsYWJlbH0gLz5cbiAgICA8L1dpdGhIZWFkZXJNZW51PlxuICApO1xufTtcblxuY29uc3QgVGhlbWVCdXR0b246IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IHsgc2NoZW1lLCBpc0F1dG8sIHVwZGF0ZSB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICBjb25zdCBjdXJyZW50UHJlZiA9IGlzQXV0byA/IFwiYXV0b1wiIDogc2NoZW1lO1xuICBjb25zdCBjaG9pY2VzID0gW1wiYXV0b1wiLCBcImxpZ2h0XCIsIFwiZGFya1wiLCBcImxpZ2h0LWhpZ2gtY29udHJhc3RcIiwgXCJkYXJrLWhpZ2gtY29udHJhc3RcIl0gYXMgY29uc3Q7XG4gIGNvbnN0IG1lbnVJdGVtczogSGVhZGVyTWVudUl0ZW1Qcm9wc1tdID0gY2hvaWNlcy5tYXAoY2hvaWNlID0+IGNoZWNrYm94TWVudUl0ZW0oe1xuICAgIGNoZWNrZWQ6IGN1cnJlbnRQcmVmID09PSBjaG9pY2UsXG4gICAgY2hpbGRyZW46IDw+e3QoYGhlYWRlci50aGVtZS4ke2Nob2ljZX1gKX08Lz4sXG4gICAgb25DbGljazogKCkgPT4gdXBkYXRlKGNob2ljZSksXG4gIH0pKTtcblxuICByZXR1cm4gKFxuICAgIDxXaXRoSGVhZGVyTWVudVxuICAgICAgbWVudT17e1xuICAgICAgICBsYWJlbDogdChcImhlYWRlci50aGVtZS5sYWJlbFwiKSxcbiAgICAgICAgaXRlbXM6IG1lbnVJdGVtcyxcbiAgICAgICAgYnJlYWtwb2ludDogQlJFQUtQT0lOVFMuc21hbGwsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxIZWFkZXJCdXR0b24gaWNvbj17PEZpTW9vbiAvPn0gbGFiZWw9e3QoXCJoZWFkZXIudGhlbWUubGFiZWxcIil9IC8+XG4gICAgPC9XaXRoSGVhZGVyTWVudT5cbiAgKTtcbn07XG5cbnR5cGUgQm94T3BlbkJ1dHRvblByb3BzID0ge1xuICBvcGVuOiAoKSA9PiB2b2lkO1xufTtcblxuY29uc3QgSW5mb0J1dHRvbjogUmVhY3QuRkM8Qm94T3BlbkJ1dHRvblByb3BzPiA9ICh7IG9wZW4gfSkgPT4ge1xuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIHJldHVybiAoXG4gICAgPEhlYWRlckJ1dHRvbiBvbkNsaWNrPXtvcGVufSBpY29uPXs8RmlJbmZvIC8+fSBsYWJlbD17dChcImhlYWRlci5pbmZvLmxhYmVsXCIpfSAvPlxuICApO1xufTtcblxuY29uc3QgU2hvcnRDdXRzQnV0dG9uOiBSZWFjdC5GQzxCb3hPcGVuQnV0dG9uUHJvcHM+ID0gKHsgb3BlbiB9KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLmdlbmVyYWwuc2hvd092ZXJ2aWV3LCBvcGVuLCB7IGlnbm9yZU1vZGlmaWVyczogdHJ1ZSB9KTtcbiAgY29uc3Qgc2hvd1Nob3J0Y3V0ID0gdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cygpO1xuICByZXR1cm4gKFxuICAgIDxIZWFkZXJCdXR0b24gb25DbGljaz17b3Blbn0gaWNvbj17PEtleWJvYXJkSWNvbiAvPn0gbGFiZWw9e3QoXCJzaG9ydGN1dHMubGFiZWxcIil9PlxuICAgICAge3Nob3dTaG9ydGN1dCAmJiAoXG4gICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICBib3R0b206IC0yMCxcbiAgICAgICAgICBsZWZ0OiAyMCxcbiAgICAgICAgICBwYWRkaW5nOiAyLFxuICAgICAgICAgIGJvcmRlclJhZGl1czogNCxcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgICAgIH19PjxTaG9ydGN1dEtleXMgc2hvcnRjdXQ9e1NIT1JUQ1VUUy5nZW5lcmFsLnNob3dPdmVydmlld30gLz48L2Rpdj5cbiAgICAgICl9XG4gICAgPC9IZWFkZXJCdXR0b24+XG4gICk7XG59O1xuXG50eXBlIEhlYWRlckJ1dHRvblByb3BzID0gSlNYLkludHJpbnNpY0VsZW1lbnRzW1wiYnV0dG9uXCJdICYge1xuICBpY29uOiBKU1guRWxlbWVudDtcbiAgbGFiZWw6IHN0cmluZztcbn07XG5cbmNvbnN0IEJVVFRPTl9MQUJFTF9CUkVBS1BPSU5UID0gNzcwO1xuXG5jb25zdCBIZWFkZXJCdXR0b24gPSBmb3J3YXJkUmVmPEhUTUxCdXR0b25FbGVtZW50LCBIZWFkZXJCdXR0b25Qcm9wcz4oXG4gICh7IGljb24sIGxhYmVsLCBjaGlsZHJlbiwgLi4ucmVzdCB9LCByZWYpID0+IHtcbiAgICBjb25zdCB7IHNjaGVtZSwgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFByb3RvQnV0dG9uIHsuLi5yZXN0fSByZWY9e3JlZn0gY3NzPXt7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBnYXA6IDgsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG5cbiAgICAgICAgZm9udFNpemU6IDE2LFxuICAgICAgICBmb250RmFtaWx5OiBcImluaGVyaXRcIixcbiAgICAgICAgZm9udFdlaWdodDogNTAwLFxuICAgICAgICBjb2xvcjogbWF0Y2goc2NoZW1lLCB7XG4gICAgICAgICAgXCJsaWdodFwiOiAoKSA9PiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgICAgIFwiZGFya1wiOiAoKSA9PiBDT0xPUlMubmV1dHJhbDkwLFxuICAgICAgICAgIFwiZGFyay1oaWdoLWNvbnRyYXN0XCI6ICgpID0+IFwid2hpdGVcIixcbiAgICAgICAgICBcImxpZ2h0LWhpZ2gtY29udHJhc3RcIjogKCkgPT4gXCJ3aGl0ZVwiLFxuICAgICAgICB9KSxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiA2LFxuICAgICAgICBwYWRkaW5nOiBcIjZweCA4cHhcIixcblxuICAgICAgICBcIjpob3ZlciwgOmFjdGl2ZVwiOiB7XG4gICAgICAgICAgb3V0bGluZTogYDJweCBzb2xpZCAke2lzSGlnaENvbnRyYXN0ID8gXCIjYWFhXCIgOiBDT0xPUlMubmV1dHJhbDUwfWAsXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBtYXRjaChzY2hlbWUsIHtcbiAgICAgICAgICAgIFwibGlnaHRcIjogKCkgPT4gQ09MT1JTLm5ldXRyYWw3MCxcbiAgICAgICAgICAgIFwiZGFya1wiOiAoKSA9PiBDT0xPUlMubmV1dHJhbDEwLFxuICAgICAgICAgICAgXCJkYXJrLWhpZ2gtY29udHJhc3RcIjogKCkgPT4gXCJub25lXCIsXG4gICAgICAgICAgICBcImxpZ2h0LWhpZ2gtY29udHJhc3RcIjogKCkgPT4gXCJub25lXCIsXG4gICAgICAgICAgfSksXG4gICAgICAgIH0sXG4gICAgICAgIC4uLmZvY3VzU3R5bGUoe30sIG1hdGNoKHNjaGVtZSwge1xuICAgICAgICAgIFwibGlnaHRcIjogKCkgPT4gQ09MT1JTLm5ldXRyYWwxMCxcbiAgICAgICAgICBcImRhcmtcIjogKCkgPT4gQ09MT1JTLmFjY2VudDgsXG4gICAgICAgICAgXCJkYXJrLWhpZ2gtY29udHJhc3RcIjogKCkgPT4gXCIjYWFhXCIsXG4gICAgICAgICAgXCJsaWdodC1oaWdoLWNvbnRyYXN0XCI6ICgpID0+IFwiI2FhYVwiLFxuICAgICAgICB9KSksXG5cbiAgICAgICAgXCI+IHN2Z1wiOiB7XG4gICAgICAgICAgZm9udFNpemU6IDIyLFxuICAgICAgICAgIFtgQG1lZGlhIChtYXgtd2lkdGg6ICR7QlVUVE9OX0xBQkVMX0JSRUFLUE9JTlR9cHgpYF06IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiAyNixcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfX0+XG4gICAgICAgIHtpY29ufVxuICAgICAgICA8c3BhbiBjc3M9e3tcbiAgICAgICAgICBbYEBtZWRpYSAobWF4LXdpZHRoOiAke0JVVFRPTl9MQUJFTF9CUkVBS1BPSU5UfXB4KWBdOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIixcbiAgICAgICAgICB9LFxuICAgICAgICB9fT57bGFiZWx9PC9zcGFuPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1Byb3RvQnV0dG9uPlxuICAgICk7XG4gIH1cbik7XG4iXX0= */\"),\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(Logo, {}), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(Buttons, {\n      setOverlayBoxState\n    })]\n  });\n};\nconst Logo = () => {\n  const path = filename => _defines__WEBPACK_IMPORTED_MODULE_3__.DEFINES.publicPath + (_defines__WEBPACK_IMPORTED_MODULE_3__.DEFINES.publicPath.endsWith(\"/\") ? \"\" : \"/\") + filename;\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(\"picture\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n      height: \"100%\",\n      display: \"flex\",\n      opacity: (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.useColorScheme)().scheme === \"dark\" ? 0.8 : 1.0,\n      paddingLeft: 8,\n      alignItems: \"center\",\n      \"> *\": {\n        height: \"calc(100% - 12px)\"\n      },\n      [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.screenWidthAtMost)(410)]: {\n        paddingLeft: 0\n      }\n    },  false ? 0 : \";label:Logo;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"source\", {\n      media: \"(min-width: 920px)\",\n      srcSet: path(\"logo-wide.svg\")\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"img\", {\n      src: path(\"logo-narrow.svg\"),\n      alt: \"Opencast Studio Logo\"\n    })]\n  });\n};\nconst Buttons = _ref2 => {\n  let {\n    setOverlayBoxState\n  } = _ref2;\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n      display: \"flex\",\n      gap: 16,\n      height: \"100%\",\n      alignItems: \"center\",\n      paddingRight: 24,\n      [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.screenWidthAtMost)(410)]: {\n        gap: 2,\n        paddingRight: 8\n      }\n    },  false ? 0 : \";label:Buttons;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(LanguageButton, {}), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(ThemeButton, {}), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(ShortCutsButton, {\n      open: () => setOverlayBoxState(\"shortcuts\")\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(InfoButton, {\n      open: () => setOverlayBoxState(\"info\")\n    })]\n  });\n};\nconst LanguageButton = () => {\n  const {\n    t,\n    i18n\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const isCurrentLanguage = language => language === i18n.resolvedLanguage;\n  const menuItems = Object.values(_i18n_languages__WEBPACK_IMPORTED_MODULE_5__[\"default\"]).map(lng => (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.checkboxMenuItem)({\n    checked: isCurrentLanguage(lng.short),\n    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.Fragment, {\n      children: lng.long\n    }),\n    onClick: () => {\n      if (!isCurrentLanguage(lng.short)) {\n        i18n.changeLanguage(lng.short);\n      }\n    }\n  }));\n  const label = t(\"header.language.label\");\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.WithHeaderMenu, {\n    menu: {\n      label,\n      items: menuItems,\n      breakpoint: _util__WEBPACK_IMPORTED_MODULE_6__.BREAKPOINTS.small\n    },\n    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(HeaderButton, {\n      icon: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(react_icons_hi__WEBPACK_IMPORTED_MODULE_10__.HiOutlineTranslate, {}),\n      label: label\n    })\n  });\n};\nconst ThemeButton = () => {\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const {\n    scheme,\n    isAuto,\n    update\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.useColorScheme)();\n  const currentPref = isAuto ? \"auto\" : scheme;\n  const choices = [\"auto\", \"light\", \"dark\", \"light-high-contrast\", \"dark-high-contrast\"];\n  const menuItems = choices.map(choice => (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.checkboxMenuItem)({\n    checked: currentPref === choice,\n    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.Fragment, {\n      children: t(`header.theme.${choice}`)\n    }),\n    onClick: () => update(choice)\n  }));\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.WithHeaderMenu, {\n    menu: {\n      label: t(\"header.theme.label\"),\n      items: menuItems,\n      breakpoint: _util__WEBPACK_IMPORTED_MODULE_6__.BREAKPOINTS.small\n    },\n    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(HeaderButton, {\n      icon: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_11__.FiMoon, {}),\n      label: t(\"header.theme.label\")\n    })\n  });\n};\nconst InfoButton = _ref3 => {\n  let {\n    open\n  } = _ref3;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(HeaderButton, {\n    onClick: open,\n    icon: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_11__.FiInfo, {}),\n    label: t(\"header.info.label\")\n  });\n};\nconst ShortCutsButton = _ref4 => {\n  let {\n    open\n  } = _ref4;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_7__.useShortcut)(_shortcuts__WEBPACK_IMPORTED_MODULE_7__.SHORTCUTS.general.showOverview, open, {\n    ignoreModifiers: true\n  });\n  const showShortcut = (0,_shortcuts__WEBPACK_IMPORTED_MODULE_7__.useShowAvailableShortcuts)();\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(HeaderButton, {\n    onClick: open,\n    icon: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_icons_keyboard_svg__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {}),\n    label: t(\"shortcuts.label\"),\n    children: showShortcut && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"div\", {\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n        position: \"absolute\",\n        bottom: -20,\n        left: 20,\n        padding: 2,\n        borderRadius: 4,\n        backgroundColor: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral05\n      },  false ? 0 : \";label:ShortCutsButton;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n      children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_shortcuts__WEBPACK_IMPORTED_MODULE_7__.ShortcutKeys, {\n        shortcut: _shortcuts__WEBPACK_IMPORTED_MODULE_7__.SHORTCUTS.general.showOverview\n      })\n    })\n  });\n};\nconst BUTTON_LABEL_BREAKPOINT = 770;\nconst HeaderButton = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_2__.forwardRef)((_ref5, ref) => {\n  let {\n    icon,\n    label,\n    children,\n    ...rest\n  } = _ref5;\n  const {\n    scheme,\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.useColorScheme)();\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.ProtoButton, {\n    ...rest,\n    ref: ref,\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n      position: \"relative\",\n      display: \"flex\",\n      gap: 8,\n      alignItems: \"center\",\n      fontSize: 16,\n      fontFamily: \"inherit\",\n      fontWeight: 500,\n      color: (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.match)(scheme, {\n        \"light\": () => _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral05,\n        \"dark\": () => _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral90,\n        \"dark-high-contrast\": () => \"white\",\n        \"light-high-contrast\": () => \"white\"\n      }),\n      borderRadius: 6,\n      padding: \"6px 8px\",\n      \":hover, :active\": {\n        outline: `2px solid ${isHighContrast ? \"#aaa\" : _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral50}`,\n        backgroundColor: (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.match)(scheme, {\n          \"light\": () => _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral70,\n          \"dark\": () => _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral10,\n          \"dark-high-contrast\": () => \"none\",\n          \"light-high-contrast\": () => \"none\"\n        })\n      },\n      ...(0,_util__WEBPACK_IMPORTED_MODULE_6__.focusStyle)({}, (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.match)(scheme, {\n        \"light\": () => _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral10,\n        \"dark\": () => _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.accent8,\n        \"dark-high-contrast\": () => \"#aaa\",\n        \"light-high-contrast\": () => \"#aaa\"\n      })),\n      \"> svg\": {\n        fontSize: 22,\n        [`@media (max-width: ${BUTTON_LABEL_BREAKPOINT}px)`]: {\n          fontSize: 26\n        }\n      }\n    },  false ? 0 : \";label:HeaderButton;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    children: [icon, (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"span\", {\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n        [`@media (max-width: ${BUTTON_LABEL_BREAKPOINT}px)`]: {\n          display: \"none\"\n        }\n      },  false ? 0 : \";label:HeaderButton;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n      children: label\n    }), children]\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/layout/header.tsx\n");

/***/ }),

/***/ "./src/layout/index.tsx":
/*!******************************!*\
  !*** ./src/layout/index.tsx ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OverlayBox: function() { return /* binding */ OverlayBox; },\n/* harmony export */   Root: function() { return /* binding */ Root; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var _steps__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../steps */ \"./src/steps/index.tsx\");\n/* harmony import */ var _header__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./header */ \"./src/layout/header.tsx\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _about__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../about */ \"./src/about.tsx\");\n/* harmony import */ var _shortcuts__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shortcuts */ \"./src/shortcuts.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\n\n\nconst Root = () => {\n  const [overlayBoxState, setOverlayBoxState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"none\");\n  const close = () => setOverlayBoxState(\"none\");\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_6__.useShortcut)(_shortcuts__WEBPACK_IMPORTED_MODULE_6__.SHORTCUTS.general.closeOverlay, close);\n  const inert = overlayBoxState !== \"none\";\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_8__.css)({\n      \"--header-height\": \"64px\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      height: \"100%\",\n      ...(overlayBoxState !== \"none\" && {\n        overflowY: \"hidden\"\n      })\n    },  false ? 0 : \";label:Root;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL2xheW91dC9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0JTIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL2xheW91dC9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgbWF0Y2gsIHNjcmVlbldpZHRoQXRNb3N0LCB1c2VDb2xvclNjaGVtZSwgdXNlT25PdXRzaWRlQ2xpY2sgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuaW1wb3J0IHsgRmlYIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5cbmltcG9ydCB7IE1haW4gfSBmcm9tIFwiLi4vc3RlcHNcIjtcbmltcG9ydCB7IEhlYWRlciB9IGZyb20gXCIuL2hlYWRlclwiO1xuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7IEFib3V0IH0gZnJvbSBcIi4uL2Fib3V0XCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIFNob3J0Y3V0T3ZlcnZpZXcsIHVzZVNob3J0Y3V0IH0gZnJvbSBcIi4uL3Nob3J0Y3V0c1wiO1xuXG5cbmV4cG9ydCB0eXBlIE92ZXJsYXlCb3hTdGF0ZSA9IFwibm9uZVwiIHwgXCJpbmZvXCIgfCBcInNob3J0Y3V0c1wiO1xuXG5leHBvcnQgY29uc3QgUm9vdDogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IFtvdmVybGF5Qm94U3RhdGUsIHNldE92ZXJsYXlCb3hTdGF0ZV0gPSB1c2VTdGF0ZTxPdmVybGF5Qm94U3RhdGU+KFwibm9uZVwiKTtcbiAgY29uc3QgY2xvc2UgPSAoKSA9PiBzZXRPdmVybGF5Qm94U3RhdGUoXCJub25lXCIpO1xuICB1c2VTaG9ydGN1dChTSE9SVENVVFMuZ2VuZXJhbC5jbG9zZU92ZXJsYXksIGNsb3NlKTtcbiAgY29uc3QgaW5lcnQgPSBvdmVybGF5Qm94U3RhdGUgIT09IFwibm9uZVwiO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIFwiLS1oZWFkZXItaGVpZ2h0XCI6IFwiNjRweFwiLFxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIC4uLm92ZXJsYXlCb3hTdGF0ZSAhPT0gXCJub25lXCIgJiYgeyBvdmVyZmxvd1k6IFwiaGlkZGVuXCIgfSxcbiAgICB9fT5cbiAgICAgIDxIZWFkZXIgaW5lcnQ9e2luZXJ0fSB7Li4ueyBzZXRPdmVybGF5Qm94U3RhdGUgfX0gLz5cbiAgICAgIHttYXRjaChvdmVybGF5Qm94U3RhdGUsIHtcbiAgICAgICAgXCJub25lXCI6ICgpID0+IG51bGwsXG4gICAgICAgIFwiaW5mb1wiOiAoKSA9PiA8QWJvdXQgY2xvc2U9e2Nsb3NlfSAvPixcbiAgICAgICAgXCJzaG9ydGN1dHNcIjogKCkgPT4gPFNob3J0Y3V0T3ZlcnZpZXcgY2xvc2U9e2Nsb3NlfSAvPixcbiAgICAgIH0pfVxuICAgICAgPE1haW4gaW5lcnQ9e2luZXJ0fSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuXG50eXBlIE92ZXJsYXlCb3hQcm9wcyA9IFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPHtcbiAgY2xvc2U6ICgpID0+IHZvaWQ7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIG1heFdpZHRoOiBudW1iZXI7XG59PjtcblxuZXhwb3J0IGNvbnN0IE92ZXJsYXlCb3g6IFJlYWN0LkZDPE92ZXJsYXlCb3hQcm9wcz4gPSAoeyBjbG9zZSwgdGl0bGUsIGNoaWxkcmVuLCBtYXhXaWR0aCB9KSA9PiB7XG4gIGNvbnN0IGlzTGlnaHQgPSB1c2VDb2xvclNjaGVtZSgpLnNjaGVtZSA9PT0gXCJsaWdodFwiO1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuICBjb25zdCByZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICB1c2VPbk91dHNpZGVDbGljayhyZWYsIGNsb3NlKTtcbiAgY29uc3QgYmcgPSAoaXNMaWdodCB8fCBpc0hpZ2hDb250cmFzdCkgPyBDT0xPUlMubmV1dHJhbDA1IDogQ09MT1JTLm5ldXRyYWwxNTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgcm9sZT1cImRpYWxvZ1wiIGFyaWEtbW9kYWw9XCJ0cnVlXCIgY3NzPXt7XG4gICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcGFkZGluZzogXCIzMnB4IDhweFwiLFxuICAgICAgekluZGV4OiA4MDAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAwLjMpXCIsXG4gICAgICBiYWNrZHJvcEZpbHRlcjogXCJibHVyKDhweClcIixcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICBcIkBtZWRpYSAobWluLWhlaWdodDogNDAwcHgpXCI6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogXCJjYWxjKHZhcigtLWhlYWRlci1oZWlnaHQpICsgMzJweClcIixcbiAgICAgIH0sXG4gICAgfX0+XG4gICAgICA8ZGl2IHJlZj17cmVmfSBjc3M9e3tcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiZyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiA4LFxuICAgICAgICBwYWRkaW5nOiBcIjI0cHggMjRweCAzMnB4IDQ4cHhcIixcbiAgICAgICAgd2lkdGg6IFwiODIlXCIsXG4gICAgICAgIGZsZXg6IFwiMCAxIGF1dG9cIixcbiAgICAgICAgbWluSGVpZ2h0OiAwLFxuICAgICAgICBtYXhXaWR0aCxcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGJveFNoYWRvdzogaXNIaWdoQ29udHJhc3QgPyBcIm5vbmVcIiA6IFwiMCA0cHggMTZweCB2YXIoLS1zaGFkb3ctY29sb3IpKVwiLFxuICAgICAgICBvdXRsaW5lOiBpc0hpZ2hDb250cmFzdCA/IFwiMnB4IHNvbGlkIHZhcigtLWNvbG9yLW5ldXRyYWw5MClcIiA6IFwibm9uZVwiLFxuICAgICAgICBbc2NyZWVuV2lkdGhBdE1vc3QoODUwKV06IHtcbiAgICAgICAgICBwYWRkaW5nOiAyNCxcbiAgICAgICAgICBwYWRkaW5nTGVmdDogMzIsXG4gICAgICAgIH0sXG4gICAgICAgIFtzY3JlZW5XaWR0aEF0TW9zdCg0ODApXToge1xuICAgICAgICAgIHdpZHRoOiBcIjk1JVwiLFxuICAgICAgICAgIHBhZGRpbmc6IFwiMTJweCAyMHB4XCIsXG4gICAgICAgIH0sXG4gICAgICB9fT5cbiAgICAgICAgPEZpWFxuICAgICAgICAgIG9uQ2xpY2s9e2Nsb3NlfVxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgIHRvcDogOCxcbiAgICAgICAgICAgIHJpZ2h0OiA4LFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiZyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgICAgIGZvbnRTaXplOiA0MCxcbiAgICAgICAgICAgIHBhZGRpbmc6IDQsXG4gICAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICAgIDxoMSBjc3M9e3tcbiAgICAgICAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgICAgICAgZm9udFNpemU6IDI2LFxuICAgICAgICB9fT57dGl0bGV9PC9oMT5cbiAgICAgICAgPGRpdiBjc3M9e3sgcGFkZGluZ1JpZ2h0OiAxNiwgb3ZlcmZsb3dZOiBcImF1dG9cIiB9fT5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl19 */\"),\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_header__WEBPACK_IMPORTED_MODULE_3__.Header, {\n      inert: inert,\n      setOverlayBoxState\n    }), (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_1__.match)(overlayBoxState, {\n      \"none\": () => null,\n      \"info\": () => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_about__WEBPACK_IMPORTED_MODULE_5__.About, {\n        close: close\n      }),\n      \"shortcuts\": () => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_shortcuts__WEBPACK_IMPORTED_MODULE_6__.ShortcutOverview, {\n        close: close\n      })\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_steps__WEBPACK_IMPORTED_MODULE_2__.Main, {\n      inert: inert\n    })]\n  });\n};\nvar _ref2 =  false ? 0 : {\n  name: \"iwkwih-OverlayBox\",\n  styles: \"position:absolute;top:0;left:0;right:0;bottom:0;padding:32px 8px;z-index:800;background-color:rgba(0, 0, 0, 0.3);backdrop-filter:blur(8px);display:flex;flex-direction:column;align-items:center;@media (min-height: 400px){padding-top:calc(var(--header-height) + 32px);};label:OverlayBox;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL2xheW91dC9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUR5QyIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9sYXlvdXQvaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IG1hdGNoLCBzY3JlZW5XaWR0aEF0TW9zdCwgdXNlQ29sb3JTY2hlbWUsIHVzZU9uT3V0c2lkZUNsaWNrIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcbmltcG9ydCB7IEZpWCB9IGZyb20gXCJyZWFjdC1pY29ucy9maVwiO1xuXG5pbXBvcnQgeyBNYWluIH0gZnJvbSBcIi4uL3N0ZXBzXCI7XG5pbXBvcnQgeyBIZWFkZXIgfSBmcm9tIFwiLi9oZWFkZXJcIjtcbmltcG9ydCB7IENPTE9SUyB9IGZyb20gXCIuLi91dGlsXCI7XG5pbXBvcnQgeyBBYm91dCB9IGZyb20gXCIuLi9hYm91dFwiO1xuaW1wb3J0IHsgU0hPUlRDVVRTLCBTaG9ydGN1dE92ZXJ2aWV3LCB1c2VTaG9ydGN1dCB9IGZyb20gXCIuLi9zaG9ydGN1dHNcIjtcblxuXG5leHBvcnQgdHlwZSBPdmVybGF5Qm94U3RhdGUgPSBcIm5vbmVcIiB8IFwiaW5mb1wiIHwgXCJzaG9ydGN1dHNcIjtcblxuZXhwb3J0IGNvbnN0IFJvb3Q6IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCBbb3ZlcmxheUJveFN0YXRlLCBzZXRPdmVybGF5Qm94U3RhdGVdID0gdXNlU3RhdGU8T3ZlcmxheUJveFN0YXRlPihcIm5vbmVcIik7XG4gIGNvbnN0IGNsb3NlID0gKCkgPT4gc2V0T3ZlcmxheUJveFN0YXRlKFwibm9uZVwiKTtcbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLmdlbmVyYWwuY2xvc2VPdmVybGF5LCBjbG9zZSk7XG4gIGNvbnN0IGluZXJ0ID0gb3ZlcmxheUJveFN0YXRlICE9PSBcIm5vbmVcIjtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7XG4gICAgICBcIi0taGVhZGVyLWhlaWdodFwiOiBcIjY0cHhcIixcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAuLi5vdmVybGF5Qm94U3RhdGUgIT09IFwibm9uZVwiICYmIHsgb3ZlcmZsb3dZOiBcImhpZGRlblwiIH0sXG4gICAgfX0+XG4gICAgICA8SGVhZGVyIGluZXJ0PXtpbmVydH0gey4uLnsgc2V0T3ZlcmxheUJveFN0YXRlIH19IC8+XG4gICAgICB7bWF0Y2gob3ZlcmxheUJveFN0YXRlLCB7XG4gICAgICAgIFwibm9uZVwiOiAoKSA9PiBudWxsLFxuICAgICAgICBcImluZm9cIjogKCkgPT4gPEFib3V0IGNsb3NlPXtjbG9zZX0gLz4sXG4gICAgICAgIFwic2hvcnRjdXRzXCI6ICgpID0+IDxTaG9ydGN1dE92ZXJ2aWV3IGNsb3NlPXtjbG9zZX0gLz4sXG4gICAgICB9KX1cbiAgICAgIDxNYWluIGluZXJ0PXtpbmVydH0gLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cblxudHlwZSBPdmVybGF5Qm94UHJvcHMgPSBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjx7XG4gIGNsb3NlOiAoKSA9PiB2b2lkO1xuICB0aXRsZTogc3RyaW5nO1xuICBtYXhXaWR0aDogbnVtYmVyO1xufT47XG5cbmV4cG9ydCBjb25zdCBPdmVybGF5Qm94OiBSZWFjdC5GQzxPdmVybGF5Qm94UHJvcHM+ID0gKHsgY2xvc2UsIHRpdGxlLCBjaGlsZHJlbiwgbWF4V2lkdGggfSkgPT4ge1xuICBjb25zdCBpc0xpZ2h0ID0gdXNlQ29sb3JTY2hlbWUoKS5zY2hlbWUgPT09IFwibGlnaHRcIjtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcbiAgY29uc3QgcmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcbiAgdXNlT25PdXRzaWRlQ2xpY2socmVmLCBjbG9zZSk7XG4gIGNvbnN0IGJnID0gKGlzTGlnaHQgfHwgaXNIaWdoQ29udHJhc3QpID8gQ09MT1JTLm5ldXRyYWwwNSA6IENPTE9SUy5uZXV0cmFsMTU7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHJvbGU9XCJkaWFsb2dcIiBhcmlhLW1vZGFsPVwidHJ1ZVwiIGNzcz17e1xuICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHBhZGRpbmc6IFwiMzJweCA4cHhcIixcbiAgICAgIHpJbmRleDogODAwLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMCwgMCwgMCwgMC4zKVwiLFxuICAgICAgYmFja2Ryb3BGaWx0ZXI6IFwiYmx1cig4cHgpXCIsXG4gICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgXCJAbWVkaWEgKG1pbi1oZWlnaHQ6IDQwMHB4KVwiOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6IFwiY2FsYyh2YXIoLS1oZWFkZXItaGVpZ2h0KSArIDMycHgpXCIsXG4gICAgICB9LFxuICAgIH19PlxuICAgICAgPGRpdiByZWY9e3JlZn0gY3NzPXt7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogYmcsXG4gICAgICAgIGJvcmRlclJhZGl1czogOCxcbiAgICAgICAgcGFkZGluZzogXCIyNHB4IDI0cHggMzJweCA0OHB4XCIsXG4gICAgICAgIHdpZHRoOiBcIjgyJVwiLFxuICAgICAgICBmbGV4OiBcIjAgMSBhdXRvXCIsXG4gICAgICAgIG1pbkhlaWdodDogMCxcbiAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBib3hTaGFkb3c6IGlzSGlnaENvbnRyYXN0ID8gXCJub25lXCIgOiBcIjAgNHB4IDE2cHggdmFyKC0tc2hhZG93LWNvbG9yKSlcIixcbiAgICAgICAgb3V0bGluZTogaXNIaWdoQ29udHJhc3QgPyBcIjJweCBzb2xpZCB2YXIoLS1jb2xvci1uZXV0cmFsOTApXCIgOiBcIm5vbmVcIixcbiAgICAgICAgW3NjcmVlbldpZHRoQXRNb3N0KDg1MCldOiB7XG4gICAgICAgICAgcGFkZGluZzogMjQsXG4gICAgICAgICAgcGFkZGluZ0xlZnQ6IDMyLFxuICAgICAgICB9LFxuICAgICAgICBbc2NyZWVuV2lkdGhBdE1vc3QoNDgwKV06IHtcbiAgICAgICAgICB3aWR0aDogXCI5NSVcIixcbiAgICAgICAgICBwYWRkaW5nOiBcIjEycHggMjBweFwiLFxuICAgICAgICB9LFxuICAgICAgfX0+XG4gICAgICAgIDxGaVhcbiAgICAgICAgICBvbkNsaWNrPXtjbG9zZX1cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICB0b3A6IDgsXG4gICAgICAgICAgICByaWdodDogOCxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYmcsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IFwiNTAlXCIsXG4gICAgICAgICAgICBmb250U2l6ZTogNDAsXG4gICAgICAgICAgICBwYWRkaW5nOiA0LFxuICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgICA8aDEgY3NzPXt7XG4gICAgICAgICAgbWFyZ2luQm90dG9tOiA4LFxuICAgICAgICAgIGZvbnRTaXplOiAyNixcbiAgICAgICAgfX0+e3RpdGxlfTwvaDE+XG4gICAgICAgIDxkaXYgY3NzPXt7IHBhZGRpbmdSaWdodDogMTYsIG92ZXJmbG93WTogXCJhdXRvXCIgfX0+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref3 =  false ? 0 : {\n  name: \"127n2nk-OverlayBox\",\n  styles: \"margin-bottom:8px;font-size:26px;label:OverlayBox;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL2xheW91dC9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUdZIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL2xheW91dC9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgbWF0Y2gsIHNjcmVlbldpZHRoQXRNb3N0LCB1c2VDb2xvclNjaGVtZSwgdXNlT25PdXRzaWRlQ2xpY2sgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuaW1wb3J0IHsgRmlYIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5cbmltcG9ydCB7IE1haW4gfSBmcm9tIFwiLi4vc3RlcHNcIjtcbmltcG9ydCB7IEhlYWRlciB9IGZyb20gXCIuL2hlYWRlclwiO1xuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7IEFib3V0IH0gZnJvbSBcIi4uL2Fib3V0XCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIFNob3J0Y3V0T3ZlcnZpZXcsIHVzZVNob3J0Y3V0IH0gZnJvbSBcIi4uL3Nob3J0Y3V0c1wiO1xuXG5cbmV4cG9ydCB0eXBlIE92ZXJsYXlCb3hTdGF0ZSA9IFwibm9uZVwiIHwgXCJpbmZvXCIgfCBcInNob3J0Y3V0c1wiO1xuXG5leHBvcnQgY29uc3QgUm9vdDogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IFtvdmVybGF5Qm94U3RhdGUsIHNldE92ZXJsYXlCb3hTdGF0ZV0gPSB1c2VTdGF0ZTxPdmVybGF5Qm94U3RhdGU+KFwibm9uZVwiKTtcbiAgY29uc3QgY2xvc2UgPSAoKSA9PiBzZXRPdmVybGF5Qm94U3RhdGUoXCJub25lXCIpO1xuICB1c2VTaG9ydGN1dChTSE9SVENVVFMuZ2VuZXJhbC5jbG9zZU92ZXJsYXksIGNsb3NlKTtcbiAgY29uc3QgaW5lcnQgPSBvdmVybGF5Qm94U3RhdGUgIT09IFwibm9uZVwiO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIFwiLS1oZWFkZXItaGVpZ2h0XCI6IFwiNjRweFwiLFxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIC4uLm92ZXJsYXlCb3hTdGF0ZSAhPT0gXCJub25lXCIgJiYgeyBvdmVyZmxvd1k6IFwiaGlkZGVuXCIgfSxcbiAgICB9fT5cbiAgICAgIDxIZWFkZXIgaW5lcnQ9e2luZXJ0fSB7Li4ueyBzZXRPdmVybGF5Qm94U3RhdGUgfX0gLz5cbiAgICAgIHttYXRjaChvdmVybGF5Qm94U3RhdGUsIHtcbiAgICAgICAgXCJub25lXCI6ICgpID0+IG51bGwsXG4gICAgICAgIFwiaW5mb1wiOiAoKSA9PiA8QWJvdXQgY2xvc2U9e2Nsb3NlfSAvPixcbiAgICAgICAgXCJzaG9ydGN1dHNcIjogKCkgPT4gPFNob3J0Y3V0T3ZlcnZpZXcgY2xvc2U9e2Nsb3NlfSAvPixcbiAgICAgIH0pfVxuICAgICAgPE1haW4gaW5lcnQ9e2luZXJ0fSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuXG50eXBlIE92ZXJsYXlCb3hQcm9wcyA9IFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPHtcbiAgY2xvc2U6ICgpID0+IHZvaWQ7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIG1heFdpZHRoOiBudW1iZXI7XG59PjtcblxuZXhwb3J0IGNvbnN0IE92ZXJsYXlCb3g6IFJlYWN0LkZDPE92ZXJsYXlCb3hQcm9wcz4gPSAoeyBjbG9zZSwgdGl0bGUsIGNoaWxkcmVuLCBtYXhXaWR0aCB9KSA9PiB7XG4gIGNvbnN0IGlzTGlnaHQgPSB1c2VDb2xvclNjaGVtZSgpLnNjaGVtZSA9PT0gXCJsaWdodFwiO1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuICBjb25zdCByZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICB1c2VPbk91dHNpZGVDbGljayhyZWYsIGNsb3NlKTtcbiAgY29uc3QgYmcgPSAoaXNMaWdodCB8fCBpc0hpZ2hDb250cmFzdCkgPyBDT0xPUlMubmV1dHJhbDA1IDogQ09MT1JTLm5ldXRyYWwxNTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgcm9sZT1cImRpYWxvZ1wiIGFyaWEtbW9kYWw9XCJ0cnVlXCIgY3NzPXt7XG4gICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcGFkZGluZzogXCIzMnB4IDhweFwiLFxuICAgICAgekluZGV4OiA4MDAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAwLjMpXCIsXG4gICAgICBiYWNrZHJvcEZpbHRlcjogXCJibHVyKDhweClcIixcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICBcIkBtZWRpYSAobWluLWhlaWdodDogNDAwcHgpXCI6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogXCJjYWxjKHZhcigtLWhlYWRlci1oZWlnaHQpICsgMzJweClcIixcbiAgICAgIH0sXG4gICAgfX0+XG4gICAgICA8ZGl2IHJlZj17cmVmfSBjc3M9e3tcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiZyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiA4LFxuICAgICAgICBwYWRkaW5nOiBcIjI0cHggMjRweCAzMnB4IDQ4cHhcIixcbiAgICAgICAgd2lkdGg6IFwiODIlXCIsXG4gICAgICAgIGZsZXg6IFwiMCAxIGF1dG9cIixcbiAgICAgICAgbWluSGVpZ2h0OiAwLFxuICAgICAgICBtYXhXaWR0aCxcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGJveFNoYWRvdzogaXNIaWdoQ29udHJhc3QgPyBcIm5vbmVcIiA6IFwiMCA0cHggMTZweCB2YXIoLS1zaGFkb3ctY29sb3IpKVwiLFxuICAgICAgICBvdXRsaW5lOiBpc0hpZ2hDb250cmFzdCA/IFwiMnB4IHNvbGlkIHZhcigtLWNvbG9yLW5ldXRyYWw5MClcIiA6IFwibm9uZVwiLFxuICAgICAgICBbc2NyZWVuV2lkdGhBdE1vc3QoODUwKV06IHtcbiAgICAgICAgICBwYWRkaW5nOiAyNCxcbiAgICAgICAgICBwYWRkaW5nTGVmdDogMzIsXG4gICAgICAgIH0sXG4gICAgICAgIFtzY3JlZW5XaWR0aEF0TW9zdCg0ODApXToge1xuICAgICAgICAgIHdpZHRoOiBcIjk1JVwiLFxuICAgICAgICAgIHBhZGRpbmc6IFwiMTJweCAyMHB4XCIsXG4gICAgICAgIH0sXG4gICAgICB9fT5cbiAgICAgICAgPEZpWFxuICAgICAgICAgIG9uQ2xpY2s9e2Nsb3NlfVxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgIHRvcDogOCxcbiAgICAgICAgICAgIHJpZ2h0OiA4LFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiZyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgICAgIGZvbnRTaXplOiA0MCxcbiAgICAgICAgICAgIHBhZGRpbmc6IDQsXG4gICAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICAgIDxoMSBjc3M9e3tcbiAgICAgICAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgICAgICAgZm9udFNpemU6IDI2LFxuICAgICAgICB9fT57dGl0bGV9PC9oMT5cbiAgICAgICAgPGRpdiBjc3M9e3sgcGFkZGluZ1JpZ2h0OiAxNiwgb3ZlcmZsb3dZOiBcImF1dG9cIiB9fT5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref4 =  false ? 0 : {\n  name: \"xj0k9p-OverlayBox\",\n  styles: \"padding-right:16px;overflow-y:auto;label:OverlayBox;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL2xheW91dC9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkdhIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL2xheW91dC9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgbWF0Y2gsIHNjcmVlbldpZHRoQXRNb3N0LCB1c2VDb2xvclNjaGVtZSwgdXNlT25PdXRzaWRlQ2xpY2sgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuaW1wb3J0IHsgRmlYIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5cbmltcG9ydCB7IE1haW4gfSBmcm9tIFwiLi4vc3RlcHNcIjtcbmltcG9ydCB7IEhlYWRlciB9IGZyb20gXCIuL2hlYWRlclwiO1xuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7IEFib3V0IH0gZnJvbSBcIi4uL2Fib3V0XCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIFNob3J0Y3V0T3ZlcnZpZXcsIHVzZVNob3J0Y3V0IH0gZnJvbSBcIi4uL3Nob3J0Y3V0c1wiO1xuXG5cbmV4cG9ydCB0eXBlIE92ZXJsYXlCb3hTdGF0ZSA9IFwibm9uZVwiIHwgXCJpbmZvXCIgfCBcInNob3J0Y3V0c1wiO1xuXG5leHBvcnQgY29uc3QgUm9vdDogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IFtvdmVybGF5Qm94U3RhdGUsIHNldE92ZXJsYXlCb3hTdGF0ZV0gPSB1c2VTdGF0ZTxPdmVybGF5Qm94U3RhdGU+KFwibm9uZVwiKTtcbiAgY29uc3QgY2xvc2UgPSAoKSA9PiBzZXRPdmVybGF5Qm94U3RhdGUoXCJub25lXCIpO1xuICB1c2VTaG9ydGN1dChTSE9SVENVVFMuZ2VuZXJhbC5jbG9zZU92ZXJsYXksIGNsb3NlKTtcbiAgY29uc3QgaW5lcnQgPSBvdmVybGF5Qm94U3RhdGUgIT09IFwibm9uZVwiO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIFwiLS1oZWFkZXItaGVpZ2h0XCI6IFwiNjRweFwiLFxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIC4uLm92ZXJsYXlCb3hTdGF0ZSAhPT0gXCJub25lXCIgJiYgeyBvdmVyZmxvd1k6IFwiaGlkZGVuXCIgfSxcbiAgICB9fT5cbiAgICAgIDxIZWFkZXIgaW5lcnQ9e2luZXJ0fSB7Li4ueyBzZXRPdmVybGF5Qm94U3RhdGUgfX0gLz5cbiAgICAgIHttYXRjaChvdmVybGF5Qm94U3RhdGUsIHtcbiAgICAgICAgXCJub25lXCI6ICgpID0+IG51bGwsXG4gICAgICAgIFwiaW5mb1wiOiAoKSA9PiA8QWJvdXQgY2xvc2U9e2Nsb3NlfSAvPixcbiAgICAgICAgXCJzaG9ydGN1dHNcIjogKCkgPT4gPFNob3J0Y3V0T3ZlcnZpZXcgY2xvc2U9e2Nsb3NlfSAvPixcbiAgICAgIH0pfVxuICAgICAgPE1haW4gaW5lcnQ9e2luZXJ0fSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuXG50eXBlIE92ZXJsYXlCb3hQcm9wcyA9IFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPHtcbiAgY2xvc2U6ICgpID0+IHZvaWQ7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIG1heFdpZHRoOiBudW1iZXI7XG59PjtcblxuZXhwb3J0IGNvbnN0IE92ZXJsYXlCb3g6IFJlYWN0LkZDPE92ZXJsYXlCb3hQcm9wcz4gPSAoeyBjbG9zZSwgdGl0bGUsIGNoaWxkcmVuLCBtYXhXaWR0aCB9KSA9PiB7XG4gIGNvbnN0IGlzTGlnaHQgPSB1c2VDb2xvclNjaGVtZSgpLnNjaGVtZSA9PT0gXCJsaWdodFwiO1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuICBjb25zdCByZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICB1c2VPbk91dHNpZGVDbGljayhyZWYsIGNsb3NlKTtcbiAgY29uc3QgYmcgPSAoaXNMaWdodCB8fCBpc0hpZ2hDb250cmFzdCkgPyBDT0xPUlMubmV1dHJhbDA1IDogQ09MT1JTLm5ldXRyYWwxNTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgcm9sZT1cImRpYWxvZ1wiIGFyaWEtbW9kYWw9XCJ0cnVlXCIgY3NzPXt7XG4gICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcGFkZGluZzogXCIzMnB4IDhweFwiLFxuICAgICAgekluZGV4OiA4MDAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAwLjMpXCIsXG4gICAgICBiYWNrZHJvcEZpbHRlcjogXCJibHVyKDhweClcIixcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICBcIkBtZWRpYSAobWluLWhlaWdodDogNDAwcHgpXCI6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogXCJjYWxjKHZhcigtLWhlYWRlci1oZWlnaHQpICsgMzJweClcIixcbiAgICAgIH0sXG4gICAgfX0+XG4gICAgICA8ZGl2IHJlZj17cmVmfSBjc3M9e3tcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiZyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiA4LFxuICAgICAgICBwYWRkaW5nOiBcIjI0cHggMjRweCAzMnB4IDQ4cHhcIixcbiAgICAgICAgd2lkdGg6IFwiODIlXCIsXG4gICAgICAgIGZsZXg6IFwiMCAxIGF1dG9cIixcbiAgICAgICAgbWluSGVpZ2h0OiAwLFxuICAgICAgICBtYXhXaWR0aCxcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGJveFNoYWRvdzogaXNIaWdoQ29udHJhc3QgPyBcIm5vbmVcIiA6IFwiMCA0cHggMTZweCB2YXIoLS1zaGFkb3ctY29sb3IpKVwiLFxuICAgICAgICBvdXRsaW5lOiBpc0hpZ2hDb250cmFzdCA/IFwiMnB4IHNvbGlkIHZhcigtLWNvbG9yLW5ldXRyYWw5MClcIiA6IFwibm9uZVwiLFxuICAgICAgICBbc2NyZWVuV2lkdGhBdE1vc3QoODUwKV06IHtcbiAgICAgICAgICBwYWRkaW5nOiAyNCxcbiAgICAgICAgICBwYWRkaW5nTGVmdDogMzIsXG4gICAgICAgIH0sXG4gICAgICAgIFtzY3JlZW5XaWR0aEF0TW9zdCg0ODApXToge1xuICAgICAgICAgIHdpZHRoOiBcIjk1JVwiLFxuICAgICAgICAgIHBhZGRpbmc6IFwiMTJweCAyMHB4XCIsXG4gICAgICAgIH0sXG4gICAgICB9fT5cbiAgICAgICAgPEZpWFxuICAgICAgICAgIG9uQ2xpY2s9e2Nsb3NlfVxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgIHRvcDogOCxcbiAgICAgICAgICAgIHJpZ2h0OiA4LFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiZyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgICAgIGZvbnRTaXplOiA0MCxcbiAgICAgICAgICAgIHBhZGRpbmc6IDQsXG4gICAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICAgIDxoMSBjc3M9e3tcbiAgICAgICAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgICAgICAgZm9udFNpemU6IDI2LFxuICAgICAgICB9fT57dGl0bGV9PC9oMT5cbiAgICAgICAgPGRpdiBjc3M9e3sgcGFkZGluZ1JpZ2h0OiAxNiwgb3ZlcmZsb3dZOiBcImF1dG9cIiB9fT5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst OverlayBox = _ref => {\n  let {\n    close,\n    title,\n    children,\n    maxWidth\n  } = _ref;\n  const isLight = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_1__.useColorScheme)().scheme === \"light\";\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_1__.useColorScheme)();\n  const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_1__.useOnOutsideClick)(ref, close);\n  const bg = isLight || isHighContrast ? _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral05 : _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral15;\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    css: _ref2,\n    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n      ref: ref,\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_8__.css)({\n        position: \"relative\",\n        backgroundColor: bg,\n        borderRadius: 8,\n        padding: \"24px 24px 32px 48px\",\n        width: \"82%\",\n        flex: \"0 1 auto\",\n        minHeight: 0,\n        maxWidth,\n        display: \"flex\",\n        flexDirection: \"column\",\n        boxShadow: isHighContrast ? \"none\" : \"0 4px 16px var(--shadow-color))\",\n        outline: isHighContrast ? \"2px solid var(--color-neutral90)\" : \"none\",\n        [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_1__.screenWidthAtMost)(850)]: {\n          padding: 24,\n          paddingLeft: 32\n        },\n        [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_1__.screenWidthAtMost)(480)]: {\n          width: \"95%\",\n          padding: \"12px 20px\"\n        }\n      },  false ? 0 : \";label:OverlayBox;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL2xheW91dC9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0VxQiIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9sYXlvdXQvaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IG1hdGNoLCBzY3JlZW5XaWR0aEF0TW9zdCwgdXNlQ29sb3JTY2hlbWUsIHVzZU9uT3V0c2lkZUNsaWNrIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcbmltcG9ydCB7IEZpWCB9IGZyb20gXCJyZWFjdC1pY29ucy9maVwiO1xuXG5pbXBvcnQgeyBNYWluIH0gZnJvbSBcIi4uL3N0ZXBzXCI7XG5pbXBvcnQgeyBIZWFkZXIgfSBmcm9tIFwiLi9oZWFkZXJcIjtcbmltcG9ydCB7IENPTE9SUyB9IGZyb20gXCIuLi91dGlsXCI7XG5pbXBvcnQgeyBBYm91dCB9IGZyb20gXCIuLi9hYm91dFwiO1xuaW1wb3J0IHsgU0hPUlRDVVRTLCBTaG9ydGN1dE92ZXJ2aWV3LCB1c2VTaG9ydGN1dCB9IGZyb20gXCIuLi9zaG9ydGN1dHNcIjtcblxuXG5leHBvcnQgdHlwZSBPdmVybGF5Qm94U3RhdGUgPSBcIm5vbmVcIiB8IFwiaW5mb1wiIHwgXCJzaG9ydGN1dHNcIjtcblxuZXhwb3J0IGNvbnN0IFJvb3Q6IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCBbb3ZlcmxheUJveFN0YXRlLCBzZXRPdmVybGF5Qm94U3RhdGVdID0gdXNlU3RhdGU8T3ZlcmxheUJveFN0YXRlPihcIm5vbmVcIik7XG4gIGNvbnN0IGNsb3NlID0gKCkgPT4gc2V0T3ZlcmxheUJveFN0YXRlKFwibm9uZVwiKTtcbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLmdlbmVyYWwuY2xvc2VPdmVybGF5LCBjbG9zZSk7XG4gIGNvbnN0IGluZXJ0ID0gb3ZlcmxheUJveFN0YXRlICE9PSBcIm5vbmVcIjtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7XG4gICAgICBcIi0taGVhZGVyLWhlaWdodFwiOiBcIjY0cHhcIixcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAuLi5vdmVybGF5Qm94U3RhdGUgIT09IFwibm9uZVwiICYmIHsgb3ZlcmZsb3dZOiBcImhpZGRlblwiIH0sXG4gICAgfX0+XG4gICAgICA8SGVhZGVyIGluZXJ0PXtpbmVydH0gey4uLnsgc2V0T3ZlcmxheUJveFN0YXRlIH19IC8+XG4gICAgICB7bWF0Y2gob3ZlcmxheUJveFN0YXRlLCB7XG4gICAgICAgIFwibm9uZVwiOiAoKSA9PiBudWxsLFxuICAgICAgICBcImluZm9cIjogKCkgPT4gPEFib3V0IGNsb3NlPXtjbG9zZX0gLz4sXG4gICAgICAgIFwic2hvcnRjdXRzXCI6ICgpID0+IDxTaG9ydGN1dE92ZXJ2aWV3IGNsb3NlPXtjbG9zZX0gLz4sXG4gICAgICB9KX1cbiAgICAgIDxNYWluIGluZXJ0PXtpbmVydH0gLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cblxudHlwZSBPdmVybGF5Qm94UHJvcHMgPSBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjx7XG4gIGNsb3NlOiAoKSA9PiB2b2lkO1xuICB0aXRsZTogc3RyaW5nO1xuICBtYXhXaWR0aDogbnVtYmVyO1xufT47XG5cbmV4cG9ydCBjb25zdCBPdmVybGF5Qm94OiBSZWFjdC5GQzxPdmVybGF5Qm94UHJvcHM+ID0gKHsgY2xvc2UsIHRpdGxlLCBjaGlsZHJlbiwgbWF4V2lkdGggfSkgPT4ge1xuICBjb25zdCBpc0xpZ2h0ID0gdXNlQ29sb3JTY2hlbWUoKS5zY2hlbWUgPT09IFwibGlnaHRcIjtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcbiAgY29uc3QgcmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcbiAgdXNlT25PdXRzaWRlQ2xpY2socmVmLCBjbG9zZSk7XG4gIGNvbnN0IGJnID0gKGlzTGlnaHQgfHwgaXNIaWdoQ29udHJhc3QpID8gQ09MT1JTLm5ldXRyYWwwNSA6IENPTE9SUy5uZXV0cmFsMTU7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHJvbGU9XCJkaWFsb2dcIiBhcmlhLW1vZGFsPVwidHJ1ZVwiIGNzcz17e1xuICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHBhZGRpbmc6IFwiMzJweCA4cHhcIixcbiAgICAgIHpJbmRleDogODAwLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMCwgMCwgMCwgMC4zKVwiLFxuICAgICAgYmFja2Ryb3BGaWx0ZXI6IFwiYmx1cig4cHgpXCIsXG4gICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgXCJAbWVkaWEgKG1pbi1oZWlnaHQ6IDQwMHB4KVwiOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6IFwiY2FsYyh2YXIoLS1oZWFkZXItaGVpZ2h0KSArIDMycHgpXCIsXG4gICAgICB9LFxuICAgIH19PlxuICAgICAgPGRpdiByZWY9e3JlZn0gY3NzPXt7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogYmcsXG4gICAgICAgIGJvcmRlclJhZGl1czogOCxcbiAgICAgICAgcGFkZGluZzogXCIyNHB4IDI0cHggMzJweCA0OHB4XCIsXG4gICAgICAgIHdpZHRoOiBcIjgyJVwiLFxuICAgICAgICBmbGV4OiBcIjAgMSBhdXRvXCIsXG4gICAgICAgIG1pbkhlaWdodDogMCxcbiAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBib3hTaGFkb3c6IGlzSGlnaENvbnRyYXN0ID8gXCJub25lXCIgOiBcIjAgNHB4IDE2cHggdmFyKC0tc2hhZG93LWNvbG9yKSlcIixcbiAgICAgICAgb3V0bGluZTogaXNIaWdoQ29udHJhc3QgPyBcIjJweCBzb2xpZCB2YXIoLS1jb2xvci1uZXV0cmFsOTApXCIgOiBcIm5vbmVcIixcbiAgICAgICAgW3NjcmVlbldpZHRoQXRNb3N0KDg1MCldOiB7XG4gICAgICAgICAgcGFkZGluZzogMjQsXG4gICAgICAgICAgcGFkZGluZ0xlZnQ6IDMyLFxuICAgICAgICB9LFxuICAgICAgICBbc2NyZWVuV2lkdGhBdE1vc3QoNDgwKV06IHtcbiAgICAgICAgICB3aWR0aDogXCI5NSVcIixcbiAgICAgICAgICBwYWRkaW5nOiBcIjEycHggMjBweFwiLFxuICAgICAgICB9LFxuICAgICAgfX0+XG4gICAgICAgIDxGaVhcbiAgICAgICAgICBvbkNsaWNrPXtjbG9zZX1cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICB0b3A6IDgsXG4gICAgICAgICAgICByaWdodDogOCxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYmcsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IFwiNTAlXCIsXG4gICAgICAgICAgICBmb250U2l6ZTogNDAsXG4gICAgICAgICAgICBwYWRkaW5nOiA0LFxuICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgICA8aDEgY3NzPXt7XG4gICAgICAgICAgbWFyZ2luQm90dG9tOiA4LFxuICAgICAgICAgIGZvbnRTaXplOiAyNixcbiAgICAgICAgfX0+e3RpdGxlfTwvaDE+XG4gICAgICAgIDxkaXYgY3NzPXt7IHBhZGRpbmdSaWdodDogMTYsIG92ZXJmbG93WTogXCJhdXRvXCIgfX0+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdfQ== */\"),\n      children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_9__.FiX, {\n        onClick: close,\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_8__.css)({\n          position: \"absolute\",\n          top: 8,\n          right: 8,\n          backgroundColor: bg,\n          borderRadius: \"50%\",\n          fontSize: 40,\n          padding: 4,\n          cursor: \"pointer\"\n        },  false ? 0 : \";label:OverlayBox;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL2xheW91dC9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOEZVIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL2xheW91dC9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgbWF0Y2gsIHNjcmVlbldpZHRoQXRNb3N0LCB1c2VDb2xvclNjaGVtZSwgdXNlT25PdXRzaWRlQ2xpY2sgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuaW1wb3J0IHsgRmlYIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5cbmltcG9ydCB7IE1haW4gfSBmcm9tIFwiLi4vc3RlcHNcIjtcbmltcG9ydCB7IEhlYWRlciB9IGZyb20gXCIuL2hlYWRlclwiO1xuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7IEFib3V0IH0gZnJvbSBcIi4uL2Fib3V0XCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIFNob3J0Y3V0T3ZlcnZpZXcsIHVzZVNob3J0Y3V0IH0gZnJvbSBcIi4uL3Nob3J0Y3V0c1wiO1xuXG5cbmV4cG9ydCB0eXBlIE92ZXJsYXlCb3hTdGF0ZSA9IFwibm9uZVwiIHwgXCJpbmZvXCIgfCBcInNob3J0Y3V0c1wiO1xuXG5leHBvcnQgY29uc3QgUm9vdDogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IFtvdmVybGF5Qm94U3RhdGUsIHNldE92ZXJsYXlCb3hTdGF0ZV0gPSB1c2VTdGF0ZTxPdmVybGF5Qm94U3RhdGU+KFwibm9uZVwiKTtcbiAgY29uc3QgY2xvc2UgPSAoKSA9PiBzZXRPdmVybGF5Qm94U3RhdGUoXCJub25lXCIpO1xuICB1c2VTaG9ydGN1dChTSE9SVENVVFMuZ2VuZXJhbC5jbG9zZU92ZXJsYXksIGNsb3NlKTtcbiAgY29uc3QgaW5lcnQgPSBvdmVybGF5Qm94U3RhdGUgIT09IFwibm9uZVwiO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIFwiLS1oZWFkZXItaGVpZ2h0XCI6IFwiNjRweFwiLFxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIC4uLm92ZXJsYXlCb3hTdGF0ZSAhPT0gXCJub25lXCIgJiYgeyBvdmVyZmxvd1k6IFwiaGlkZGVuXCIgfSxcbiAgICB9fT5cbiAgICAgIDxIZWFkZXIgaW5lcnQ9e2luZXJ0fSB7Li4ueyBzZXRPdmVybGF5Qm94U3RhdGUgfX0gLz5cbiAgICAgIHttYXRjaChvdmVybGF5Qm94U3RhdGUsIHtcbiAgICAgICAgXCJub25lXCI6ICgpID0+IG51bGwsXG4gICAgICAgIFwiaW5mb1wiOiAoKSA9PiA8QWJvdXQgY2xvc2U9e2Nsb3NlfSAvPixcbiAgICAgICAgXCJzaG9ydGN1dHNcIjogKCkgPT4gPFNob3J0Y3V0T3ZlcnZpZXcgY2xvc2U9e2Nsb3NlfSAvPixcbiAgICAgIH0pfVxuICAgICAgPE1haW4gaW5lcnQ9e2luZXJ0fSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuXG50eXBlIE92ZXJsYXlCb3hQcm9wcyA9IFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPHtcbiAgY2xvc2U6ICgpID0+IHZvaWQ7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIG1heFdpZHRoOiBudW1iZXI7XG59PjtcblxuZXhwb3J0IGNvbnN0IE92ZXJsYXlCb3g6IFJlYWN0LkZDPE92ZXJsYXlCb3hQcm9wcz4gPSAoeyBjbG9zZSwgdGl0bGUsIGNoaWxkcmVuLCBtYXhXaWR0aCB9KSA9PiB7XG4gIGNvbnN0IGlzTGlnaHQgPSB1c2VDb2xvclNjaGVtZSgpLnNjaGVtZSA9PT0gXCJsaWdodFwiO1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuICBjb25zdCByZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICB1c2VPbk91dHNpZGVDbGljayhyZWYsIGNsb3NlKTtcbiAgY29uc3QgYmcgPSAoaXNMaWdodCB8fCBpc0hpZ2hDb250cmFzdCkgPyBDT0xPUlMubmV1dHJhbDA1IDogQ09MT1JTLm5ldXRyYWwxNTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgcm9sZT1cImRpYWxvZ1wiIGFyaWEtbW9kYWw9XCJ0cnVlXCIgY3NzPXt7XG4gICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcGFkZGluZzogXCIzMnB4IDhweFwiLFxuICAgICAgekluZGV4OiA4MDAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAwLjMpXCIsXG4gICAgICBiYWNrZHJvcEZpbHRlcjogXCJibHVyKDhweClcIixcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICBcIkBtZWRpYSAobWluLWhlaWdodDogNDAwcHgpXCI6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogXCJjYWxjKHZhcigtLWhlYWRlci1oZWlnaHQpICsgMzJweClcIixcbiAgICAgIH0sXG4gICAgfX0+XG4gICAgICA8ZGl2IHJlZj17cmVmfSBjc3M9e3tcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiZyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiA4LFxuICAgICAgICBwYWRkaW5nOiBcIjI0cHggMjRweCAzMnB4IDQ4cHhcIixcbiAgICAgICAgd2lkdGg6IFwiODIlXCIsXG4gICAgICAgIGZsZXg6IFwiMCAxIGF1dG9cIixcbiAgICAgICAgbWluSGVpZ2h0OiAwLFxuICAgICAgICBtYXhXaWR0aCxcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGJveFNoYWRvdzogaXNIaWdoQ29udHJhc3QgPyBcIm5vbmVcIiA6IFwiMCA0cHggMTZweCB2YXIoLS1zaGFkb3ctY29sb3IpKVwiLFxuICAgICAgICBvdXRsaW5lOiBpc0hpZ2hDb250cmFzdCA/IFwiMnB4IHNvbGlkIHZhcigtLWNvbG9yLW5ldXRyYWw5MClcIiA6IFwibm9uZVwiLFxuICAgICAgICBbc2NyZWVuV2lkdGhBdE1vc3QoODUwKV06IHtcbiAgICAgICAgICBwYWRkaW5nOiAyNCxcbiAgICAgICAgICBwYWRkaW5nTGVmdDogMzIsXG4gICAgICAgIH0sXG4gICAgICAgIFtzY3JlZW5XaWR0aEF0TW9zdCg0ODApXToge1xuICAgICAgICAgIHdpZHRoOiBcIjk1JVwiLFxuICAgICAgICAgIHBhZGRpbmc6IFwiMTJweCAyMHB4XCIsXG4gICAgICAgIH0sXG4gICAgICB9fT5cbiAgICAgICAgPEZpWFxuICAgICAgICAgIG9uQ2xpY2s9e2Nsb3NlfVxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgIHRvcDogOCxcbiAgICAgICAgICAgIHJpZ2h0OiA4LFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiZyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgICAgIGZvbnRTaXplOiA0MCxcbiAgICAgICAgICAgIHBhZGRpbmc6IDQsXG4gICAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICAgIDxoMSBjc3M9e3tcbiAgICAgICAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgICAgICAgZm9udFNpemU6IDI2LFxuICAgICAgICB9fT57dGl0bGV9PC9oMT5cbiAgICAgICAgPGRpdiBjc3M9e3sgcGFkZGluZ1JpZ2h0OiAxNiwgb3ZlcmZsb3dZOiBcImF1dG9cIiB9fT5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl19 */\")\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"h1\", {\n        css: _ref3,\n        children: title\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n        css: _ref4,\n        children: children\n      })]\n    })\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGF5b3V0L2luZGV4LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBU0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBZ0JBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFHQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmNhc3Qtc3R1ZGlvLy4vc3JjL2xheW91dC9pbmRleC50c3g/ZjMyMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgbWF0Y2gsIHNjcmVlbldpZHRoQXRNb3N0LCB1c2VDb2xvclNjaGVtZSwgdXNlT25PdXRzaWRlQ2xpY2sgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuaW1wb3J0IHsgRmlYIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5cbmltcG9ydCB7IE1haW4gfSBmcm9tIFwiLi4vc3RlcHNcIjtcbmltcG9ydCB7IEhlYWRlciB9IGZyb20gXCIuL2hlYWRlclwiO1xuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7IEFib3V0IH0gZnJvbSBcIi4uL2Fib3V0XCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIFNob3J0Y3V0T3ZlcnZpZXcsIHVzZVNob3J0Y3V0IH0gZnJvbSBcIi4uL3Nob3J0Y3V0c1wiO1xuXG5cbmV4cG9ydCB0eXBlIE92ZXJsYXlCb3hTdGF0ZSA9IFwibm9uZVwiIHwgXCJpbmZvXCIgfCBcInNob3J0Y3V0c1wiO1xuXG5leHBvcnQgY29uc3QgUm9vdDogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IFtvdmVybGF5Qm94U3RhdGUsIHNldE92ZXJsYXlCb3hTdGF0ZV0gPSB1c2VTdGF0ZTxPdmVybGF5Qm94U3RhdGU+KFwibm9uZVwiKTtcbiAgY29uc3QgY2xvc2UgPSAoKSA9PiBzZXRPdmVybGF5Qm94U3RhdGUoXCJub25lXCIpO1xuICB1c2VTaG9ydGN1dChTSE9SVENVVFMuZ2VuZXJhbC5jbG9zZU92ZXJsYXksIGNsb3NlKTtcbiAgY29uc3QgaW5lcnQgPSBvdmVybGF5Qm94U3RhdGUgIT09IFwibm9uZVwiO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIFwiLS1oZWFkZXItaGVpZ2h0XCI6IFwiNjRweFwiLFxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIC4uLm92ZXJsYXlCb3hTdGF0ZSAhPT0gXCJub25lXCIgJiYgeyBvdmVyZmxvd1k6IFwiaGlkZGVuXCIgfSxcbiAgICB9fT5cbiAgICAgIDxIZWFkZXIgaW5lcnQ9e2luZXJ0fSB7Li4ueyBzZXRPdmVybGF5Qm94U3RhdGUgfX0gLz5cbiAgICAgIHttYXRjaChvdmVybGF5Qm94U3RhdGUsIHtcbiAgICAgICAgXCJub25lXCI6ICgpID0+IG51bGwsXG4gICAgICAgIFwiaW5mb1wiOiAoKSA9PiA8QWJvdXQgY2xvc2U9e2Nsb3NlfSAvPixcbiAgICAgICAgXCJzaG9ydGN1dHNcIjogKCkgPT4gPFNob3J0Y3V0T3ZlcnZpZXcgY2xvc2U9e2Nsb3NlfSAvPixcbiAgICAgIH0pfVxuICAgICAgPE1haW4gaW5lcnQ9e2luZXJ0fSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuXG50eXBlIE92ZXJsYXlCb3hQcm9wcyA9IFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPHtcbiAgY2xvc2U6ICgpID0+IHZvaWQ7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIG1heFdpZHRoOiBudW1iZXI7XG59PjtcblxuZXhwb3J0IGNvbnN0IE92ZXJsYXlCb3g6IFJlYWN0LkZDPE92ZXJsYXlCb3hQcm9wcz4gPSAoeyBjbG9zZSwgdGl0bGUsIGNoaWxkcmVuLCBtYXhXaWR0aCB9KSA9PiB7XG4gIGNvbnN0IGlzTGlnaHQgPSB1c2VDb2xvclNjaGVtZSgpLnNjaGVtZSA9PT0gXCJsaWdodFwiO1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuICBjb25zdCByZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICB1c2VPbk91dHNpZGVDbGljayhyZWYsIGNsb3NlKTtcbiAgY29uc3QgYmcgPSAoaXNMaWdodCB8fCBpc0hpZ2hDb250cmFzdCkgPyBDT0xPUlMubmV1dHJhbDA1IDogQ09MT1JTLm5ldXRyYWwxNTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgcm9sZT1cImRpYWxvZ1wiIGFyaWEtbW9kYWw9XCJ0cnVlXCIgY3NzPXt7XG4gICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcGFkZGluZzogXCIzMnB4IDhweFwiLFxuICAgICAgekluZGV4OiA4MDAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAwLjMpXCIsXG4gICAgICBiYWNrZHJvcEZpbHRlcjogXCJibHVyKDhweClcIixcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICBcIkBtZWRpYSAobWluLWhlaWdodDogNDAwcHgpXCI6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogXCJjYWxjKHZhcigtLWhlYWRlci1oZWlnaHQpICsgMzJweClcIixcbiAgICAgIH0sXG4gICAgfX0+XG4gICAgICA8ZGl2IHJlZj17cmVmfSBjc3M9e3tcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiZyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiA4LFxuICAgICAgICBwYWRkaW5nOiBcIjI0cHggMjRweCAzMnB4IDQ4cHhcIixcbiAgICAgICAgd2lkdGg6IFwiODIlXCIsXG4gICAgICAgIGZsZXg6IFwiMCAxIGF1dG9cIixcbiAgICAgICAgbWluSGVpZ2h0OiAwLFxuICAgICAgICBtYXhXaWR0aCxcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGJveFNoYWRvdzogaXNIaWdoQ29udHJhc3QgPyBcIm5vbmVcIiA6IFwiMCA0cHggMTZweCB2YXIoLS1zaGFkb3ctY29sb3IpKVwiLFxuICAgICAgICBvdXRsaW5lOiBpc0hpZ2hDb250cmFzdCA/IFwiMnB4IHNvbGlkIHZhcigtLWNvbG9yLW5ldXRyYWw5MClcIiA6IFwibm9uZVwiLFxuICAgICAgICBbc2NyZWVuV2lkdGhBdE1vc3QoODUwKV06IHtcbiAgICAgICAgICBwYWRkaW5nOiAyNCxcbiAgICAgICAgICBwYWRkaW5nTGVmdDogMzIsXG4gICAgICAgIH0sXG4gICAgICAgIFtzY3JlZW5XaWR0aEF0TW9zdCg0ODApXToge1xuICAgICAgICAgIHdpZHRoOiBcIjk1JVwiLFxuICAgICAgICAgIHBhZGRpbmc6IFwiMTJweCAyMHB4XCIsXG4gICAgICAgIH0sXG4gICAgICB9fT5cbiAgICAgICAgPEZpWFxuICAgICAgICAgIG9uQ2xpY2s9e2Nsb3NlfVxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgIHRvcDogOCxcbiAgICAgICAgICAgIHJpZ2h0OiA4LFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiZyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgICAgIGZvbnRTaXplOiA0MCxcbiAgICAgICAgICAgIHBhZGRpbmc6IDQsXG4gICAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICAgIDxoMSBjc3M9e3tcbiAgICAgICAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgICAgICAgZm9udFNpemU6IDI2LFxuICAgICAgICB9fT57dGl0bGV9PC9oMT5cbiAgICAgICAgPGRpdiBjc3M9e3sgcGFkZGluZ1JpZ2h0OiAxNiwgb3ZlcmZsb3dZOiBcImF1dG9cIiB9fT5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/layout/index.tsx\n");

/***/ }),

/***/ "./src/shortcuts.tsx":
/*!***************************!*\
  !*** ./src/shortcuts.tsx ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SHORTCUTS: function() { return /* binding */ SHORTCUTS; },\n/* harmony export */   ShortcutKeys: function() { return /* binding */ ShortcutKeys; },\n/* harmony export */   ShortcutOverview: function() { return /* binding */ ShortcutOverview; },\n/* harmony export */   useShortcut: function() { return /* binding */ useShortcut; },\n/* harmony export */   useShowAvailableShortcuts: function() { return /* binding */ useShowAvailableShortcuts; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var react_icons_lu__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-icons/lu */ \"./node_modules/react-icons/lu/index.esm.js\");\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var react_hotkeys_hook__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-hotkeys-hook */ \"./node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.esm.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util */ \"./src/util/index.tsx\");\n/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./layout */ \"./src/layout/index.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\n\n\n\nconst onMac = () => navigator.userAgent.includes(\"Mac\");\nconst SHORTCUTS = {\n  general: {\n    showAvailableShortcuts: \"Alt; s\",\n    showOverview: \"?\",\n    closeOverlay: \"Escape\",\n    tab: \"Tab\",\n    prev: onMac() ? \"Shift+Mod+left\" : \"Mod+left\",\n    next: onMac() ? \"Shift+Mod+right\" : \"Mod+right\"\n  },\n  videoSetup: {\n    selectScreen: \"1\",\n    selectBoth: \"2\",\n    selectUser: \"3\"\n  },\n  audioSetup: {\n    withAudio: \"1\",\n    withoutAudio: \"2\"\n  },\n  recording: {\n    startPauseResume: \"k; Space\"\n  },\n  review: {\n    playPause: \"k; Space\",\n    forwards5secs: \"l; right\",\n    backwards5secs: \"j; left\",\n    forwardsFrame: \".\",\n    backwardsFrame: \",\",\n    cutLeft: \"n\",\n    cutRight: \"m\",\n    removeCutLeft: \"Shift+n\",\n    removeCutRight: \"Shift+m\"\n  },\n  finish: {\n    startNewRecording: \"Shift+n\",\n    download: \"d\"\n  }\n};\nconst SHORTCUT_TRANSLATIONS = {\n  general: {\n    showAvailableShortcuts: \"shortcuts.general.show-available-shortcuts\",\n    showOverview: \"shortcuts.general.show-overview\",\n    closeOverlay: \"shortcuts.general.close-overlay\",\n    tab: \"shortcuts.general.tab-elements\",\n    prev: \"shortcuts.general.back-button\",\n    next: \"shortcuts.general.next-button\"\n  },\n  videoSetup: {\n    selectScreen: \"shortcuts.select-video.select-display\",\n    selectBoth: \"shortcuts.select-video.select-both\",\n    selectUser: \"shortcuts.select-video.select-camera\"\n  },\n  audioSetup: {\n    withAudio: \"shortcuts.select-audio.select-microphone\",\n    withoutAudio: \"shortcuts.select-audio.select-no-audio\"\n  },\n  recording: {\n    startPauseResume: \"shortcuts.record.start-pause-resume-recording\"\n  },\n  review: {\n    playPause: \"shortcuts.review.play-pause\",\n    forwards5secs: \"shortcuts.review.skip-five\",\n    backwards5secs: \"shortcuts.review.back-five\",\n    forwardsFrame: \"shortcuts.review.frame-forward\",\n    backwardsFrame: \"shortcuts.review.frame-back\",\n    cutLeft: \"shortcuts.review.cut-left\",\n    cutRight: \"shortcuts.review.cut-right\",\n    removeCutLeft: \"shortcuts.review.delete-left\",\n    removeCutRight: \"shortcuts.review.delete-right\"\n  },\n  finish: {\n    startNewRecording: \"shortcuts.finish.new-recording\",\n    download: \"steps.finish.save-locally.label\"\n  }\n};\nconst KEY_TRANSLATIONS = {\n  \"Escape\": \"escape\",\n  \"Space\": \"space\",\n  \"Shift\": \"shift\",\n  \"Alt\": onMac() ? \"option\" : \"alt\",\n  \"Mod\": onMac() ? \"command\" : \"control\"\n};\n\n/** Like `useHotkeys` but with pre-set options. */\nconst useShortcut = function (keys, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let deps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  return (0,react_hotkeys_hook__WEBPACK_IMPORTED_MODULE_3__.useHotkeys)(keys, callback, {\n    splitKey: \";\",\n    ...options\n  }, deps);\n};\n\n/**\n * Helper to show an overlay of active shortcuts when Alt is pressed. Returns\n * `true` if the overlay should be shown.\n */\nconst useShowAvailableShortcuts = () => {\n  const [active, setActive] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const enable = event => {\n    const correctKeyPressed = SHORTCUTS.general.showAvailableShortcuts.split(\";\").some(s => s.trim().toLowerCase() == event.key.toLowerCase());\n    if (correctKeyPressed) {\n      setActive(true);\n    }\n  };\n  const disable = () => setActive(false);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    document.addEventListener(\"keydown\", enable);\n    document.addEventListener(\"keyup\", disable);\n    document.addEventListener(\"mousedown\", disable);\n    window.addEventListener(\"blur\", disable);\n    return () => {\n      document.removeEventListener(\"keydown\", enable);\n      document.removeEventListener(\"keyup\", disable);\n      document.removeEventListener(\"mousedown\", disable);\n      window.removeEventListener(\"blur\", disable);\n    };\n  });\n  return active;\n};\nconst ShortcutKeys = _ref => {\n  let {\n    shortcut,\n    large = false\n  } = _ref;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.css)({\n      display: \"flex\",\n      alignItems: \"center\",\n      gap: 4,\n      color: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral70\n    },  false ? 0 : \";label:ShortcutKeys;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    children: shortcut.split(\"+\").map((key, i) => {\n      let s = key;\n      if (key in KEY_TRANSLATIONS) {\n        const translationKey = KEY_TRANSLATIONS[key];\n        s = t(`shortcuts.keys.${translationKey}`);\n      }\n      const child = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.match)(key, {\n        \"left\": () => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_8__.FiArrowLeft, {\n          title: s\n        }),\n        \"right\": () => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_8__.FiArrowRight, {\n          title: s\n        }),\n        \"Mod\": () => onMac() ? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_8__.FiCommand, {\n          title: s\n        }) : (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment, {\n          children: s\n        }),\n        \"Alt\": () => onMac() ? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_icons_lu__WEBPACK_IMPORTED_MODULE_9__.LuOption, {\n          title: s\n        }) : (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment, {\n          children: s\n        }),\n        \"Shift\": () => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_icons_lu__WEBPACK_IMPORTED_MODULE_9__.LuArrowBigUp, {\n          size: 20,\n          title: s\n        })\n      }, () => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment, {\n        children: s\n      }));\n      return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), {\n        children: [i !== 0 && \"+\", (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(SingleKey, {\n          large: large,\n          monofont: key === \"l\",\n          children: child\n        })]\n      }, i);\n    })\n  });\n};\nconst SingleKey = _ref2 => {\n  let {\n    large,\n    monofont,\n    children\n  } = _ref2;\n  const isLight = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.useColorScheme)().scheme === \"light\";\n  const {\n    scheme,\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.useColorScheme)();\n  const bg = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.match)(scheme, {\n    \"light\": () => _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral05,\n    \"dark\": () => _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral15,\n    \"light-high-contrast\": () => _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral05,\n    \"dark-high-contrast\": () => _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral15\n  });\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.css)({\n      border: `1px solid ${_util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral50}`,\n      borderRadius: 4,\n      padding: \"2px 6px\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: large ? 36 : 30,\n      minWidth: large ? 36 : 30,\n      fontSize: 16,\n      boxShadow: isHighContrast ? \"none\" : \"0 0 6px var(--shadow-color)\",\n      backgroundColor: large ? bg : _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral10,\n      color: isHighContrast ? _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral80 : isLight || !large ? _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral80 : _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral90,\n      cursor: \"default\",\n      ...(monofont && {\n        fontFamily: \"monospace\"\n      })\n    },  false ? 0 : \";label:SingleKey;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    children: children\n  });\n};\nconst ShortcutOverview = _ref3 => {\n  let {\n    close\n  } = _ref3;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_layout__WEBPACK_IMPORTED_MODULE_5__.OverlayBox, {\n    maxWidth: 1000,\n    close: close,\n    title: t(\"shortcuts.label\"),\n    children: Object.entries(SHORTCUTS).map(_ref4 => {\n      let [groupId, group] = _ref4;\n      return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(ShortcutGroupOverview, {\n        groupId: groupId,\n        group: group\n      }, groupId);\n    })\n  });\n};\nconst GROUP_ID_TRANSLATIONS = {\n  general: \"shortcuts.general.title\",\n  videoSetup: \"steps.video.label\",\n  audioSetup: \"steps.audio.label\",\n  recording: \"steps.record.label\",\n  review: \"steps.review.label\",\n  finish: \"steps.finish.label\"\n};\nvar _ref6 =  false ? 0 : {\n  name: \"4wvao7-ShortcutGroupOverview\",\n  styles: \"margin:32px 0;:first-of-type{margin-top:16px;};label:ShortcutGroupOverview;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref7 =  false ? 0 : {\n  name: \"1ivymk1-ShortcutGroupOverview\",\n  styles: \"font-size:18px;margin-bottom:8px;label:ShortcutGroupOverview;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3Nob3J0Y3V0cy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOFBVIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3Nob3J0Y3V0cy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IHsgbWF0Y2gsIHNjcmVlbldpZHRoQXRNb3N0LCB1c2VDb2xvclNjaGVtZSB9IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5pbXBvcnQgeyBMdUFycm93QmlnVXAsIEx1T3B0aW9uIH0gZnJvbSBcInJlYWN0LWljb25zL2x1XCI7XG5pbXBvcnQgeyBGaUFycm93TGVmdCwgRmlBcnJvd1JpZ2h0LCBGaUNvbW1hbmQgfSBmcm9tIFwicmVhY3QtaWNvbnMvZmlcIjtcbmltcG9ydCB7IE9wdGlvbnMsIHVzZUhvdGtleXMgfSBmcm9tIFwicmVhY3QtaG90a2V5cy1ob29rXCI7XG5cbmltcG9ydCB7IENPTE9SUyB9IGZyb20gXCIuL3V0aWxcIjtcbmltcG9ydCB7IE92ZXJsYXlCb3ggfSBmcm9tIFwiLi9sYXlvdXRcIjtcblxuXG5jb25zdCBvbk1hYyA9ICgpID0+IG5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoXCJNYWNcIik7XG5cbmV4cG9ydCBjb25zdCBTSE9SVENVVFMgPSB7XG4gIGdlbmVyYWw6IHtcbiAgICBzaG93QXZhaWxhYmxlU2hvcnRjdXRzOiBcIkFsdDsgc1wiLFxuICAgIHNob3dPdmVydmlldzogXCI/XCIsXG4gICAgY2xvc2VPdmVybGF5OiBcIkVzY2FwZVwiLFxuICAgIHRhYjogXCJUYWJcIixcbiAgICBwcmV2OiBvbk1hYygpID8gXCJTaGlmdCtNb2QrbGVmdFwiIDogXCJNb2QrbGVmdFwiLFxuICAgIG5leHQ6IG9uTWFjKCkgPyBcIlNoaWZ0K01vZCtyaWdodFwiIDogXCJNb2QrcmlnaHRcIixcbiAgfSxcbiAgdmlkZW9TZXR1cDoge1xuICAgIHNlbGVjdFNjcmVlbjogXCIxXCIsXG4gICAgc2VsZWN0Qm90aDogXCIyXCIsXG4gICAgc2VsZWN0VXNlcjogXCIzXCIsXG4gIH0sXG4gIGF1ZGlvU2V0dXA6IHtcbiAgICB3aXRoQXVkaW86IFwiMVwiLFxuICAgIHdpdGhvdXRBdWRpbzogXCIyXCIsXG4gIH0sXG4gIHJlY29yZGluZzoge1xuICAgIHN0YXJ0UGF1c2VSZXN1bWU6IFwiazsgU3BhY2VcIixcbiAgfSxcbiAgcmV2aWV3OiB7XG4gICAgcGxheVBhdXNlOiBcIms7IFNwYWNlXCIsXG4gICAgZm9yd2FyZHM1c2VjczogXCJsOyByaWdodFwiLFxuICAgIGJhY2t3YXJkczVzZWNzOiBcImo7IGxlZnRcIixcbiAgICBmb3J3YXJkc0ZyYW1lOiBcIi5cIixcbiAgICBiYWNrd2FyZHNGcmFtZTogXCIsXCIsXG4gICAgY3V0TGVmdDogXCJuXCIsXG4gICAgY3V0UmlnaHQ6IFwibVwiLFxuICAgIHJlbW92ZUN1dExlZnQ6IFwiU2hpZnQrblwiLFxuICAgIHJlbW92ZUN1dFJpZ2h0OiBcIlNoaWZ0K21cIixcbiAgfSxcbiAgZmluaXNoOiB7XG4gICAgc3RhcnROZXdSZWNvcmRpbmc6IFwiU2hpZnQrblwiLFxuICAgIGRvd25sb2FkOiBcImRcIixcbiAgfSxcbn0gYXMgY29uc3Q7XG5cbmNvbnN0IFNIT1JUQ1VUX1RSQU5TTEFUSU9OUyA9IHtcbiAgZ2VuZXJhbDoge1xuICAgIHNob3dBdmFpbGFibGVTaG9ydGN1dHM6IFwic2hvcnRjdXRzLmdlbmVyYWwuc2hvdy1hdmFpbGFibGUtc2hvcnRjdXRzXCIsXG4gICAgc2hvd092ZXJ2aWV3OiBcInNob3J0Y3V0cy5nZW5lcmFsLnNob3ctb3ZlcnZpZXdcIixcbiAgICBjbG9zZU92ZXJsYXk6IFwic2hvcnRjdXRzLmdlbmVyYWwuY2xvc2Utb3ZlcmxheVwiLFxuICAgIHRhYjogXCJzaG9ydGN1dHMuZ2VuZXJhbC50YWItZWxlbWVudHNcIixcbiAgICBwcmV2OiBcInNob3J0Y3V0cy5nZW5lcmFsLmJhY2stYnV0dG9uXCIsXG4gICAgbmV4dDogXCJzaG9ydGN1dHMuZ2VuZXJhbC5uZXh0LWJ1dHRvblwiLFxuICB9LFxuICB2aWRlb1NldHVwOiB7XG4gICAgc2VsZWN0U2NyZWVuOiBcInNob3J0Y3V0cy5zZWxlY3QtdmlkZW8uc2VsZWN0LWRpc3BsYXlcIixcbiAgICBzZWxlY3RCb3RoOiBcInNob3J0Y3V0cy5zZWxlY3QtdmlkZW8uc2VsZWN0LWJvdGhcIixcbiAgICBzZWxlY3RVc2VyOiBcInNob3J0Y3V0cy5zZWxlY3QtdmlkZW8uc2VsZWN0LWNhbWVyYVwiLFxuICB9LFxuICBhdWRpb1NldHVwOiB7XG4gICAgd2l0aEF1ZGlvOiBcInNob3J0Y3V0cy5zZWxlY3QtYXVkaW8uc2VsZWN0LW1pY3JvcGhvbmVcIixcbiAgICB3aXRob3V0QXVkaW86IFwic2hvcnRjdXRzLnNlbGVjdC1hdWRpby5zZWxlY3Qtbm8tYXVkaW9cIixcbiAgfSxcbiAgcmVjb3JkaW5nOiB7XG4gICAgc3RhcnRQYXVzZVJlc3VtZTogXCJzaG9ydGN1dHMucmVjb3JkLnN0YXJ0LXBhdXNlLXJlc3VtZS1yZWNvcmRpbmdcIixcbiAgfSxcbiAgcmV2aWV3OiB7XG4gICAgcGxheVBhdXNlOiBcInNob3J0Y3V0cy5yZXZpZXcucGxheS1wYXVzZVwiLFxuICAgIGZvcndhcmRzNXNlY3M6IFwic2hvcnRjdXRzLnJldmlldy5za2lwLWZpdmVcIixcbiAgICBiYWNrd2FyZHM1c2VjczogXCJzaG9ydGN1dHMucmV2aWV3LmJhY2stZml2ZVwiLFxuICAgIGZvcndhcmRzRnJhbWU6IFwic2hvcnRjdXRzLnJldmlldy5mcmFtZS1mb3J3YXJkXCIsXG4gICAgYmFja3dhcmRzRnJhbWU6IFwic2hvcnRjdXRzLnJldmlldy5mcmFtZS1iYWNrXCIsXG4gICAgY3V0TGVmdDogXCJzaG9ydGN1dHMucmV2aWV3LmN1dC1sZWZ0XCIsXG4gICAgY3V0UmlnaHQ6IFwic2hvcnRjdXRzLnJldmlldy5jdXQtcmlnaHRcIixcbiAgICByZW1vdmVDdXRMZWZ0OiBcInNob3J0Y3V0cy5yZXZpZXcuZGVsZXRlLWxlZnRcIixcbiAgICByZW1vdmVDdXRSaWdodDogXCJzaG9ydGN1dHMucmV2aWV3LmRlbGV0ZS1yaWdodFwiLFxuICB9LFxuICBmaW5pc2g6IHtcbiAgICBzdGFydE5ld1JlY29yZGluZzogXCJzaG9ydGN1dHMuZmluaXNoLm5ldy1yZWNvcmRpbmdcIixcbiAgICBkb3dubG9hZDogXCJzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LmxhYmVsXCIsXG4gIH0sXG59IGFzIGNvbnN0O1xuXG5jb25zdCBLRVlfVFJBTlNMQVRJT05TID0ge1xuICBcIkVzY2FwZVwiOiBcImVzY2FwZVwiLFxuICBcIlNwYWNlXCI6IFwic3BhY2VcIixcbiAgXCJTaGlmdFwiOiBcInNoaWZ0XCIsXG4gIFwiQWx0XCI6IG9uTWFjKCkgPyBcIm9wdGlvblwiIDogXCJhbHRcIixcbiAgXCJNb2RcIjogb25NYWMoKSA/IFwiY29tbWFuZFwiIDogXCJjb250cm9sXCIsXG59IGFzIGNvbnN0O1xuXG5cbi8qKiBMaWtlIGB1c2VIb3RrZXlzYCBidXQgd2l0aCBwcmUtc2V0IG9wdGlvbnMuICovXG5leHBvcnQgY29uc3QgdXNlU2hvcnRjdXQgPSAoXG4gIGtleXM6IHN0cmluZyxcbiAgY2FsbGJhY2s6ICgpID0+IHZvaWQsXG4gIG9wdGlvbnM6IE9taXQ8T3B0aW9ucywgXCJzcGxpdEtleVwiPiA9IHt9LFxuICBkZXBzOiB1bmtub3duW10gPSBbXSxcbikgPT4ge1xuICByZXR1cm4gdXNlSG90a2V5cyhrZXlzLCBjYWxsYmFjaywgeyBzcGxpdEtleTogXCI7XCIsIC4uLm9wdGlvbnMgfSwgZGVwcyk7XG59O1xuXG4vKipcbiAqIEhlbHBlciB0byBzaG93IGFuIG92ZXJsYXkgb2YgYWN0aXZlIHNob3J0Y3V0cyB3aGVuIEFsdCBpcyBwcmVzc2VkLiBSZXR1cm5zXG4gKiBgdHJ1ZWAgaWYgdGhlIG92ZXJsYXkgc2hvdWxkIGJlIHNob3duLlxuICovXG5leHBvcnQgY29uc3QgdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cyA9ICgpID0+IHtcbiAgY29uc3QgW2FjdGl2ZSwgc2V0QWN0aXZlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgZW5hYmxlID0gKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgY29uc3QgY29ycmVjdEtleVByZXNzZWQgPSBTSE9SVENVVFMuZ2VuZXJhbC5zaG93QXZhaWxhYmxlU2hvcnRjdXRzLnNwbGl0KFwiO1wiKVxuICAgICAgLnNvbWUocyA9PiBzLnRyaW0oKS50b0xvd2VyQ2FzZSgpID09IGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpKTtcbiAgICBpZiAoY29ycmVjdEtleVByZXNzZWQpIHtcbiAgICAgIHNldEFjdGl2ZSh0cnVlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGRpc2FibGUgPSAoKSA9PiBzZXRBY3RpdmUoZmFsc2UpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZW5hYmxlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgZGlzYWJsZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBkaXNhYmxlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgZGlzYWJsZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGVuYWJsZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgZGlzYWJsZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGRpc2FibGUpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGRpc2FibGUpO1xuICAgIH07XG4gIH0pO1xuXG4gIHJldHVybiBhY3RpdmU7XG59O1xuXG50eXBlIFNob3J0Y3V0S2V5c1Byb3BzID0ge1xuICBzaG9ydGN1dDogc3RyaW5nO1xuICBsYXJnZT86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY29uc3QgU2hvcnRjdXRLZXlzOiBSZWFjdC5GQzxTaG9ydGN1dEtleXNQcm9wcz4gPSAoeyBzaG9ydGN1dCwgbGFyZ2UgPSBmYWxzZSB9KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgcmV0dXJuIDxkaXYgY3NzPXt7IGRpc3BsYXk6IFwiZmxleFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLCBnYXA6IDQsIGNvbG9yOiBDT0xPUlMubmV1dHJhbDcwIH19PlxuICAgIHtzaG9ydGN1dC5zcGxpdChcIitcIikubWFwKChrZXksIGkpID0+IHtcbiAgICAgIGxldCBzID0ga2V5O1xuICAgICAgaWYgKGtleSBpbiBLRVlfVFJBTlNMQVRJT05TKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uS2V5ID0gS0VZX1RSQU5TTEFUSU9OU1trZXkgYXMga2V5b2YgdHlwZW9mIEtFWV9UUkFOU0xBVElPTlNdO1xuICAgICAgICBzID0gdChgc2hvcnRjdXRzLmtleXMuJHt0cmFuc2xhdGlvbktleX1gKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNoaWxkID0gbWF0Y2g8c3RyaW5nLCBKU1guRWxlbWVudD4oa2V5LCB7XG4gICAgICAgIFwibGVmdFwiOiAoKSA9PiA8RmlBcnJvd0xlZnQgdGl0bGU9e3N9IC8+LFxuICAgICAgICBcInJpZ2h0XCI6ICgpID0+IDxGaUFycm93UmlnaHQgdGl0bGU9e3N9IC8+LFxuICAgICAgICBcIk1vZFwiOiAoKSA9PiBvbk1hYygpID8gPEZpQ29tbWFuZCB0aXRsZT17c30gLz4gOiA8PntzfTwvPixcbiAgICAgICAgXCJBbHRcIjogKCkgPT4gb25NYWMoKSA/IDxMdU9wdGlvbiB0aXRsZT17c30gLz4gOiA8PntzfTwvPixcbiAgICAgICAgXCJTaGlmdFwiOiAoKSA9PiA8THVBcnJvd0JpZ1VwIHNpemU9ezIwfSB0aXRsZT17c30gLz4sXG4gICAgICB9LCAoKSA9PiA8PntzfTwvPik7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8UmVhY3QuRnJhZ21lbnQga2V5PXtpfT5cbiAgICAgICAgICB7aSAhPT0gMCAmJiBcIitcIn1cbiAgICAgICAgICA8U2luZ2xlS2V5IGxhcmdlPXtsYXJnZX0gbW9ub2ZvbnQ9e2tleSA9PT0gXCJsXCJ9PntjaGlsZH08L1NpbmdsZUtleT5cbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICk7XG4gICAgfSl9XG4gIDwvZGl2Pjtcbn07XG5cbnR5cGUgU2luZ2xlS2V5UHJvcHMgPSBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjx7XG4gIGxhcmdlOiBib29sZWFuO1xuICAvKiogV2hldGhlciB0byB1c2UgYG1vbm9zcGFjZWAgZm9udCBmb3IgdGhpcyBvbmUuIEJhc2ljYWxseSBvbmx5IHVzZWZ1bCBmb3IgbG93ZXJjYXNlIGwuICovXG4gIG1vbm9mb250OiBib29sZWFuO1xufT47XG5cbmNvbnN0IFNpbmdsZUtleTogUmVhY3QuRkM8U2luZ2xlS2V5UHJvcHM+ID0gKHsgbGFyZ2UsIG1vbm9mb250LCBjaGlsZHJlbiB9KSA9PiB7XG4gIGNvbnN0IGlzTGlnaHQgPSB1c2VDb2xvclNjaGVtZSgpLnNjaGVtZSA9PT0gXCJsaWdodFwiO1xuICBjb25zdCB7IHNjaGVtZSwgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG5cbiAgY29uc3QgYmcgPSBtYXRjaChzY2hlbWUsIHtcbiAgICBcImxpZ2h0XCI6ICgpID0+IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgXCJkYXJrXCI6ICgpID0+IENPTE9SUy5uZXV0cmFsMTUsXG4gICAgXCJsaWdodC1oaWdoLWNvbnRyYXN0XCI6ICgpID0+IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgXCJkYXJrLWhpZ2gtY29udHJhc3RcIjogKCkgPT4gQ09MT1JTLm5ldXRyYWwxNSxcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWw1MH1gLFxuICAgICAgYm9yZGVyUmFkaXVzOiA0LFxuICAgICAgcGFkZGluZzogXCIycHggNnB4XCIsXG4gICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgIGhlaWdodDogbGFyZ2UgPyAzNiA6IDMwLFxuICAgICAgbWluV2lkdGg6IGxhcmdlID8gMzYgOiAzMCxcbiAgICAgIGZvbnRTaXplOiAxNixcbiAgICAgIGJveFNoYWRvdzogaXNIaWdoQ29udHJhc3QgPyBcIm5vbmVcIiA6IFwiMCAwIDZweCB2YXIoLS1zaGFkb3ctY29sb3IpXCIsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGxhcmdlID8gYmcgOiBDT0xPUlMubmV1dHJhbDEwLFxuICAgICAgY29sb3I6IGlzSGlnaENvbnRyYXN0XG4gICAgICAgID8gQ09MT1JTLm5ldXRyYWw4MFxuICAgICAgICA6ICgoaXNMaWdodCB8fCAhbGFyZ2UpID8gQ09MT1JTLm5ldXRyYWw4MCA6IENPTE9SUy5uZXV0cmFsOTApLFxuICAgICAgY3Vyc29yOiBcImRlZmF1bHRcIixcbiAgICAgIC4uLm1vbm9mb250ICYmIHsgZm9udEZhbWlseTogXCJtb25vc3BhY2VcIiB9LFxuICAgIH19PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvZGl2PlxuICApO1xufTtcblxudHlwZSBTaG9ydEN1dE92ZXJ2aWV3UHJvcHMgPSB7XG4gIGNsb3NlOiAoKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGNvbnN0IFNob3J0Y3V0T3ZlcnZpZXc6IFJlYWN0LkZDPFNob3J0Q3V0T3ZlcnZpZXdQcm9wcz4gPSAoeyBjbG9zZSB9KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcblxuICByZXR1cm4gPE92ZXJsYXlCb3ggbWF4V2lkdGg9ezEwMDB9IGNsb3NlPXtjbG9zZX0gdGl0bGU9e3QoXCJzaG9ydGN1dHMubGFiZWxcIil9PlxuICAgIHtPYmplY3QuZW50cmllcyhTSE9SVENVVFMpLm1hcCgoW2dyb3VwSWQsIGdyb3VwXSkgPT4gKFxuICAgICAgPFNob3J0Y3V0R3JvdXBPdmVydmlld1xuICAgICAgICBrZXk9e2dyb3VwSWR9XG4gICAgICAgIGdyb3VwSWQ9e2dyb3VwSWQgYXMga2V5b2YgdHlwZW9mIFNIT1JUQ1VUU31cbiAgICAgICAgZ3JvdXA9e2dyb3VwfVxuICAgICAgLz5cbiAgICApKX1cbiAgPC9PdmVybGF5Qm94Pjtcbn07XG5cblxuY29uc3QgR1JPVVBfSURfVFJBTlNMQVRJT05TID0ge1xuICBnZW5lcmFsOiBcInNob3J0Y3V0cy5nZW5lcmFsLnRpdGxlXCIsXG4gIHZpZGVvU2V0dXA6IFwic3RlcHMudmlkZW8ubGFiZWxcIixcbiAgYXVkaW9TZXR1cDogXCJzdGVwcy5hdWRpby5sYWJlbFwiLFxuICByZWNvcmRpbmc6IFwic3RlcHMucmVjb3JkLmxhYmVsXCIsXG4gIHJldmlldzogXCJzdGVwcy5yZXZpZXcubGFiZWxcIixcbiAgZmluaXNoOiBcInN0ZXBzLmZpbmlzaC5sYWJlbFwiLFxufSBhcyBjb25zdCBzYXRpc2ZpZXMgUmVjb3JkPGtleW9mIHR5cGVvZiBTSE9SVENVVFMsIHN0cmluZz47XG5cbnR5cGUgU2hvcnRjdXRHcm91cE92ZXJ2aWV3UHJvcHMgPSB7XG4gIGdyb3VwSWQ6IGtleW9mIHR5cGVvZiBTSE9SVENVVFM7XG4gIGdyb3VwOiB0eXBlb2YgU0hPUlRDVVRTW2tleW9mIHR5cGVvZiBTSE9SVENVVFNdO1xufTtcblxuY29uc3QgU2hvcnRjdXRHcm91cE92ZXJ2aWV3OiBSZWFjdC5GQzxTaG9ydGN1dEdyb3VwT3ZlcnZpZXdQcm9wcz4gPSAoeyBncm91cElkLCBncm91cCB9KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcblxuICByZXR1cm4gKFxuICAgIDxzZWN0aW9uIGNzcz17e1xuICAgICAgbWFyZ2luOiBcIjMycHggMFwiLFxuICAgICAgXCI6Zmlyc3Qtb2YtdHlwZVwiOiB7XG4gICAgICAgIG1hcmdpblRvcDogMTYsXG4gICAgICB9LFxuICAgIH19PlxuICAgICAgPGgyIGNzcz17eyBmb250U2l6ZTogMTgsIG1hcmdpbkJvdHRvbTogOCB9fT57dChHUk9VUF9JRF9UUkFOU0xBVElPTlNbZ3JvdXBJZF0pfTwvaDI+XG4gICAgICA8ZGl2IGNzcz17e1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleFdyYXA6IFwid3JhcFwiLFxuICAgICAgICBnYXA6IDEyLFxuICAgICAgfX0+XG4gICAgICAgIHtPYmplY3QuZW50cmllcyhncm91cCkubWFwKChbbmFtZSwga2V5c10sIGkpID0+IChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgd2lkdGg6IFwiY2FsYygzMy4zMyUgLSAyNHB4IC8gMylcIixcbiAgICAgICAgICAgICAgW3NjcmVlbldpZHRoQXRNb3N0KDEwODApXToge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBcImNhbGMoNTAlIC0gMTJweCAvIDIpXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtzY3JlZW5XaWR0aEF0TW9zdCg3MjApXToge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDEwLFxuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDQsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IFwiMTBweCAxNnB4XCIsXG4gICAgICAgICAgICAgIGRpc3BsYXk6IFwiaW5saW5lLWZsZXhcIixcbiAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogXCJzdGFydFwiLFxuICAgICAgICAgICAgICBnYXA6IDgsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgY3NzPXt7IG92ZXJmbG93V3JhcDogXCJhbnl3aGVyZVwiIH19PlxuICAgICAgICAgICAgICB7LyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi99XG4gICAgICAgICAgICAgIHt0KChTSE9SVENVVF9UUkFOU0xBVElPTlNbZ3JvdXBJZF0gYXMgYW55KVtuYW1lXSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgICBnYXA6IDgsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAge2tleXMuc3BsaXQoXCI7XCIpLm1hcCgoY29tYmluYXRpb24sIGkpID0+IDxSZWFjdC5GcmFnbWVudCBrZXk9e2l9PlxuICAgICAgICAgICAgICAgIHtpID4gMCAmJiB0KFwic2hvcnRjdXRzLnNlcXVlbmNlLXNlcGVyYXRvclwiKX1cbiAgICAgICAgICAgICAgICA8U2hvcnRjdXRLZXlzIHNob3J0Y3V0PXtjb21iaW5hdGlvbi50cmltKCl9IGxhcmdlIC8+XG4gICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+KX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvc2VjdGlvbj5cbiAgKTtcbn07XG4iXX0= */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref8 =  false ? 0 : {\n  name: \"1upoion-ShortcutGroupOverview\",\n  styles: \"display:flex;flex-wrap:wrap;gap:12px;label:ShortcutGroupOverview;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref10 =  false ? 0 : {\n  name: \"1vbrul8-ShortcutGroupOverview\",\n  styles: \"overflow-wrap:anywhere;label:ShortcutGroupOverview;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref11 =  false ? 0 : {\n  name: \"1uaj156-ShortcutGroupOverview\",\n  styles: \"display:flex;gap:8px;align-items:center;label:ShortcutGroupOverview;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst ShortcutGroupOverview = _ref5 => {\n  let {\n    groupId,\n    group\n  } = _ref5;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(\"section\", {\n    css: _ref6,\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(\"h2\", {\n      css: _ref7,\n      children: t(GROUP_ID_TRANSLATIONS[groupId])\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(\"div\", {\n      css: _ref8,\n      children: Object.entries(group).map((_ref9, i) => {\n        let [name, keys] = _ref9;\n        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(\"div\", {\n          css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.css)({\n            width: \"calc(33.33% - 24px / 3)\",\n            [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.screenWidthAtMost)(1080)]: {\n              width: \"calc(50% - 12px / 2)\"\n            },\n            [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.screenWidthAtMost)(720)]: {\n              width: \"100%\"\n            },\n            backgroundColor: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral10,\n            borderRadius: 4,\n            padding: \"10px 16px\",\n            display: \"inline-flex\",\n            flexDirection: \"column\",\n            alignItems: \"start\",\n            gap: 8\n          },  false ? 0 : \";label:ShortcutGroupOverview;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n          children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(\"div\", {\n            css: _ref10,\n            children: t(SHORTCUT_TRANSLATIONS[groupId][name])\n          }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(\"div\", {\n            css: _ref11,\n            children: keys.split(\";\").map((combination, i) => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), {\n              children: [i > 0 && t(\"shortcuts.sequence-seperator\"), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(ShortcutKeys, {\n                shortcut: combination.trim(),\n                large: true\n              })]\n            }, i))\n          })]\n        }, i);\n      })\n    })]\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/shortcuts.tsx\n");

/***/ }),

/***/ "./src/steps/audio-setup/index.tsx":
/*!*****************************************!*\
  !*** ./src/steps/audio-setup/index.tsx ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioSetup: function() { return /* binding */ AudioSetup; },\n/* harmony export */   LAST_AUDIO_DEVICE_KEY: function() { return /* binding */ LAST_AUDIO_DEVICE_KEY; }\n/* harmony export */ });\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var _studio_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../studio-state */ \"./src/studio-state.tsx\");\n/* harmony import */ var _capturer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../capturer */ \"./src/capturer.tsx\");\n/* harmony import */ var _elements__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../elements */ \"./src/steps/elements.tsx\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _source_select__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./source-select */ \"./src/steps/audio-setup/source-select.tsx\");\n/* harmony import */ var _mic_preview__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./mic-preview */ \"./src/steps/audio-setup/mic-preview.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\n\n\n\n\n\n\n\n\nconst LAST_AUDIO_DEVICE_KEY = \"ocStudioLastAudioDevice\";\n\n// The audio setup page. This component manages the state (either 'none\n// selected' or 'microphone selected') and renders the correct component.\nconst AudioSetup = _ref => {\n  let {\n    goToNextStep,\n    goToPrevStep\n  } = _ref;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_0__.useTranslation)();\n  const dispatch = (0,_studio_state__WEBPACK_IMPORTED_MODULE_2__.useDispatch)();\n  const {\n    audioStream,\n    audioChoice\n  } = (0,_studio_state__WEBPACK_IMPORTED_MODULE_2__.useStudioState)();\n  return (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_1__.match)(audioChoice, {\n    \"none\": () => {\n      const selectMicrophone = async () => {\n        dispatch({\n          type: \"CHOOSE_AUDIO\",\n          choice: \"microphone\"\n        });\n        const deviceId = window.localStorage.getItem(LAST_AUDIO_DEVICE_KEY);\n        await (0,_capturer__WEBPACK_IMPORTED_MODULE_3__.startAudioCapture)(dispatch, deviceId ? {\n          ideal: deviceId\n        } : undefined);\n        await (0,_util__WEBPACK_IMPORTED_MODULE_5__.queryMediaDevices)(dispatch);\n      };\n      return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_elements__WEBPACK_IMPORTED_MODULE_4__.StepContainer, {\n        title: t(\"steps.audio.question\"),\n        prevButton: {\n          onClick: goToPrevStep\n        },\n        nextButton: {\n          disabled: true\n        },\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_source_select__WEBPACK_IMPORTED_MODULE_6__.SourceSelection, {\n          selectNoAudio: goToNextStep,\n          selectMicrophone: selectMicrophone\n        })\n      });\n    },\n    \"microphone\": () => {\n      const reselectSource = () => {\n        if (audioStream) {\n          (0,_capturer__WEBPACK_IMPORTED_MODULE_3__.stopAudioCapture)(audioStream, dispatch);\n        }\n        dispatch({\n          type: \"CHOOSE_AUDIO\",\n          choice: \"none\"\n        });\n      };\n      return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_elements__WEBPACK_IMPORTED_MODULE_4__.StepContainer, {\n        title: t(\"steps.audio.microphone-selected\"),\n        prevButton: {\n          label: t(\"steps.audio.reselect-audio\"),\n          onClick: reselectSource\n        },\n        nextButton: {\n          disabled: !audioStream,\n          onClick: goToNextStep\n        },\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_mic_preview__WEBPACK_IMPORTED_MODULE_7__.MicrophonePreview, {})\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RlcHMvYXVkaW8tc2V0dXAvaW5kZXgudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBR0E7O0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFHQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuY2FzdC1zdHVkaW8vLi9zcmMvc3RlcHMvYXVkaW8tc2V0dXAvaW5kZXgudHN4P2VjOWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IHsgbWF0Y2ggfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU3R1ZGlvU3RhdGUgfSBmcm9tIFwiLi4vLi4vc3R1ZGlvLXN0YXRlXCI7XG5pbXBvcnQgeyBzdGFydEF1ZGlvQ2FwdHVyZSwgc3RvcEF1ZGlvQ2FwdHVyZSB9IGZyb20gXCIuLi8uLi9jYXB0dXJlclwiO1xuaW1wb3J0IHsgU3RlcENvbnRhaW5lciB9IGZyb20gXCIuLi9lbGVtZW50c1wiO1xuaW1wb3J0IHsgcXVlcnlNZWRpYURldmljZXMgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgU3RlcFByb3BzIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyBTb3VyY2VTZWxlY3Rpb24gfSBmcm9tIFwiLi9zb3VyY2Utc2VsZWN0XCI7XG5pbXBvcnQgeyBNaWNyb3Bob25lUHJldmlldyB9IGZyb20gXCIuL21pYy1wcmV2aWV3XCI7XG5cblxuZXhwb3J0IGNvbnN0IExBU1RfQVVESU9fREVWSUNFX0tFWSA9IFwib2NTdHVkaW9MYXN0QXVkaW9EZXZpY2VcIjtcblxuXG4vLyBUaGUgYXVkaW8gc2V0dXAgcGFnZS4gVGhpcyBjb21wb25lbnQgbWFuYWdlcyB0aGUgc3RhdGUgKGVpdGhlciAnbm9uZVxuLy8gc2VsZWN0ZWQnIG9yICdtaWNyb3Bob25lIHNlbGVjdGVkJykgYW5kIHJlbmRlcnMgdGhlIGNvcnJlY3QgY29tcG9uZW50LlxuZXhwb3J0IGNvbnN0IEF1ZGlvU2V0dXA6IFJlYWN0LkZDPFN0ZXBQcm9wcz4gPSAoeyBnb1RvTmV4dFN0ZXAsIGdvVG9QcmV2U3RlcCB9KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCB7IGF1ZGlvU3RyZWFtLCBhdWRpb0Nob2ljZSB9ID0gdXNlU3R1ZGlvU3RhdGUoKTtcblxuXG4gIHJldHVybiBtYXRjaChhdWRpb0Nob2ljZSwge1xuICAgIFwibm9uZVwiOiAoKSA9PiB7XG4gICAgICBjb25zdCBzZWxlY3RNaWNyb3Bob25lID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IFwiQ0hPT1NFX0FVRElPXCIsIGNob2ljZTogXCJtaWNyb3Bob25lXCIgfSk7XG4gICAgICAgIGNvbnN0IGRldmljZUlkID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKExBU1RfQVVESU9fREVWSUNFX0tFWSk7XG4gICAgICAgIGF3YWl0IHN0YXJ0QXVkaW9DYXB0dXJlKGRpc3BhdGNoLCBkZXZpY2VJZCA/IHsgaWRlYWw6IGRldmljZUlkIH0gOiB1bmRlZmluZWQpO1xuICAgICAgICBhd2FpdCBxdWVyeU1lZGlhRGV2aWNlcyhkaXNwYXRjaCk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8U3RlcENvbnRhaW5lclxuICAgICAgICAgIHRpdGxlPXt0KFwic3RlcHMuYXVkaW8ucXVlc3Rpb25cIil9XG4gICAgICAgICAgcHJldkJ1dHRvbj17eyBvbkNsaWNrOiBnb1RvUHJldlN0ZXAgfX1cbiAgICAgICAgICBuZXh0QnV0dG9uPXt7IGRpc2FibGVkOiB0cnVlIH19XG4gICAgICAgID5cbiAgICAgICAgICA8U291cmNlU2VsZWN0aW9uXG4gICAgICAgICAgICBzZWxlY3ROb0F1ZGlvPXtnb1RvTmV4dFN0ZXB9XG4gICAgICAgICAgICBzZWxlY3RNaWNyb3Bob25lPXtzZWxlY3RNaWNyb3Bob25lfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvU3RlcENvbnRhaW5lcj5cbiAgICAgICk7XG4gICAgfSxcblxuICAgIFwibWljcm9waG9uZVwiOiAoKSA9PiB7XG4gICAgICBjb25zdCByZXNlbGVjdFNvdXJjZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKGF1ZGlvU3RyZWFtKSB7XG4gICAgICAgICAgc3RvcEF1ZGlvQ2FwdHVyZShhdWRpb1N0cmVhbSwgZGlzcGF0Y2gpO1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoKHsgdHlwZTogXCJDSE9PU0VfQVVESU9cIiwgY2hvaWNlOiBcIm5vbmVcIiB9KTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxTdGVwQ29udGFpbmVyXG4gICAgICAgICAgdGl0bGU9e3QoXCJzdGVwcy5hdWRpby5taWNyb3Bob25lLXNlbGVjdGVkXCIpfVxuICAgICAgICAgIHByZXZCdXR0b249e3tcbiAgICAgICAgICAgIGxhYmVsOiB0KFwic3RlcHMuYXVkaW8ucmVzZWxlY3QtYXVkaW9cIiksXG4gICAgICAgICAgICBvbkNsaWNrOiByZXNlbGVjdFNvdXJjZSxcbiAgICAgICAgICB9fVxuICAgICAgICAgIG5leHRCdXR0b249e3sgZGlzYWJsZWQ6ICFhdWRpb1N0cmVhbSwgb25DbGljazogZ29Ub05leHRTdGVwIH19XG4gICAgICAgID5cbiAgICAgICAgICA8TWljcm9waG9uZVByZXZpZXcgLz5cbiAgICAgICAgPC9TdGVwQ29udGFpbmVyPlxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/steps/audio-setup/index.tsx\n");

/***/ }),

/***/ "./src/steps/audio-setup/mic-preview.tsx":
/*!***********************************************!*\
  !*** ./src/steps/audio-setup/mic-preview.tsx ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MicrophonePreview: function() { return /* binding */ MicrophonePreview; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var oscilloscope__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! oscilloscope */ \"./node_modules/oscilloscope/dist/oscilloscope.js\");\n/* harmony import */ var oscilloscope__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(oscilloscope__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var _studio_state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../studio-state */ \"./src/studio-state.tsx\");\n/* harmony import */ var _capturer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../capturer */ \"./src/capturer.tsx\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util */ \"./src/util/index.tsx\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! . */ \"./src/steps/audio-setup/index.tsx\");\n/* harmony import */ var _ui_ErrorBox__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../ui/ErrorBox */ \"./src/ui/ErrorBox.tsx\");\n/* harmony import */ var _ui_Select__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../ui/Select */ \"./src/ui/Select.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\n\n\n\n// Once the microphone is selected, this is shown. Renders an\n// audio-visualization and a device-selector.\n\n\n\nvar _ref =  false ? 0 : {\n  name: \"1j54pzq-body\",\n  styles: \"display:flex;width:80%;min-width:240px;align-items:center;label:body;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2F1ZGlvLXNldHVwL21pYy1wcmV2aWV3LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnRFciLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvYXVkaW8tc2V0dXAvbWljLXByZXZpZXcudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VJZCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgT3NjaWxsb3Njb3BlIGZyb20gXCJvc2NpbGxvc2NvcGVcIjtcbmltcG9ydCB7IFNwaW5uZXIsIHVzZUNvbG9yU2NoZW1lIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcblxuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVN0dWRpb1N0YXRlIH0gZnJvbSBcIi4uLy4uL3N0dWRpby1zdGF0ZVwiO1xuaW1wb3J0IHsgc3RhcnRBdWRpb0NhcHR1cmUsIHN0b3BBdWRpb0NhcHR1cmUgfSBmcm9tIFwiLi4vLi4vY2FwdHVyZXJcIjtcbmltcG9ydCB7IGdldFVuaXF1ZURldmljZXMsIENPTE9SUyB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBMQVNUX0FVRElPX0RFVklDRV9LRVkgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgRXJyb3JCb3ggfSBmcm9tIFwiLi4vLi4vdWkvRXJyb3JCb3hcIjtcbmltcG9ydCB7IFNlbGVjdCB9IGZyb20gXCIuLi8uLi91aS9TZWxlY3RcIjtcblxuXG4vLyBPbmNlIHRoZSBtaWNyb3Bob25lIGlzIHNlbGVjdGVkLCB0aGlzIGlzIHNob3duLiBSZW5kZXJzIGFuXG4vLyBhdWRpby12aXN1YWxpemF0aW9uIGFuZCBhIGRldmljZS1zZWxlY3Rvci5cbmV4cG9ydCBjb25zdCBNaWNyb3Bob25lUHJldmlldzogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBzdGF0ZSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IHsgYXVkaW9TdHJlYW0sIGF1ZGlvQWxsb3dlZCwgYXVkaW9VbmV4cGVjdGVkRW5kIH0gPSBzdGF0ZTtcblxuICAvLyBHZXQgY3VycmVudCBkZXZpY2UgSUQgYW5kIGFsbCBwb3NzaWJsZSBhdWRpbyBpbnB1dCBkZXZpY2VzLlxuICBjb25zdCBjdXJyZW50RGV2aWNlSWQgPSBhdWRpb1N0cmVhbT8uZ2V0QXVkaW9UcmFja3MoKT8uWzBdPy5nZXRTZXR0aW5ncygpPy5kZXZpY2VJZDtcbiAgY29uc3QgZGV2aWNlcyA9IGdldFVuaXF1ZURldmljZXMoc3RhdGUubWVkaWFEZXZpY2VzLCBcImF1ZGlvaW5wdXRcIik7XG5cbiAgLy8gV2Ugd3JpdGUgdGhlIGN1cnJlbnRseSB1c2VkIGRldmljZSBJRCB0byBsb2NhbCBzdG9yYWdlIHRvIHJlbWVtYmVyIGl0XG4gIC8vIGJldHdlZW4gdmlzaXRzIG9mIFN0dWRpby5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoY3VycmVudERldmljZUlkKSB7XG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oTEFTVF9BVURJT19ERVZJQ0VfS0VZLCBjdXJyZW50RGV2aWNlSWQpO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgY2hhbmdlRGV2aWNlID0gYXN5bmMgKGRldmljZUlkOiBzdHJpbmcpID0+IHtcbiAgICAvLyBUaGUgc3RyZWFtIGlzIG9ubHkgZmFsc3kgaWYgaXQgdW5leHBlY3RlZGx5IGVuZGVkLlxuICAgIGlmIChhdWRpb1N0cmVhbSkge1xuICAgICAgc3RvcEF1ZGlvQ2FwdHVyZShhdWRpb1N0cmVhbSwgZGlzcGF0Y2gpO1xuICAgIH1cblxuICAgIGF3YWl0IHN0YXJ0QXVkaW9DYXB0dXJlKGRpc3BhdGNoLCB7IGV4YWN0OiBkZXZpY2VJZCB9KTtcbiAgfTtcblxuICBjb25zdCBzZWxlY3RJZCA9IHVzZUlkKCk7XG4gIGxldCBib2R5OiBKU1guRWxlbWVudCA9IDw+PC8+O1xuICBpZiAoYXVkaW9TdHJlYW0pIHtcbiAgICBib2R5ID0gPD5cbiAgICAgIDxBdWRpb1Zpc3VhbHppYXRpb24gc3RyZWFtPXthdWRpb1N0cmVhbX0gLz5cbiAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICB3aWR0aDogXCI4MCVcIixcbiAgICAgICAgbWluV2lkdGg6IFwiMjQwcHhcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgIH19PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj17c2VsZWN0SWR9IGNzcz17e1xuICAgICAgICAgIG1hcmdpblJpZ2h0OiAxNixcbiAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAgZm9udFdlaWdodDogNzAwLFxuICAgICAgICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDcwLFxuICAgICAgICB9fT57dChcInN0ZXBzLmF1ZGlvLmRldmljZVwiKX08L2xhYmVsPlxuICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgaWQ9e3NlbGVjdElkfVxuICAgICAgICAgIHZhbHVlPXtjdXJyZW50RGV2aWNlSWR9XG4gICAgICAgICAgb25DaGFuZ2U9e2UgPT4gY2hhbmdlRGV2aWNlKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGZsZXg6IFwiMSAxXCIsXG4gICAgICAgICAgICBtaW5XaWR0aDogNTAsXG5cbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge2RldmljZXMubWFwKChkLCBpKSA9PiAoXG4gICAgICAgICAgICA8b3B0aW9uIGtleT17aX0gdmFsdWU9e2QuZGV2aWNlSWR9PntkLmxhYmVsID8/IFwidW5sYWJlbGVkIG1pY3JvcGhvbmVcIn08L29wdGlvbj5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9TZWxlY3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz47XG4gIH0gZWxzZSBpZiAoYXVkaW9BbGxvd2VkID09PSBmYWxzZSkge1xuICAgIGJvZHkgPSA8RXJyb3JCb3hcbiAgICAgIHRpdGxlPXt0KFwic3RlcHMuYXVkaW8ubm90LWFsbG93ZWQtdGl0bGVcIil9XG4gICAgICBib2R5PXt0KFwic3RlcHMuYXVkaW8ubm90LWFsbG93ZWQtdGV4dFwiKX1cbiAgICAvPjtcbiAgfSBlbHNlIGlmIChhdWRpb1VuZXhwZWN0ZWRFbmQgPT09IHRydWUpIHtcbiAgICBib2R5ID0gPEVycm9yQm94IGJvZHk9e3QoXCJlcnJvci1sb3N0LWF1ZGlvLXN0cmVhbVwiKX0gLz47XG4gIH0gZWxzZSB7XG4gICAgYm9keSA9IDxTcGlubmVyIHNpemU9ezc1fSAvPjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIG1heFdpZHRoOiA4NTAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgICBib3JkZXJSYWRpdXM6IDE2LFxuICAgICAgYm94U2hhZG93OiBpc0hpZ2hDb250cmFzdCA/IFwibm9uZVwiIDogXCIwIDRweCAxNnB4IHZhcigtLXNoYWRvdy1jb2xvcilcIixcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbiAgICAgIHBhZGRpbmc6IDI0LFxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgIG1heEhlaWdodDogXCI0MDBweFwiLFxuICAgICAgZ2FwOiAxNixcbiAgICB9fT5cbiAgICAgIHtib2R5fVxuICAgIDwvZGl2PlxuICApO1xufTtcblxudHlwZSBBdWRpb1Zpc3VhbHppYXRpb25Qcm9wcyA9IHtcbiAgc3RyZWFtOiBNZWRpYVN0cmVhbTtcbn07XG5cbmNvbnN0IEF1ZGlvVmlzdWFsemlhdGlvbjogUmVhY3QuRkM8QXVkaW9WaXN1YWx6aWF0aW9uUHJvcHM+ID0gKHsgc3RyZWFtIH0pID0+IHtcbiAgY29uc3QgaXNEYXJrID0gdXNlQ29sb3JTY2hlbWUoKS5zY2hlbWUgPT09IFwiZGFya1wiO1xuICBjb25zdCBjYW52YXNSZWYgPSB1c2VSZWY8SFRNTENhbnZhc0VsZW1lbnQ+KG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgY2FudmFzID0gY2FudmFzUmVmLmN1cnJlbnQ7XG4gICAgaWYgKGNhbnZhcykge1xuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgIGlmIChjdHggPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZ2V0IDJEIGNvbnRleHQgZm9yIGNhbnZhc1wiKTtcbiAgICAgIH1cbiAgICAgIGN0eC5saW5lV2lkdGggPSAyO1xuXG4gICAgICAvLyBXZSB1c2UgYC0tY29sb3ItYWNjZW50OWAgaW4gbGlnaHQgbW9kZSwgYnV0IGhhdmUgdG8gaGFyZCBjb2RlIGl0IGhlcmUuXG4gICAgICAvLyBJbiBkYXJrIG1vZGUsIHdlIHVzZSB0aGUgdHJhbmRpdGlvbmFsIHllbGxvdyBhcyBpdCBqdXN0IGxvb2tzIGJldHRlci5cbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGlzRGFyayA/IFwiI2YxYzQwZlwiIDogXCIjMDQ0YTgxXCI7XG5cbiAgICAgIGNvbnN0IGF1ZGlvQ29udGV4dCA9IG5ldyB3aW5kb3cuQXVkaW9Db250ZXh0KCk7XG4gICAgICBjb25zdCBzb3VyY2UgPSBhdWRpb0NvbnRleHQuY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2Uoc3RyZWFtKTtcbiAgICAgIGNvbnN0IHNjb3BlID0gbmV3IE9zY2lsbG9zY29wZShzb3VyY2UsIHsgZmZ0U2l6ZTogMTAyNCB9KTtcbiAgICAgIHNjb3BlLmFuaW1hdGUoY3R4KTtcblxuICAgICAgcmV0dXJuICgpID0+IHNjb3BlLnN0b3AoKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHt9O1xuICB9LCBbc3RyZWFtLCBpc0RhcmtdKTtcblxuICByZXR1cm4gKFxuICAgIDxjYW52YXNcbiAgICAgIHJlZj17Y2FudmFzUmVmfVxuICAgICAgd2lkdGg9XCI4MDBweFwiXG4gICAgICBoZWlnaHQ9XCIyMDBweFwiXG4gICAgICBjc3M9e3tcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBoZWlnaHQ6IFwibWluKDIwMHB4LCAyMHZoKVwiLFxuICAgICAgICBmbGV4OiBcIjEgMCA3MHB4XCIsXG4gICAgICB9fVxuICAgIC8+XG4gICk7XG59O1xuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref2 =  false ? 0 : {\n  name: \"1nnih2x-body\",\n  styles: \"flex:1 1;min-width:50px;label:body;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2F1ZGlvLXNldHVwL21pYy1wcmV2aWV3LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrRVUiLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvYXVkaW8tc2V0dXAvbWljLXByZXZpZXcudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VJZCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgT3NjaWxsb3Njb3BlIGZyb20gXCJvc2NpbGxvc2NvcGVcIjtcbmltcG9ydCB7IFNwaW5uZXIsIHVzZUNvbG9yU2NoZW1lIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcblxuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVN0dWRpb1N0YXRlIH0gZnJvbSBcIi4uLy4uL3N0dWRpby1zdGF0ZVwiO1xuaW1wb3J0IHsgc3RhcnRBdWRpb0NhcHR1cmUsIHN0b3BBdWRpb0NhcHR1cmUgfSBmcm9tIFwiLi4vLi4vY2FwdHVyZXJcIjtcbmltcG9ydCB7IGdldFVuaXF1ZURldmljZXMsIENPTE9SUyB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBMQVNUX0FVRElPX0RFVklDRV9LRVkgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgRXJyb3JCb3ggfSBmcm9tIFwiLi4vLi4vdWkvRXJyb3JCb3hcIjtcbmltcG9ydCB7IFNlbGVjdCB9IGZyb20gXCIuLi8uLi91aS9TZWxlY3RcIjtcblxuXG4vLyBPbmNlIHRoZSBtaWNyb3Bob25lIGlzIHNlbGVjdGVkLCB0aGlzIGlzIHNob3duLiBSZW5kZXJzIGFuXG4vLyBhdWRpby12aXN1YWxpemF0aW9uIGFuZCBhIGRldmljZS1zZWxlY3Rvci5cbmV4cG9ydCBjb25zdCBNaWNyb3Bob25lUHJldmlldzogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBzdGF0ZSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IHsgYXVkaW9TdHJlYW0sIGF1ZGlvQWxsb3dlZCwgYXVkaW9VbmV4cGVjdGVkRW5kIH0gPSBzdGF0ZTtcblxuICAvLyBHZXQgY3VycmVudCBkZXZpY2UgSUQgYW5kIGFsbCBwb3NzaWJsZSBhdWRpbyBpbnB1dCBkZXZpY2VzLlxuICBjb25zdCBjdXJyZW50RGV2aWNlSWQgPSBhdWRpb1N0cmVhbT8uZ2V0QXVkaW9UcmFja3MoKT8uWzBdPy5nZXRTZXR0aW5ncygpPy5kZXZpY2VJZDtcbiAgY29uc3QgZGV2aWNlcyA9IGdldFVuaXF1ZURldmljZXMoc3RhdGUubWVkaWFEZXZpY2VzLCBcImF1ZGlvaW5wdXRcIik7XG5cbiAgLy8gV2Ugd3JpdGUgdGhlIGN1cnJlbnRseSB1c2VkIGRldmljZSBJRCB0byBsb2NhbCBzdG9yYWdlIHRvIHJlbWVtYmVyIGl0XG4gIC8vIGJldHdlZW4gdmlzaXRzIG9mIFN0dWRpby5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoY3VycmVudERldmljZUlkKSB7XG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oTEFTVF9BVURJT19ERVZJQ0VfS0VZLCBjdXJyZW50RGV2aWNlSWQpO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgY2hhbmdlRGV2aWNlID0gYXN5bmMgKGRldmljZUlkOiBzdHJpbmcpID0+IHtcbiAgICAvLyBUaGUgc3RyZWFtIGlzIG9ubHkgZmFsc3kgaWYgaXQgdW5leHBlY3RlZGx5IGVuZGVkLlxuICAgIGlmIChhdWRpb1N0cmVhbSkge1xuICAgICAgc3RvcEF1ZGlvQ2FwdHVyZShhdWRpb1N0cmVhbSwgZGlzcGF0Y2gpO1xuICAgIH1cblxuICAgIGF3YWl0IHN0YXJ0QXVkaW9DYXB0dXJlKGRpc3BhdGNoLCB7IGV4YWN0OiBkZXZpY2VJZCB9KTtcbiAgfTtcblxuICBjb25zdCBzZWxlY3RJZCA9IHVzZUlkKCk7XG4gIGxldCBib2R5OiBKU1guRWxlbWVudCA9IDw+PC8+O1xuICBpZiAoYXVkaW9TdHJlYW0pIHtcbiAgICBib2R5ID0gPD5cbiAgICAgIDxBdWRpb1Zpc3VhbHppYXRpb24gc3RyZWFtPXthdWRpb1N0cmVhbX0gLz5cbiAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICB3aWR0aDogXCI4MCVcIixcbiAgICAgICAgbWluV2lkdGg6IFwiMjQwcHhcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgIH19PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj17c2VsZWN0SWR9IGNzcz17e1xuICAgICAgICAgIG1hcmdpblJpZ2h0OiAxNixcbiAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAgZm9udFdlaWdodDogNzAwLFxuICAgICAgICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDcwLFxuICAgICAgICB9fT57dChcInN0ZXBzLmF1ZGlvLmRldmljZVwiKX08L2xhYmVsPlxuICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgaWQ9e3NlbGVjdElkfVxuICAgICAgICAgIHZhbHVlPXtjdXJyZW50RGV2aWNlSWR9XG4gICAgICAgICAgb25DaGFuZ2U9e2UgPT4gY2hhbmdlRGV2aWNlKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGZsZXg6IFwiMSAxXCIsXG4gICAgICAgICAgICBtaW5XaWR0aDogNTAsXG5cbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge2RldmljZXMubWFwKChkLCBpKSA9PiAoXG4gICAgICAgICAgICA8b3B0aW9uIGtleT17aX0gdmFsdWU9e2QuZGV2aWNlSWR9PntkLmxhYmVsID8/IFwidW5sYWJlbGVkIG1pY3JvcGhvbmVcIn08L29wdGlvbj5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9TZWxlY3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz47XG4gIH0gZWxzZSBpZiAoYXVkaW9BbGxvd2VkID09PSBmYWxzZSkge1xuICAgIGJvZHkgPSA8RXJyb3JCb3hcbiAgICAgIHRpdGxlPXt0KFwic3RlcHMuYXVkaW8ubm90LWFsbG93ZWQtdGl0bGVcIil9XG4gICAgICBib2R5PXt0KFwic3RlcHMuYXVkaW8ubm90LWFsbG93ZWQtdGV4dFwiKX1cbiAgICAvPjtcbiAgfSBlbHNlIGlmIChhdWRpb1VuZXhwZWN0ZWRFbmQgPT09IHRydWUpIHtcbiAgICBib2R5ID0gPEVycm9yQm94IGJvZHk9e3QoXCJlcnJvci1sb3N0LWF1ZGlvLXN0cmVhbVwiKX0gLz47XG4gIH0gZWxzZSB7XG4gICAgYm9keSA9IDxTcGlubmVyIHNpemU9ezc1fSAvPjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIG1heFdpZHRoOiA4NTAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgICBib3JkZXJSYWRpdXM6IDE2LFxuICAgICAgYm94U2hhZG93OiBpc0hpZ2hDb250cmFzdCA/IFwibm9uZVwiIDogXCIwIDRweCAxNnB4IHZhcigtLXNoYWRvdy1jb2xvcilcIixcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbiAgICAgIHBhZGRpbmc6IDI0LFxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgIG1heEhlaWdodDogXCI0MDBweFwiLFxuICAgICAgZ2FwOiAxNixcbiAgICB9fT5cbiAgICAgIHtib2R5fVxuICAgIDwvZGl2PlxuICApO1xufTtcblxudHlwZSBBdWRpb1Zpc3VhbHppYXRpb25Qcm9wcyA9IHtcbiAgc3RyZWFtOiBNZWRpYVN0cmVhbTtcbn07XG5cbmNvbnN0IEF1ZGlvVmlzdWFsemlhdGlvbjogUmVhY3QuRkM8QXVkaW9WaXN1YWx6aWF0aW9uUHJvcHM+ID0gKHsgc3RyZWFtIH0pID0+IHtcbiAgY29uc3QgaXNEYXJrID0gdXNlQ29sb3JTY2hlbWUoKS5zY2hlbWUgPT09IFwiZGFya1wiO1xuICBjb25zdCBjYW52YXNSZWYgPSB1c2VSZWY8SFRNTENhbnZhc0VsZW1lbnQ+KG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgY2FudmFzID0gY2FudmFzUmVmLmN1cnJlbnQ7XG4gICAgaWYgKGNhbnZhcykge1xuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgIGlmIChjdHggPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZ2V0IDJEIGNvbnRleHQgZm9yIGNhbnZhc1wiKTtcbiAgICAgIH1cbiAgICAgIGN0eC5saW5lV2lkdGggPSAyO1xuXG4gICAgICAvLyBXZSB1c2UgYC0tY29sb3ItYWNjZW50OWAgaW4gbGlnaHQgbW9kZSwgYnV0IGhhdmUgdG8gaGFyZCBjb2RlIGl0IGhlcmUuXG4gICAgICAvLyBJbiBkYXJrIG1vZGUsIHdlIHVzZSB0aGUgdHJhbmRpdGlvbmFsIHllbGxvdyBhcyBpdCBqdXN0IGxvb2tzIGJldHRlci5cbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGlzRGFyayA/IFwiI2YxYzQwZlwiIDogXCIjMDQ0YTgxXCI7XG5cbiAgICAgIGNvbnN0IGF1ZGlvQ29udGV4dCA9IG5ldyB3aW5kb3cuQXVkaW9Db250ZXh0KCk7XG4gICAgICBjb25zdCBzb3VyY2UgPSBhdWRpb0NvbnRleHQuY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2Uoc3RyZWFtKTtcbiAgICAgIGNvbnN0IHNjb3BlID0gbmV3IE9zY2lsbG9zY29wZShzb3VyY2UsIHsgZmZ0U2l6ZTogMTAyNCB9KTtcbiAgICAgIHNjb3BlLmFuaW1hdGUoY3R4KTtcblxuICAgICAgcmV0dXJuICgpID0+IHNjb3BlLnN0b3AoKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHt9O1xuICB9LCBbc3RyZWFtLCBpc0RhcmtdKTtcblxuICByZXR1cm4gKFxuICAgIDxjYW52YXNcbiAgICAgIHJlZj17Y2FudmFzUmVmfVxuICAgICAgd2lkdGg9XCI4MDBweFwiXG4gICAgICBoZWlnaHQ9XCIyMDBweFwiXG4gICAgICBjc3M9e3tcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBoZWlnaHQ6IFwibWluKDIwMHB4LCAyMHZoKVwiLFxuICAgICAgICBmbGV4OiBcIjEgMCA3MHB4XCIsXG4gICAgICB9fVxuICAgIC8+XG4gICk7XG59O1xuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst MicrophonePreview = () => {\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_3__.useColorScheme)();\n  const dispatch = (0,_studio_state__WEBPACK_IMPORTED_MODULE_4__.useDispatch)();\n  const state = (0,_studio_state__WEBPACK_IMPORTED_MODULE_4__.useStudioState)();\n  const {\n    audioStream,\n    audioAllowed,\n    audioUnexpectedEnd\n  } = state;\n\n  // Get current device ID and all possible audio input devices.\n  const currentDeviceId = audioStream?.getAudioTracks()?.[0]?.getSettings()?.deviceId;\n  const devices = (0,_util__WEBPACK_IMPORTED_MODULE_6__.getUniqueDevices)(state.mediaDevices, \"audioinput\");\n\n  // We write the currently used device ID to local storage to remember it\n  // between visits of Studio.\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (currentDeviceId) {\n      window.localStorage.setItem(___WEBPACK_IMPORTED_MODULE_7__.LAST_AUDIO_DEVICE_KEY, currentDeviceId);\n    }\n  });\n  const changeDevice = async deviceId => {\n    // The stream is only falsy if it unexpectedly ended.\n    if (audioStream) {\n      (0,_capturer__WEBPACK_IMPORTED_MODULE_5__.stopAudioCapture)(audioStream, dispatch);\n    }\n    await (0,_capturer__WEBPACK_IMPORTED_MODULE_5__.startAudioCapture)(dispatch, {\n      exact: deviceId\n    });\n  };\n  const selectId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n  let body = (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {});\n  if (audioStream) {\n    body = (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n      children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(AudioVisualziation, {\n        stream: audioStream\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n        css: _ref,\n        children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"label\", {\n          htmlFor: selectId,\n          css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n            marginRight: 16,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            fontWeight: 700,\n            color: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral70\n          },  false ? 0 : \";label:body;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2F1ZGlvLXNldHVwL21pYy1wcmV2aWV3LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzRGtDIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2F1ZGlvLXNldHVwL21pYy1wcmV2aWV3LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlSWQsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IE9zY2lsbG9zY29wZSBmcm9tIFwib3NjaWxsb3Njb3BlXCI7XG5pbXBvcnQgeyBTcGlubmVyLCB1c2VDb2xvclNjaGVtZSB9IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTdHVkaW9TdGF0ZSB9IGZyb20gXCIuLi8uLi9zdHVkaW8tc3RhdGVcIjtcbmltcG9ydCB7IHN0YXJ0QXVkaW9DYXB0dXJlLCBzdG9wQXVkaW9DYXB0dXJlIH0gZnJvbSBcIi4uLy4uL2NhcHR1cmVyXCI7XG5pbXBvcnQgeyBnZXRVbmlxdWVEZXZpY2VzLCBDT0xPUlMgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgTEFTVF9BVURJT19ERVZJQ0VfS0VZIH0gZnJvbSBcIi5cIjtcbmltcG9ydCB7IEVycm9yQm94IH0gZnJvbSBcIi4uLy4uL3VpL0Vycm9yQm94XCI7XG5pbXBvcnQgeyBTZWxlY3QgfSBmcm9tIFwiLi4vLi4vdWkvU2VsZWN0XCI7XG5cblxuLy8gT25jZSB0aGUgbWljcm9waG9uZSBpcyBzZWxlY3RlZCwgdGhpcyBpcyBzaG93bi4gUmVuZGVycyBhblxuLy8gYXVkaW8tdmlzdWFsaXphdGlvbiBhbmQgYSBkZXZpY2Utc2VsZWN0b3IuXG5leHBvcnQgY29uc3QgTWljcm9waG9uZVByZXZpZXc6IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IHsgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3Qgc3RhdGUgPSB1c2VTdHVkaW9TdGF0ZSgpO1xuICBjb25zdCB7IGF1ZGlvU3RyZWFtLCBhdWRpb0FsbG93ZWQsIGF1ZGlvVW5leHBlY3RlZEVuZCB9ID0gc3RhdGU7XG5cbiAgLy8gR2V0IGN1cnJlbnQgZGV2aWNlIElEIGFuZCBhbGwgcG9zc2libGUgYXVkaW8gaW5wdXQgZGV2aWNlcy5cbiAgY29uc3QgY3VycmVudERldmljZUlkID0gYXVkaW9TdHJlYW0/LmdldEF1ZGlvVHJhY2tzKCk/LlswXT8uZ2V0U2V0dGluZ3MoKT8uZGV2aWNlSWQ7XG4gIGNvbnN0IGRldmljZXMgPSBnZXRVbmlxdWVEZXZpY2VzKHN0YXRlLm1lZGlhRGV2aWNlcywgXCJhdWRpb2lucHV0XCIpO1xuXG4gIC8vIFdlIHdyaXRlIHRoZSBjdXJyZW50bHkgdXNlZCBkZXZpY2UgSUQgdG8gbG9jYWwgc3RvcmFnZSB0byByZW1lbWJlciBpdFxuICAvLyBiZXR3ZWVuIHZpc2l0cyBvZiBTdHVkaW8uXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGN1cnJlbnREZXZpY2VJZCkge1xuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKExBU1RfQVVESU9fREVWSUNFX0tFWSwgY3VycmVudERldmljZUlkKTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IGNoYW5nZURldmljZSA9IGFzeW5jIChkZXZpY2VJZDogc3RyaW5nKSA9PiB7XG4gICAgLy8gVGhlIHN0cmVhbSBpcyBvbmx5IGZhbHN5IGlmIGl0IHVuZXhwZWN0ZWRseSBlbmRlZC5cbiAgICBpZiAoYXVkaW9TdHJlYW0pIHtcbiAgICAgIHN0b3BBdWRpb0NhcHR1cmUoYXVkaW9TdHJlYW0sIGRpc3BhdGNoKTtcbiAgICB9XG5cbiAgICBhd2FpdCBzdGFydEF1ZGlvQ2FwdHVyZShkaXNwYXRjaCwgeyBleGFjdDogZGV2aWNlSWQgfSk7XG4gIH07XG5cbiAgY29uc3Qgc2VsZWN0SWQgPSB1c2VJZCgpO1xuICBsZXQgYm9keTogSlNYLkVsZW1lbnQgPSA8PjwvPjtcbiAgaWYgKGF1ZGlvU3RyZWFtKSB7XG4gICAgYm9keSA9IDw+XG4gICAgICA8QXVkaW9WaXN1YWx6aWF0aW9uIHN0cmVhbT17YXVkaW9TdHJlYW19IC8+XG4gICAgICA8ZGl2IGNzcz17e1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgd2lkdGg6IFwiODAlXCIsXG4gICAgICAgIG1pbldpZHRoOiBcIjI0MHB4XCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICB9fT5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9e3NlbGVjdElkfSBjc3M9e3tcbiAgICAgICAgICBtYXJnaW5SaWdodDogMTYsXG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgIGZvbnRXZWlnaHQ6IDcwMCxcbiAgICAgICAgICBjb2xvcjogQ09MT1JTLm5ldXRyYWw3MCxcbiAgICAgICAgfX0+e3QoXCJzdGVwcy5hdWRpby5kZXZpY2VcIil9PC9sYWJlbD5cbiAgICAgICAgPFNlbGVjdFxuICAgICAgICAgIGlkPXtzZWxlY3RJZH1cbiAgICAgICAgICB2YWx1ZT17Y3VycmVudERldmljZUlkfVxuICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IGNoYW5nZURldmljZShlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBmbGV4OiBcIjEgMVwiLFxuICAgICAgICAgICAgbWluV2lkdGg6IDUwLFxuXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHtkZXZpY2VzLm1hcCgoZCwgaSkgPT4gKFxuICAgICAgICAgICAgPG9wdGlvbiBrZXk9e2l9IHZhbHVlPXtkLmRldmljZUlkfT57ZC5sYWJlbCA/PyBcInVubGFiZWxlZCBtaWNyb3Bob25lXCJ9PC9vcHRpb24+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvU2VsZWN0PlxuICAgICAgPC9kaXY+XG4gICAgPC8+O1xuICB9IGVsc2UgaWYgKGF1ZGlvQWxsb3dlZCA9PT0gZmFsc2UpIHtcbiAgICBib2R5ID0gPEVycm9yQm94XG4gICAgICB0aXRsZT17dChcInN0ZXBzLmF1ZGlvLm5vdC1hbGxvd2VkLXRpdGxlXCIpfVxuICAgICAgYm9keT17dChcInN0ZXBzLmF1ZGlvLm5vdC1hbGxvd2VkLXRleHRcIil9XG4gICAgLz47XG4gIH0gZWxzZSBpZiAoYXVkaW9VbmV4cGVjdGVkRW5kID09PSB0cnVlKSB7XG4gICAgYm9keSA9IDxFcnJvckJveCBib2R5PXt0KFwiZXJyb3ItbG9zdC1hdWRpby1zdHJlYW1cIil9IC8+O1xuICB9IGVsc2Uge1xuICAgIGJvZHkgPSA8U3Bpbm5lciBzaXplPXs3NX0gLz47XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7XG4gICAgICBtYXhXaWR0aDogODUwLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgYm9yZGVyUmFkaXVzOiAxNixcbiAgICAgIGJveFNoYWRvdzogaXNIaWdoQ29udHJhc3QgPyBcIm5vbmVcIiA6IFwiMCA0cHggMTZweCB2YXIoLS1zaGFkb3ctY29sb3IpXCIsXG4gICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG4gICAgICBwYWRkaW5nOiAyNCxcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICBtYXhIZWlnaHQ6IFwiNDAwcHhcIixcbiAgICAgIGdhcDogMTYsXG4gICAgfX0+XG4gICAgICB7Ym9keX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbnR5cGUgQXVkaW9WaXN1YWx6aWF0aW9uUHJvcHMgPSB7XG4gIHN0cmVhbTogTWVkaWFTdHJlYW07XG59O1xuXG5jb25zdCBBdWRpb1Zpc3VhbHppYXRpb246IFJlYWN0LkZDPEF1ZGlvVmlzdWFsemlhdGlvblByb3BzPiA9ICh7IHN0cmVhbSB9KSA9PiB7XG4gIGNvbnN0IGlzRGFyayA9IHVzZUNvbG9yU2NoZW1lKCkuc2NoZW1lID09PSBcImRhcmtcIjtcbiAgY29uc3QgY2FudmFzUmVmID0gdXNlUmVmPEhUTUxDYW52YXNFbGVtZW50PihudWxsKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNhbnZhc1JlZi5jdXJyZW50O1xuICAgIGlmIChjYW52YXMpIHtcbiAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICBpZiAoY3R4ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGdldCAyRCBjb250ZXh0IGZvciBjYW52YXNcIik7XG4gICAgICB9XG4gICAgICBjdHgubGluZVdpZHRoID0gMjtcblxuICAgICAgLy8gV2UgdXNlIGAtLWNvbG9yLWFjY2VudDlgIGluIGxpZ2h0IG1vZGUsIGJ1dCBoYXZlIHRvIGhhcmQgY29kZSBpdCBoZXJlLlxuICAgICAgLy8gSW4gZGFyayBtb2RlLCB3ZSB1c2UgdGhlIHRyYW5kaXRpb25hbCB5ZWxsb3cgYXMgaXQganVzdCBsb29rcyBiZXR0ZXIuXG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBpc0RhcmsgPyBcIiNmMWM0MGZcIiA6IFwiIzA0NGE4MVwiO1xuXG4gICAgICBjb25zdCBhdWRpb0NvbnRleHQgPSBuZXcgd2luZG93LkF1ZGlvQ29udGV4dCgpO1xuICAgICAgY29uc3Qgc291cmNlID0gYXVkaW9Db250ZXh0LmNyZWF0ZU1lZGlhU3RyZWFtU291cmNlKHN0cmVhbSk7XG4gICAgICBjb25zdCBzY29wZSA9IG5ldyBPc2NpbGxvc2NvcGUoc291cmNlLCB7IGZmdFNpemU6IDEwMjQgfSk7XG4gICAgICBzY29wZS5hbmltYXRlKGN0eCk7XG5cbiAgICAgIHJldHVybiAoKSA9PiBzY29wZS5zdG9wKCk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7fTtcbiAgfSwgW3N0cmVhbSwgaXNEYXJrXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Y2FudmFzXG4gICAgICByZWY9e2NhbnZhc1JlZn1cbiAgICAgIHdpZHRoPVwiODAwcHhcIlxuICAgICAgaGVpZ2h0PVwiMjAwcHhcIlxuICAgICAgY3NzPXt7XG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIm1pbigyMDBweCwgMjB2aClcIixcbiAgICAgICAgZmxleDogXCIxIDAgNzBweFwiLFxuICAgICAgfX1cbiAgICAvPlxuICApO1xufTtcbiJdfQ== */\"),\n          children: t(\"steps.audio.device\")\n        }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_ui_Select__WEBPACK_IMPORTED_MODULE_9__.Select, {\n          id: selectId,\n          value: currentDeviceId,\n          onChange: e => changeDevice(e.target.value),\n          css: _ref2,\n          children: devices.map((d, i) => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"option\", {\n            value: d.deviceId,\n            children: d.label ?? \"unlabeled microphone\"\n          }, i))\n        })]\n      })]\n    });\n  } else if (audioAllowed === false) {\n    body = (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_ui_ErrorBox__WEBPACK_IMPORTED_MODULE_8__.ErrorBox, {\n      title: t(\"steps.audio.not-allowed-title\"),\n      body: t(\"steps.audio.not-allowed-text\")\n    });\n  } else if (audioUnexpectedEnd === true) {\n    body = (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_ui_ErrorBox__WEBPACK_IMPORTED_MODULE_8__.ErrorBox, {\n      body: t(\"error-lost-audio-stream\")\n    });\n  } else {\n    body = (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_3__.Spinner, {\n      size: 75\n    });\n  }\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n      maxWidth: 850,\n      backgroundColor: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral05,\n      borderRadius: 16,\n      boxShadow: isHighContrast ? \"none\" : \"0 4px 16px var(--shadow-color)\",\n      width: \"100%\",\n      margin: \"0 auto\",\n      padding: 24,\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      maxHeight: \"400px\",\n      gap: 16\n    },  false ? 0 : \";label:MicrophonePreview;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2F1ZGlvLXNldHVwL21pYy1wcmV2aWV3LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwRlMiLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvYXVkaW8tc2V0dXAvbWljLXByZXZpZXcudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VJZCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgT3NjaWxsb3Njb3BlIGZyb20gXCJvc2NpbGxvc2NvcGVcIjtcbmltcG9ydCB7IFNwaW5uZXIsIHVzZUNvbG9yU2NoZW1lIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcblxuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVN0dWRpb1N0YXRlIH0gZnJvbSBcIi4uLy4uL3N0dWRpby1zdGF0ZVwiO1xuaW1wb3J0IHsgc3RhcnRBdWRpb0NhcHR1cmUsIHN0b3BBdWRpb0NhcHR1cmUgfSBmcm9tIFwiLi4vLi4vY2FwdHVyZXJcIjtcbmltcG9ydCB7IGdldFVuaXF1ZURldmljZXMsIENPTE9SUyB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBMQVNUX0FVRElPX0RFVklDRV9LRVkgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgRXJyb3JCb3ggfSBmcm9tIFwiLi4vLi4vdWkvRXJyb3JCb3hcIjtcbmltcG9ydCB7IFNlbGVjdCB9IGZyb20gXCIuLi8uLi91aS9TZWxlY3RcIjtcblxuXG4vLyBPbmNlIHRoZSBtaWNyb3Bob25lIGlzIHNlbGVjdGVkLCB0aGlzIGlzIHNob3duLiBSZW5kZXJzIGFuXG4vLyBhdWRpby12aXN1YWxpemF0aW9uIGFuZCBhIGRldmljZS1zZWxlY3Rvci5cbmV4cG9ydCBjb25zdCBNaWNyb3Bob25lUHJldmlldzogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBzdGF0ZSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IHsgYXVkaW9TdHJlYW0sIGF1ZGlvQWxsb3dlZCwgYXVkaW9VbmV4cGVjdGVkRW5kIH0gPSBzdGF0ZTtcblxuICAvLyBHZXQgY3VycmVudCBkZXZpY2UgSUQgYW5kIGFsbCBwb3NzaWJsZSBhdWRpbyBpbnB1dCBkZXZpY2VzLlxuICBjb25zdCBjdXJyZW50RGV2aWNlSWQgPSBhdWRpb1N0cmVhbT8uZ2V0QXVkaW9UcmFja3MoKT8uWzBdPy5nZXRTZXR0aW5ncygpPy5kZXZpY2VJZDtcbiAgY29uc3QgZGV2aWNlcyA9IGdldFVuaXF1ZURldmljZXMoc3RhdGUubWVkaWFEZXZpY2VzLCBcImF1ZGlvaW5wdXRcIik7XG5cbiAgLy8gV2Ugd3JpdGUgdGhlIGN1cnJlbnRseSB1c2VkIGRldmljZSBJRCB0byBsb2NhbCBzdG9yYWdlIHRvIHJlbWVtYmVyIGl0XG4gIC8vIGJldHdlZW4gdmlzaXRzIG9mIFN0dWRpby5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoY3VycmVudERldmljZUlkKSB7XG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oTEFTVF9BVURJT19ERVZJQ0VfS0VZLCBjdXJyZW50RGV2aWNlSWQpO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgY2hhbmdlRGV2aWNlID0gYXN5bmMgKGRldmljZUlkOiBzdHJpbmcpID0+IHtcbiAgICAvLyBUaGUgc3RyZWFtIGlzIG9ubHkgZmFsc3kgaWYgaXQgdW5leHBlY3RlZGx5IGVuZGVkLlxuICAgIGlmIChhdWRpb1N0cmVhbSkge1xuICAgICAgc3RvcEF1ZGlvQ2FwdHVyZShhdWRpb1N0cmVhbSwgZGlzcGF0Y2gpO1xuICAgIH1cblxuICAgIGF3YWl0IHN0YXJ0QXVkaW9DYXB0dXJlKGRpc3BhdGNoLCB7IGV4YWN0OiBkZXZpY2VJZCB9KTtcbiAgfTtcblxuICBjb25zdCBzZWxlY3RJZCA9IHVzZUlkKCk7XG4gIGxldCBib2R5OiBKU1guRWxlbWVudCA9IDw+PC8+O1xuICBpZiAoYXVkaW9TdHJlYW0pIHtcbiAgICBib2R5ID0gPD5cbiAgICAgIDxBdWRpb1Zpc3VhbHppYXRpb24gc3RyZWFtPXthdWRpb1N0cmVhbX0gLz5cbiAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICB3aWR0aDogXCI4MCVcIixcbiAgICAgICAgbWluV2lkdGg6IFwiMjQwcHhcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgIH19PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj17c2VsZWN0SWR9IGNzcz17e1xuICAgICAgICAgIG1hcmdpblJpZ2h0OiAxNixcbiAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAgZm9udFdlaWdodDogNzAwLFxuICAgICAgICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDcwLFxuICAgICAgICB9fT57dChcInN0ZXBzLmF1ZGlvLmRldmljZVwiKX08L2xhYmVsPlxuICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgaWQ9e3NlbGVjdElkfVxuICAgICAgICAgIHZhbHVlPXtjdXJyZW50RGV2aWNlSWR9XG4gICAgICAgICAgb25DaGFuZ2U9e2UgPT4gY2hhbmdlRGV2aWNlKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGZsZXg6IFwiMSAxXCIsXG4gICAgICAgICAgICBtaW5XaWR0aDogNTAsXG5cbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge2RldmljZXMubWFwKChkLCBpKSA9PiAoXG4gICAgICAgICAgICA8b3B0aW9uIGtleT17aX0gdmFsdWU9e2QuZGV2aWNlSWR9PntkLmxhYmVsID8/IFwidW5sYWJlbGVkIG1pY3JvcGhvbmVcIn08L29wdGlvbj5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9TZWxlY3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz47XG4gIH0gZWxzZSBpZiAoYXVkaW9BbGxvd2VkID09PSBmYWxzZSkge1xuICAgIGJvZHkgPSA8RXJyb3JCb3hcbiAgICAgIHRpdGxlPXt0KFwic3RlcHMuYXVkaW8ubm90LWFsbG93ZWQtdGl0bGVcIil9XG4gICAgICBib2R5PXt0KFwic3RlcHMuYXVkaW8ubm90LWFsbG93ZWQtdGV4dFwiKX1cbiAgICAvPjtcbiAgfSBlbHNlIGlmIChhdWRpb1VuZXhwZWN0ZWRFbmQgPT09IHRydWUpIHtcbiAgICBib2R5ID0gPEVycm9yQm94IGJvZHk9e3QoXCJlcnJvci1sb3N0LWF1ZGlvLXN0cmVhbVwiKX0gLz47XG4gIH0gZWxzZSB7XG4gICAgYm9keSA9IDxTcGlubmVyIHNpemU9ezc1fSAvPjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIG1heFdpZHRoOiA4NTAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgICBib3JkZXJSYWRpdXM6IDE2LFxuICAgICAgYm94U2hhZG93OiBpc0hpZ2hDb250cmFzdCA/IFwibm9uZVwiIDogXCIwIDRweCAxNnB4IHZhcigtLXNoYWRvdy1jb2xvcilcIixcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbiAgICAgIHBhZGRpbmc6IDI0LFxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgIG1heEhlaWdodDogXCI0MDBweFwiLFxuICAgICAgZ2FwOiAxNixcbiAgICB9fT5cbiAgICAgIHtib2R5fVxuICAgIDwvZGl2PlxuICApO1xufTtcblxudHlwZSBBdWRpb1Zpc3VhbHppYXRpb25Qcm9wcyA9IHtcbiAgc3RyZWFtOiBNZWRpYVN0cmVhbTtcbn07XG5cbmNvbnN0IEF1ZGlvVmlzdWFsemlhdGlvbjogUmVhY3QuRkM8QXVkaW9WaXN1YWx6aWF0aW9uUHJvcHM+ID0gKHsgc3RyZWFtIH0pID0+IHtcbiAgY29uc3QgaXNEYXJrID0gdXNlQ29sb3JTY2hlbWUoKS5zY2hlbWUgPT09IFwiZGFya1wiO1xuICBjb25zdCBjYW52YXNSZWYgPSB1c2VSZWY8SFRNTENhbnZhc0VsZW1lbnQ+KG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgY2FudmFzID0gY2FudmFzUmVmLmN1cnJlbnQ7XG4gICAgaWYgKGNhbnZhcykge1xuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgIGlmIChjdHggPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZ2V0IDJEIGNvbnRleHQgZm9yIGNhbnZhc1wiKTtcbiAgICAgIH1cbiAgICAgIGN0eC5saW5lV2lkdGggPSAyO1xuXG4gICAgICAvLyBXZSB1c2UgYC0tY29sb3ItYWNjZW50OWAgaW4gbGlnaHQgbW9kZSwgYnV0IGhhdmUgdG8gaGFyZCBjb2RlIGl0IGhlcmUuXG4gICAgICAvLyBJbiBkYXJrIG1vZGUsIHdlIHVzZSB0aGUgdHJhbmRpdGlvbmFsIHllbGxvdyBhcyBpdCBqdXN0IGxvb2tzIGJldHRlci5cbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGlzRGFyayA/IFwiI2YxYzQwZlwiIDogXCIjMDQ0YTgxXCI7XG5cbiAgICAgIGNvbnN0IGF1ZGlvQ29udGV4dCA9IG5ldyB3aW5kb3cuQXVkaW9Db250ZXh0KCk7XG4gICAgICBjb25zdCBzb3VyY2UgPSBhdWRpb0NvbnRleHQuY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2Uoc3RyZWFtKTtcbiAgICAgIGNvbnN0IHNjb3BlID0gbmV3IE9zY2lsbG9zY29wZShzb3VyY2UsIHsgZmZ0U2l6ZTogMTAyNCB9KTtcbiAgICAgIHNjb3BlLmFuaW1hdGUoY3R4KTtcblxuICAgICAgcmV0dXJuICgpID0+IHNjb3BlLnN0b3AoKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHt9O1xuICB9LCBbc3RyZWFtLCBpc0RhcmtdKTtcblxuICByZXR1cm4gKFxuICAgIDxjYW52YXNcbiAgICAgIHJlZj17Y2FudmFzUmVmfVxuICAgICAgd2lkdGg9XCI4MDBweFwiXG4gICAgICBoZWlnaHQ9XCIyMDBweFwiXG4gICAgICBjc3M9e3tcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBoZWlnaHQ6IFwibWluKDIwMHB4LCAyMHZoKVwiLFxuICAgICAgICBmbGV4OiBcIjEgMCA3MHB4XCIsXG4gICAgICB9fVxuICAgIC8+XG4gICk7XG59O1xuIl19 */\"),\n    children: body\n  });\n};\nvar _ref4 =  false ? 0 : {\n  name: \"15zuzw7-AudioVisualziation\",\n  styles: \"width:100%;height:min(200px, 20vh);flex:1 0 70px;label:AudioVisualziation;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2F1ZGlvLXNldHVwL21pYy1wcmV2aWV3LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpSk0iLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvYXVkaW8tc2V0dXAvbWljLXByZXZpZXcudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VJZCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgT3NjaWxsb3Njb3BlIGZyb20gXCJvc2NpbGxvc2NvcGVcIjtcbmltcG9ydCB7IFNwaW5uZXIsIHVzZUNvbG9yU2NoZW1lIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcblxuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVN0dWRpb1N0YXRlIH0gZnJvbSBcIi4uLy4uL3N0dWRpby1zdGF0ZVwiO1xuaW1wb3J0IHsgc3RhcnRBdWRpb0NhcHR1cmUsIHN0b3BBdWRpb0NhcHR1cmUgfSBmcm9tIFwiLi4vLi4vY2FwdHVyZXJcIjtcbmltcG9ydCB7IGdldFVuaXF1ZURldmljZXMsIENPTE9SUyB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBMQVNUX0FVRElPX0RFVklDRV9LRVkgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgRXJyb3JCb3ggfSBmcm9tIFwiLi4vLi4vdWkvRXJyb3JCb3hcIjtcbmltcG9ydCB7IFNlbGVjdCB9IGZyb20gXCIuLi8uLi91aS9TZWxlY3RcIjtcblxuXG4vLyBPbmNlIHRoZSBtaWNyb3Bob25lIGlzIHNlbGVjdGVkLCB0aGlzIGlzIHNob3duLiBSZW5kZXJzIGFuXG4vLyBhdWRpby12aXN1YWxpemF0aW9uIGFuZCBhIGRldmljZS1zZWxlY3Rvci5cbmV4cG9ydCBjb25zdCBNaWNyb3Bob25lUHJldmlldzogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBzdGF0ZSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IHsgYXVkaW9TdHJlYW0sIGF1ZGlvQWxsb3dlZCwgYXVkaW9VbmV4cGVjdGVkRW5kIH0gPSBzdGF0ZTtcblxuICAvLyBHZXQgY3VycmVudCBkZXZpY2UgSUQgYW5kIGFsbCBwb3NzaWJsZSBhdWRpbyBpbnB1dCBkZXZpY2VzLlxuICBjb25zdCBjdXJyZW50RGV2aWNlSWQgPSBhdWRpb1N0cmVhbT8uZ2V0QXVkaW9UcmFja3MoKT8uWzBdPy5nZXRTZXR0aW5ncygpPy5kZXZpY2VJZDtcbiAgY29uc3QgZGV2aWNlcyA9IGdldFVuaXF1ZURldmljZXMoc3RhdGUubWVkaWFEZXZpY2VzLCBcImF1ZGlvaW5wdXRcIik7XG5cbiAgLy8gV2Ugd3JpdGUgdGhlIGN1cnJlbnRseSB1c2VkIGRldmljZSBJRCB0byBsb2NhbCBzdG9yYWdlIHRvIHJlbWVtYmVyIGl0XG4gIC8vIGJldHdlZW4gdmlzaXRzIG9mIFN0dWRpby5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoY3VycmVudERldmljZUlkKSB7XG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oTEFTVF9BVURJT19ERVZJQ0VfS0VZLCBjdXJyZW50RGV2aWNlSWQpO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgY2hhbmdlRGV2aWNlID0gYXN5bmMgKGRldmljZUlkOiBzdHJpbmcpID0+IHtcbiAgICAvLyBUaGUgc3RyZWFtIGlzIG9ubHkgZmFsc3kgaWYgaXQgdW5leHBlY3RlZGx5IGVuZGVkLlxuICAgIGlmIChhdWRpb1N0cmVhbSkge1xuICAgICAgc3RvcEF1ZGlvQ2FwdHVyZShhdWRpb1N0cmVhbSwgZGlzcGF0Y2gpO1xuICAgIH1cblxuICAgIGF3YWl0IHN0YXJ0QXVkaW9DYXB0dXJlKGRpc3BhdGNoLCB7IGV4YWN0OiBkZXZpY2VJZCB9KTtcbiAgfTtcblxuICBjb25zdCBzZWxlY3RJZCA9IHVzZUlkKCk7XG4gIGxldCBib2R5OiBKU1guRWxlbWVudCA9IDw+PC8+O1xuICBpZiAoYXVkaW9TdHJlYW0pIHtcbiAgICBib2R5ID0gPD5cbiAgICAgIDxBdWRpb1Zpc3VhbHppYXRpb24gc3RyZWFtPXthdWRpb1N0cmVhbX0gLz5cbiAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICB3aWR0aDogXCI4MCVcIixcbiAgICAgICAgbWluV2lkdGg6IFwiMjQwcHhcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgIH19PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj17c2VsZWN0SWR9IGNzcz17e1xuICAgICAgICAgIG1hcmdpblJpZ2h0OiAxNixcbiAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAgZm9udFdlaWdodDogNzAwLFxuICAgICAgICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDcwLFxuICAgICAgICB9fT57dChcInN0ZXBzLmF1ZGlvLmRldmljZVwiKX08L2xhYmVsPlxuICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgaWQ9e3NlbGVjdElkfVxuICAgICAgICAgIHZhbHVlPXtjdXJyZW50RGV2aWNlSWR9XG4gICAgICAgICAgb25DaGFuZ2U9e2UgPT4gY2hhbmdlRGV2aWNlKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGZsZXg6IFwiMSAxXCIsXG4gICAgICAgICAgICBtaW5XaWR0aDogNTAsXG5cbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge2RldmljZXMubWFwKChkLCBpKSA9PiAoXG4gICAgICAgICAgICA8b3B0aW9uIGtleT17aX0gdmFsdWU9e2QuZGV2aWNlSWR9PntkLmxhYmVsID8/IFwidW5sYWJlbGVkIG1pY3JvcGhvbmVcIn08L29wdGlvbj5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9TZWxlY3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz47XG4gIH0gZWxzZSBpZiAoYXVkaW9BbGxvd2VkID09PSBmYWxzZSkge1xuICAgIGJvZHkgPSA8RXJyb3JCb3hcbiAgICAgIHRpdGxlPXt0KFwic3RlcHMuYXVkaW8ubm90LWFsbG93ZWQtdGl0bGVcIil9XG4gICAgICBib2R5PXt0KFwic3RlcHMuYXVkaW8ubm90LWFsbG93ZWQtdGV4dFwiKX1cbiAgICAvPjtcbiAgfSBlbHNlIGlmIChhdWRpb1VuZXhwZWN0ZWRFbmQgPT09IHRydWUpIHtcbiAgICBib2R5ID0gPEVycm9yQm94IGJvZHk9e3QoXCJlcnJvci1sb3N0LWF1ZGlvLXN0cmVhbVwiKX0gLz47XG4gIH0gZWxzZSB7XG4gICAgYm9keSA9IDxTcGlubmVyIHNpemU9ezc1fSAvPjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIG1heFdpZHRoOiA4NTAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgICBib3JkZXJSYWRpdXM6IDE2LFxuICAgICAgYm94U2hhZG93OiBpc0hpZ2hDb250cmFzdCA/IFwibm9uZVwiIDogXCIwIDRweCAxNnB4IHZhcigtLXNoYWRvdy1jb2xvcilcIixcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbiAgICAgIHBhZGRpbmc6IDI0LFxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgIG1heEhlaWdodDogXCI0MDBweFwiLFxuICAgICAgZ2FwOiAxNixcbiAgICB9fT5cbiAgICAgIHtib2R5fVxuICAgIDwvZGl2PlxuICApO1xufTtcblxudHlwZSBBdWRpb1Zpc3VhbHppYXRpb25Qcm9wcyA9IHtcbiAgc3RyZWFtOiBNZWRpYVN0cmVhbTtcbn07XG5cbmNvbnN0IEF1ZGlvVmlzdWFsemlhdGlvbjogUmVhY3QuRkM8QXVkaW9WaXN1YWx6aWF0aW9uUHJvcHM+ID0gKHsgc3RyZWFtIH0pID0+IHtcbiAgY29uc3QgaXNEYXJrID0gdXNlQ29sb3JTY2hlbWUoKS5zY2hlbWUgPT09IFwiZGFya1wiO1xuICBjb25zdCBjYW52YXNSZWYgPSB1c2VSZWY8SFRNTENhbnZhc0VsZW1lbnQ+KG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgY2FudmFzID0gY2FudmFzUmVmLmN1cnJlbnQ7XG4gICAgaWYgKGNhbnZhcykge1xuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgIGlmIChjdHggPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZ2V0IDJEIGNvbnRleHQgZm9yIGNhbnZhc1wiKTtcbiAgICAgIH1cbiAgICAgIGN0eC5saW5lV2lkdGggPSAyO1xuXG4gICAgICAvLyBXZSB1c2UgYC0tY29sb3ItYWNjZW50OWAgaW4gbGlnaHQgbW9kZSwgYnV0IGhhdmUgdG8gaGFyZCBjb2RlIGl0IGhlcmUuXG4gICAgICAvLyBJbiBkYXJrIG1vZGUsIHdlIHVzZSB0aGUgdHJhbmRpdGlvbmFsIHllbGxvdyBhcyBpdCBqdXN0IGxvb2tzIGJldHRlci5cbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGlzRGFyayA/IFwiI2YxYzQwZlwiIDogXCIjMDQ0YTgxXCI7XG5cbiAgICAgIGNvbnN0IGF1ZGlvQ29udGV4dCA9IG5ldyB3aW5kb3cuQXVkaW9Db250ZXh0KCk7XG4gICAgICBjb25zdCBzb3VyY2UgPSBhdWRpb0NvbnRleHQuY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2Uoc3RyZWFtKTtcbiAgICAgIGNvbnN0IHNjb3BlID0gbmV3IE9zY2lsbG9zY29wZShzb3VyY2UsIHsgZmZ0U2l6ZTogMTAyNCB9KTtcbiAgICAgIHNjb3BlLmFuaW1hdGUoY3R4KTtcblxuICAgICAgcmV0dXJuICgpID0+IHNjb3BlLnN0b3AoKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHt9O1xuICB9LCBbc3RyZWFtLCBpc0RhcmtdKTtcblxuICByZXR1cm4gKFxuICAgIDxjYW52YXNcbiAgICAgIHJlZj17Y2FudmFzUmVmfVxuICAgICAgd2lkdGg9XCI4MDBweFwiXG4gICAgICBoZWlnaHQ9XCIyMDBweFwiXG4gICAgICBjc3M9e3tcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBoZWlnaHQ6IFwibWluKDIwMHB4LCAyMHZoKVwiLFxuICAgICAgICBmbGV4OiBcIjEgMCA3MHB4XCIsXG4gICAgICB9fVxuICAgIC8+XG4gICk7XG59O1xuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst AudioVisualziation = _ref3 => {\n  let {\n    stream\n  } = _ref3;\n  const isDark = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_3__.useColorScheme)().scheme === \"dark\";\n  const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext(\"2d\");\n      if (ctx == null) {\n        throw new Error(\"Could not get 2D context for canvas\");\n      }\n      ctx.lineWidth = 2;\n\n      // We use `--color-accent9` in light mode, but have to hard code it here.\n      // In dark mode, we use the tranditional yellow as it just looks better.\n      ctx.strokeStyle = isDark ? \"#f1c40f\" : \"#044a81\";\n      const audioContext = new window.AudioContext();\n      const source = audioContext.createMediaStreamSource(stream);\n      const scope = new (oscilloscope__WEBPACK_IMPORTED_MODULE_2___default())(source, {\n        fftSize: 1024\n      });\n      scope.animate(ctx);\n      return () => scope.stop();\n    }\n    return () => {};\n  }, [stream, isDark]);\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"canvas\", {\n    ref: canvasRef,\n    width: \"800px\",\n    height: \"200px\",\n    css: _ref4\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RlcHMvYXVkaW8tc2V0dXAvbWljLXByZXZpZXcudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUtBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFHQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmNhc3Qtc3R1ZGlvLy4vc3JjL3N0ZXBzL2F1ZGlvLXNldHVwL21pYy1wcmV2aWV3LnRzeD8wYTcwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlSWQsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IE9zY2lsbG9zY29wZSBmcm9tIFwib3NjaWxsb3Njb3BlXCI7XG5pbXBvcnQgeyBTcGlubmVyLCB1c2VDb2xvclNjaGVtZSB9IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTdHVkaW9TdGF0ZSB9IGZyb20gXCIuLi8uLi9zdHVkaW8tc3RhdGVcIjtcbmltcG9ydCB7IHN0YXJ0QXVkaW9DYXB0dXJlLCBzdG9wQXVkaW9DYXB0dXJlIH0gZnJvbSBcIi4uLy4uL2NhcHR1cmVyXCI7XG5pbXBvcnQgeyBnZXRVbmlxdWVEZXZpY2VzLCBDT0xPUlMgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgTEFTVF9BVURJT19ERVZJQ0VfS0VZIH0gZnJvbSBcIi5cIjtcbmltcG9ydCB7IEVycm9yQm94IH0gZnJvbSBcIi4uLy4uL3VpL0Vycm9yQm94XCI7XG5pbXBvcnQgeyBTZWxlY3QgfSBmcm9tIFwiLi4vLi4vdWkvU2VsZWN0XCI7XG5cblxuLy8gT25jZSB0aGUgbWljcm9waG9uZSBpcyBzZWxlY3RlZCwgdGhpcyBpcyBzaG93bi4gUmVuZGVycyBhblxuLy8gYXVkaW8tdmlzdWFsaXphdGlvbiBhbmQgYSBkZXZpY2Utc2VsZWN0b3IuXG5leHBvcnQgY29uc3QgTWljcm9waG9uZVByZXZpZXc6IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IHsgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3Qgc3RhdGUgPSB1c2VTdHVkaW9TdGF0ZSgpO1xuICBjb25zdCB7IGF1ZGlvU3RyZWFtLCBhdWRpb0FsbG93ZWQsIGF1ZGlvVW5leHBlY3RlZEVuZCB9ID0gc3RhdGU7XG5cbiAgLy8gR2V0IGN1cnJlbnQgZGV2aWNlIElEIGFuZCBhbGwgcG9zc2libGUgYXVkaW8gaW5wdXQgZGV2aWNlcy5cbiAgY29uc3QgY3VycmVudERldmljZUlkID0gYXVkaW9TdHJlYW0/LmdldEF1ZGlvVHJhY2tzKCk/LlswXT8uZ2V0U2V0dGluZ3MoKT8uZGV2aWNlSWQ7XG4gIGNvbnN0IGRldmljZXMgPSBnZXRVbmlxdWVEZXZpY2VzKHN0YXRlLm1lZGlhRGV2aWNlcywgXCJhdWRpb2lucHV0XCIpO1xuXG4gIC8vIFdlIHdyaXRlIHRoZSBjdXJyZW50bHkgdXNlZCBkZXZpY2UgSUQgdG8gbG9jYWwgc3RvcmFnZSB0byByZW1lbWJlciBpdFxuICAvLyBiZXR3ZWVuIHZpc2l0cyBvZiBTdHVkaW8uXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGN1cnJlbnREZXZpY2VJZCkge1xuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKExBU1RfQVVESU9fREVWSUNFX0tFWSwgY3VycmVudERldmljZUlkKTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IGNoYW5nZURldmljZSA9IGFzeW5jIChkZXZpY2VJZDogc3RyaW5nKSA9PiB7XG4gICAgLy8gVGhlIHN0cmVhbSBpcyBvbmx5IGZhbHN5IGlmIGl0IHVuZXhwZWN0ZWRseSBlbmRlZC5cbiAgICBpZiAoYXVkaW9TdHJlYW0pIHtcbiAgICAgIHN0b3BBdWRpb0NhcHR1cmUoYXVkaW9TdHJlYW0sIGRpc3BhdGNoKTtcbiAgICB9XG5cbiAgICBhd2FpdCBzdGFydEF1ZGlvQ2FwdHVyZShkaXNwYXRjaCwgeyBleGFjdDogZGV2aWNlSWQgfSk7XG4gIH07XG5cbiAgY29uc3Qgc2VsZWN0SWQgPSB1c2VJZCgpO1xuICBsZXQgYm9keTogSlNYLkVsZW1lbnQgPSA8PjwvPjtcbiAgaWYgKGF1ZGlvU3RyZWFtKSB7XG4gICAgYm9keSA9IDw+XG4gICAgICA8QXVkaW9WaXN1YWx6aWF0aW9uIHN0cmVhbT17YXVkaW9TdHJlYW19IC8+XG4gICAgICA8ZGl2IGNzcz17e1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgd2lkdGg6IFwiODAlXCIsXG4gICAgICAgIG1pbldpZHRoOiBcIjI0MHB4XCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICB9fT5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9e3NlbGVjdElkfSBjc3M9e3tcbiAgICAgICAgICBtYXJnaW5SaWdodDogMTYsXG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgIGZvbnRXZWlnaHQ6IDcwMCxcbiAgICAgICAgICBjb2xvcjogQ09MT1JTLm5ldXRyYWw3MCxcbiAgICAgICAgfX0+e3QoXCJzdGVwcy5hdWRpby5kZXZpY2VcIil9PC9sYWJlbD5cbiAgICAgICAgPFNlbGVjdFxuICAgICAgICAgIGlkPXtzZWxlY3RJZH1cbiAgICAgICAgICB2YWx1ZT17Y3VycmVudERldmljZUlkfVxuICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IGNoYW5nZURldmljZShlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBmbGV4OiBcIjEgMVwiLFxuICAgICAgICAgICAgbWluV2lkdGg6IDUwLFxuXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHtkZXZpY2VzLm1hcCgoZCwgaSkgPT4gKFxuICAgICAgICAgICAgPG9wdGlvbiBrZXk9e2l9IHZhbHVlPXtkLmRldmljZUlkfT57ZC5sYWJlbCA/PyBcInVubGFiZWxlZCBtaWNyb3Bob25lXCJ9PC9vcHRpb24+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvU2VsZWN0PlxuICAgICAgPC9kaXY+XG4gICAgPC8+O1xuICB9IGVsc2UgaWYgKGF1ZGlvQWxsb3dlZCA9PT0gZmFsc2UpIHtcbiAgICBib2R5ID0gPEVycm9yQm94XG4gICAgICB0aXRsZT17dChcInN0ZXBzLmF1ZGlvLm5vdC1hbGxvd2VkLXRpdGxlXCIpfVxuICAgICAgYm9keT17dChcInN0ZXBzLmF1ZGlvLm5vdC1hbGxvd2VkLXRleHRcIil9XG4gICAgLz47XG4gIH0gZWxzZSBpZiAoYXVkaW9VbmV4cGVjdGVkRW5kID09PSB0cnVlKSB7XG4gICAgYm9keSA9IDxFcnJvckJveCBib2R5PXt0KFwiZXJyb3ItbG9zdC1hdWRpby1zdHJlYW1cIil9IC8+O1xuICB9IGVsc2Uge1xuICAgIGJvZHkgPSA8U3Bpbm5lciBzaXplPXs3NX0gLz47XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7XG4gICAgICBtYXhXaWR0aDogODUwLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgYm9yZGVyUmFkaXVzOiAxNixcbiAgICAgIGJveFNoYWRvdzogaXNIaWdoQ29udHJhc3QgPyBcIm5vbmVcIiA6IFwiMCA0cHggMTZweCB2YXIoLS1zaGFkb3ctY29sb3IpXCIsXG4gICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG4gICAgICBwYWRkaW5nOiAyNCxcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICBtYXhIZWlnaHQ6IFwiNDAwcHhcIixcbiAgICAgIGdhcDogMTYsXG4gICAgfX0+XG4gICAgICB7Ym9keX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbnR5cGUgQXVkaW9WaXN1YWx6aWF0aW9uUHJvcHMgPSB7XG4gIHN0cmVhbTogTWVkaWFTdHJlYW07XG59O1xuXG5jb25zdCBBdWRpb1Zpc3VhbHppYXRpb246IFJlYWN0LkZDPEF1ZGlvVmlzdWFsemlhdGlvblByb3BzPiA9ICh7IHN0cmVhbSB9KSA9PiB7XG4gIGNvbnN0IGlzRGFyayA9IHVzZUNvbG9yU2NoZW1lKCkuc2NoZW1lID09PSBcImRhcmtcIjtcbiAgY29uc3QgY2FudmFzUmVmID0gdXNlUmVmPEhUTUxDYW52YXNFbGVtZW50PihudWxsKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNhbnZhc1JlZi5jdXJyZW50O1xuICAgIGlmIChjYW52YXMpIHtcbiAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICBpZiAoY3R4ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGdldCAyRCBjb250ZXh0IGZvciBjYW52YXNcIik7XG4gICAgICB9XG4gICAgICBjdHgubGluZVdpZHRoID0gMjtcblxuICAgICAgLy8gV2UgdXNlIGAtLWNvbG9yLWFjY2VudDlgIGluIGxpZ2h0IG1vZGUsIGJ1dCBoYXZlIHRvIGhhcmQgY29kZSBpdCBoZXJlLlxuICAgICAgLy8gSW4gZGFyayBtb2RlLCB3ZSB1c2UgdGhlIHRyYW5kaXRpb25hbCB5ZWxsb3cgYXMgaXQganVzdCBsb29rcyBiZXR0ZXIuXG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBpc0RhcmsgPyBcIiNmMWM0MGZcIiA6IFwiIzA0NGE4MVwiO1xuXG4gICAgICBjb25zdCBhdWRpb0NvbnRleHQgPSBuZXcgd2luZG93LkF1ZGlvQ29udGV4dCgpO1xuICAgICAgY29uc3Qgc291cmNlID0gYXVkaW9Db250ZXh0LmNyZWF0ZU1lZGlhU3RyZWFtU291cmNlKHN0cmVhbSk7XG4gICAgICBjb25zdCBzY29wZSA9IG5ldyBPc2NpbGxvc2NvcGUoc291cmNlLCB7IGZmdFNpemU6IDEwMjQgfSk7XG4gICAgICBzY29wZS5hbmltYXRlKGN0eCk7XG5cbiAgICAgIHJldHVybiAoKSA9PiBzY29wZS5zdG9wKCk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7fTtcbiAgfSwgW3N0cmVhbSwgaXNEYXJrXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Y2FudmFzXG4gICAgICByZWY9e2NhbnZhc1JlZn1cbiAgICAgIHdpZHRoPVwiODAwcHhcIlxuICAgICAgaGVpZ2h0PVwiMjAwcHhcIlxuICAgICAgY3NzPXt7XG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIm1pbigyMDBweCwgMjB2aClcIixcbiAgICAgICAgZmxleDogXCIxIDAgNzBweFwiLFxuICAgICAgfX1cbiAgICAvPlxuICApO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/steps/audio-setup/mic-preview.tsx\n");

/***/ }),

/***/ "./src/steps/audio-setup/source-select.tsx":
/*!*************************************************!*\
  !*** ./src/steps/audio-setup/source-select.tsx ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SourceSelection: function() { return /* binding */ SourceSelection; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var _ui_SourceOptionButton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ui/SourceOptionButton */ \"./src/ui/SourceOptionButton.tsx\");\n/* harmony import */ var _shortcuts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shortcuts */ \"./src/shortcuts.tsx\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\n\n\n\n\n\n\n\n\n/** The two large option buttons for \"no audio\" and \"Microphone\". */\nconst SourceSelection = _ref => {\n  let {\n    selectNoAudio,\n    selectMicrophone\n  } = _ref;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_0__.useTranslation)();\n  const showShortcuts = (0,_shortcuts__WEBPACK_IMPORTED_MODULE_3__.useShowAvailableShortcuts)();\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_3__.useShortcut)(_shortcuts__WEBPACK_IMPORTED_MODULE_3__.SHORTCUTS.audioSetup.withAudio, selectMicrophone);\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_3__.useShortcut)(_shortcuts__WEBPACK_IMPORTED_MODULE_3__.SHORTCUTS.audioSetup.withoutAudio, selectNoAudio);\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.css)({\n      display: \"flex\",\n      gap: 24,\n      padding: 8,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      flex: \"1\",\n      [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_1__.screenWidthAtMost)(_util__WEBPACK_IMPORTED_MODULE_4__.BREAKPOINTS.medium)]: {\n        flexDirection: \"column\"\n      }\n    },  false ? 0 : \";label:SourceSelection;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2F1ZGlvLXNldHVwL3NvdXJjZS1zZWxlY3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVCTSIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9zdGVwcy9hdWRpby1zZXR1cC9zb3VyY2Utc2VsZWN0LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCB7IEZpTWljLCBGaU1pY09mZiB9IGZyb20gXCJyZWFjdC1pY29ucy9maVwiO1xuaW1wb3J0IHsgc2NyZWVuV2lkdGhBdE1vc3QgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5pbXBvcnQgeyBTb3VyY2VPcHRpb25CdXR0b24gfSBmcm9tIFwiLi4vLi4vdWkvU291cmNlT3B0aW9uQnV0dG9uXCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIHVzZVNob3J0Y3V0LCB1c2VTaG93QXZhaWxhYmxlU2hvcnRjdXRzIH0gZnJvbSBcIi4uLy4uL3Nob3J0Y3V0c1wiO1xuaW1wb3J0IHsgQlJFQUtQT0lOVFMgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuXG5cbnR5cGUgUHJvcHMgPSB7XG4gIHNlbGVjdE5vQXVkaW86ICgpID0+IHZvaWQ7XG4gIHNlbGVjdE1pY3JvcGhvbmU6ICgpID0+IHZvaWQ7XG59O1xuXG4vKiogVGhlIHR3byBsYXJnZSBvcHRpb24gYnV0dG9ucyBmb3IgXCJubyBhdWRpb1wiIGFuZCBcIk1pY3JvcGhvbmVcIi4gKi9cbmV4cG9ydCBjb25zdCBTb3VyY2VTZWxlY3Rpb246IFJlYWN0LkZDPFByb3BzPiA9ICh7IHNlbGVjdE5vQXVkaW8sIHNlbGVjdE1pY3JvcGhvbmUgfSkgPT4ge1xuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IHNob3dTaG9ydGN1dHMgPSB1c2VTaG93QXZhaWxhYmxlU2hvcnRjdXRzKCk7XG4gIHVzZVNob3J0Y3V0KFNIT1JUQ1VUUy5hdWRpb1NldHVwLndpdGhBdWRpbywgc2VsZWN0TWljcm9waG9uZSk7XG4gIHVzZVNob3J0Y3V0KFNIT1JUQ1VUUy5hdWRpb1NldHVwLndpdGhvdXRBdWRpbywgc2VsZWN0Tm9BdWRpbyk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGdhcDogMjQsXG4gICAgICAgIHBhZGRpbmc6IDgsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBmbGV4OiBcIjFcIixcbiAgICAgICAgW3NjcmVlbldpZHRoQXRNb3N0KEJSRUFLUE9JTlRTLm1lZGl1bSldOiB7XG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgfSxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPFNvdXJjZU9wdGlvbkJ1dHRvblxuICAgICAgICBpY29uPXs8RmlNaWMgLz59XG4gICAgICAgIGxhYmVsPXt0KFwic3RlcHMuYXVkaW8ubWljcm9waG9uZVwiKX1cbiAgICAgICAgb25DbGljaz17c2VsZWN0TWljcm9waG9uZX1cbiAgICAgICAgc2hvcnRjdXQ9e3Nob3dTaG9ydGN1dHMgPyBTSE9SVENVVFMuYXVkaW9TZXR1cC53aXRoQXVkaW8gOiB1bmRlZmluZWR9XG4gICAgICAvPlxuICAgICAgPFNvdXJjZU9wdGlvbkJ1dHRvblxuICAgICAgICBpY29uPXs8RmlNaWNPZmYgLz59XG4gICAgICAgIGxhYmVsPXt0KFwic3RlcHMuYXVkaW8ud2l0aG91dC1hdWRpb1wiKX1cbiAgICAgICAgb25DbGljaz17c2VsZWN0Tm9BdWRpb31cbiAgICAgICAgc2hvcnRjdXQ9e3Nob3dTaG9ydGN1dHMgPyBTSE9SVENVVFMuYXVkaW9TZXR1cC53aXRob3V0QXVkaW8gOiB1bmRlZmluZWR9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdfQ== */\"),\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_ui_SourceOptionButton__WEBPACK_IMPORTED_MODULE_2__.SourceOptionButton, {\n      icon: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_7__.FiMic, {}),\n      label: t(\"steps.audio.microphone\"),\n      onClick: selectMicrophone,\n      shortcut: showShortcuts ? _shortcuts__WEBPACK_IMPORTED_MODULE_3__.SHORTCUTS.audioSetup.withAudio : undefined\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_ui_SourceOptionButton__WEBPACK_IMPORTED_MODULE_2__.SourceOptionButton, {\n      icon: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_7__.FiMicOff, {}),\n      label: t(\"steps.audio.without-audio\"),\n      onClick: selectNoAudio,\n      shortcut: showShortcuts ? _shortcuts__WEBPACK_IMPORTED_MODULE_3__.SHORTCUTS.audioSetup.withoutAudio : undefined\n    })]\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RlcHMvYXVkaW8tc2V0dXAvc291cmNlLXNlbGVjdC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFRQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5jYXN0LXN0dWRpby8uL3NyYy9zdGVwcy9hdWRpby1zZXR1cC9zb3VyY2Utc2VsZWN0LnRzeD9hNTJjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCB7IEZpTWljLCBGaU1pY09mZiB9IGZyb20gXCJyZWFjdC1pY29ucy9maVwiO1xuaW1wb3J0IHsgc2NyZWVuV2lkdGhBdE1vc3QgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5pbXBvcnQgeyBTb3VyY2VPcHRpb25CdXR0b24gfSBmcm9tIFwiLi4vLi4vdWkvU291cmNlT3B0aW9uQnV0dG9uXCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIHVzZVNob3J0Y3V0LCB1c2VTaG93QXZhaWxhYmxlU2hvcnRjdXRzIH0gZnJvbSBcIi4uLy4uL3Nob3J0Y3V0c1wiO1xuaW1wb3J0IHsgQlJFQUtQT0lOVFMgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuXG5cbnR5cGUgUHJvcHMgPSB7XG4gIHNlbGVjdE5vQXVkaW86ICgpID0+IHZvaWQ7XG4gIHNlbGVjdE1pY3JvcGhvbmU6ICgpID0+IHZvaWQ7XG59O1xuXG4vKiogVGhlIHR3byBsYXJnZSBvcHRpb24gYnV0dG9ucyBmb3IgXCJubyBhdWRpb1wiIGFuZCBcIk1pY3JvcGhvbmVcIi4gKi9cbmV4cG9ydCBjb25zdCBTb3VyY2VTZWxlY3Rpb246IFJlYWN0LkZDPFByb3BzPiA9ICh7IHNlbGVjdE5vQXVkaW8sIHNlbGVjdE1pY3JvcGhvbmUgfSkgPT4ge1xuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IHNob3dTaG9ydGN1dHMgPSB1c2VTaG93QXZhaWxhYmxlU2hvcnRjdXRzKCk7XG4gIHVzZVNob3J0Y3V0KFNIT1JUQ1VUUy5hdWRpb1NldHVwLndpdGhBdWRpbywgc2VsZWN0TWljcm9waG9uZSk7XG4gIHVzZVNob3J0Y3V0KFNIT1JUQ1VUUy5hdWRpb1NldHVwLndpdGhvdXRBdWRpbywgc2VsZWN0Tm9BdWRpbyk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGdhcDogMjQsXG4gICAgICAgIHBhZGRpbmc6IDgsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBmbGV4OiBcIjFcIixcbiAgICAgICAgW3NjcmVlbldpZHRoQXRNb3N0KEJSRUFLUE9JTlRTLm1lZGl1bSldOiB7XG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgfSxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPFNvdXJjZU9wdGlvbkJ1dHRvblxuICAgICAgICBpY29uPXs8RmlNaWMgLz59XG4gICAgICAgIGxhYmVsPXt0KFwic3RlcHMuYXVkaW8ubWljcm9waG9uZVwiKX1cbiAgICAgICAgb25DbGljaz17c2VsZWN0TWljcm9waG9uZX1cbiAgICAgICAgc2hvcnRjdXQ9e3Nob3dTaG9ydGN1dHMgPyBTSE9SVENVVFMuYXVkaW9TZXR1cC53aXRoQXVkaW8gOiB1bmRlZmluZWR9XG4gICAgICAvPlxuICAgICAgPFNvdXJjZU9wdGlvbkJ1dHRvblxuICAgICAgICBpY29uPXs8RmlNaWNPZmYgLz59XG4gICAgICAgIGxhYmVsPXt0KFwic3RlcHMuYXVkaW8ud2l0aG91dC1hdWRpb1wiKX1cbiAgICAgICAgb25DbGljaz17c2VsZWN0Tm9BdWRpb31cbiAgICAgICAgc2hvcnRjdXQ9e3Nob3dTaG9ydGN1dHMgPyBTSE9SVENVVFMuYXVkaW9TZXR1cC53aXRob3V0QXVkaW8gOiB1bmRlZmluZWR9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/steps/audio-setup/source-select.tsx\n");

/***/ }),

/***/ "./src/steps/elements.tsx":
/*!********************************!*\
  !*** ./src/steps/elements.tsx ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StepContainer: function() { return /* binding */ StepContainer; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _shortcuts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shortcuts */ \"./src/shortcuts.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\nvar _ref2 =  false ? 0 : {\n  name: \"1bxl8m-button\",\n  styles: \";label:button;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref3 =  false ? 0 : {\n  name: \"gny9sr-StepButton\",\n  styles: \"border-radius:8px;margin:0;padding-left:0;overflow:hidden;list-style:none;label:StepButton;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst StepButton = _ref => {\n  let {\n    kind,\n    label,\n    icon,\n    disabled,\n    danger,\n    onClick,\n    popoverEntries\n  } = _ref;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const showShortcut = (0,_shortcuts__WEBPACK_IMPORTED_MODULE_4__.useShowAvailableShortcuts)();\n  const isDark = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.useColorScheme)().scheme === \"dark\";\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.useColorScheme)();\n  const shortcut = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.match)(kind, {\n    prev: () => _shortcuts__WEBPACK_IMPORTED_MODULE_4__.SHORTCUTS.general.prev,\n    next: () => _shortcuts__WEBPACK_IMPORTED_MODULE_4__.SHORTCUTS.general.next\n  });\n  const [open, setOpen] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n  const click = popoverEntries ? () => setOpen(old => !old) : () => onClick?.();\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_4__.useShortcut)(shortcut, click, {\n    enabled: !disabled\n  }, [click, shortcut, disabled]);\n  const button = (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.ProtoButton, {\n    disabled: disabled,\n    onClick: click,\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.css)({\n      position: \"relative\",\n      display: \"flex\",\n      gap: 8,\n      alignItems: \"center\",\n      lineHeight: 1,\n      ...(0,_util__WEBPACK_IMPORTED_MODULE_3__.focusStyle)({\n        offset: -1\n      }),\n      ...(danger && {\n        \"--color-focus\": _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.danger4\n      }),\n      borderRadius: 8,\n      border: `1px solid ${danger ? _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.danger4 : _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral50}`,\n      color: danger ? _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.danger4 : _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral80,\n      backgroundColor: danger ? _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.danger0 : _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral05,\n      padding: \"12px 24px\",\n      ...(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.match)(kind, {\n        \"next\": () => ({\n          paddingRight: 16\n        }),\n        \"prev\": () => ({\n          paddingLeft: 16\n        })\n      }),\n      '&[data-floating-state=\"open\"] svg': {\n        transform: \"rotate(-90deg)\"\n      },\n      \"svg\": {\n        transition: \"transform 0.15s\",\n        flexShrink: 0\n      },\n      \"&[disabled]\": {\n        color: _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral60,\n        borderColor: _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral15,\n        backgroundColor: _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral15\n      },\n      \"&:not([disabled]):hover, &:not([disabled]):focus-visible\": {\n        borderColor: danger ? _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.danger5 : _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral70,\n        color: danger ? _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.danger5 : _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral90,\n        boxShadow: isHighContrast ? \"none\" : \"0 0 8px var(--shadow-color)\",\n        ...(danger && {\n          backgroundColor: _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.danger1\n        }),\n        ...(isHighContrast && {\n          outline: `2px solid ${danger ? _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.danger5 : _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.accent4}`,\n          borderColor: \"transparent\"\n        })\n      }\n    },  false ? 0 : \";label:button;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    children: [kind === \"prev\" && (icon ?? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_7__.FiChevronLeft, {})), label ?? t(`steps.${kind === \"next\" ? \"next\" : \"back\"}-button-label`), kind === \"next\" && (icon ?? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_7__.FiChevronRight, {\n      css: _ref2\n    })), showShortcut && !disabled && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"div\", {\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.css)({\n        position: \"absolute\",\n        top: -24,\n        left: -6,\n        padding: 2,\n        borderRadius: 4,\n        backgroundColor: _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral05\n      },  false ? 0 : \";label:button;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n      children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_shortcuts__WEBPACK_IMPORTED_MODULE_4__.ShortcutKeys, {\n        shortcut: shortcut\n      })\n    })]\n  });\n\n  // One would think we can just always return a `FloatingContainer`, which just\n  // sometimes does nothing. But no: this confuses screenreaders as they would\n  // always announce that this button opens a menu.\n  if (!popoverEntries) {\n    return button;\n  }\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.FloatingContainer, {\n    placement: \"top-end\",\n    open: open,\n    onClose: () => setOpen(false),\n    ariaRole: \"menu\",\n    arrowSize: 8,\n    viewPortMargin: 12,\n    borderRadius: 8,\n    distance: 6,\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.FloatingTrigger, {\n      children: button\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.Floating, {\n      backgroundColor: isDark ? _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral15 : _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral05,\n      borderWidth: isDark ? 1 : 0,\n      padding: 0,\n      shadowBlur: 8,\n      children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"ul\", {\n        css: _ref3,\n        children: popoverEntries?.map((entry, i) => {\n          const style = {\n            display: \"flex\",\n            gap: 16,\n            alignItems: \"center\",\n            width: \"100%\",\n            minWidth: 160,\n            padding: 12,\n            color: _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral80,\n            cursor: \"pointer\",\n            textDecoration: \"none\",\n            ...(0,_util__WEBPACK_IMPORTED_MODULE_3__.focusStyle)({\n              inset: true\n            }),\n            \"& > svg\": {\n              maxHeight: 23,\n              fontSize: 23,\n              color: _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral60,\n              width: 24,\n              strokeWidth: 2,\n              \"& > path\": {\n                strokeWidth: \"inherit\"\n              }\n            },\n            \":hover, :focus\": {\n              backgroundColor: _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral10,\n              color: \"inherit\"\n            }\n          };\n          return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"li\", {\n            css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.css)({\n              \":first-of-type > *\": {\n                borderRadius: \"8px 8px 0 0\"\n              },\n              \":last-of-type> *\": {\n                borderRadius: \"0 0 8px 8px\"\n              },\n              \":not(:first-of-type)\": {\n                borderTop: `1px solid ${_util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral30}`\n              }\n            },  false ? 0 : \";label:StepButton;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n            children: \"href\" in entry ? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"a\", {\n              role: \"button\",\n              href: entry.href,\n              css: style,\n              onKeyDown: e => {\n                if (e.key === \" \") {\n                  e.preventDefault();\n                  window.location.href = entry.href;\n                }\n              },\n              children: [entry.icon, entry.label]\n            }) : (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_0__.ProtoButton, {\n              onClick: entry.onClick,\n              css: style,\n              children: [entry.icon, entry.label]\n            })\n          }, i);\n        })\n      })\n    })]\n  });\n};\nvar _ref5 =  false ? 0 : {\n  name: \"lk6vgc-StepContainer\",\n  styles: \"flex:1;min-width:var(--min-page-width);display:flex;flex-direction:column;gap:12px;padding:12px;@media (min-width: 500px) and (min-height: 500px){gap:16px;padding:24px;};label:StepContainer;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2VsZW1lbnRzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxTlMiLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvZWxlbWVudHMudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmxvYXRpbmcsIEZsb2F0aW5nQ29udGFpbmVyLCBGbG9hdGluZ1RyaWdnZXIsIFByb3RvQnV0dG9uLCBtYXRjaCwgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IHsgRmlDaGV2cm9uTGVmdCwgRmlDaGV2cm9uUmlnaHQgfSBmcm9tIFwicmVhY3QtaWNvbnMvZmlcIjtcbmltcG9ydCB7IENTU09iamVjdCB9IGZyb20gXCJAZW1vdGlvbi9yZWFjdFwiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgQ09MT1JTLCBmb2N1c1N0eWxlIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7IFNIT1JUQ1VUUywgU2hvcnRjdXRLZXlzLCB1c2VTaG9ydGN1dCwgdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cyB9IGZyb20gXCIuLi9zaG9ydGN1dHNcIjtcblxuXG50eXBlIFN0ZXBCdXR0b25Qcm9wcyA9IHtcbiAga2luZDogXCJuZXh0XCIgfCBcInByZXZcIjtcbiAgbGFiZWw/OiBzdHJpbmc7XG4gIGRhbmdlcj86IGJvb2xlYW47XG4gIGljb24/OiBKU1guRWxlbWVudDtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICBvbkNsaWNrPzogKCkgPT4gdm9pZDtcbiAgcG9wb3ZlckVudHJpZXM/OiAoe1xuICAgIGljb246IEpTWC5FbGVtZW50O1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gIH0gJiAoeyBvbkNsaWNrOiAoKSA9PiB2b2lkIH0gfCB7IGhyZWY6IHN0cmluZyB9KSlbXTtcbn07XG5cbmNvbnN0IFN0ZXBCdXR0b246IFJlYWN0LkZDPFN0ZXBCdXR0b25Qcm9wcz4gPSAoe1xuICBraW5kLCBsYWJlbCwgaWNvbiwgZGlzYWJsZWQsIGRhbmdlciwgb25DbGljaywgcG9wb3ZlckVudHJpZXMsXG59KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3Qgc2hvd1Nob3J0Y3V0ID0gdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cygpO1xuICBjb25zdCBpc0RhcmsgPSB1c2VDb2xvclNjaGVtZSgpLnNjaGVtZSA9PT0gXCJkYXJrXCI7XG4gIGNvbnN0IHsgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG4gIGNvbnN0IHNob3J0Y3V0ID0gbWF0Y2goa2luZCwge1xuICAgIHByZXY6ICgpID0+IFNIT1JUQ1VUUy5nZW5lcmFsLnByZXYsXG4gICAgbmV4dDogKCkgPT4gU0hPUlRDVVRTLmdlbmVyYWwubmV4dCxcbiAgfSk7XG4gIGNvbnN0IFtvcGVuLCBzZXRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgY2xpY2sgPSBwb3BvdmVyRW50cmllcyA/ICgpID0+IHNldE9wZW4ob2xkID0+ICFvbGQpIDogKCkgPT4gb25DbGljaz8uKCk7XG4gIHVzZVNob3J0Y3V0KHNob3J0Y3V0LCBjbGljaywgeyBlbmFibGVkOiAhZGlzYWJsZWQgfSwgW2NsaWNrLCBzaG9ydGN1dCwgZGlzYWJsZWRdKTtcblxuICBjb25zdCBidXR0b24gPSAoXG4gICAgPFByb3RvQnV0dG9uXG4gICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICBvbkNsaWNrPXtjbGlja31cbiAgICAgIGNzcz17e1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZ2FwOiA4LFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBsaW5lSGVpZ2h0OiAxLFxuICAgICAgICAuLi5mb2N1c1N0eWxlKHsgb2Zmc2V0OiAtMSB9KSxcbiAgICAgICAgLi4uZGFuZ2VyICYmIHsgXCItLWNvbG9yLWZvY3VzXCI6IENPTE9SUy5kYW5nZXI0IH0sXG4gICAgICAgIGJvcmRlclJhZGl1czogOCxcbiAgICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7ZGFuZ2VyID8gQ09MT1JTLmRhbmdlcjQgOiBDT0xPUlMubmV1dHJhbDUwfWAsXG4gICAgICAgIGNvbG9yOiBkYW5nZXIgPyBDT0xPUlMuZGFuZ2VyNCA6IENPTE9SUy5uZXV0cmFsODAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZGFuZ2VyID8gQ09MT1JTLmRhbmdlcjAgOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgICBwYWRkaW5nOiBcIjEycHggMjRweFwiLFxuICAgICAgICAuLi5tYXRjaChraW5kLCB7XG4gICAgICAgICAgXCJuZXh0XCI6ICgpID0+ICh7IHBhZGRpbmdSaWdodDogMTYgfSkgYXMgQ1NTT2JqZWN0LFxuICAgICAgICAgIFwicHJldlwiOiAoKSA9PiAoeyBwYWRkaW5nTGVmdDogMTYgfSkgYXMgQ1NTT2JqZWN0LFxuICAgICAgICB9KSxcblxuICAgICAgICAnJltkYXRhLWZsb2F0aW5nLXN0YXRlPVwib3BlblwiXSBzdmcnOiB7XG4gICAgICAgICAgdHJhbnNmb3JtOiBcInJvdGF0ZSgtOTBkZWcpXCIsXG4gICAgICAgIH0sXG4gICAgICAgIFwic3ZnXCI6IHtcbiAgICAgICAgICB0cmFuc2l0aW9uOiBcInRyYW5zZm9ybSAwLjE1c1wiLFxuICAgICAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICAgIH0sXG5cbiAgICAgICAgXCImW2Rpc2FibGVkXVwiOiB7XG4gICAgICAgICAgY29sb3I6IENPTE9SUy5uZXV0cmFsNjAsXG4gICAgICAgICAgYm9yZGVyQ29sb3I6IENPTE9SUy5uZXV0cmFsMTUsXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDE1LFxuICAgICAgICB9LFxuXG4gICAgICAgIFwiJjpub3QoW2Rpc2FibGVkXSk6aG92ZXIsICY6bm90KFtkaXNhYmxlZF0pOmZvY3VzLXZpc2libGVcIjoge1xuICAgICAgICAgIGJvcmRlckNvbG9yOiBkYW5nZXIgPyBDT0xPUlMuZGFuZ2VyNSA6IENPTE9SUy5uZXV0cmFsNzAsXG4gICAgICAgICAgY29sb3I6IGRhbmdlciA/IENPTE9SUy5kYW5nZXI1IDogQ09MT1JTLm5ldXRyYWw5MCxcbiAgICAgICAgICBib3hTaGFkb3c6IGlzSGlnaENvbnRyYXN0ID8gXCJub25lXCIgOiBcIjAgMCA4cHggdmFyKC0tc2hhZG93LWNvbG9yKVwiLFxuICAgICAgICAgIC4uLmRhbmdlciAmJiB7IGJhY2tncm91bmRDb2xvcjogQ09MT1JTLmRhbmdlcjEgfSxcbiAgICAgICAgICAuLi5pc0hpZ2hDb250cmFzdCAmJiB7XG4gICAgICAgICAgICBvdXRsaW5lOiBgMnB4IHNvbGlkICR7ZGFuZ2VyID8gQ09MT1JTLmRhbmdlcjUgOiBDT0xPUlMuYWNjZW50NH1gLFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwidHJhbnNwYXJlbnRcIixcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfX1cbiAgICA+XG4gICAgICB7a2luZCA9PT0gXCJwcmV2XCIgJiYgKGljb24gPz8gPEZpQ2hldnJvbkxlZnQgLz4pfVxuICAgICAge2xhYmVsID8/IHQoYHN0ZXBzLiR7a2luZCA9PT0gXCJuZXh0XCIgPyBcIm5leHRcIiA6IFwiYmFja1wifS1idXR0b24tbGFiZWxgKX1cbiAgICAgIHtraW5kID09PSBcIm5leHRcIiAmJiAoaWNvbiA/PyA8RmlDaGV2cm9uUmlnaHQgY3NzPXt7XG4gICAgICB9fS8+KX1cbiAgICAgIHtzaG93U2hvcnRjdXQgJiYgIWRpc2FibGVkICYmIChcbiAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICAgIHRvcDogLTI0LFxuICAgICAgICAgIGxlZnQ6IC02LFxuICAgICAgICAgIHBhZGRpbmc6IDIsXG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiA0LFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICAgICAgfX0+PFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17c2hvcnRjdXR9IC8+PC9kaXY+XG4gICAgICApfVxuICAgIDwvUHJvdG9CdXR0b24+XG4gICk7XG5cbiAgLy8gT25lIHdvdWxkIHRoaW5rIHdlIGNhbiBqdXN0IGFsd2F5cyByZXR1cm4gYSBgRmxvYXRpbmdDb250YWluZXJgLCB3aGljaCBqdXN0XG4gIC8vIHNvbWV0aW1lcyBkb2VzIG5vdGhpbmcuIEJ1dCBubzogdGhpcyBjb25mdXNlcyBzY3JlZW5yZWFkZXJzIGFzIHRoZXkgd291bGRcbiAgLy8gYWx3YXlzIGFubm91bmNlIHRoYXQgdGhpcyBidXR0b24gb3BlbnMgYSBtZW51LlxuICBpZiAoIXBvcG92ZXJFbnRyaWVzKSB7XG4gICAgcmV0dXJuIGJ1dHRvbjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEZsb2F0aW5nQ29udGFpbmVyXG4gICAgICBwbGFjZW1lbnQ9XCJ0b3AtZW5kXCJcbiAgICAgIG9wZW49e29wZW59XG4gICAgICBvbkNsb3NlPXsoKSA9PiBzZXRPcGVuKGZhbHNlKX1cbiAgICAgIGFyaWFSb2xlPVwibWVudVwiXG4gICAgICBhcnJvd1NpemU9ezh9XG4gICAgICB2aWV3UG9ydE1hcmdpbj17MTJ9XG4gICAgICBib3JkZXJSYWRpdXM9ezh9XG4gICAgICBkaXN0YW5jZT17Nn1cbiAgICA+XG4gICAgICA8RmxvYXRpbmdUcmlnZ2VyPntidXR0b259PC9GbG9hdGluZ1RyaWdnZXI+XG4gICAgICA8RmxvYXRpbmdcbiAgICAgICAgYmFja2dyb3VuZENvbG9yPXtpc0RhcmsgPyBDT0xPUlMubmV1dHJhbDE1IDogQ09MT1JTLm5ldXRyYWwwNX1cbiAgICAgICAgYm9yZGVyV2lkdGg9e2lzRGFyayA/IDEgOiAwfVxuICAgICAgICBwYWRkaW5nPXswfVxuICAgICAgICBzaGFkb3dCbHVyPXs4fVxuICAgICAgPlxuICAgICAgICA8dWwgY3NzPXt7XG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiA4LFxuICAgICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgICBwYWRkaW5nTGVmdDogMCxcbiAgICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICAgICAgICBsaXN0U3R5bGU6IFwibm9uZVwiLFxuICAgICAgICB9fT5cbiAgICAgICAgICB7cG9wb3ZlckVudHJpZXM/Lm1hcCgoZW50cnksIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlID0ge1xuICAgICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgICAgZ2FwOiAxNixcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgICAgICBtaW5XaWR0aDogMTYwLFxuICAgICAgICAgICAgICBwYWRkaW5nOiAxMixcbiAgICAgICAgICAgICAgY29sb3I6IENPTE9SUy5uZXV0cmFsODAsXG4gICAgICAgICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCIsXG4gICAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgLi4uZm9jdXNTdHlsZSh7IGluc2V0OiB0cnVlIH0pLFxuICAgICAgICAgICAgICBcIiYgPiBzdmdcIjoge1xuICAgICAgICAgICAgICAgIG1heEhlaWdodDogMjMsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6IDIzLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDYwLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyNCxcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogMixcbiAgICAgICAgICAgICAgICBcIiYgPiBwYXRoXCI6IHsgc3Ryb2tlV2lkdGg6IFwiaW5oZXJpdFwiIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiOmhvdmVyLCA6Zm9jdXNcIjoge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwxMCxcbiAgICAgICAgICAgICAgICBjb2xvcjogXCJpbmhlcml0XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8bGkga2V5PXtpfSBjc3M9e3tcbiAgICAgICAgICAgICAgICBcIjpmaXJzdC1vZi10eXBlID4gKlwiOiB7IGJvcmRlclJhZGl1czogXCI4cHggOHB4IDAgMFwiIH0sXG4gICAgICAgICAgICAgICAgXCI6bGFzdC1vZi10eXBlPiAqXCI6IHsgYm9yZGVyUmFkaXVzOiBcIjAgMCA4cHggOHB4XCIgfSxcbiAgICAgICAgICAgICAgICBcIjpub3QoOmZpcnN0LW9mLXR5cGUpXCI6IHtcbiAgICAgICAgICAgICAgICAgIGJvcmRlclRvcDogYDFweCBzb2xpZCAke0NPTE9SUy5uZXV0cmFsMzB9YCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgICB7XCJocmVmXCIgaW4gZW50cnlcbiAgICAgICAgICAgICAgICAgID8gPGFcbiAgICAgICAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgIGhyZWY9e2VudHJ5LmhyZWZ9XG4gICAgICAgICAgICAgICAgICAgIGNzcz17c3R5bGV9XG4gICAgICAgICAgICAgICAgICAgIG9uS2V5RG93bj17ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5ID09PSBcIiBcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBlbnRyeS5ocmVmO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2VudHJ5Lmljb259XG4gICAgICAgICAgICAgICAgICAgIHtlbnRyeS5sYWJlbH1cbiAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgIDogPFByb3RvQnV0dG9uIG9uQ2xpY2s9e2VudHJ5Lm9uQ2xpY2t9IGNzcz17c3R5bGV9PlxuICAgICAgICAgICAgICAgICAgICB7ZW50cnkuaWNvbn1cbiAgICAgICAgICAgICAgICAgICAge2VudHJ5LmxhYmVsfVxuICAgICAgICAgICAgICAgICAgPC9Qcm90b0J1dHRvbj5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pfVxuICAgICAgICA8L3VsPlxuICAgICAgPC9GbG9hdGluZz5cbiAgICA8L0Zsb2F0aW5nQ29udGFpbmVyPlxuICApO1xufTtcblxudHlwZSBTdGVwQ29udGFpbmVyUHJvcHMgPSBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjx7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIG5vdGU/OiBzdHJpbmc7XG4gIG5leHRCdXR0b24/OiBPbWl0PFN0ZXBCdXR0b25Qcm9wcywgXCJraW5kXCI+O1xuICBwcmV2QnV0dG9uPzogT21pdDxTdGVwQnV0dG9uUHJvcHMsIFwia2luZFwiPjtcbn0+O1xuXG5leHBvcnQgY29uc3QgU3RlcENvbnRhaW5lcjogUmVhY3QuRkM8U3RlcENvbnRhaW5lclByb3BzPiA9ICh7XG4gIHRpdGxlLFxuICBub3RlLFxuICBuZXh0QnV0dG9uLFxuICBwcmV2QnV0dG9uLFxuICBjaGlsZHJlbixcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgZmxleDogXCIxXCIsXG4gICAgICBtaW5XaWR0aDogXCJ2YXIoLS1taW4tcGFnZS13aWR0aClcIixcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgIGdhcDogMTIsXG4gICAgICBwYWRkaW5nOiAxMixcbiAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDUwMHB4KSBhbmQgKG1pbi1oZWlnaHQ6IDUwMHB4KVwiOiB7XG4gICAgICAgIGdhcDogMTYsXG4gICAgICAgIHBhZGRpbmc6IDI0LFxuICAgICAgfSxcbiAgICB9fT5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxoMSBhcmlhLWxpdmU9XCJwb2xpdGVcIiBjc3M9e3tcbiAgICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgICAgZm9udFNpemU6IDMyLFxuICAgICAgICAgIGZvbnRXZWlnaHQ6IDcwMCxcbiAgICAgICAgICBjb2xvcjogQ09MT1JTLm5ldXRyYWw3MCxcbiAgICAgICAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSwgc2NyZWVuIGFuZCAobWF4LWhlaWdodDogNDAwcHgpXCI6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiAyNixcbiAgICAgICAgICB9LFxuICAgICAgICB9fT57dGl0bGV9PC9oMT5cbiAgICAgICAge25vdGUgJiYgKFxuICAgICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgICBmb250U2l6ZTogMTQsXG4gICAgICAgICAgICBjb2xvcjogQ09MT1JTLm5ldXRyYWw2MCxcbiAgICAgICAgICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMyxcbiAgICAgICAgICAgIG1heFdpZHRoOiBcIjEwMGNoXCIsXG4gICAgICAgICAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG4gICAgICAgICAgfX0+XG4gICAgICAgICAgICB7bm90ZX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgZmxleDogXCIxXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgIH19PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJlbmRcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJlbmRcIixcbiAgICAgICAgZ2FwOiA4LFxuICAgICAgICBtaW5IZWlnaHQ6IDQyLFxuICAgICAgfX0+XG4gICAgICAgIHtwcmV2QnV0dG9uICYmIDxTdGVwQnV0dG9uIGtpbmQ9XCJwcmV2XCIgey4uLnByZXZCdXR0b259IC8+fVxuICAgICAgICB7bmV4dEJ1dHRvbiAmJiA8U3RlcEJ1dHRvbiBraW5kPVwibmV4dFwiIHsuLi5uZXh0QnV0dG9ufSAvPn1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref6 =  false ? 0 : {\n  name: \"12i3cj4-StepContainer\",\n  styles: \"flex:1;display:flex;flex-direction:column;justify-content:center;position:relative;label:StepContainer;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref7 =  false ? 0 : {\n  name: \"nnzpka-StepContainer\",\n  styles: \"display:flex;justify-content:end;align-items:end;gap:8px;min-height:42px;label:StepContainer;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2VsZW1lbnRzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpUVciLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvZWxlbWVudHMudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmxvYXRpbmcsIEZsb2F0aW5nQ29udGFpbmVyLCBGbG9hdGluZ1RyaWdnZXIsIFByb3RvQnV0dG9uLCBtYXRjaCwgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IHsgRmlDaGV2cm9uTGVmdCwgRmlDaGV2cm9uUmlnaHQgfSBmcm9tIFwicmVhY3QtaWNvbnMvZmlcIjtcbmltcG9ydCB7IENTU09iamVjdCB9IGZyb20gXCJAZW1vdGlvbi9yZWFjdFwiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgQ09MT1JTLCBmb2N1c1N0eWxlIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7IFNIT1JUQ1VUUywgU2hvcnRjdXRLZXlzLCB1c2VTaG9ydGN1dCwgdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cyB9IGZyb20gXCIuLi9zaG9ydGN1dHNcIjtcblxuXG50eXBlIFN0ZXBCdXR0b25Qcm9wcyA9IHtcbiAga2luZDogXCJuZXh0XCIgfCBcInByZXZcIjtcbiAgbGFiZWw/OiBzdHJpbmc7XG4gIGRhbmdlcj86IGJvb2xlYW47XG4gIGljb24/OiBKU1guRWxlbWVudDtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICBvbkNsaWNrPzogKCkgPT4gdm9pZDtcbiAgcG9wb3ZlckVudHJpZXM/OiAoe1xuICAgIGljb246IEpTWC5FbGVtZW50O1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gIH0gJiAoeyBvbkNsaWNrOiAoKSA9PiB2b2lkIH0gfCB7IGhyZWY6IHN0cmluZyB9KSlbXTtcbn07XG5cbmNvbnN0IFN0ZXBCdXR0b246IFJlYWN0LkZDPFN0ZXBCdXR0b25Qcm9wcz4gPSAoe1xuICBraW5kLCBsYWJlbCwgaWNvbiwgZGlzYWJsZWQsIGRhbmdlciwgb25DbGljaywgcG9wb3ZlckVudHJpZXMsXG59KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3Qgc2hvd1Nob3J0Y3V0ID0gdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cygpO1xuICBjb25zdCBpc0RhcmsgPSB1c2VDb2xvclNjaGVtZSgpLnNjaGVtZSA9PT0gXCJkYXJrXCI7XG4gIGNvbnN0IHsgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG4gIGNvbnN0IHNob3J0Y3V0ID0gbWF0Y2goa2luZCwge1xuICAgIHByZXY6ICgpID0+IFNIT1JUQ1VUUy5nZW5lcmFsLnByZXYsXG4gICAgbmV4dDogKCkgPT4gU0hPUlRDVVRTLmdlbmVyYWwubmV4dCxcbiAgfSk7XG4gIGNvbnN0IFtvcGVuLCBzZXRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgY2xpY2sgPSBwb3BvdmVyRW50cmllcyA/ICgpID0+IHNldE9wZW4ob2xkID0+ICFvbGQpIDogKCkgPT4gb25DbGljaz8uKCk7XG4gIHVzZVNob3J0Y3V0KHNob3J0Y3V0LCBjbGljaywgeyBlbmFibGVkOiAhZGlzYWJsZWQgfSwgW2NsaWNrLCBzaG9ydGN1dCwgZGlzYWJsZWRdKTtcblxuICBjb25zdCBidXR0b24gPSAoXG4gICAgPFByb3RvQnV0dG9uXG4gICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICBvbkNsaWNrPXtjbGlja31cbiAgICAgIGNzcz17e1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZ2FwOiA4LFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBsaW5lSGVpZ2h0OiAxLFxuICAgICAgICAuLi5mb2N1c1N0eWxlKHsgb2Zmc2V0OiAtMSB9KSxcbiAgICAgICAgLi4uZGFuZ2VyICYmIHsgXCItLWNvbG9yLWZvY3VzXCI6IENPTE9SUy5kYW5nZXI0IH0sXG4gICAgICAgIGJvcmRlclJhZGl1czogOCxcbiAgICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7ZGFuZ2VyID8gQ09MT1JTLmRhbmdlcjQgOiBDT0xPUlMubmV1dHJhbDUwfWAsXG4gICAgICAgIGNvbG9yOiBkYW5nZXIgPyBDT0xPUlMuZGFuZ2VyNCA6IENPTE9SUy5uZXV0cmFsODAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZGFuZ2VyID8gQ09MT1JTLmRhbmdlcjAgOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgICBwYWRkaW5nOiBcIjEycHggMjRweFwiLFxuICAgICAgICAuLi5tYXRjaChraW5kLCB7XG4gICAgICAgICAgXCJuZXh0XCI6ICgpID0+ICh7IHBhZGRpbmdSaWdodDogMTYgfSkgYXMgQ1NTT2JqZWN0LFxuICAgICAgICAgIFwicHJldlwiOiAoKSA9PiAoeyBwYWRkaW5nTGVmdDogMTYgfSkgYXMgQ1NTT2JqZWN0LFxuICAgICAgICB9KSxcblxuICAgICAgICAnJltkYXRhLWZsb2F0aW5nLXN0YXRlPVwib3BlblwiXSBzdmcnOiB7XG4gICAgICAgICAgdHJhbnNmb3JtOiBcInJvdGF0ZSgtOTBkZWcpXCIsXG4gICAgICAgIH0sXG4gICAgICAgIFwic3ZnXCI6IHtcbiAgICAgICAgICB0cmFuc2l0aW9uOiBcInRyYW5zZm9ybSAwLjE1c1wiLFxuICAgICAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICAgIH0sXG5cbiAgICAgICAgXCImW2Rpc2FibGVkXVwiOiB7XG4gICAgICAgICAgY29sb3I6IENPTE9SUy5uZXV0cmFsNjAsXG4gICAgICAgICAgYm9yZGVyQ29sb3I6IENPTE9SUy5uZXV0cmFsMTUsXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDE1LFxuICAgICAgICB9LFxuXG4gICAgICAgIFwiJjpub3QoW2Rpc2FibGVkXSk6aG92ZXIsICY6bm90KFtkaXNhYmxlZF0pOmZvY3VzLXZpc2libGVcIjoge1xuICAgICAgICAgIGJvcmRlckNvbG9yOiBkYW5nZXIgPyBDT0xPUlMuZGFuZ2VyNSA6IENPTE9SUy5uZXV0cmFsNzAsXG4gICAgICAgICAgY29sb3I6IGRhbmdlciA/IENPTE9SUy5kYW5nZXI1IDogQ09MT1JTLm5ldXRyYWw5MCxcbiAgICAgICAgICBib3hTaGFkb3c6IGlzSGlnaENvbnRyYXN0ID8gXCJub25lXCIgOiBcIjAgMCA4cHggdmFyKC0tc2hhZG93LWNvbG9yKVwiLFxuICAgICAgICAgIC4uLmRhbmdlciAmJiB7IGJhY2tncm91bmRDb2xvcjogQ09MT1JTLmRhbmdlcjEgfSxcbiAgICAgICAgICAuLi5pc0hpZ2hDb250cmFzdCAmJiB7XG4gICAgICAgICAgICBvdXRsaW5lOiBgMnB4IHNvbGlkICR7ZGFuZ2VyID8gQ09MT1JTLmRhbmdlcjUgOiBDT0xPUlMuYWNjZW50NH1gLFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwidHJhbnNwYXJlbnRcIixcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfX1cbiAgICA+XG4gICAgICB7a2luZCA9PT0gXCJwcmV2XCIgJiYgKGljb24gPz8gPEZpQ2hldnJvbkxlZnQgLz4pfVxuICAgICAge2xhYmVsID8/IHQoYHN0ZXBzLiR7a2luZCA9PT0gXCJuZXh0XCIgPyBcIm5leHRcIiA6IFwiYmFja1wifS1idXR0b24tbGFiZWxgKX1cbiAgICAgIHtraW5kID09PSBcIm5leHRcIiAmJiAoaWNvbiA/PyA8RmlDaGV2cm9uUmlnaHQgY3NzPXt7XG4gICAgICB9fS8+KX1cbiAgICAgIHtzaG93U2hvcnRjdXQgJiYgIWRpc2FibGVkICYmIChcbiAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICAgIHRvcDogLTI0LFxuICAgICAgICAgIGxlZnQ6IC02LFxuICAgICAgICAgIHBhZGRpbmc6IDIsXG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiA0LFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICAgICAgfX0+PFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17c2hvcnRjdXR9IC8+PC9kaXY+XG4gICAgICApfVxuICAgIDwvUHJvdG9CdXR0b24+XG4gICk7XG5cbiAgLy8gT25lIHdvdWxkIHRoaW5rIHdlIGNhbiBqdXN0IGFsd2F5cyByZXR1cm4gYSBgRmxvYXRpbmdDb250YWluZXJgLCB3aGljaCBqdXN0XG4gIC8vIHNvbWV0aW1lcyBkb2VzIG5vdGhpbmcuIEJ1dCBubzogdGhpcyBjb25mdXNlcyBzY3JlZW5yZWFkZXJzIGFzIHRoZXkgd291bGRcbiAgLy8gYWx3YXlzIGFubm91bmNlIHRoYXQgdGhpcyBidXR0b24gb3BlbnMgYSBtZW51LlxuICBpZiAoIXBvcG92ZXJFbnRyaWVzKSB7XG4gICAgcmV0dXJuIGJ1dHRvbjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEZsb2F0aW5nQ29udGFpbmVyXG4gICAgICBwbGFjZW1lbnQ9XCJ0b3AtZW5kXCJcbiAgICAgIG9wZW49e29wZW59XG4gICAgICBvbkNsb3NlPXsoKSA9PiBzZXRPcGVuKGZhbHNlKX1cbiAgICAgIGFyaWFSb2xlPVwibWVudVwiXG4gICAgICBhcnJvd1NpemU9ezh9XG4gICAgICB2aWV3UG9ydE1hcmdpbj17MTJ9XG4gICAgICBib3JkZXJSYWRpdXM9ezh9XG4gICAgICBkaXN0YW5jZT17Nn1cbiAgICA+XG4gICAgICA8RmxvYXRpbmdUcmlnZ2VyPntidXR0b259PC9GbG9hdGluZ1RyaWdnZXI+XG4gICAgICA8RmxvYXRpbmdcbiAgICAgICAgYmFja2dyb3VuZENvbG9yPXtpc0RhcmsgPyBDT0xPUlMubmV1dHJhbDE1IDogQ09MT1JTLm5ldXRyYWwwNX1cbiAgICAgICAgYm9yZGVyV2lkdGg9e2lzRGFyayA/IDEgOiAwfVxuICAgICAgICBwYWRkaW5nPXswfVxuICAgICAgICBzaGFkb3dCbHVyPXs4fVxuICAgICAgPlxuICAgICAgICA8dWwgY3NzPXt7XG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiA4LFxuICAgICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgICBwYWRkaW5nTGVmdDogMCxcbiAgICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICAgICAgICBsaXN0U3R5bGU6IFwibm9uZVwiLFxuICAgICAgICB9fT5cbiAgICAgICAgICB7cG9wb3ZlckVudHJpZXM/Lm1hcCgoZW50cnksIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlID0ge1xuICAgICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgICAgZ2FwOiAxNixcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgICAgICBtaW5XaWR0aDogMTYwLFxuICAgICAgICAgICAgICBwYWRkaW5nOiAxMixcbiAgICAgICAgICAgICAgY29sb3I6IENPTE9SUy5uZXV0cmFsODAsXG4gICAgICAgICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCIsXG4gICAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgLi4uZm9jdXNTdHlsZSh7IGluc2V0OiB0cnVlIH0pLFxuICAgICAgICAgICAgICBcIiYgPiBzdmdcIjoge1xuICAgICAgICAgICAgICAgIG1heEhlaWdodDogMjMsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6IDIzLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDYwLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyNCxcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogMixcbiAgICAgICAgICAgICAgICBcIiYgPiBwYXRoXCI6IHsgc3Ryb2tlV2lkdGg6IFwiaW5oZXJpdFwiIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiOmhvdmVyLCA6Zm9jdXNcIjoge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwxMCxcbiAgICAgICAgICAgICAgICBjb2xvcjogXCJpbmhlcml0XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8bGkga2V5PXtpfSBjc3M9e3tcbiAgICAgICAgICAgICAgICBcIjpmaXJzdC1vZi10eXBlID4gKlwiOiB7IGJvcmRlclJhZGl1czogXCI4cHggOHB4IDAgMFwiIH0sXG4gICAgICAgICAgICAgICAgXCI6bGFzdC1vZi10eXBlPiAqXCI6IHsgYm9yZGVyUmFkaXVzOiBcIjAgMCA4cHggOHB4XCIgfSxcbiAgICAgICAgICAgICAgICBcIjpub3QoOmZpcnN0LW9mLXR5cGUpXCI6IHtcbiAgICAgICAgICAgICAgICAgIGJvcmRlclRvcDogYDFweCBzb2xpZCAke0NPTE9SUy5uZXV0cmFsMzB9YCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgICB7XCJocmVmXCIgaW4gZW50cnlcbiAgICAgICAgICAgICAgICAgID8gPGFcbiAgICAgICAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgIGhyZWY9e2VudHJ5LmhyZWZ9XG4gICAgICAgICAgICAgICAgICAgIGNzcz17c3R5bGV9XG4gICAgICAgICAgICAgICAgICAgIG9uS2V5RG93bj17ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5ID09PSBcIiBcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBlbnRyeS5ocmVmO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2VudHJ5Lmljb259XG4gICAgICAgICAgICAgICAgICAgIHtlbnRyeS5sYWJlbH1cbiAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgIDogPFByb3RvQnV0dG9uIG9uQ2xpY2s9e2VudHJ5Lm9uQ2xpY2t9IGNzcz17c3R5bGV9PlxuICAgICAgICAgICAgICAgICAgICB7ZW50cnkuaWNvbn1cbiAgICAgICAgICAgICAgICAgICAge2VudHJ5LmxhYmVsfVxuICAgICAgICAgICAgICAgICAgPC9Qcm90b0J1dHRvbj5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pfVxuICAgICAgICA8L3VsPlxuICAgICAgPC9GbG9hdGluZz5cbiAgICA8L0Zsb2F0aW5nQ29udGFpbmVyPlxuICApO1xufTtcblxudHlwZSBTdGVwQ29udGFpbmVyUHJvcHMgPSBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjx7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIG5vdGU/OiBzdHJpbmc7XG4gIG5leHRCdXR0b24/OiBPbWl0PFN0ZXBCdXR0b25Qcm9wcywgXCJraW5kXCI+O1xuICBwcmV2QnV0dG9uPzogT21pdDxTdGVwQnV0dG9uUHJvcHMsIFwia2luZFwiPjtcbn0+O1xuXG5leHBvcnQgY29uc3QgU3RlcENvbnRhaW5lcjogUmVhY3QuRkM8U3RlcENvbnRhaW5lclByb3BzPiA9ICh7XG4gIHRpdGxlLFxuICBub3RlLFxuICBuZXh0QnV0dG9uLFxuICBwcmV2QnV0dG9uLFxuICBjaGlsZHJlbixcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgZmxleDogXCIxXCIsXG4gICAgICBtaW5XaWR0aDogXCJ2YXIoLS1taW4tcGFnZS13aWR0aClcIixcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgIGdhcDogMTIsXG4gICAgICBwYWRkaW5nOiAxMixcbiAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDUwMHB4KSBhbmQgKG1pbi1oZWlnaHQ6IDUwMHB4KVwiOiB7XG4gICAgICAgIGdhcDogMTYsXG4gICAgICAgIHBhZGRpbmc6IDI0LFxuICAgICAgfSxcbiAgICB9fT5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxoMSBhcmlhLWxpdmU9XCJwb2xpdGVcIiBjc3M9e3tcbiAgICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgICAgZm9udFNpemU6IDMyLFxuICAgICAgICAgIGZvbnRXZWlnaHQ6IDcwMCxcbiAgICAgICAgICBjb2xvcjogQ09MT1JTLm5ldXRyYWw3MCxcbiAgICAgICAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSwgc2NyZWVuIGFuZCAobWF4LWhlaWdodDogNDAwcHgpXCI6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiAyNixcbiAgICAgICAgICB9LFxuICAgICAgICB9fT57dGl0bGV9PC9oMT5cbiAgICAgICAge25vdGUgJiYgKFxuICAgICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgICBmb250U2l6ZTogMTQsXG4gICAgICAgICAgICBjb2xvcjogQ09MT1JTLm5ldXRyYWw2MCxcbiAgICAgICAgICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMyxcbiAgICAgICAgICAgIG1heFdpZHRoOiBcIjEwMGNoXCIsXG4gICAgICAgICAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG4gICAgICAgICAgfX0+XG4gICAgICAgICAgICB7bm90ZX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgZmxleDogXCIxXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgIH19PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJlbmRcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJlbmRcIixcbiAgICAgICAgZ2FwOiA4LFxuICAgICAgICBtaW5IZWlnaHQ6IDQyLFxuICAgICAgfX0+XG4gICAgICAgIHtwcmV2QnV0dG9uICYmIDxTdGVwQnV0dG9uIGtpbmQ9XCJwcmV2XCIgey4uLnByZXZCdXR0b259IC8+fVxuICAgICAgICB7bmV4dEJ1dHRvbiAmJiA8U3RlcEJ1dHRvbiBraW5kPVwibmV4dFwiIHsuLi5uZXh0QnV0dG9ufSAvPn1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst StepContainer = _ref4 => {\n  let {\n    title,\n    note,\n    nextButton,\n    prevButton,\n    children\n  } = _ref4;\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"div\", {\n    css: _ref5,\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"div\", {\n      children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"h1\", {\n        \"aria-live\": \"polite\",\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.css)({\n          textAlign: \"center\",\n          fontSize: 32,\n          fontWeight: 700,\n          color: _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral70,\n          \"@media screen and (max-width: 600px), screen and (max-height: 400px)\": {\n            fontSize: 26\n          }\n        },  false ? 0 : \";label:StepContainer;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n        children: title\n      }), note && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"div\", {\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.css)({\n          fontSize: 14,\n          color: _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral60,\n          textAlign: \"center\",\n          lineHeight: 1.3,\n          maxWidth: \"100ch\",\n          margin: \"0 auto\"\n        },  false ? 0 : \";label:StepContainer;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n        children: note\n      })]\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"div\", {\n      css: _ref6,\n      children: children\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"div\", {\n      css: _ref7,\n      children: [prevButton && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(StepButton, {\n        kind: \"prev\",\n        ...prevButton\n      }), nextButton && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(StepButton, {\n        kind: \"next\",\n        ...nextButton\n      })]\n    })]\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/steps/elements.tsx\n");

/***/ }),

/***/ "./src/steps/finish/index.tsx":
/*!************************************!*\
  !*** ./src/steps/finish/index.tsx ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Finish: function() { return /* binding */ Finish; },\n/* harmony export */   prettyFileSize: function() { return /* binding */ prettyFileSize; },\n/* harmony export */   sharedButtonStyle: function() { return /* binding */ sharedButtonStyle; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var react_icons_lu__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-icons/lu */ \"./node_modules/react-icons/lu/index.esm.js\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var _studio_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../studio-state */ \"./src/studio-state.tsx\");\n/* harmony import */ var _elements__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../elements */ \"./src/steps/elements.tsx\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _save_locally__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./save-locally */ \"./src/steps/finish/save-locally.tsx\");\n/* harmony import */ var _upload__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./upload */ \"./src/steps/finish/upload.tsx\");\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../settings */ \"./src/settings.tsx\");\n/* harmony import */ var _shortcuts__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../shortcuts */ \"./src/shortcuts.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _ref2 =  false ? 0 : {\n  name: \"16acono-Finish\",\n  styles: \"height:calc(35%);label:Finish;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref3 =  false ? 0 : {\n  name: \"1pxzgaj-Finish\",\n  styles: \"height:calc(65%);label:Finish;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2ZpbmlzaC9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkZXIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2ZpbmlzaC9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgeyBMdVJvdGF0ZUN3IH0gZnJvbSBcInJlYWN0LWljb25zL2x1XCI7XG5pbXBvcnQgeyBzY3JlZW5XaWR0aEF0TW9zdCwgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU3R1ZGlvU3RhdGUgfSBmcm9tIFwiLi4vLi4vc3R1ZGlvLXN0YXRlXCI7XG5pbXBvcnQgeyBTdGVwUHJvcHMgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7IFN0ZXBDb250YWluZXIgfSBmcm9tIFwiLi4vZWxlbWVudHNcIjtcbmltcG9ydCB7IENPTE9SUywgZm9jdXNTdHlsZSB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBTYXZlTG9jYWxseSB9IGZyb20gXCIuL3NhdmUtbG9jYWxseVwiO1xuaW1wb3J0IHsgVXBsb2FkQm94IH0gZnJvbSBcIi4vdXBsb2FkXCI7XG5pbXBvcnQgeyBGaVhDaXJjbGUgfSBmcm9tIFwicmVhY3QtaWNvbnMvZmlcIjtcbmltcG9ydCB7IFNldHRpbmdzLCB1c2VTZXR0aW5ncyB9IGZyb20gXCIuLi8uLi9zZXR0aW5nc1wiO1xuaW1wb3J0IHsgU0hPUlRDVVRTLCB1c2VTaG9ydGN1dCB9IGZyb20gXCIuLi8uLi9zaG9ydGN1dHNcIjtcbmltcG9ydCB7IGkxOG4gfSBmcm9tIFwiaTE4bmV4dFwiO1xuXG5cblxuXG5leHBvcnQgY29uc3QgRmluaXNoOiBSZWFjdC5GQzxTdGVwUHJvcHM+ID0gKHsgZ29Ub1ByZXZTdGVwLCBnb1RvRmlyc3RTdGVwIH0pID0+IHtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCB7IHJlY29yZGluZ3MsIHVwbG9hZDogdXBsb2FkU3RhdGUgfSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3Qgc2V0dGluZ3MgPSB1c2VTZXR0aW5ncygpO1xuXG4gIGNvbnN0IGFsbERvd25sb2FkZWQgPSByZWNvcmRpbmdzLmV2ZXJ5KHJlYyA9PiByZWMuZG93bmxvYWRlZCk7XG4gIGNvbnN0IHBvc3NpYmx5RG9uZSA9ICh1cGxvYWRTdGF0ZS5zdGF0ZSA9PT0gXCJ1cGxvYWRlZFwiIHx8IGFsbERvd25sb2FkZWQpXG4gICAgJiYgdXBsb2FkU3RhdGUuc3RhdGUgIT09IFwidXBsb2FkaW5nXCI7XG4gIGNvbnN0IGhpZGVCYWNrID0gdXBsb2FkU3RhdGUuc3RhdGUgIT09IFwibm90X3VwbG9hZGVkXCIgfHwgYWxsRG93bmxvYWRlZDtcblxuICBjb25zdCBzdGFydEFnYWluID0ge1xuICAgIGxhYmVsOiB0KFwic3RlcHMuZmluaXNoLm5ldy1yZWNvcmRpbmdcIiksXG4gICAgaWNvbjogPEx1Um90YXRlQ3cgLz4sXG4gICAgb25DbGljazogKCkgPT4ge1xuICAgICAgY29uc3QgZG9JdCA9IHdpbmRvdy5jb25maXJtKHQoXCJzdGVwcy5maW5pc2gubmV3LXJlY29yZGluZy13YXJuaW5nXCIpKTtcbiAgICAgIGlmIChkb0l0KSB7XG4gICAgICAgIGRpc3BhdGNoKHsgdHlwZTogXCJSRVNFVFwiIH0pO1xuICAgICAgICBnb1RvRmlyc3RTdGVwKCk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbiAgY29uc3QgcmV0dXJuVGFyZ2V0ID0gZ2V0UmV0dXJuVGFyZ2V0KHNldHRpbmdzKTtcbiAgY29uc3QgbmV4dEJ1dHRvbiA9IHJldHVyblRhcmdldFxuICAgID8ge1xuICAgICAgbGFiZWw6IHQoXCJzdGVwcy5maW5pc2guZmluaXNoLWJ1dHRvblwiKSxcbiAgICAgIGRpc2FibGVkOiAhcG9zc2libHlEb25lLFxuICAgICAgcG9wb3ZlckVudHJpZXM6IFtcbiAgICAgICAgc3RhcnRBZ2FpbixcbiAgICAgICAge1xuICAgICAgICAgIGxhYmVsOiBzZXR0aW5ncy5yZXR1cm4/LmxhYmVsXG4gICAgICAgICAgICA/IHQoXCJzdGVwcy5maW5pc2gucmV0dXJuLXRvXCIsIHsgbGFiZWw6IHNldHRpbmdzLnJldHVybi5sYWJlbCB9KVxuICAgICAgICAgICAgOiB0KFwic3RlcHMuZmluaXNoLnJldHVybi10by1uby1sYWJlbFwiKSxcbiAgICAgICAgICBocmVmOiByZXR1cm5UYXJnZXQsXG4gICAgICAgICAgaWNvbjogPEZpWENpcmNsZSAvPixcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfVxuICAgIDoge1xuICAgICAgZGlzYWJsZWQ6ICFwb3NzaWJseURvbmUsXG4gICAgICAuLi5zdGFydEFnYWluLFxuICAgIH07XG5cbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLmZpbmlzaC5zdGFydE5ld1JlY29yZGluZywgc3RhcnRBZ2Fpbi5vbkNsaWNrLCB7XG4gICAgZW5hYmxlZDogcG9zc2libHlEb25lLFxuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxTdGVwQ29udGFpbmVyXG4gICAgICB0aXRsZT17dChcInN0ZXBzLmZpbmlzaC5sYWJlbFwiKX1cbiAgICAgIHByZXZCdXR0b249e2hpZGVCYWNrID8gdW5kZWZpbmVkIDogeyBvbkNsaWNrOiBnb1RvUHJldlN0ZXAgfX1cbiAgICAgIG5leHRCdXR0b249e25leHRCdXR0b259XG4gICAgPlxuICAgICAgey8qIEEgc3BhY2VyIHRvIHB1c2ggdGhlIGJveGVzIGEgYml0IGZ1cnRoZXIgdXAgKi99XG4gICAgICA8ZGl2IGNzcz17eyBoZWlnaHQ6IFwiY2FsYygzNSUpXCIgfX0vPlxuXG4gICAgICA8ZGl2IGNzcz17e1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwic3RhcnRcIixcbiAgICAgICAgZ2FwOiAxNixcbiAgICAgICAgW3NjcmVlbldpZHRoQXRNb3N0KDcwMCldOiB7XG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICB9LFxuICAgICAgfX0+XG4gICAgICAgIDxCb3ggdGl0bGU9e3QoXCJzdGVwcy5maW5pc2gudXBsb2FkLmxhYmVsXCIpfT5cbiAgICAgICAgICA8VXBsb2FkQm94IC8+XG4gICAgICAgIDwvQm94PlxuICAgICAgICA8Qm94IHRpdGxlPXt0KFwic3RlcHMuZmluaXNoLnNhdmUtbG9jYWxseS5sYWJlbFwiKX0+XG4gICAgICAgICAgPFNhdmVMb2NhbGx5IC8+XG4gICAgICAgIDwvQm94PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIHsvKiBBIHNwYWNlciB0byBwdXNoIHRoZSBib3hlcyBhIGJpdCBmdXJ0aGVyIHVwICovfVxuICAgICAgPGRpdiBjc3M9e3sgaGVpZ2h0OiBcImNhbGMoNjUlKVwiIH19Lz5cbiAgICA8L1N0ZXBDb250YWluZXI+XG4gICk7XG59O1xuXG50eXBlIEJveFByb3BzID0gUmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48e1xuICB0aXRsZTogc3RyaW5nO1xufT47XG5cbmNvbnN0IEJveDogUmVhY3QuRkM8Qm94UHJvcHM+ID0gKHsgdGl0bGUsIGNoaWxkcmVuIH0pID0+IHtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgbWF4V2lkdGg6IDQyMCxcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICAgIGJveFNoYWRvdzogaXNIaWdoQ29udHJhc3QgPyBcIm5vbmVcIiA6IFwiMCA0cHggMTZweCB2YXIoLS1zaGFkb3ctY29sb3IpXCIsXG4gICAgICBib3JkZXI6IGAxcHggc29saWQgJHtDT0xPUlMubmV1dHJhbDE1fWAsXG4gICAgICBwYWRkaW5nOiBcIjI0cHggMzJweFwiLFxuICAgICAgYm9yZGVyUmFkaXVzOiA2LFxuICAgICAgbWluSGVpZ2h0OiAzMzAsIC8vIE1ha2UgYm90aCBib3hlcyBzYW1lIGhlaWdodCBpbiBjb21tb24gdXNlIGNhc2VzXG4gICAgfX0+XG4gICAgICA8aDIgY3NzPXt7XG4gICAgICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgICAgICAgZm9udFNpemU6IDIwLFxuICAgICAgICBmb250V2VpZ2h0OiA3MDAsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogMTIsXG4gICAgICB9fT57dGl0bGV9PC9oMj5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cblxuY29uc3QgZ2V0UmV0dXJuVGFyZ2V0ID0gKHNldHRpbmdzOiBTZXR0aW5ncykgPT4ge1xuICBpZiAoIXNldHRpbmdzLnJldHVybj8udGFyZ2V0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgdGFyZ2V0VXJsOiBVUkw7XG4gIHRyeSB7XG4gICAgdGFyZ2V0VXJsID0gbmV3IFVSTChzZXR0aW5ncy5yZXR1cm4udGFyZ2V0LCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgYWxsb3dlZERvbWFpbnMgPSBbd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLCAuLi4oc2V0dGluZ3MucmV0dXJuPy5hbGxvd2VkRG9tYWlucyB8fCBbXSldO1xuICBjb25zdCBhbGxvd2VkID0gYWxsb3dlZERvbWFpbnMuc29tZShkb21haW4gPT4gdGFyZ2V0VXJsLmhvc3RuYW1lID09PSBkb21haW4pXG4gICAgJiYgKHRhcmdldFVybC5wcm90b2NvbCA9PT0gXCJodHRwczpcIiB8fCB0YXJnZXRVcmwucHJvdG9jb2wgPT09IFwiaHR0cDpcIik7XG5cbiAgaWYgKCFhbGxvd2VkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gc2V0dGluZ3MucmV0dXJuLnRhcmdldDtcbn07XG5cbmV4cG9ydCBjb25zdCBzaGFyZWRCdXR0b25TdHlsZSA9IChpc0hpZ2hDb250cmFzdDogYm9vbGVhbikgPT4gKHtcbiAgZGlzcGxheTogXCJmbGV4XCIsXG4gIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gIHBhZGRpbmc6IFwiOHB4IDEycHhcIixcbiAgZ2FwOiAxMixcbiAgYm9yZGVyUmFkaXVzOiA4LFxuICB0ZXh0RGVjb3JhdGlvbjogXCJub25lXCIsXG4gIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gIFwiOm5vdChbZGlzYWJsZWRdKVwiOiB7XG4gICAgY29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5hY2NlbnQ3LFxuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLmFjY2VudDgsXG4gICAgICAuLi5pc0hpZ2hDb250cmFzdCAmJiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwxNSxcbiAgICAgICAgb3V0bGluZTogYDJweCBzb2xpZCAke0NPTE9SUy5hY2NlbnQ4fWAsXG4gICAgICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDIwLFxuICAgICAgfSxcbiAgICB9LFxuICB9LFxuICBcIiZbZGlzYWJsZWRdXCI6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMTUsXG4gICAgY29sb3I6IENPTE9SUy5uZXV0cmFsNzAsXG4gIH0sXG4gIC4uLmZvY3VzU3R5bGUoeyBvZmZzZXQ6IDEgfSksXG59KSBhcyBjb25zdDtcblxuLyoqXG4gKiBHZXQgZmlsZSBzaXplIGluIGh1bWFuIHJlYWRhYmxlIGZvcm1hdC4gV2UgdXNlIGJhc2UtMTAwMCBYQiBpbnN0ZWFkIG9mXG4gKiBiYXNlLTEwMjQgWGlCLCBhcyB0aGUgbGF0dGVyIHdvdWxkIHByb2JhYmx5IGNvbmZ1c2Ugc29tZSB1c2VycyBhbmQgbWFueVxuICogZmlsZSBtYW5hZ2VycyB1c2UgYmFzZS0xMDAwIGFueXdheS4gTm90YWJseSwgdGhlIHdpbmRvd3MgZmlsZSBtYW5hZ2VyXG4gKiBjYWxjdWxhdGVzIHdpdGggYmFzZS0xMDI0IGJ1dCBzaG93cyBcIlhCXCIuIFNvIGl0IGlzIGx5aW5nLlxuKi9cbmV4cG9ydCBjb25zdCBwcmV0dHlGaWxlU2l6ZSA9IChudW1CeXRlczogbnVtYmVyLCBpMThuOiBpMThuKSA9PiB7XG4gIGNvbnN0IHJvdW5kID0gKG46IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IGRpZ2l0cyA9IG4gPCAxMCA/IDEgOiAwO1xuICAgIHJldHVybiBuLnRvTG9jYWxlU3RyaW5nKGkxOG4ubGFuZ3VhZ2UsIHtcbiAgICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogZGlnaXRzLFxuICAgICAgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiBkaWdpdHMsXG4gICAgfSk7XG4gIH07XG5cbiAgaWYgKG51bUJ5dGVzIDwgMTAwMCkge1xuICAgIHJldHVybiBgJHtudW1CeXRlc30gQmA7XG4gIH0gZWxzZSBpZiAobnVtQnl0ZXMgPCA5OTlfNTAwKSB7XG4gICAgcmV0dXJuIGAke3JvdW5kKG51bUJ5dGVzIC8gMTAwMCl9IEtCYDtcbiAgfSBlbHNlIGlmIChudW1CeXRlcyA8IDk5OV81MDBfMDAwKSB7XG4gICAgcmV0dXJuIGAke3JvdW5kKG51bUJ5dGVzIC8gKDFfMDAwXzAwMCkpfSBNQmA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGAke3JvdW5kKG51bUJ5dGVzIC8gKDFfMDAwXzAwMF8wMDApKX0gR0JgO1xuICB9XG59O1xuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst Finish = _ref => {\n  let {\n    goToPrevStep,\n    goToFirstStep\n  } = _ref;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_0__.useTranslation)();\n  const {\n    recordings,\n    upload: uploadState\n  } = (0,_studio_state__WEBPACK_IMPORTED_MODULE_2__.useStudioState)();\n  const dispatch = (0,_studio_state__WEBPACK_IMPORTED_MODULE_2__.useDispatch)();\n  const settings = (0,_settings__WEBPACK_IMPORTED_MODULE_7__.useSettings)();\n  const allDownloaded = recordings.every(rec => rec.downloaded);\n  const possiblyDone = (uploadState.state === \"uploaded\" || allDownloaded) && uploadState.state !== \"uploading\";\n  const hideBack = uploadState.state !== \"not_uploaded\" || allDownloaded;\n  const startAgain = {\n    label: t(\"steps.finish.new-recording\"),\n    icon: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(react_icons_lu__WEBPACK_IMPORTED_MODULE_10__.LuRotateCw, {}),\n    onClick: () => {\n      const doIt = window.confirm(t(\"steps.finish.new-recording-warning\"));\n      if (doIt) {\n        dispatch({\n          type: \"RESET\"\n        });\n        goToFirstStep();\n      }\n    }\n  };\n  const returnTarget = getReturnTarget(settings);\n  const nextButton = returnTarget ? {\n    label: t(\"steps.finish.finish-button\"),\n    disabled: !possiblyDone,\n    popoverEntries: [startAgain, {\n      label: settings.return?.label ? t(\"steps.finish.return-to\", {\n        label: settings.return.label\n      }) : t(\"steps.finish.return-to-no-label\"),\n      href: returnTarget,\n      icon: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_11__.FiXCircle, {})\n    }]\n  } : {\n    disabled: !possiblyDone,\n    ...startAgain\n  };\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_8__.useShortcut)(_shortcuts__WEBPACK_IMPORTED_MODULE_8__.SHORTCUTS.finish.startNewRecording, startAgain.onClick, {\n    enabled: possiblyDone\n  });\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(_elements__WEBPACK_IMPORTED_MODULE_3__.StepContainer, {\n    title: t(\"steps.finish.label\"),\n    prevButton: hideBack ? undefined : {\n      onClick: goToPrevStep\n    },\n    nextButton: nextButton,\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"div\", {\n      css: _ref2\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(\"div\", {\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.css)({\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"start\",\n        gap: 16,\n        [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_1__.screenWidthAtMost)(700)]: {\n          flexDirection: \"column\",\n          alignItems: \"center\"\n        }\n      },  false ? 0 : \";label:Finish;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n      children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(Box, {\n        title: t(\"steps.finish.upload.label\"),\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_upload__WEBPACK_IMPORTED_MODULE_6__.UploadBox, {})\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(Box, {\n        title: t(\"steps.finish.save-locally.label\"),\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_save_locally__WEBPACK_IMPORTED_MODULE_5__.SaveLocally, {})\n      })]\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"div\", {\n      css: _ref3\n    })]\n  });\n};\nvar _ref5 =  false ? 0 : {\n  name: \"w3m56a-Box\",\n  styles: \"text-align:center;font-size:20px;font-weight:700;margin-bottom:12px;label:Box;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst Box = _ref4 => {\n  let {\n    title,\n    children\n  } = _ref4;\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_1__.useColorScheme)();\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.css)({\n      maxWidth: 420,\n      width: \"100%\",\n      backgroundColor: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral05,\n      boxShadow: isHighContrast ? \"none\" : \"0 4px 16px var(--shadow-color)\",\n      border: `1px solid ${_util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral15}`,\n      padding: \"24px 32px\",\n      borderRadius: 6,\n      minHeight: 330 // Make both boxes same height in common use cases\n    },  false ? 0 : \";label:Box;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"h2\", {\n      css: _ref5,\n      children: title\n    }), children]\n  });\n};\nconst getReturnTarget = settings => {\n  if (!settings.return?.target) {\n    return null;\n  }\n  let targetUrl;\n  try {\n    targetUrl = new URL(settings.return.target, window.location.href);\n  } catch {\n    return null;\n  }\n  const allowedDomains = [window.location.hostname, ...(settings.return?.allowedDomains || [])];\n  const allowed = allowedDomains.some(domain => targetUrl.hostname === domain) && (targetUrl.protocol === \"https:\" || targetUrl.protocol === \"http:\");\n  if (!allowed) {\n    return null;\n  }\n  return settings.return.target;\n};\nconst sharedButtonStyle = isHighContrast => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  padding: \"8px 12px\",\n  gap: 12,\n  borderRadius: 8,\n  textDecoration: \"none\",\n  position: \"relative\",\n  \":not([disabled])\": {\n    color: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral05,\n    cursor: \"pointer\",\n    backgroundColor: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.accent7,\n    \":hover\": {\n      backgroundColor: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.accent8,\n      ...(isHighContrast && {\n        backgroundColor: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral15,\n        outline: `2px solid ${_util__WEBPACK_IMPORTED_MODULE_4__.COLORS.accent8}`,\n        color: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral20\n      })\n    }\n  },\n  \"&[disabled]\": {\n    backgroundColor: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral15,\n    color: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral70\n  },\n  ...(0,_util__WEBPACK_IMPORTED_MODULE_4__.focusStyle)({\n    offset: 1\n  })\n});\n\n/**\n * Get file size in human readable format. We use base-1000 XB instead of\n * base-1024 XiB, as the latter would probably confuse some users and many\n * file managers use base-1000 anyway. Notably, the windows file manager\n * calculates with base-1024 but shows \"XB\". So it is lying.\n*/\nconst prettyFileSize = (numBytes, i18n) => {\n  const round = n => {\n    const digits = n < 10 ? 1 : 0;\n    return n.toLocaleString(i18n.language, {\n      minimumFractionDigits: digits,\n      maximumFractionDigits: digits\n    });\n  };\n  if (numBytes < 1000) {\n    return `${numBytes} B`;\n  } else if (numBytes < 999_500) {\n    return `${round(numBytes / 1000)} KB`;\n  } else if (numBytes < 999_500_000) {\n    return `${round(numBytes / 1_000_000)} MB`;\n  } else {\n    return `${round(numBytes / 1_000_000_000)} GB`;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RlcHMvZmluaXNoL2luZGV4LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1BO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBR0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUlBO0FBQUE7QUFBQTtBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBS0E7QUFBQTtBQUNBO0FBR0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuY2FzdC1zdHVkaW8vLi9zcmMvc3RlcHMvZmluaXNoL2luZGV4LnRzeD8zYTU0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCB7IEx1Um90YXRlQ3cgfSBmcm9tIFwicmVhY3QtaWNvbnMvbHVcIjtcbmltcG9ydCB7IHNjcmVlbldpZHRoQXRNb3N0LCB1c2VDb2xvclNjaGVtZSB9IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTdHVkaW9TdGF0ZSB9IGZyb20gXCIuLi8uLi9zdHVkaW8tc3RhdGVcIjtcbmltcG9ydCB7IFN0ZXBQcm9wcyB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgU3RlcENvbnRhaW5lciB9IGZyb20gXCIuLi9lbGVtZW50c1wiO1xuaW1wb3J0IHsgQ09MT1JTLCBmb2N1c1N0eWxlIH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcbmltcG9ydCB7IFNhdmVMb2NhbGx5IH0gZnJvbSBcIi4vc2F2ZS1sb2NhbGx5XCI7XG5pbXBvcnQgeyBVcGxvYWRCb3ggfSBmcm9tIFwiLi91cGxvYWRcIjtcbmltcG9ydCB7IEZpWENpcmNsZSB9IGZyb20gXCJyZWFjdC1pY29ucy9maVwiO1xuaW1wb3J0IHsgU2V0dGluZ3MsIHVzZVNldHRpbmdzIH0gZnJvbSBcIi4uLy4uL3NldHRpbmdzXCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIHVzZVNob3J0Y3V0IH0gZnJvbSBcIi4uLy4uL3Nob3J0Y3V0c1wiO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gXCJpMThuZXh0XCI7XG5cblxuXG5cbmV4cG9ydCBjb25zdCBGaW5pc2g6IFJlYWN0LkZDPFN0ZXBQcm9wcz4gPSAoeyBnb1RvUHJldlN0ZXAsIGdvVG9GaXJzdFN0ZXAgfSkgPT4ge1xuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IHsgcmVjb3JkaW5ncywgdXBsb2FkOiB1cGxvYWRTdGF0ZSB9ID0gdXNlU3R1ZGlvU3RhdGUoKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBzZXR0aW5ncyA9IHVzZVNldHRpbmdzKCk7XG5cbiAgY29uc3QgYWxsRG93bmxvYWRlZCA9IHJlY29yZGluZ3MuZXZlcnkocmVjID0+IHJlYy5kb3dubG9hZGVkKTtcbiAgY29uc3QgcG9zc2libHlEb25lID0gKHVwbG9hZFN0YXRlLnN0YXRlID09PSBcInVwbG9hZGVkXCIgfHwgYWxsRG93bmxvYWRlZClcbiAgICAmJiB1cGxvYWRTdGF0ZS5zdGF0ZSAhPT0gXCJ1cGxvYWRpbmdcIjtcbiAgY29uc3QgaGlkZUJhY2sgPSB1cGxvYWRTdGF0ZS5zdGF0ZSAhPT0gXCJub3RfdXBsb2FkZWRcIiB8fCBhbGxEb3dubG9hZGVkO1xuXG4gIGNvbnN0IHN0YXJ0QWdhaW4gPSB7XG4gICAgbGFiZWw6IHQoXCJzdGVwcy5maW5pc2gubmV3LXJlY29yZGluZ1wiKSxcbiAgICBpY29uOiA8THVSb3RhdGVDdyAvPixcbiAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICBjb25zdCBkb0l0ID0gd2luZG93LmNvbmZpcm0odChcInN0ZXBzLmZpbmlzaC5uZXctcmVjb3JkaW5nLXdhcm5pbmdcIikpO1xuICAgICAgaWYgKGRvSXQpIHtcbiAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBcIlJFU0VUXCIgfSk7XG4gICAgICAgIGdvVG9GaXJzdFN0ZXAoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuICBjb25zdCByZXR1cm5UYXJnZXQgPSBnZXRSZXR1cm5UYXJnZXQoc2V0dGluZ3MpO1xuICBjb25zdCBuZXh0QnV0dG9uID0gcmV0dXJuVGFyZ2V0XG4gICAgPyB7XG4gICAgICBsYWJlbDogdChcInN0ZXBzLmZpbmlzaC5maW5pc2gtYnV0dG9uXCIpLFxuICAgICAgZGlzYWJsZWQ6ICFwb3NzaWJseURvbmUsXG4gICAgICBwb3BvdmVyRW50cmllczogW1xuICAgICAgICBzdGFydEFnYWluLFxuICAgICAgICB7XG4gICAgICAgICAgbGFiZWw6IHNldHRpbmdzLnJldHVybj8ubGFiZWxcbiAgICAgICAgICAgID8gdChcInN0ZXBzLmZpbmlzaC5yZXR1cm4tdG9cIiwgeyBsYWJlbDogc2V0dGluZ3MucmV0dXJuLmxhYmVsIH0pXG4gICAgICAgICAgICA6IHQoXCJzdGVwcy5maW5pc2gucmV0dXJuLXRvLW5vLWxhYmVsXCIpLFxuICAgICAgICAgIGhyZWY6IHJldHVyblRhcmdldCxcbiAgICAgICAgICBpY29uOiA8RmlYQ2lyY2xlIC8+LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9XG4gICAgOiB7XG4gICAgICBkaXNhYmxlZDogIXBvc3NpYmx5RG9uZSxcbiAgICAgIC4uLnN0YXJ0QWdhaW4sXG4gICAgfTtcblxuICB1c2VTaG9ydGN1dChTSE9SVENVVFMuZmluaXNoLnN0YXJ0TmV3UmVjb3JkaW5nLCBzdGFydEFnYWluLm9uQ2xpY2ssIHtcbiAgICBlbmFibGVkOiBwb3NzaWJseURvbmUsXG4gIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPFN0ZXBDb250YWluZXJcbiAgICAgIHRpdGxlPXt0KFwic3RlcHMuZmluaXNoLmxhYmVsXCIpfVxuICAgICAgcHJldkJ1dHRvbj17aGlkZUJhY2sgPyB1bmRlZmluZWQgOiB7IG9uQ2xpY2s6IGdvVG9QcmV2U3RlcCB9fVxuICAgICAgbmV4dEJ1dHRvbj17bmV4dEJ1dHRvbn1cbiAgICA+XG4gICAgICB7LyogQSBzcGFjZXIgdG8gcHVzaCB0aGUgYm94ZXMgYSBiaXQgZnVydGhlciB1cCAqL31cbiAgICAgIDxkaXYgY3NzPXt7IGhlaWdodDogXCJjYWxjKDM1JSlcIiB9fS8+XG5cbiAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJzdGFydFwiLFxuICAgICAgICBnYXA6IDE2LFxuICAgICAgICBbc2NyZWVuV2lkdGhBdE1vc3QoNzAwKV06IHtcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIH0sXG4gICAgICB9fT5cbiAgICAgICAgPEJveCB0aXRsZT17dChcInN0ZXBzLmZpbmlzaC51cGxvYWQubGFiZWxcIil9PlxuICAgICAgICAgIDxVcGxvYWRCb3ggLz5cbiAgICAgICAgPC9Cb3g+XG4gICAgICAgIDxCb3ggdGl0bGU9e3QoXCJzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LmxhYmVsXCIpfT5cbiAgICAgICAgICA8U2F2ZUxvY2FsbHkgLz5cbiAgICAgICAgPC9Cb3g+XG4gICAgICA8L2Rpdj5cblxuICAgICAgey8qIEEgc3BhY2VyIHRvIHB1c2ggdGhlIGJveGVzIGEgYml0IGZ1cnRoZXIgdXAgKi99XG4gICAgICA8ZGl2IGNzcz17eyBoZWlnaHQ6IFwiY2FsYyg2NSUpXCIgfX0vPlxuICAgIDwvU3RlcENvbnRhaW5lcj5cbiAgKTtcbn07XG5cbnR5cGUgQm94UHJvcHMgPSBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjx7XG4gIHRpdGxlOiBzdHJpbmc7XG59PjtcblxuY29uc3QgQm94OiBSZWFjdC5GQzxCb3hQcm9wcz4gPSAoeyB0aXRsZSwgY2hpbGRyZW4gfSkgPT4ge1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7XG4gICAgICBtYXhXaWR0aDogNDIwLFxuICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgYm94U2hhZG93OiBpc0hpZ2hDb250cmFzdCA/IFwibm9uZVwiIDogXCIwIDRweCAxNnB4IHZhcigtLXNoYWRvdy1jb2xvcilcIixcbiAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAke0NPTE9SUy5uZXV0cmFsMTV9YCxcbiAgICAgIHBhZGRpbmc6IFwiMjRweCAzMnB4XCIsXG4gICAgICBib3JkZXJSYWRpdXM6IDYsXG4gICAgICBtaW5IZWlnaHQ6IDMzMCwgLy8gTWFrZSBib3RoIGJveGVzIHNhbWUgaGVpZ2h0IGluIGNvbW1vbiB1c2UgY2FzZXNcbiAgICB9fT5cbiAgICAgIDxoMiBjc3M9e3tcbiAgICAgICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgICAgICBmb250U2l6ZTogMjAsXG4gICAgICAgIGZvbnRXZWlnaHQ6IDcwMCxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAxMixcbiAgICAgIH19Pnt0aXRsZX08L2gyPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuXG5jb25zdCBnZXRSZXR1cm5UYXJnZXQgPSAoc2V0dGluZ3M6IFNldHRpbmdzKSA9PiB7XG4gIGlmICghc2V0dGluZ3MucmV0dXJuPy50YXJnZXQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCB0YXJnZXRVcmw6IFVSTDtcbiAgdHJ5IHtcbiAgICB0YXJnZXRVcmwgPSBuZXcgVVJMKHNldHRpbmdzLnJldHVybi50YXJnZXQsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBhbGxvd2VkRG9tYWlucyA9IFt3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUsIC4uLihzZXR0aW5ncy5yZXR1cm4/LmFsbG93ZWREb21haW5zIHx8IFtdKV07XG4gIGNvbnN0IGFsbG93ZWQgPSBhbGxvd2VkRG9tYWlucy5zb21lKGRvbWFpbiA9PiB0YXJnZXRVcmwuaG9zdG5hbWUgPT09IGRvbWFpbilcbiAgICAmJiAodGFyZ2V0VXJsLnByb3RvY29sID09PSBcImh0dHBzOlwiIHx8IHRhcmdldFVybC5wcm90b2NvbCA9PT0gXCJodHRwOlwiKTtcblxuICBpZiAoIWFsbG93ZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBzZXR0aW5ncy5yZXR1cm4udGFyZ2V0O1xufTtcblxuZXhwb3J0IGNvbnN0IHNoYXJlZEJ1dHRvblN0eWxlID0gKGlzSGlnaENvbnRyYXN0OiBib29sZWFuKSA9PiAoe1xuICBkaXNwbGF5OiBcImZsZXhcIixcbiAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgcGFkZGluZzogXCI4cHggMTJweFwiLFxuICBnYXA6IDEyLFxuICBib3JkZXJSYWRpdXM6IDgsXG4gIHRleHREZWNvcmF0aW9uOiBcIm5vbmVcIixcbiAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgXCI6bm90KFtkaXNhYmxlZF0pXCI6IHtcbiAgICBjb2xvcjogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLmFjY2VudDcsXG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMuYWNjZW50OCxcbiAgICAgIC4uLmlzSGlnaENvbnRyYXN0ICYmIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDE1LFxuICAgICAgICBvdXRsaW5lOiBgMnB4IHNvbGlkICR7Q09MT1JTLmFjY2VudDh9YCxcbiAgICAgICAgY29sb3I6IENPTE9SUy5uZXV0cmFsMjAsXG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG4gIFwiJltkaXNhYmxlZF1cIjoge1xuICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwxNSxcbiAgICBjb2xvcjogQ09MT1JTLm5ldXRyYWw3MCxcbiAgfSxcbiAgLi4uZm9jdXNTdHlsZSh7IG9mZnNldDogMSB9KSxcbn0pIGFzIGNvbnN0O1xuXG4vKipcbiAqIEdldCBmaWxlIHNpemUgaW4gaHVtYW4gcmVhZGFibGUgZm9ybWF0LiBXZSB1c2UgYmFzZS0xMDAwIFhCIGluc3RlYWQgb2ZcbiAqIGJhc2UtMTAyNCBYaUIsIGFzIHRoZSBsYXR0ZXIgd291bGQgcHJvYmFibHkgY29uZnVzZSBzb21lIHVzZXJzIGFuZCBtYW55XG4gKiBmaWxlIG1hbmFnZXJzIHVzZSBiYXNlLTEwMDAgYW55d2F5LiBOb3RhYmx5LCB0aGUgd2luZG93cyBmaWxlIG1hbmFnZXJcbiAqIGNhbGN1bGF0ZXMgd2l0aCBiYXNlLTEwMjQgYnV0IHNob3dzIFwiWEJcIi4gU28gaXQgaXMgbHlpbmcuXG4qL1xuZXhwb3J0IGNvbnN0IHByZXR0eUZpbGVTaXplID0gKG51bUJ5dGVzOiBudW1iZXIsIGkxOG46IGkxOG4pID0+IHtcbiAgY29uc3Qgcm91bmQgPSAobjogbnVtYmVyKSA9PiB7XG4gICAgY29uc3QgZGlnaXRzID0gbiA8IDEwID8gMSA6IDA7XG4gICAgcmV0dXJuIG4udG9Mb2NhbGVTdHJpbmcoaTE4bi5sYW5ndWFnZSwge1xuICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiBkaWdpdHMsXG4gICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IGRpZ2l0cyxcbiAgICB9KTtcbiAgfTtcblxuICBpZiAobnVtQnl0ZXMgPCAxMDAwKSB7XG4gICAgcmV0dXJuIGAke251bUJ5dGVzfSBCYDtcbiAgfSBlbHNlIGlmIChudW1CeXRlcyA8IDk5OV81MDApIHtcbiAgICByZXR1cm4gYCR7cm91bmQobnVtQnl0ZXMgLyAxMDAwKX0gS0JgO1xuICB9IGVsc2UgaWYgKG51bUJ5dGVzIDwgOTk5XzUwMF8wMDApIHtcbiAgICByZXR1cm4gYCR7cm91bmQobnVtQnl0ZXMgLyAoMV8wMDBfMDAwKSl9IE1CYDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYCR7cm91bmQobnVtQnl0ZXMgLyAoMV8wMDBfMDAwXzAwMCkpfSBHQmA7XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/steps/finish/index.tsx\n");

/***/ }),

/***/ "./src/steps/finish/save-locally.tsx":
/*!*******************************************!*\
  !*** ./src/steps/finish/save-locally.tsx ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SaveLocally: function() { return /* binding */ SaveLocally; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var react_icons_lu__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-icons/lu */ \"./node_modules/react-icons/lu/index.esm.js\");\n/* harmony import */ var _studio_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../studio-state */ \"./src/studio-state.tsx\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _shortcuts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../shortcuts */ \"./src/shortcuts.tsx\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! . */ \"./src/steps/finish/index.tsx\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\n\n\n\nvar _ref =  false ? 0 : {\n  name: \"7kep1k-SaveLocally\",\n  styles: \"display:flex;flex-direction:column;align-items:center;:not(:first-of-type){margin-top:32px;};label:SaveLocally;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2ZpbmlzaC9zYXZlLWxvY2FsbHkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFDbUIiLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvZmluaXNoL3NhdmUtbG9jYWxseS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgeyBGaURvd25sb2FkIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5pbXBvcnQgeyBMdUNoZWNrQ2lyY2xlMiB9IGZyb20gXCJyZWFjdC1pY29ucy9sdVwiO1xuXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU3R1ZGlvU3RhdGUgfSBmcm9tIFwiLi4vLi4vc3R1ZGlvLXN0YXRlXCI7XG5pbXBvcnQgeyByZWNvcmRpbmdGaWxlTmFtZSB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIFNob3J0Y3V0S2V5cywgdXNlU2hvcnRjdXQsIHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMgfSBmcm9tIFwiLi4vLi4vc2hvcnRjdXRzXCI7XG5pbXBvcnQgeyBwcmV0dHlGaWxlU2l6ZSwgc2hhcmVkQnV0dG9uU3R5bGUgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5cblxuZXhwb3J0IGNvbnN0IFNhdmVMb2NhbGx5OiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgY29uc3QgeyB0LCBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCB7IHJlY29yZGluZ3MsIHRpdGxlLCBwcmVzZW50ZXIgfSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3Qgc2hvd1Nob3J0Y3V0cyA9IHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMoKTtcblxuICBjb25zdCBidXR0b25zID0gcmVjb3JkaW5ncy5tYXAoKCkgPT4gdXNlUmVmPEhUTUxBbmNob3JFbGVtZW50PihudWxsKSk7XG4gIHVzZVNob3J0Y3V0KFNIT1JUQ1VUUy5maW5pc2guZG93bmxvYWQsICgpID0+IHtcbiAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBidXR0b25zKSB7XG4gICAgICBidXR0b24uY3VycmVudD8uY2xpY2soKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZWNvcmRpbmdzLm1hcCgocmVjb3JkaW5nLCBpKSA9PiB7XG4gICAgY29uc3QgeyBkZXZpY2VUeXBlLCBtaW1lVHlwZSwgdXJsLCBkb3dubG9hZGVkLCBtZWRpYTogYmxvYiB9ID0gcmVjb3JkaW5nO1xuICAgIGNvbnN0IGZsYXZvciA9IGRldmljZVR5cGUgPT09IFwiZGVza3RvcFwiID8gdChcInNvdXJjZXMtZGlzcGxheVwiKSA6IHQoXCJzb3VyY2VzLXVzZXJcIik7XG4gICAgY29uc3QgZG93bmxvYWROYW1lID0gcmVjb3JkaW5nRmlsZU5hbWUoeyBtaW1lOiBtaW1lVHlwZSwgZmxhdm9yLCB0aXRsZSwgcHJlc2VudGVyIH0pO1xuICAgIGNvbnN0IHsgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG5cbiAgICBpZiAoIXVybCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYga2V5PXtpfSBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIFwiOm5vdCg6Zmlyc3Qtb2YtdHlwZSlcIjoge1xuICAgICAgICAgIG1hcmdpblRvcDogMzIsXG4gICAgICAgIH0sXG4gICAgICB9fT5cbiAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICB9fT5cbiAgICAgICAgICA8dmlkZW9cbiAgICAgICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgICAgIG11dGVkXG4gICAgICAgICAgICBzcmM9e3VybH1cbiAgICAgICAgICAgIC8vIFdpdGhvdXQgdGhpcywgc29tZSBicm93c2VycyBzaG93IGEgYmxhY2sgdmlkZW8gZWxlbWVudCBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBmcmFtZS5cbiAgICAgICAgICAgIG9uTG9hZGVkRGF0YT17ZSA9PiBlLmN1cnJlbnRUYXJnZXQuY3VycmVudFRpbWUgPSAwfVxuICAgICAgICAgICAgcHJlbG9hZD1cImF1dG9cIlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogNCxcbiAgICAgICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgICAgICBtYXhIZWlnaHQ6IDE5MCxcbiAgICAgICAgICAgICAgbWFyZ2luOiBcIjAgYXV0b1wiLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtkb3dubG9hZGVkICYmIChcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDMwLCAzMCwgMzAsIDAuODUpXCIsXG4gICAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgZ2FwOiA4LFxuICAgICAgICAgICAgICBwYWRkaW5nOiAxMixcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjAgMCA0cHggNHB4XCIsXG4gICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgPEx1Q2hlY2tDaXJjbGUyIGNzcz17eyBmb250U2l6ZTogMjIgfX0gLz5cbiAgICAgICAgICAgICAge3QoXCJzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LnJlY29yZGluZy1zYXZlZFwiKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8YVxuICAgICAgICAgIHJlZj17YnV0dG9uc1tpXX1cbiAgICAgICAgICBhcmlhLWxhYmVsPXt0KGBzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LnNhdmUtJHtkZXZpY2VUeXBlfS1sb2NhbGx5YCl9XG4gICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICBkb3dubG9hZD17ZG93bmxvYWROYW1lfVxuICAgICAgICAgIGhyZWY9e3VybH1cbiAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaCh7IHR5cGU6IFwiTUFSS19ET1dOTE9BREVEXCIsIGluZGV4OiBpIH0pfVxuICAgICAgICAgIG9uS2V5RG93bj17ZSA9PiB7XG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09IFwiIFwiKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgYnV0dG9uc1tpXS5jdXJyZW50Py5jbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAuLi5zaGFyZWRCdXR0b25TdHlsZShpc0hpZ2hDb250cmFzdCksXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIG1heFdpZHRoOiAyNjAsXG4gICAgICAgICAgICBtYXJnaW46IFwiYXV0b1wiLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiA4LFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8RmlEb3dubG9hZCBjc3M9e3sgZm9udFNpemU6IDIwIH19IC8+XG4gICAgICAgICAge3QoXCJzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LmxhYmVsXCIpICsgXCIgKFwiICsgcHJldHR5RmlsZVNpemUoYmxvYi5zaXplLCBpMThuKSArIFwiKVwifVxuICAgICAgICAgIHtzaG93U2hvcnRjdXRzICYmIChcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHJpZ2h0OiAtNCwgYm90dG9tOiAtNCB9fT5cbiAgICAgICAgICAgICAgPFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17U0hPUlRDVVRTLmZpbmlzaC5kb3dubG9hZH0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvYT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0pO1xufTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref2 =  false ? 0 : {\n  name: \"l8veo6-SaveLocally\",\n  styles: \"position:relative;label:SaveLocally;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2ZpbmlzaC9zYXZlLWxvY2FsbHkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZDYSIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9zdGVwcy9maW5pc2gvc2F2ZS1sb2NhbGx5LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCB7IEZpRG93bmxvYWQgfSBmcm9tIFwicmVhY3QtaWNvbnMvZmlcIjtcbmltcG9ydCB7IEx1Q2hlY2tDaXJjbGUyIH0gZnJvbSBcInJlYWN0LWljb25zL2x1XCI7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTdHVkaW9TdGF0ZSB9IGZyb20gXCIuLi8uLi9zdHVkaW8tc3RhdGVcIjtcbmltcG9ydCB7IHJlY29yZGluZ0ZpbGVOYW1lIH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcbmltcG9ydCB7IFNIT1JUQ1VUUywgU2hvcnRjdXRLZXlzLCB1c2VTaG9ydGN1dCwgdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cyB9IGZyb20gXCIuLi8uLi9zaG9ydGN1dHNcIjtcbmltcG9ydCB7IHByZXR0eUZpbGVTaXplLCBzaGFyZWRCdXR0b25TdHlsZSB9IGZyb20gXCIuXCI7XG5pbXBvcnQgeyB1c2VDb2xvclNjaGVtZSB9IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5cblxuXG5leHBvcnQgY29uc3QgU2F2ZUxvY2FsbHk6IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCB7IHQsIGkxOG4gfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IHsgcmVjb3JkaW5ncywgdGl0bGUsIHByZXNlbnRlciB9ID0gdXNlU3R1ZGlvU3RhdGUoKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBzaG93U2hvcnRjdXRzID0gdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cygpO1xuXG4gIGNvbnN0IGJ1dHRvbnMgPSByZWNvcmRpbmdzLm1hcCgoKSA9PiB1c2VSZWY8SFRNTEFuY2hvckVsZW1lbnQ+KG51bGwpKTtcbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLmZpbmlzaC5kb3dubG9hZCwgKCkgPT4ge1xuICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIGJ1dHRvbnMpIHtcbiAgICAgIGJ1dHRvbi5jdXJyZW50Py5jbGljaygpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlY29yZGluZ3MubWFwKChyZWNvcmRpbmcsIGkpID0+IHtcbiAgICBjb25zdCB7IGRldmljZVR5cGUsIG1pbWVUeXBlLCB1cmwsIGRvd25sb2FkZWQsIG1lZGlhOiBibG9iIH0gPSByZWNvcmRpbmc7XG4gICAgY29uc3QgZmxhdm9yID0gZGV2aWNlVHlwZSA9PT0gXCJkZXNrdG9wXCIgPyB0KFwic291cmNlcy1kaXNwbGF5XCIpIDogdChcInNvdXJjZXMtdXNlclwiKTtcbiAgICBjb25zdCBkb3dubG9hZE5hbWUgPSByZWNvcmRpbmdGaWxlTmFtZSh7IG1pbWU6IG1pbWVUeXBlLCBmbGF2b3IsIHRpdGxlLCBwcmVzZW50ZXIgfSk7XG4gICAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICAgIGlmICghdXJsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBrZXk9e2l9IGNzcz17e1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgXCI6bm90KDpmaXJzdC1vZi10eXBlKVwiOiB7XG4gICAgICAgICAgbWFyZ2luVG9wOiAzMixcbiAgICAgICAgfSxcbiAgICAgIH19PlxuICAgICAgICA8ZGl2IGNzcz17e1xuICAgICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIH19PlxuICAgICAgICAgIDx2aWRlb1xuICAgICAgICAgICAgdGFiSW5kZXg9ey0xfVxuICAgICAgICAgICAgbXV0ZWRcbiAgICAgICAgICAgIHNyYz17dXJsfVxuICAgICAgICAgICAgLy8gV2l0aG91dCB0aGlzLCBzb21lIGJyb3dzZXJzIHNob3cgYSBibGFjayB2aWRlbyBlbGVtZW50IGluc3RlYWQgb2YgdGhlIGZpcnN0IGZyYW1lLlxuICAgICAgICAgICAgb25Mb2FkZWREYXRhPXtlID0+IGUuY3VycmVudFRhcmdldC5jdXJyZW50VGltZSA9IDB9XG4gICAgICAgICAgICBwcmVsb2FkPVwiYXV0b1wiXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiA0LFxuICAgICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgIG1heEhlaWdodDogMTkwLFxuICAgICAgICAgICAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgICAge2Rvd25sb2FkZWQgJiYgKFxuICAgICAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgY29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMzAsIDMwLCAzMCwgMC44NSlcIixcbiAgICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICBnYXA6IDgsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDEyLFxuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IFwiMCAwIDRweCA0cHhcIixcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICA8THVDaGVja0NpcmNsZTIgY3NzPXt7IGZvbnRTaXplOiAyMiB9fSAvPlxuICAgICAgICAgICAgICB7dChcInN0ZXBzLmZpbmlzaC5zYXZlLWxvY2FsbHkucmVjb3JkaW5nLXNhdmVkXCIpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxhXG4gICAgICAgICAgcmVmPXtidXR0b25zW2ldfVxuICAgICAgICAgIGFyaWEtbGFiZWw9e3QoYHN0ZXBzLmZpbmlzaC5zYXZlLWxvY2FsbHkuc2F2ZS0ke2RldmljZVR5cGV9LWxvY2FsbHlgKX1cbiAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgIGRvd25sb2FkPXtkb3dubG9hZE5hbWV9XG4gICAgICAgICAgaHJlZj17dXJsfVxuICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHsgdHlwZTogXCJNQVJLX0RPV05MT0FERURcIiwgaW5kZXg6IGkgfSl9XG4gICAgICAgICAgb25LZXlEb3duPXtlID0+IHtcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gXCIgXCIpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBidXR0b25zW2ldLmN1cnJlbnQ/LmNsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIC4uLnNoYXJlZEJ1dHRvblN0eWxlKGlzSGlnaENvbnRyYXN0KSxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDI2MCxcbiAgICAgICAgICAgIG1hcmdpbjogXCJhdXRvXCIsXG4gICAgICAgICAgICBtYXJnaW5Ub3A6IDgsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxGaURvd25sb2FkIGNzcz17eyBmb250U2l6ZTogMjAgfX0gLz5cbiAgICAgICAgICB7dChcInN0ZXBzLmZpbmlzaC5zYXZlLWxvY2FsbHkubGFiZWxcIikgKyBcIiAoXCIgKyBwcmV0dHlGaWxlU2l6ZShibG9iLnNpemUsIGkxOG4pICsgXCIpXCJ9XG4gICAgICAgICAge3Nob3dTaG9ydGN1dHMgJiYgKFxuICAgICAgICAgICAgPGRpdiBjc3M9e3sgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgcmlnaHQ6IC00LCBib3R0b206IC00IH19PlxuICAgICAgICAgICAgICA8U2hvcnRjdXRLZXlzIHNob3J0Y3V0PXtTSE9SVENVVFMuZmluaXNoLmRvd25sb2FkfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9hPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfSk7XG59O1xuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref3 =  false ? 0 : {\n  name: \"wppg6d-SaveLocally\",\n  styles: \"border-radius:4px;display:block;max-height:190px;margin:0 auto;label:SaveLocally;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2ZpbmlzaC9zYXZlLWxvY2FsbHkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVEWSIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9zdGVwcy9maW5pc2gvc2F2ZS1sb2NhbGx5LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCB7IEZpRG93bmxvYWQgfSBmcm9tIFwicmVhY3QtaWNvbnMvZmlcIjtcbmltcG9ydCB7IEx1Q2hlY2tDaXJjbGUyIH0gZnJvbSBcInJlYWN0LWljb25zL2x1XCI7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTdHVkaW9TdGF0ZSB9IGZyb20gXCIuLi8uLi9zdHVkaW8tc3RhdGVcIjtcbmltcG9ydCB7IHJlY29yZGluZ0ZpbGVOYW1lIH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcbmltcG9ydCB7IFNIT1JUQ1VUUywgU2hvcnRjdXRLZXlzLCB1c2VTaG9ydGN1dCwgdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cyB9IGZyb20gXCIuLi8uLi9zaG9ydGN1dHNcIjtcbmltcG9ydCB7IHByZXR0eUZpbGVTaXplLCBzaGFyZWRCdXR0b25TdHlsZSB9IGZyb20gXCIuXCI7XG5pbXBvcnQgeyB1c2VDb2xvclNjaGVtZSB9IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5cblxuXG5leHBvcnQgY29uc3QgU2F2ZUxvY2FsbHk6IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCB7IHQsIGkxOG4gfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IHsgcmVjb3JkaW5ncywgdGl0bGUsIHByZXNlbnRlciB9ID0gdXNlU3R1ZGlvU3RhdGUoKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBzaG93U2hvcnRjdXRzID0gdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cygpO1xuXG4gIGNvbnN0IGJ1dHRvbnMgPSByZWNvcmRpbmdzLm1hcCgoKSA9PiB1c2VSZWY8SFRNTEFuY2hvckVsZW1lbnQ+KG51bGwpKTtcbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLmZpbmlzaC5kb3dubG9hZCwgKCkgPT4ge1xuICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIGJ1dHRvbnMpIHtcbiAgICAgIGJ1dHRvbi5jdXJyZW50Py5jbGljaygpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlY29yZGluZ3MubWFwKChyZWNvcmRpbmcsIGkpID0+IHtcbiAgICBjb25zdCB7IGRldmljZVR5cGUsIG1pbWVUeXBlLCB1cmwsIGRvd25sb2FkZWQsIG1lZGlhOiBibG9iIH0gPSByZWNvcmRpbmc7XG4gICAgY29uc3QgZmxhdm9yID0gZGV2aWNlVHlwZSA9PT0gXCJkZXNrdG9wXCIgPyB0KFwic291cmNlcy1kaXNwbGF5XCIpIDogdChcInNvdXJjZXMtdXNlclwiKTtcbiAgICBjb25zdCBkb3dubG9hZE5hbWUgPSByZWNvcmRpbmdGaWxlTmFtZSh7IG1pbWU6IG1pbWVUeXBlLCBmbGF2b3IsIHRpdGxlLCBwcmVzZW50ZXIgfSk7XG4gICAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICAgIGlmICghdXJsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBrZXk9e2l9IGNzcz17e1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgXCI6bm90KDpmaXJzdC1vZi10eXBlKVwiOiB7XG4gICAgICAgICAgbWFyZ2luVG9wOiAzMixcbiAgICAgICAgfSxcbiAgICAgIH19PlxuICAgICAgICA8ZGl2IGNzcz17e1xuICAgICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIH19PlxuICAgICAgICAgIDx2aWRlb1xuICAgICAgICAgICAgdGFiSW5kZXg9ey0xfVxuICAgICAgICAgICAgbXV0ZWRcbiAgICAgICAgICAgIHNyYz17dXJsfVxuICAgICAgICAgICAgLy8gV2l0aG91dCB0aGlzLCBzb21lIGJyb3dzZXJzIHNob3cgYSBibGFjayB2aWRlbyBlbGVtZW50IGluc3RlYWQgb2YgdGhlIGZpcnN0IGZyYW1lLlxuICAgICAgICAgICAgb25Mb2FkZWREYXRhPXtlID0+IGUuY3VycmVudFRhcmdldC5jdXJyZW50VGltZSA9IDB9XG4gICAgICAgICAgICBwcmVsb2FkPVwiYXV0b1wiXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiA0LFxuICAgICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgIG1heEhlaWdodDogMTkwLFxuICAgICAgICAgICAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgICAge2Rvd25sb2FkZWQgJiYgKFxuICAgICAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgY29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMzAsIDMwLCAzMCwgMC44NSlcIixcbiAgICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICBnYXA6IDgsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDEyLFxuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IFwiMCAwIDRweCA0cHhcIixcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICA8THVDaGVja0NpcmNsZTIgY3NzPXt7IGZvbnRTaXplOiAyMiB9fSAvPlxuICAgICAgICAgICAgICB7dChcInN0ZXBzLmZpbmlzaC5zYXZlLWxvY2FsbHkucmVjb3JkaW5nLXNhdmVkXCIpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxhXG4gICAgICAgICAgcmVmPXtidXR0b25zW2ldfVxuICAgICAgICAgIGFyaWEtbGFiZWw9e3QoYHN0ZXBzLmZpbmlzaC5zYXZlLWxvY2FsbHkuc2F2ZS0ke2RldmljZVR5cGV9LWxvY2FsbHlgKX1cbiAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgIGRvd25sb2FkPXtkb3dubG9hZE5hbWV9XG4gICAgICAgICAgaHJlZj17dXJsfVxuICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHsgdHlwZTogXCJNQVJLX0RPV05MT0FERURcIiwgaW5kZXg6IGkgfSl9XG4gICAgICAgICAgb25LZXlEb3duPXtlID0+IHtcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gXCIgXCIpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBidXR0b25zW2ldLmN1cnJlbnQ/LmNsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIC4uLnNoYXJlZEJ1dHRvblN0eWxlKGlzSGlnaENvbnRyYXN0KSxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDI2MCxcbiAgICAgICAgICAgIG1hcmdpbjogXCJhdXRvXCIsXG4gICAgICAgICAgICBtYXJnaW5Ub3A6IDgsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxGaURvd25sb2FkIGNzcz17eyBmb250U2l6ZTogMjAgfX0gLz5cbiAgICAgICAgICB7dChcInN0ZXBzLmZpbmlzaC5zYXZlLWxvY2FsbHkubGFiZWxcIikgKyBcIiAoXCIgKyBwcmV0dHlGaWxlU2l6ZShibG9iLnNpemUsIGkxOG4pICsgXCIpXCJ9XG4gICAgICAgICAge3Nob3dTaG9ydGN1dHMgJiYgKFxuICAgICAgICAgICAgPGRpdiBjc3M9e3sgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgcmlnaHQ6IC00LCBib3R0b206IC00IH19PlxuICAgICAgICAgICAgICA8U2hvcnRjdXRLZXlzIHNob3J0Y3V0PXtTSE9SVENVVFMuZmluaXNoLmRvd25sb2FkfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9hPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfSk7XG59O1xuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref4 =  false ? 0 : {\n  name: \"1dnjvms-SaveLocally\",\n  styles: \"position:absolute;bottom:0;right:0;left:0;color:white;background-color:rgba(30, 30, 30, 0.85);display:flex;justify-content:center;align-items:center;gap:8px;padding:12px;border-radius:0 0 4px 4px;label:SaveLocally;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2ZpbmlzaC9zYXZlLWxvY2FsbHkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStEaUIiLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvZmluaXNoL3NhdmUtbG9jYWxseS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgeyBGaURvd25sb2FkIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5pbXBvcnQgeyBMdUNoZWNrQ2lyY2xlMiB9IGZyb20gXCJyZWFjdC1pY29ucy9sdVwiO1xuXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU3R1ZGlvU3RhdGUgfSBmcm9tIFwiLi4vLi4vc3R1ZGlvLXN0YXRlXCI7XG5pbXBvcnQgeyByZWNvcmRpbmdGaWxlTmFtZSB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIFNob3J0Y3V0S2V5cywgdXNlU2hvcnRjdXQsIHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMgfSBmcm9tIFwiLi4vLi4vc2hvcnRjdXRzXCI7XG5pbXBvcnQgeyBwcmV0dHlGaWxlU2l6ZSwgc2hhcmVkQnV0dG9uU3R5bGUgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5cblxuZXhwb3J0IGNvbnN0IFNhdmVMb2NhbGx5OiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgY29uc3QgeyB0LCBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCB7IHJlY29yZGluZ3MsIHRpdGxlLCBwcmVzZW50ZXIgfSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3Qgc2hvd1Nob3J0Y3V0cyA9IHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMoKTtcblxuICBjb25zdCBidXR0b25zID0gcmVjb3JkaW5ncy5tYXAoKCkgPT4gdXNlUmVmPEhUTUxBbmNob3JFbGVtZW50PihudWxsKSk7XG4gIHVzZVNob3J0Y3V0KFNIT1JUQ1VUUy5maW5pc2guZG93bmxvYWQsICgpID0+IHtcbiAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBidXR0b25zKSB7XG4gICAgICBidXR0b24uY3VycmVudD8uY2xpY2soKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZWNvcmRpbmdzLm1hcCgocmVjb3JkaW5nLCBpKSA9PiB7XG4gICAgY29uc3QgeyBkZXZpY2VUeXBlLCBtaW1lVHlwZSwgdXJsLCBkb3dubG9hZGVkLCBtZWRpYTogYmxvYiB9ID0gcmVjb3JkaW5nO1xuICAgIGNvbnN0IGZsYXZvciA9IGRldmljZVR5cGUgPT09IFwiZGVza3RvcFwiID8gdChcInNvdXJjZXMtZGlzcGxheVwiKSA6IHQoXCJzb3VyY2VzLXVzZXJcIik7XG4gICAgY29uc3QgZG93bmxvYWROYW1lID0gcmVjb3JkaW5nRmlsZU5hbWUoeyBtaW1lOiBtaW1lVHlwZSwgZmxhdm9yLCB0aXRsZSwgcHJlc2VudGVyIH0pO1xuICAgIGNvbnN0IHsgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG5cbiAgICBpZiAoIXVybCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYga2V5PXtpfSBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIFwiOm5vdCg6Zmlyc3Qtb2YtdHlwZSlcIjoge1xuICAgICAgICAgIG1hcmdpblRvcDogMzIsXG4gICAgICAgIH0sXG4gICAgICB9fT5cbiAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICB9fT5cbiAgICAgICAgICA8dmlkZW9cbiAgICAgICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgICAgIG11dGVkXG4gICAgICAgICAgICBzcmM9e3VybH1cbiAgICAgICAgICAgIC8vIFdpdGhvdXQgdGhpcywgc29tZSBicm93c2VycyBzaG93IGEgYmxhY2sgdmlkZW8gZWxlbWVudCBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBmcmFtZS5cbiAgICAgICAgICAgIG9uTG9hZGVkRGF0YT17ZSA9PiBlLmN1cnJlbnRUYXJnZXQuY3VycmVudFRpbWUgPSAwfVxuICAgICAgICAgICAgcHJlbG9hZD1cImF1dG9cIlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogNCxcbiAgICAgICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgICAgICBtYXhIZWlnaHQ6IDE5MCxcbiAgICAgICAgICAgICAgbWFyZ2luOiBcIjAgYXV0b1wiLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtkb3dubG9hZGVkICYmIChcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDMwLCAzMCwgMzAsIDAuODUpXCIsXG4gICAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgZ2FwOiA4LFxuICAgICAgICAgICAgICBwYWRkaW5nOiAxMixcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjAgMCA0cHggNHB4XCIsXG4gICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgPEx1Q2hlY2tDaXJjbGUyIGNzcz17eyBmb250U2l6ZTogMjIgfX0gLz5cbiAgICAgICAgICAgICAge3QoXCJzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LnJlY29yZGluZy1zYXZlZFwiKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8YVxuICAgICAgICAgIHJlZj17YnV0dG9uc1tpXX1cbiAgICAgICAgICBhcmlhLWxhYmVsPXt0KGBzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LnNhdmUtJHtkZXZpY2VUeXBlfS1sb2NhbGx5YCl9XG4gICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICBkb3dubG9hZD17ZG93bmxvYWROYW1lfVxuICAgICAgICAgIGhyZWY9e3VybH1cbiAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaCh7IHR5cGU6IFwiTUFSS19ET1dOTE9BREVEXCIsIGluZGV4OiBpIH0pfVxuICAgICAgICAgIG9uS2V5RG93bj17ZSA9PiB7XG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09IFwiIFwiKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgYnV0dG9uc1tpXS5jdXJyZW50Py5jbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAuLi5zaGFyZWRCdXR0b25TdHlsZShpc0hpZ2hDb250cmFzdCksXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIG1heFdpZHRoOiAyNjAsXG4gICAgICAgICAgICBtYXJnaW46IFwiYXV0b1wiLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiA4LFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8RmlEb3dubG9hZCBjc3M9e3sgZm9udFNpemU6IDIwIH19IC8+XG4gICAgICAgICAge3QoXCJzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LmxhYmVsXCIpICsgXCIgKFwiICsgcHJldHR5RmlsZVNpemUoYmxvYi5zaXplLCBpMThuKSArIFwiKVwifVxuICAgICAgICAgIHtzaG93U2hvcnRjdXRzICYmIChcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHJpZ2h0OiAtNCwgYm90dG9tOiAtNCB9fT5cbiAgICAgICAgICAgICAgPFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17U0hPUlRDVVRTLmZpbmlzaC5kb3dubG9hZH0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvYT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0pO1xufTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref5 =  false ? 0 : {\n  name: \"1st60t0-SaveLocally\",\n  styles: \"font-size:22px;label:SaveLocally;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2ZpbmlzaC9zYXZlLWxvY2FsbHkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZFOEIiLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvZmluaXNoL3NhdmUtbG9jYWxseS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgeyBGaURvd25sb2FkIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5pbXBvcnQgeyBMdUNoZWNrQ2lyY2xlMiB9IGZyb20gXCJyZWFjdC1pY29ucy9sdVwiO1xuXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU3R1ZGlvU3RhdGUgfSBmcm9tIFwiLi4vLi4vc3R1ZGlvLXN0YXRlXCI7XG5pbXBvcnQgeyByZWNvcmRpbmdGaWxlTmFtZSB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIFNob3J0Y3V0S2V5cywgdXNlU2hvcnRjdXQsIHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMgfSBmcm9tIFwiLi4vLi4vc2hvcnRjdXRzXCI7XG5pbXBvcnQgeyBwcmV0dHlGaWxlU2l6ZSwgc2hhcmVkQnV0dG9uU3R5bGUgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5cblxuZXhwb3J0IGNvbnN0IFNhdmVMb2NhbGx5OiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgY29uc3QgeyB0LCBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCB7IHJlY29yZGluZ3MsIHRpdGxlLCBwcmVzZW50ZXIgfSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3Qgc2hvd1Nob3J0Y3V0cyA9IHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMoKTtcblxuICBjb25zdCBidXR0b25zID0gcmVjb3JkaW5ncy5tYXAoKCkgPT4gdXNlUmVmPEhUTUxBbmNob3JFbGVtZW50PihudWxsKSk7XG4gIHVzZVNob3J0Y3V0KFNIT1JUQ1VUUy5maW5pc2guZG93bmxvYWQsICgpID0+IHtcbiAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBidXR0b25zKSB7XG4gICAgICBidXR0b24uY3VycmVudD8uY2xpY2soKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZWNvcmRpbmdzLm1hcCgocmVjb3JkaW5nLCBpKSA9PiB7XG4gICAgY29uc3QgeyBkZXZpY2VUeXBlLCBtaW1lVHlwZSwgdXJsLCBkb3dubG9hZGVkLCBtZWRpYTogYmxvYiB9ID0gcmVjb3JkaW5nO1xuICAgIGNvbnN0IGZsYXZvciA9IGRldmljZVR5cGUgPT09IFwiZGVza3RvcFwiID8gdChcInNvdXJjZXMtZGlzcGxheVwiKSA6IHQoXCJzb3VyY2VzLXVzZXJcIik7XG4gICAgY29uc3QgZG93bmxvYWROYW1lID0gcmVjb3JkaW5nRmlsZU5hbWUoeyBtaW1lOiBtaW1lVHlwZSwgZmxhdm9yLCB0aXRsZSwgcHJlc2VudGVyIH0pO1xuICAgIGNvbnN0IHsgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG5cbiAgICBpZiAoIXVybCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYga2V5PXtpfSBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIFwiOm5vdCg6Zmlyc3Qtb2YtdHlwZSlcIjoge1xuICAgICAgICAgIG1hcmdpblRvcDogMzIsXG4gICAgICAgIH0sXG4gICAgICB9fT5cbiAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICB9fT5cbiAgICAgICAgICA8dmlkZW9cbiAgICAgICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgICAgIG11dGVkXG4gICAgICAgICAgICBzcmM9e3VybH1cbiAgICAgICAgICAgIC8vIFdpdGhvdXQgdGhpcywgc29tZSBicm93c2VycyBzaG93IGEgYmxhY2sgdmlkZW8gZWxlbWVudCBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBmcmFtZS5cbiAgICAgICAgICAgIG9uTG9hZGVkRGF0YT17ZSA9PiBlLmN1cnJlbnRUYXJnZXQuY3VycmVudFRpbWUgPSAwfVxuICAgICAgICAgICAgcHJlbG9hZD1cImF1dG9cIlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogNCxcbiAgICAgICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgICAgICBtYXhIZWlnaHQ6IDE5MCxcbiAgICAgICAgICAgICAgbWFyZ2luOiBcIjAgYXV0b1wiLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtkb3dubG9hZGVkICYmIChcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDMwLCAzMCwgMzAsIDAuODUpXCIsXG4gICAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgZ2FwOiA4LFxuICAgICAgICAgICAgICBwYWRkaW5nOiAxMixcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjAgMCA0cHggNHB4XCIsXG4gICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgPEx1Q2hlY2tDaXJjbGUyIGNzcz17eyBmb250U2l6ZTogMjIgfX0gLz5cbiAgICAgICAgICAgICAge3QoXCJzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LnJlY29yZGluZy1zYXZlZFwiKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8YVxuICAgICAgICAgIHJlZj17YnV0dG9uc1tpXX1cbiAgICAgICAgICBhcmlhLWxhYmVsPXt0KGBzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LnNhdmUtJHtkZXZpY2VUeXBlfS1sb2NhbGx5YCl9XG4gICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICBkb3dubG9hZD17ZG93bmxvYWROYW1lfVxuICAgICAgICAgIGhyZWY9e3VybH1cbiAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaCh7IHR5cGU6IFwiTUFSS19ET1dOTE9BREVEXCIsIGluZGV4OiBpIH0pfVxuICAgICAgICAgIG9uS2V5RG93bj17ZSA9PiB7XG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09IFwiIFwiKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgYnV0dG9uc1tpXS5jdXJyZW50Py5jbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAuLi5zaGFyZWRCdXR0b25TdHlsZShpc0hpZ2hDb250cmFzdCksXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIG1heFdpZHRoOiAyNjAsXG4gICAgICAgICAgICBtYXJnaW46IFwiYXV0b1wiLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiA4LFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8RmlEb3dubG9hZCBjc3M9e3sgZm9udFNpemU6IDIwIH19IC8+XG4gICAgICAgICAge3QoXCJzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LmxhYmVsXCIpICsgXCIgKFwiICsgcHJldHR5RmlsZVNpemUoYmxvYi5zaXplLCBpMThuKSArIFwiKVwifVxuICAgICAgICAgIHtzaG93U2hvcnRjdXRzICYmIChcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHJpZ2h0OiAtNCwgYm90dG9tOiAtNCB9fT5cbiAgICAgICAgICAgICAgPFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17U0hPUlRDVVRTLmZpbmlzaC5kb3dubG9hZH0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvYT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0pO1xufTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref6 =  false ? 0 : {\n  name: \"1wspkfy-SaveLocally\",\n  styles: \"font-size:20px;label:SaveLocally;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2ZpbmlzaC9zYXZlLWxvY2FsbHkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlHc0IiLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvZmluaXNoL3NhdmUtbG9jYWxseS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgeyBGaURvd25sb2FkIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5pbXBvcnQgeyBMdUNoZWNrQ2lyY2xlMiB9IGZyb20gXCJyZWFjdC1pY29ucy9sdVwiO1xuXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU3R1ZGlvU3RhdGUgfSBmcm9tIFwiLi4vLi4vc3R1ZGlvLXN0YXRlXCI7XG5pbXBvcnQgeyByZWNvcmRpbmdGaWxlTmFtZSB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIFNob3J0Y3V0S2V5cywgdXNlU2hvcnRjdXQsIHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMgfSBmcm9tIFwiLi4vLi4vc2hvcnRjdXRzXCI7XG5pbXBvcnQgeyBwcmV0dHlGaWxlU2l6ZSwgc2hhcmVkQnV0dG9uU3R5bGUgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5cblxuZXhwb3J0IGNvbnN0IFNhdmVMb2NhbGx5OiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgY29uc3QgeyB0LCBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCB7IHJlY29yZGluZ3MsIHRpdGxlLCBwcmVzZW50ZXIgfSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3Qgc2hvd1Nob3J0Y3V0cyA9IHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMoKTtcblxuICBjb25zdCBidXR0b25zID0gcmVjb3JkaW5ncy5tYXAoKCkgPT4gdXNlUmVmPEhUTUxBbmNob3JFbGVtZW50PihudWxsKSk7XG4gIHVzZVNob3J0Y3V0KFNIT1JUQ1VUUy5maW5pc2guZG93bmxvYWQsICgpID0+IHtcbiAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBidXR0b25zKSB7XG4gICAgICBidXR0b24uY3VycmVudD8uY2xpY2soKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZWNvcmRpbmdzLm1hcCgocmVjb3JkaW5nLCBpKSA9PiB7XG4gICAgY29uc3QgeyBkZXZpY2VUeXBlLCBtaW1lVHlwZSwgdXJsLCBkb3dubG9hZGVkLCBtZWRpYTogYmxvYiB9ID0gcmVjb3JkaW5nO1xuICAgIGNvbnN0IGZsYXZvciA9IGRldmljZVR5cGUgPT09IFwiZGVza3RvcFwiID8gdChcInNvdXJjZXMtZGlzcGxheVwiKSA6IHQoXCJzb3VyY2VzLXVzZXJcIik7XG4gICAgY29uc3QgZG93bmxvYWROYW1lID0gcmVjb3JkaW5nRmlsZU5hbWUoeyBtaW1lOiBtaW1lVHlwZSwgZmxhdm9yLCB0aXRsZSwgcHJlc2VudGVyIH0pO1xuICAgIGNvbnN0IHsgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG5cbiAgICBpZiAoIXVybCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYga2V5PXtpfSBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIFwiOm5vdCg6Zmlyc3Qtb2YtdHlwZSlcIjoge1xuICAgICAgICAgIG1hcmdpblRvcDogMzIsXG4gICAgICAgIH0sXG4gICAgICB9fT5cbiAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICB9fT5cbiAgICAgICAgICA8dmlkZW9cbiAgICAgICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgICAgIG11dGVkXG4gICAgICAgICAgICBzcmM9e3VybH1cbiAgICAgICAgICAgIC8vIFdpdGhvdXQgdGhpcywgc29tZSBicm93c2VycyBzaG93IGEgYmxhY2sgdmlkZW8gZWxlbWVudCBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBmcmFtZS5cbiAgICAgICAgICAgIG9uTG9hZGVkRGF0YT17ZSA9PiBlLmN1cnJlbnRUYXJnZXQuY3VycmVudFRpbWUgPSAwfVxuICAgICAgICAgICAgcHJlbG9hZD1cImF1dG9cIlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogNCxcbiAgICAgICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgICAgICBtYXhIZWlnaHQ6IDE5MCxcbiAgICAgICAgICAgICAgbWFyZ2luOiBcIjAgYXV0b1wiLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtkb3dubG9hZGVkICYmIChcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDMwLCAzMCwgMzAsIDAuODUpXCIsXG4gICAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgZ2FwOiA4LFxuICAgICAgICAgICAgICBwYWRkaW5nOiAxMixcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjAgMCA0cHggNHB4XCIsXG4gICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgPEx1Q2hlY2tDaXJjbGUyIGNzcz17eyBmb250U2l6ZTogMjIgfX0gLz5cbiAgICAgICAgICAgICAge3QoXCJzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LnJlY29yZGluZy1zYXZlZFwiKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8YVxuICAgICAgICAgIHJlZj17YnV0dG9uc1tpXX1cbiAgICAgICAgICBhcmlhLWxhYmVsPXt0KGBzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LnNhdmUtJHtkZXZpY2VUeXBlfS1sb2NhbGx5YCl9XG4gICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICBkb3dubG9hZD17ZG93bmxvYWROYW1lfVxuICAgICAgICAgIGhyZWY9e3VybH1cbiAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaCh7IHR5cGU6IFwiTUFSS19ET1dOTE9BREVEXCIsIGluZGV4OiBpIH0pfVxuICAgICAgICAgIG9uS2V5RG93bj17ZSA9PiB7XG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09IFwiIFwiKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgYnV0dG9uc1tpXS5jdXJyZW50Py5jbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAuLi5zaGFyZWRCdXR0b25TdHlsZShpc0hpZ2hDb250cmFzdCksXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIG1heFdpZHRoOiAyNjAsXG4gICAgICAgICAgICBtYXJnaW46IFwiYXV0b1wiLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiA4LFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8RmlEb3dubG9hZCBjc3M9e3sgZm9udFNpemU6IDIwIH19IC8+XG4gICAgICAgICAge3QoXCJzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LmxhYmVsXCIpICsgXCIgKFwiICsgcHJldHR5RmlsZVNpemUoYmxvYi5zaXplLCBpMThuKSArIFwiKVwifVxuICAgICAgICAgIHtzaG93U2hvcnRjdXRzICYmIChcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHJpZ2h0OiAtNCwgYm90dG9tOiAtNCB9fT5cbiAgICAgICAgICAgICAgPFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17U0hPUlRDVVRTLmZpbmlzaC5kb3dubG9hZH0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvYT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0pO1xufTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst SaveLocally = () => {\n  const {\n    t,\n    i18n\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const {\n    recordings,\n    title,\n    presenter\n  } = (0,_studio_state__WEBPACK_IMPORTED_MODULE_2__.useStudioState)();\n  const dispatch = (0,_studio_state__WEBPACK_IMPORTED_MODULE_2__.useDispatch)();\n  const showShortcuts = (0,_shortcuts__WEBPACK_IMPORTED_MODULE_4__.useShowAvailableShortcuts)();\n  const buttons = recordings.map(() => (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null));\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_4__.useShortcut)(_shortcuts__WEBPACK_IMPORTED_MODULE_4__.SHORTCUTS.finish.download, () => {\n    for (const button of buttons) {\n      button.current?.click();\n    }\n  });\n  return recordings.map((recording, i) => {\n    const {\n      deviceType,\n      mimeType,\n      url,\n      downloaded,\n      media: blob\n    } = recording;\n    const flavor = deviceType === \"desktop\" ? t(\"sources-display\") : t(\"sources-user\");\n    const downloadName = (0,_util__WEBPACK_IMPORTED_MODULE_3__.recordingFileName)({\n      mime: mimeType,\n      flavor,\n      title,\n      presenter\n    });\n    const {\n      isHighContrast\n    } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_6__.useColorScheme)();\n    if (!url) {\n      return null;\n    }\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n      css: _ref,\n      children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n        css: _ref2,\n        children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"video\", {\n          tabIndex: -1,\n          muted: true,\n          src: url\n          // Without this, some browsers show a black video element instead of the first frame.\n          ,\n          onLoadedData: e => e.currentTarget.currentTime = 0,\n          preload: \"auto\",\n          css: _ref3\n        }), downloaded && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n          css: _ref4,\n          children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(react_icons_lu__WEBPACK_IMPORTED_MODULE_8__.LuCheckCircle2, {\n            css: _ref5\n          }), t(\"steps.finish.save-locally.recording-saved\")]\n        })]\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"a\", {\n        ref: buttons[i],\n        \"aria-label\": t(`steps.finish.save-locally.save-${deviceType}-locally`),\n        target: \"_blank\",\n        download: downloadName,\n        href: url,\n        rel: \"noopener noreferrer\",\n        role: \"button\",\n        onClick: () => dispatch({\n          type: \"MARK_DOWNLOADED\",\n          index: i\n        }),\n        onKeyDown: e => {\n          if (e.key === \" \") {\n            e.preventDefault();\n            buttons[i].current?.click();\n          }\n        },\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n          ...(0,___WEBPACK_IMPORTED_MODULE_5__.sharedButtonStyle)(isHighContrast),\n          justifyContent: \"center\",\n          maxWidth: 260,\n          margin: \"auto\",\n          marginTop: 8\n        },  false ? 0 : \";label:SaveLocally;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2ZpbmlzaC9zYXZlLWxvY2FsbHkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlHVSIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9zdGVwcy9maW5pc2gvc2F2ZS1sb2NhbGx5LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCB7IEZpRG93bmxvYWQgfSBmcm9tIFwicmVhY3QtaWNvbnMvZmlcIjtcbmltcG9ydCB7IEx1Q2hlY2tDaXJjbGUyIH0gZnJvbSBcInJlYWN0LWljb25zL2x1XCI7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTdHVkaW9TdGF0ZSB9IGZyb20gXCIuLi8uLi9zdHVkaW8tc3RhdGVcIjtcbmltcG9ydCB7IHJlY29yZGluZ0ZpbGVOYW1lIH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcbmltcG9ydCB7IFNIT1JUQ1VUUywgU2hvcnRjdXRLZXlzLCB1c2VTaG9ydGN1dCwgdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cyB9IGZyb20gXCIuLi8uLi9zaG9ydGN1dHNcIjtcbmltcG9ydCB7IHByZXR0eUZpbGVTaXplLCBzaGFyZWRCdXR0b25TdHlsZSB9IGZyb20gXCIuXCI7XG5pbXBvcnQgeyB1c2VDb2xvclNjaGVtZSB9IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5cblxuXG5leHBvcnQgY29uc3QgU2F2ZUxvY2FsbHk6IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCB7IHQsIGkxOG4gfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IHsgcmVjb3JkaW5ncywgdGl0bGUsIHByZXNlbnRlciB9ID0gdXNlU3R1ZGlvU3RhdGUoKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBzaG93U2hvcnRjdXRzID0gdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cygpO1xuXG4gIGNvbnN0IGJ1dHRvbnMgPSByZWNvcmRpbmdzLm1hcCgoKSA9PiB1c2VSZWY8SFRNTEFuY2hvckVsZW1lbnQ+KG51bGwpKTtcbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLmZpbmlzaC5kb3dubG9hZCwgKCkgPT4ge1xuICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIGJ1dHRvbnMpIHtcbiAgICAgIGJ1dHRvbi5jdXJyZW50Py5jbGljaygpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlY29yZGluZ3MubWFwKChyZWNvcmRpbmcsIGkpID0+IHtcbiAgICBjb25zdCB7IGRldmljZVR5cGUsIG1pbWVUeXBlLCB1cmwsIGRvd25sb2FkZWQsIG1lZGlhOiBibG9iIH0gPSByZWNvcmRpbmc7XG4gICAgY29uc3QgZmxhdm9yID0gZGV2aWNlVHlwZSA9PT0gXCJkZXNrdG9wXCIgPyB0KFwic291cmNlcy1kaXNwbGF5XCIpIDogdChcInNvdXJjZXMtdXNlclwiKTtcbiAgICBjb25zdCBkb3dubG9hZE5hbWUgPSByZWNvcmRpbmdGaWxlTmFtZSh7IG1pbWU6IG1pbWVUeXBlLCBmbGF2b3IsIHRpdGxlLCBwcmVzZW50ZXIgfSk7XG4gICAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICAgIGlmICghdXJsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBrZXk9e2l9IGNzcz17e1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgXCI6bm90KDpmaXJzdC1vZi10eXBlKVwiOiB7XG4gICAgICAgICAgbWFyZ2luVG9wOiAzMixcbiAgICAgICAgfSxcbiAgICAgIH19PlxuICAgICAgICA8ZGl2IGNzcz17e1xuICAgICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIH19PlxuICAgICAgICAgIDx2aWRlb1xuICAgICAgICAgICAgdGFiSW5kZXg9ey0xfVxuICAgICAgICAgICAgbXV0ZWRcbiAgICAgICAgICAgIHNyYz17dXJsfVxuICAgICAgICAgICAgLy8gV2l0aG91dCB0aGlzLCBzb21lIGJyb3dzZXJzIHNob3cgYSBibGFjayB2aWRlbyBlbGVtZW50IGluc3RlYWQgb2YgdGhlIGZpcnN0IGZyYW1lLlxuICAgICAgICAgICAgb25Mb2FkZWREYXRhPXtlID0+IGUuY3VycmVudFRhcmdldC5jdXJyZW50VGltZSA9IDB9XG4gICAgICAgICAgICBwcmVsb2FkPVwiYXV0b1wiXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiA0LFxuICAgICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgIG1heEhlaWdodDogMTkwLFxuICAgICAgICAgICAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgICAge2Rvd25sb2FkZWQgJiYgKFxuICAgICAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgY29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMzAsIDMwLCAzMCwgMC44NSlcIixcbiAgICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICBnYXA6IDgsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDEyLFxuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IFwiMCAwIDRweCA0cHhcIixcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICA8THVDaGVja0NpcmNsZTIgY3NzPXt7IGZvbnRTaXplOiAyMiB9fSAvPlxuICAgICAgICAgICAgICB7dChcInN0ZXBzLmZpbmlzaC5zYXZlLWxvY2FsbHkucmVjb3JkaW5nLXNhdmVkXCIpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxhXG4gICAgICAgICAgcmVmPXtidXR0b25zW2ldfVxuICAgICAgICAgIGFyaWEtbGFiZWw9e3QoYHN0ZXBzLmZpbmlzaC5zYXZlLWxvY2FsbHkuc2F2ZS0ke2RldmljZVR5cGV9LWxvY2FsbHlgKX1cbiAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgIGRvd25sb2FkPXtkb3dubG9hZE5hbWV9XG4gICAgICAgICAgaHJlZj17dXJsfVxuICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHsgdHlwZTogXCJNQVJLX0RPV05MT0FERURcIiwgaW5kZXg6IGkgfSl9XG4gICAgICAgICAgb25LZXlEb3duPXtlID0+IHtcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gXCIgXCIpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBidXR0b25zW2ldLmN1cnJlbnQ/LmNsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIC4uLnNoYXJlZEJ1dHRvblN0eWxlKGlzSGlnaENvbnRyYXN0KSxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDI2MCxcbiAgICAgICAgICAgIG1hcmdpbjogXCJhdXRvXCIsXG4gICAgICAgICAgICBtYXJnaW5Ub3A6IDgsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxGaURvd25sb2FkIGNzcz17eyBmb250U2l6ZTogMjAgfX0gLz5cbiAgICAgICAgICB7dChcInN0ZXBzLmZpbmlzaC5zYXZlLWxvY2FsbHkubGFiZWxcIikgKyBcIiAoXCIgKyBwcmV0dHlGaWxlU2l6ZShibG9iLnNpemUsIGkxOG4pICsgXCIpXCJ9XG4gICAgICAgICAge3Nob3dTaG9ydGN1dHMgJiYgKFxuICAgICAgICAgICAgPGRpdiBjc3M9e3sgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgcmlnaHQ6IC00LCBib3R0b206IC00IH19PlxuICAgICAgICAgICAgICA8U2hvcnRjdXRLZXlzIHNob3J0Y3V0PXtTSE9SVENVVFMuZmluaXNoLmRvd25sb2FkfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9hPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfSk7XG59O1xuIl19 */\"),\n        children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_10__.FiDownload, {\n          css: _ref6\n        }), t(\"steps.finish.save-locally.label\") + \" (\" + (0,___WEBPACK_IMPORTED_MODULE_5__.prettyFileSize)(blob.size, i18n) + \")\", showShortcuts && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n          css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n            position: \"absolute\",\n            right: -4,\n            bottom: -4\n          },  false ? 0 : \";label:SaveLocally;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2ZpbmlzaC9zYXZlLWxvY2FsbHkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRHaUIiLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvZmluaXNoL3NhdmUtbG9jYWxseS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgeyBGaURvd25sb2FkIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5pbXBvcnQgeyBMdUNoZWNrQ2lyY2xlMiB9IGZyb20gXCJyZWFjdC1pY29ucy9sdVwiO1xuXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU3R1ZGlvU3RhdGUgfSBmcm9tIFwiLi4vLi4vc3R1ZGlvLXN0YXRlXCI7XG5pbXBvcnQgeyByZWNvcmRpbmdGaWxlTmFtZSB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIFNob3J0Y3V0S2V5cywgdXNlU2hvcnRjdXQsIHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMgfSBmcm9tIFwiLi4vLi4vc2hvcnRjdXRzXCI7XG5pbXBvcnQgeyBwcmV0dHlGaWxlU2l6ZSwgc2hhcmVkQnV0dG9uU3R5bGUgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5cblxuZXhwb3J0IGNvbnN0IFNhdmVMb2NhbGx5OiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgY29uc3QgeyB0LCBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCB7IHJlY29yZGluZ3MsIHRpdGxlLCBwcmVzZW50ZXIgfSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3Qgc2hvd1Nob3J0Y3V0cyA9IHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMoKTtcblxuICBjb25zdCBidXR0b25zID0gcmVjb3JkaW5ncy5tYXAoKCkgPT4gdXNlUmVmPEhUTUxBbmNob3JFbGVtZW50PihudWxsKSk7XG4gIHVzZVNob3J0Y3V0KFNIT1JUQ1VUUy5maW5pc2guZG93bmxvYWQsICgpID0+IHtcbiAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBidXR0b25zKSB7XG4gICAgICBidXR0b24uY3VycmVudD8uY2xpY2soKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZWNvcmRpbmdzLm1hcCgocmVjb3JkaW5nLCBpKSA9PiB7XG4gICAgY29uc3QgeyBkZXZpY2VUeXBlLCBtaW1lVHlwZSwgdXJsLCBkb3dubG9hZGVkLCBtZWRpYTogYmxvYiB9ID0gcmVjb3JkaW5nO1xuICAgIGNvbnN0IGZsYXZvciA9IGRldmljZVR5cGUgPT09IFwiZGVza3RvcFwiID8gdChcInNvdXJjZXMtZGlzcGxheVwiKSA6IHQoXCJzb3VyY2VzLXVzZXJcIik7XG4gICAgY29uc3QgZG93bmxvYWROYW1lID0gcmVjb3JkaW5nRmlsZU5hbWUoeyBtaW1lOiBtaW1lVHlwZSwgZmxhdm9yLCB0aXRsZSwgcHJlc2VudGVyIH0pO1xuICAgIGNvbnN0IHsgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG5cbiAgICBpZiAoIXVybCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYga2V5PXtpfSBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIFwiOm5vdCg6Zmlyc3Qtb2YtdHlwZSlcIjoge1xuICAgICAgICAgIG1hcmdpblRvcDogMzIsXG4gICAgICAgIH0sXG4gICAgICB9fT5cbiAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICB9fT5cbiAgICAgICAgICA8dmlkZW9cbiAgICAgICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgICAgIG11dGVkXG4gICAgICAgICAgICBzcmM9e3VybH1cbiAgICAgICAgICAgIC8vIFdpdGhvdXQgdGhpcywgc29tZSBicm93c2VycyBzaG93IGEgYmxhY2sgdmlkZW8gZWxlbWVudCBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBmcmFtZS5cbiAgICAgICAgICAgIG9uTG9hZGVkRGF0YT17ZSA9PiBlLmN1cnJlbnRUYXJnZXQuY3VycmVudFRpbWUgPSAwfVxuICAgICAgICAgICAgcHJlbG9hZD1cImF1dG9cIlxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogNCxcbiAgICAgICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgICAgICBtYXhIZWlnaHQ6IDE5MCxcbiAgICAgICAgICAgICAgbWFyZ2luOiBcIjAgYXV0b1wiLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtkb3dubG9hZGVkICYmIChcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDMwLCAzMCwgMzAsIDAuODUpXCIsXG4gICAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgZ2FwOiA4LFxuICAgICAgICAgICAgICBwYWRkaW5nOiAxMixcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjAgMCA0cHggNHB4XCIsXG4gICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgPEx1Q2hlY2tDaXJjbGUyIGNzcz17eyBmb250U2l6ZTogMjIgfX0gLz5cbiAgICAgICAgICAgICAge3QoXCJzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LnJlY29yZGluZy1zYXZlZFwiKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8YVxuICAgICAgICAgIHJlZj17YnV0dG9uc1tpXX1cbiAgICAgICAgICBhcmlhLWxhYmVsPXt0KGBzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LnNhdmUtJHtkZXZpY2VUeXBlfS1sb2NhbGx5YCl9XG4gICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICBkb3dubG9hZD17ZG93bmxvYWROYW1lfVxuICAgICAgICAgIGhyZWY9e3VybH1cbiAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaCh7IHR5cGU6IFwiTUFSS19ET1dOTE9BREVEXCIsIGluZGV4OiBpIH0pfVxuICAgICAgICAgIG9uS2V5RG93bj17ZSA9PiB7XG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09IFwiIFwiKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgYnV0dG9uc1tpXS5jdXJyZW50Py5jbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAuLi5zaGFyZWRCdXR0b25TdHlsZShpc0hpZ2hDb250cmFzdCksXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIG1heFdpZHRoOiAyNjAsXG4gICAgICAgICAgICBtYXJnaW46IFwiYXV0b1wiLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiA4LFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8RmlEb3dubG9hZCBjc3M9e3sgZm9udFNpemU6IDIwIH19IC8+XG4gICAgICAgICAge3QoXCJzdGVwcy5maW5pc2guc2F2ZS1sb2NhbGx5LmxhYmVsXCIpICsgXCIgKFwiICsgcHJldHR5RmlsZVNpemUoYmxvYi5zaXplLCBpMThuKSArIFwiKVwifVxuICAgICAgICAgIHtzaG93U2hvcnRjdXRzICYmIChcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHJpZ2h0OiAtNCwgYm90dG9tOiAtNCB9fT5cbiAgICAgICAgICAgICAgPFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17U0hPUlRDVVRTLmZpbmlzaC5kb3dubG9hZH0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvYT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0pO1xufTtcbiJdfQ== */\"),\n          children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_shortcuts__WEBPACK_IMPORTED_MODULE_4__.ShortcutKeys, {\n            shortcut: _shortcuts__WEBPACK_IMPORTED_MODULE_4__.SHORTCUTS.finish.download\n          })\n        })]\n      })]\n    }, i);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RlcHMvZmluaXNoL3NhdmUtbG9jYWxseS50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUlBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFPQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFHQTtBQWFBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFHQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBR0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5jYXN0LXN0dWRpby8uL3NyYy9zdGVwcy9maW5pc2gvc2F2ZS1sb2NhbGx5LnRzeD8wYTFlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCB7IEZpRG93bmxvYWQgfSBmcm9tIFwicmVhY3QtaWNvbnMvZmlcIjtcbmltcG9ydCB7IEx1Q2hlY2tDaXJjbGUyIH0gZnJvbSBcInJlYWN0LWljb25zL2x1XCI7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTdHVkaW9TdGF0ZSB9IGZyb20gXCIuLi8uLi9zdHVkaW8tc3RhdGVcIjtcbmltcG9ydCB7IHJlY29yZGluZ0ZpbGVOYW1lIH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcbmltcG9ydCB7IFNIT1JUQ1VUUywgU2hvcnRjdXRLZXlzLCB1c2VTaG9ydGN1dCwgdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cyB9IGZyb20gXCIuLi8uLi9zaG9ydGN1dHNcIjtcbmltcG9ydCB7IHByZXR0eUZpbGVTaXplLCBzaGFyZWRCdXR0b25TdHlsZSB9IGZyb20gXCIuXCI7XG5pbXBvcnQgeyB1c2VDb2xvclNjaGVtZSB9IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5cblxuXG5leHBvcnQgY29uc3QgU2F2ZUxvY2FsbHk6IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCB7IHQsIGkxOG4gfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IHsgcmVjb3JkaW5ncywgdGl0bGUsIHByZXNlbnRlciB9ID0gdXNlU3R1ZGlvU3RhdGUoKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBzaG93U2hvcnRjdXRzID0gdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cygpO1xuXG4gIGNvbnN0IGJ1dHRvbnMgPSByZWNvcmRpbmdzLm1hcCgoKSA9PiB1c2VSZWY8SFRNTEFuY2hvckVsZW1lbnQ+KG51bGwpKTtcbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLmZpbmlzaC5kb3dubG9hZCwgKCkgPT4ge1xuICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIGJ1dHRvbnMpIHtcbiAgICAgIGJ1dHRvbi5jdXJyZW50Py5jbGljaygpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlY29yZGluZ3MubWFwKChyZWNvcmRpbmcsIGkpID0+IHtcbiAgICBjb25zdCB7IGRldmljZVR5cGUsIG1pbWVUeXBlLCB1cmwsIGRvd25sb2FkZWQsIG1lZGlhOiBibG9iIH0gPSByZWNvcmRpbmc7XG4gICAgY29uc3QgZmxhdm9yID0gZGV2aWNlVHlwZSA9PT0gXCJkZXNrdG9wXCIgPyB0KFwic291cmNlcy1kaXNwbGF5XCIpIDogdChcInNvdXJjZXMtdXNlclwiKTtcbiAgICBjb25zdCBkb3dubG9hZE5hbWUgPSByZWNvcmRpbmdGaWxlTmFtZSh7IG1pbWU6IG1pbWVUeXBlLCBmbGF2b3IsIHRpdGxlLCBwcmVzZW50ZXIgfSk7XG4gICAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICAgIGlmICghdXJsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBrZXk9e2l9IGNzcz17e1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgXCI6bm90KDpmaXJzdC1vZi10eXBlKVwiOiB7XG4gICAgICAgICAgbWFyZ2luVG9wOiAzMixcbiAgICAgICAgfSxcbiAgICAgIH19PlxuICAgICAgICA8ZGl2IGNzcz17e1xuICAgICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIH19PlxuICAgICAgICAgIDx2aWRlb1xuICAgICAgICAgICAgdGFiSW5kZXg9ey0xfVxuICAgICAgICAgICAgbXV0ZWRcbiAgICAgICAgICAgIHNyYz17dXJsfVxuICAgICAgICAgICAgLy8gV2l0aG91dCB0aGlzLCBzb21lIGJyb3dzZXJzIHNob3cgYSBibGFjayB2aWRlbyBlbGVtZW50IGluc3RlYWQgb2YgdGhlIGZpcnN0IGZyYW1lLlxuICAgICAgICAgICAgb25Mb2FkZWREYXRhPXtlID0+IGUuY3VycmVudFRhcmdldC5jdXJyZW50VGltZSA9IDB9XG4gICAgICAgICAgICBwcmVsb2FkPVwiYXV0b1wiXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiA0LFxuICAgICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgIG1heEhlaWdodDogMTkwLFxuICAgICAgICAgICAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgICAge2Rvd25sb2FkZWQgJiYgKFxuICAgICAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgY29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMzAsIDMwLCAzMCwgMC44NSlcIixcbiAgICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICBnYXA6IDgsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDEyLFxuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IFwiMCAwIDRweCA0cHhcIixcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICA8THVDaGVja0NpcmNsZTIgY3NzPXt7IGZvbnRTaXplOiAyMiB9fSAvPlxuICAgICAgICAgICAgICB7dChcInN0ZXBzLmZpbmlzaC5zYXZlLWxvY2FsbHkucmVjb3JkaW5nLXNhdmVkXCIpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxhXG4gICAgICAgICAgcmVmPXtidXR0b25zW2ldfVxuICAgICAgICAgIGFyaWEtbGFiZWw9e3QoYHN0ZXBzLmZpbmlzaC5zYXZlLWxvY2FsbHkuc2F2ZS0ke2RldmljZVR5cGV9LWxvY2FsbHlgKX1cbiAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgIGRvd25sb2FkPXtkb3dubG9hZE5hbWV9XG4gICAgICAgICAgaHJlZj17dXJsfVxuICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHsgdHlwZTogXCJNQVJLX0RPV05MT0FERURcIiwgaW5kZXg6IGkgfSl9XG4gICAgICAgICAgb25LZXlEb3duPXtlID0+IHtcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gXCIgXCIpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBidXR0b25zW2ldLmN1cnJlbnQ/LmNsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIC4uLnNoYXJlZEJ1dHRvblN0eWxlKGlzSGlnaENvbnRyYXN0KSxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgICAgbWF4V2lkdGg6IDI2MCxcbiAgICAgICAgICAgIG1hcmdpbjogXCJhdXRvXCIsXG4gICAgICAgICAgICBtYXJnaW5Ub3A6IDgsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxGaURvd25sb2FkIGNzcz17eyBmb250U2l6ZTogMjAgfX0gLz5cbiAgICAgICAgICB7dChcInN0ZXBzLmZpbmlzaC5zYXZlLWxvY2FsbHkubGFiZWxcIikgKyBcIiAoXCIgKyBwcmV0dHlGaWxlU2l6ZShibG9iLnNpemUsIGkxOG4pICsgXCIpXCJ9XG4gICAgICAgICAge3Nob3dTaG9ydGN1dHMgJiYgKFxuICAgICAgICAgICAgPGRpdiBjc3M9e3sgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgcmlnaHQ6IC00LCBib3R0b206IC00IH19PlxuICAgICAgICAgICAgICA8U2hvcnRjdXRLZXlzIHNob3J0Y3V0PXtTSE9SVENVVFMuZmluaXNoLmRvd25sb2FkfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9hPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/steps/finish/save-locally.tsx\n");

/***/ }),

/***/ "./src/steps/finish/upload.tsx":
/*!*************************************!*\
  !*** ./src/steps/finish/upload.tsx ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Input: function() { return /* binding */ Input; },\n/* harmony export */   UploadBox: function() { return /* binding */ UploadBox; },\n/* harmony export */   selectStyles: function() { return /* binding */ selectStyles; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var react_select__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! react-select */ \"./node_modules/react-select/dist/react-select.esm.js\");\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-hook-form */ \"./node_modules/react-hook-form/dist/index.esm.mjs\");\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var react_icons_lu__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! react-icons/lu */ \"./node_modules/react-icons/lu/index.esm.js\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var _studio_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../studio-state */ \"./src/studio-state.tsx\");\n/* harmony import */ var _opencast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../opencast */ \"./src/opencast.tsx\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../settings */ \"./src/settings.tsx\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _ui_ErrorBox__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../ui/ErrorBox */ \"./src/ui/ErrorBox.tsx\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! . */ \"./src/steps/finish/index.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst LAST_PRESENTER_KEY = \"ocStudioLastPresenter\";\nlet progressHistory = [];\nconst UploadBox = () => {\n  const settings = (0,_settings__WEBPACK_IMPORTED_MODULE_5__.useSettings)();\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const opencast = (0,_opencast__WEBPACK_IMPORTED_MODULE_4__.useOpencast)();\n  const {\n    recordings,\n    upload: uploadState,\n    title,\n    presenter,\n    ...state\n  } = (0,_studio_state__WEBPACK_IMPORTED_MODULE_3__.useStudioState)();\n  const dispatch = (0,_studio_state__WEBPACK_IMPORTED_MODULE_3__.useDispatch)();\n  function onProgress(progress) {\n    // ----- Time estimation -----\n    // We use a simple sliding average over the last few data points and assume\n    // that speed for the rest of the upload.\n    const now = Date.now();\n\n    // Add progress data point to history.\n    progressHistory.push({\n      timestamp: now,\n      progress\n    });\n\n    // The size of the sliding window in milliseconds.\n    const WINDOW_SIZE_MS = 5000;\n    // The size of the sliding window in number of data points.\n    const WINDOW_SIZE_DATA_POINTS = 6;\n    // The number of datapoints below which we won't show a time estimate.\n    const MINIMUM_DATA_POINT_COUNT = 4;\n\n    // Find the first element within the window. We use the larger window of the\n    // two windows created by the two constraints (time and number of\n    // datapoints).\n    const windowStart = Math.min(progressHistory.findIndex(p => now - p.timestamp < WINDOW_SIZE_MS), Math.max(0, progressHistory.length - WINDOW_SIZE_DATA_POINTS));\n\n    // Remove all elements outside the window.\n    progressHistory.splice(0, windowStart);\n    let secondsLeft = null;\n    if (progressHistory.length >= MINIMUM_DATA_POINT_COUNT) {\n      // Calculate the remaining time based on the average speed within the window.\n      const windowLength = now - progressHistory[0].timestamp;\n      const progressInWindow = progress - progressHistory[0].progress;\n      const progressPerSecond = progressInWindow / windowLength * 1000;\n      const progressLeft = 1 - progress;\n      secondsLeft = Math.max(0, Math.round(progressLeft / progressPerSecond));\n    }\n\n    // Update state if anything changed. We actually check for equality here to\n    // avoid useless redraws.\n    if (uploadState.secondsLeft !== secondsLeft || uploadState.currentProgress !== progress) {\n      dispatch({\n        type: \"UPLOAD_PROGRESS_UPDATE\",\n        secondsLeft,\n        currentProgress: progress\n      });\n    }\n  }\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    // To still update the time estimation, we make sure to call `onProgress` at\n    // least every so often.\n    const interval = setInterval(() => {\n      if (uploadState.state !== \"uploading\") {\n        return;\n      }\n      if (!progressHistory.length) {\n        onProgress(0);\n      } else {\n        const lastProgress = progressHistory[progressHistory.length - 1];\n        const timeSinceLastUpdate = Date.now() - lastProgress.timestamp;\n        if (timeSinceLastUpdate > 3000) {\n          onProgress(lastProgress.progress);\n        }\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  });\n  const handleUpload = async data => {\n    dispatch({\n      type: \"UPLOAD_REQUEST\"\n    });\n    progressHistory.push({\n      timestamp: Date.now(),\n      progress: 0\n    });\n    const result = await opencast.upload({\n      recordings: recordings.filter(Boolean),\n      title: data.title,\n      presenter: data.presenter,\n      series: data.series,\n      uploadSettings: settings.upload,\n      onProgress,\n      start: state.start,\n      end: state.end,\n      startTime: state.recordingStartTime ?? (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.unreachable)(\"no start time set\"),\n      endTime: state.recordingEndTime ?? (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.unreachable)(\"no end time set\")\n    });\n    progressHistory = [];\n    const dispatchError = msg => dispatch({\n      type: \"UPLOAD_ERROR\",\n      msg\n    });\n    (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.match)(result, {\n      \"success\": () => dispatch({\n        type: \"UPLOAD_SUCCESS\"\n      }),\n      \"network_error\": () => dispatchError(t(\"steps.finish.upload.upload-network-error\")),\n      \"not_authorized\": () => dispatchError(t(\"steps.finish.upload.upload-not-authorized\")),\n      \"unexpected_response\": () => dispatchError(t(\"steps.finish.upload.upload-invalid-response\"))\n    }, () => dispatchError(t(\"steps.finish.upload.upload-unknown-error\")));\n  };\n  switch (uploadState.state) {\n    case \"uploading\":\n      return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(UploadProgress, {\n        currentProgress: uploadState.currentProgress,\n        secondsLeft: uploadState.secondsLeft\n      });\n    case \"uploaded\":\n      return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(UploadSuccess, {});\n    default:\n      // \"not_uploaded\" or \"error\"\n      return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(UploadForm, {\n        uploadState,\n        handleUpload\n      });\n  }\n};\nvar _ref2 =  false ? 0 : {\n  name: \"a8equj-UploadForm\",\n  styles: \"font-size:16px;font-weight:700;margin-top:20px;label:UploadForm;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref3 =  false ? 0 : {\n  name: \"1pj3roc-idle\",\n  styles: \"font-size:20px;label:idle;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref4 =  false ? 0 : {\n  name: \"uhw4fz-UploadForm\",\n  styles: \"margin-top:8px;label:UploadForm;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref5 =  false ? 0 : {\n  name: \"1onjjev-UploadForm\",\n  styles: \"margin:0;label:UploadForm;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst UploadForm = _ref => {\n  let {\n    handleUpload\n  } = _ref;\n  const {\n    titleField = \"required\",\n    presenterField = \"required\",\n    seriesField = \"optional\",\n    autofillPresenter = []\n  } = (0,_settings__WEBPACK_IMPORTED_MODULE_5__.useSettings)().upload ?? {};\n  const {\n    t,\n    i18n\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const opencast = (0,_opencast__WEBPACK_IMPORTED_MODULE_4__.useOpencast)();\n  const dispatch = (0,_studio_state__WEBPACK_IMPORTED_MODULE_3__.useDispatch)();\n  const settingsManager = (0,_settings__WEBPACK_IMPORTED_MODULE_5__.useSettingsManager)();\n  const {\n    title,\n    presenter,\n    upload: uploadState,\n    recordings\n  } = (0,_studio_state__WEBPACK_IMPORTED_MODULE_3__.useStudioState)();\n  const presenterValue = presenter || window.localStorage.getItem(LAST_PRESENTER_KEY) || autofillPresenter.map(source => (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.match)(source, {\n    \"opencast\": () => opencast.getUsername()\n  })).find(Boolean) || \"\";\n  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"idle\");\n  const {\n    formState: {\n      errors\n    },\n    handleSubmit,\n    register,\n    control,\n    getValues\n  } = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_10__.useForm)({\n    defaultValues: settingsManager.formValues().opencast\n  });\n  const {\n    field: seriesSelect\n  } = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_10__.useController)({\n    name: \"series\",\n    control,\n    rules: {\n      required: seriesField === \"required\" ? t(\"steps.finish.upload.validation-error-required\") : false\n    }\n  });\n\n  // This is a bit ugly, but works. We want to make sure that the `title` and\n  // `presenter` values in the studio state always equal the current value in\n  // the input.\n  function handleInputChange(event) {\n    const target = event.target;\n    dispatch({\n      type: (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)({\n        title: \"UPDATE_TITLE\",\n        presenter: \"UPDATE_PRESENTER\"\n      }[target.name]),\n      value: target.value\n    });\n    if (target.name === \"presenter\") {\n      window.localStorage.setItem(LAST_PRESENTER_KEY, target.value);\n    }\n  }\n\n  // If the user has not yet changed the value of the field, but it has been prefilled\n  // from local storage or one of the `autofillPresenter` sources, update the state\n  // using that value.\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (presenterValue !== presenter) {\n      dispatch({\n        type: \"UPDATE_PRESENTER\",\n        value: presenterValue\n      });\n    }\n  }, []);\n  const configurableServerUrl = settingsManager.isConfigurable(\"opencast.serverUrl\");\n  const configurableUsername = settingsManager.isUsernameConfigurable();\n  const configurablePassword = settingsManager.isPasswordConfigurable();\n  const showOpencastSection = configurableServerUrl || configurableUsername || configurablePassword;\n  const ocDataFromInputs = data => ({\n    serverUrl: data.serverUrl,\n    loginName: data.loginName,\n    loginPassword: data.loginPassword\n  });\n  const onSubmit = async data => {\n    if (!showOpencastSection) {\n      await handleUpload(data);\n      return;\n    }\n    console.log(data);\n    setState(\"testing\");\n\n    // Update Opencast connection data. This is a bit roundabout right now as\n    // the Opencast logic is still from pre-redesign, where the connection data\n    // was given on a separate settings page.\n    const ocData = ocDataFromInputs(data);\n    const oc = await _opencast__WEBPACK_IMPORTED_MODULE_4__.Opencast.init({\n      ...settingsManager.settings().opencast,\n      ...ocData\n    });\n    const error = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.match)(oc.getState(), {\n      \"logged_in\": () => {\n        opencast.setGlobalInstance(oc);\n        settingsManager.saveSettings({\n          opencast: ocData\n        });\n        return null;\n      },\n      \"incorrect_login\": () => opencast.isLoginProvided() ? t(\"steps.finish.upload.settings-invalid-provided-login\") : t(\"steps.finish.upload.settings-invalid-login-data\"),\n      \"network_error\": () => t(\"steps.finish.upload.upload-network-error\"),\n      \"invalid_response\": () => t(\"steps.finish.upload.upload-invalid-response\"),\n      \"response_not_ok\": () => t(\"steps.finish.upload.upload-invalid-response\")\n    }, () => (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.unreachable)());\n    if (error) {\n      dispatch({\n        type: \"UPLOAD_ERROR\",\n        msg: error\n      });\n      setState(\"idle\");\n    } else {\n      // The connection to Opencast works -> now actually start the upload.\n      await handleUpload(data);\n    }\n  };\n  const totalBytes = recordings.reduce((acc, rec) => acc + rec.media.size, 0);\n  const uploadSize = (0,___WEBPACK_IMPORTED_MODULE_8__.prettyFileSize)(totalBytes, i18n);\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.useColorScheme)();\n\n  // Testing the new connection settings to establish a connection ASAP to make\n  // the series selector work.\n  const onConnectionSettingChange = async () => {\n    const data = getValues();\n\n    // If nothing changed, do nothing.\n    const ocSettings = settingsManager.settings().opencast;\n    const anyChange = data.serverUrl && data.serverUrl !== ocSettings?.serverUrl || data.loginName && data.loginName !== ocSettings?.loginName || data.loginPassword && data.loginPassword !== ocSettings?.loginPassword;\n    if (!anyChange) {\n      return;\n    }\n    const ocData = ocDataFromInputs(data);\n    const oc = await _opencast__WEBPACK_IMPORTED_MODULE_4__.Opencast.init({\n      ...settingsManager.settings().opencast,\n      ...ocData\n    });\n    if (oc.getState() === \"logged_in\") {\n      opencast.setGlobalInstance(oc);\n      settingsManager.saveSettings({\n        opencast: ocData\n      });\n    }\n  };\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.Fragment, {\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [titleField !== \"hidden\" && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(Input, {\n        name: \"title\",\n        label: t(\"steps.finish.upload.label-title\"),\n        required: titleField === \"required\",\n        onChange: handleInputChange,\n        autoComplete: \"off\",\n        defaultValue: title,\n        autoFocus: true,\n        errors,\n        register\n      }), presenterField !== \"hidden\" && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(Input, {\n        name: \"presenter\",\n        label: t(\"steps.finish.upload.label-presenter\"),\n        required: presenterField === \"required\",\n        onChange: handleInputChange,\n        autoComplete: \"off\",\n        defaultValue: presenterValue,\n        errors,\n        register\n      }), seriesField !== \"hidden\" && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(SeriesSelect, {\n        formProps: seriesSelect,\n        showOpencastSection: showOpencastSection,\n        errors: errors\n      }), showOpencastSection && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.Fragment, {\n        children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"h3\", {\n          css: _ref2,\n          children: t(\"steps.finish.upload.settings-header\")\n        }), configurableServerUrl && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(Input, {\n          errors: errors,\n          label: t(\"steps.finish.upload.settings-label-server-url\"),\n          name: \"serverUrl\",\n          register: register,\n          onBlur: onConnectionSettingChange,\n          required: true,\n          validate: value => {\n            try {\n              const url = new URL(value);\n              return url.protocol === \"https:\" || url.protocol === \"http:\" || t(\"steps.finish.upload.settings-invalid-url-http-start\");\n            } catch {\n              let err = t(\"steps.finish.upload.settings-invalid-url\");\n              if (!value.startsWith(\"https://\") && !value.startsWith(\"http://\")) {\n                err += \" \" + t(\"steps.finish.upload.settings-invalid-url-http-start\");\n              }\n              return err;\n            }\n          }\n        }), configurableUsername && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(Input, {\n          errors: errors,\n          label: t(\"steps.finish.upload.settings-label-username\"),\n          name: \"loginName\",\n          register: register,\n          onBlur: onConnectionSettingChange,\n          required: true\n        }), configurablePassword && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(Input, {\n          errors: errors,\n          label: t(\"steps.finish.upload.settings-label-password\"),\n          name: \"loginPassword\",\n          register: register,\n          onBlur: onConnectionSettingChange,\n          required: true,\n          type: \"password\"\n        })]\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.ProtoButton, {\n        type: \"submit\",\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n          ...(0,___WEBPACK_IMPORTED_MODULE_8__.sharedButtonStyle)(isHighContrast),\n          margin: \"0 auto\",\n          marginTop: 24\n        },  false ? 0 : \";label:UploadForm;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n        children: [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.match)(state, {\n          \"idle\": () => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_12__.FiUpload, {\n            css: _ref3\n          }),\n          \"testing\": () => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.Spinner, {\n            size: 20\n          })\n        }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"span\", {\n          children: t(\"steps.finish.upload.label\") + \" (\" + uploadSize + \")\"\n        })]\n      })]\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"div\", {\n      css: _ref4,\n      children: uploadState.state === \"error\" && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_ui_ErrorBox__WEBPACK_IMPORTED_MODULE_7__.ErrorBox, {\n        css: _ref5,\n        body: (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(uploadState.error),\n        extraBody: t(\"steps.finish.upload.warn-download-hint\")\n      })\n    })]\n  });\n};\nvar _ref7 =  false ? 0 : {\n  name: \"fx6wzm-Input\",\n  styles: \"margin-bottom:12px;label:Input;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref8 =  false ? 0 : {\n  name: \"1pl2upx-Input\",\n  styles: \"display:block;box-sizing:border-box;position:relative;text-align:left;label:Input;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n/**\n * A styled `<input>` element with a label. Displays errors and integrated with\n * `react-hook-form`.\n */\nconst Input = _ref6 => {\n  let {\n    errors,\n    register,\n    label,\n    name,\n    required,\n    validate,\n    type = \"text\",\n    ...rest\n  } = _ref6;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const error = errors[name];\n  const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(\"div\", {\n    css: _ref7,\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"label\", {\n      htmlFor: id,\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n        display: \"block\",\n        fontWeight: 700,\n        color: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral70,\n        margin: \"4px 0\",\n        fontSize: 14\n      },  false ? 0 : \";label:Input;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n      children: label\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(\"div\", {\n      css: _ref8,\n      children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"input\", {\n        id: id,\n        \"aria-invalid\": error ? \"true\" : \"false\",\n        \"aria-describedby\": error ? `${name}Error` : id,\n        autoComplete: \"off\",\n        type: type,\n        ...rest,\n        ...register(name, {\n          validate,\n          onChange: rest.onChange,\n          onBlur: rest.onBlur,\n          ...(required && {\n            required: t(\"steps.finish.upload.validation-error-required\")\n          })\n        }),\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n          display: \"block\",\n          width: \"100%\",\n          borderRadius: 4,\n          border: `1px solid ${error ? _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.danger4 : _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral30}`,\n          backgroundColor: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral00,\n          color: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral70,\n          padding: \"8px 16px\",\n          ...(0,_util__WEBPACK_IMPORTED_MODULE_6__.focusStyle)({\n            offset: -1\n          })\n        },  false ? 0 : \";label:Input;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n      }), error && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(ErrorContainer, {\n        id: `${name}Error`,\n        children: error.message\n      })]\n    })]\n  });\n};\nconst ErrorContainer = _ref9 => {\n  let {\n    id,\n    children\n  } = _ref9;\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"div\", {\n    id: id,\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n      backgroundColor: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.danger1,\n      color: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.danger5,\n      marginTop: 4,\n      borderRadius: 4,\n      padding: \"6px 12px\",\n      lineHeight: 1.2\n    },  false ? 0 : \";label:ErrorContainer;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2ZpbmlzaC91cGxvYWQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJmSSIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9zdGVwcy9maW5pc2gvdXBsb2FkLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhUTUxJbnB1dFR5cGVBdHRyaWJ1dGUsIHVzZUVmZmVjdCwgdXNlSWQsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFRyYW5zLCB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgU2VsZWN0LCB7IENTU09iamVjdFdpdGhMYWJlbCwgU2VsZWN0SW5zdGFuY2UgfSBmcm9tIFwicmVhY3Qtc2VsZWN0XCI7XG5pbXBvcnQge1xuICBDb250cm9sbGVyUmVuZGVyUHJvcHMsIEZpZWxkRXJyb3IsIEZpZWxkVmFsdWVzLCBQYXRoLCBTdWJtaXRIYW5kbGVyLCBWYWxpZGF0ZSxcbiAgdXNlQ29udHJvbGxlciwgdXNlRm9ybSxcbn0gZnJvbSBcInJlYWN0LWhvb2stZm9ybVwiO1xuaW1wb3J0IHsgRmlVcGxvYWQgfSBmcm9tIFwicmVhY3QtaWNvbnMvZmlcIjtcbmltcG9ydCB7IEx1Q2hlY2tDaXJjbGUyIH0gZnJvbSBcInJlYWN0LWljb25zL2x1XCI7XG5pbXBvcnQgeyBQcm90b0J1dHRvbiwgU3Bpbm5lciwgbWF0Y2gsIG5vdE51bGxpc2gsIHVucmVhY2hhYmxlLCB1c2VDb2xvclNjaGVtZSB9IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTdHVkaW9TdGF0ZSB9IGZyb20gXCIuLi8uLi9zdHVkaW8tc3RhdGVcIjtcbmltcG9ydCB7IE9wZW5jYXN0LCB1c2VPcGVuY2FzdCB9IGZyb20gXCIuLi8uLi9vcGVuY2FzdFwiO1xuaW1wb3J0IHsgdXNlU2V0dGluZ3MsIHVzZVNldHRpbmdzTWFuYWdlciB9IGZyb20gXCIuLi8uLi9zZXR0aW5nc1wiO1xuaW1wb3J0IHsgQ09MT1JTLCBmb2N1c1N0eWxlIH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcbmltcG9ydCB7IEVycm9yQm94IH0gZnJvbSBcIi4uLy4uL3VpL0Vycm9yQm94XCI7XG5pbXBvcnQgeyBwcmV0dHlGaWxlU2l6ZSwgc2hhcmVkQnV0dG9uU3R5bGUgfSBmcm9tIFwiLlwiO1xuXG5cbmNvbnN0IExBU1RfUFJFU0VOVEVSX0tFWSA9IFwib2NTdHVkaW9MYXN0UHJlc2VudGVyXCI7XG5cbmxldCBwcm9ncmVzc0hpc3Rvcnk6IHsgdGltZXN0YW1wOiBudW1iZXI7IHByb2dyZXNzOiBudW1iZXIgfVtdID0gW107XG5cblxuZXhwb3J0IGNvbnN0IFVwbG9hZEJveDogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IHNldHRpbmdzID0gdXNlU2V0dGluZ3MoKTtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCBvcGVuY2FzdCA9IHVzZU9wZW5jYXN0KCk7XG4gIGNvbnN0IHsgcmVjb3JkaW5ncywgdXBsb2FkOiB1cGxvYWRTdGF0ZSwgdGl0bGUsIHByZXNlbnRlciwgLi4uc3RhdGUgfSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcblxuICBmdW5jdGlvbiBvblByb2dyZXNzKHByb2dyZXNzOiBudW1iZXIpIHtcbiAgICAvLyAtLS0tLSBUaW1lIGVzdGltYXRpb24gLS0tLS1cbiAgICAvLyBXZSB1c2UgYSBzaW1wbGUgc2xpZGluZyBhdmVyYWdlIG92ZXIgdGhlIGxhc3QgZmV3IGRhdGEgcG9pbnRzIGFuZCBhc3N1bWVcbiAgICAvLyB0aGF0IHNwZWVkIGZvciB0aGUgcmVzdCBvZiB0aGUgdXBsb2FkLlxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgICAvLyBBZGQgcHJvZ3Jlc3MgZGF0YSBwb2ludCB0byBoaXN0b3J5LlxuICAgIHByb2dyZXNzSGlzdG9yeS5wdXNoKHtcbiAgICAgIHRpbWVzdGFtcDogbm93LFxuICAgICAgcHJvZ3Jlc3MsXG4gICAgfSk7XG5cbiAgICAvLyBUaGUgc2l6ZSBvZiB0aGUgc2xpZGluZyB3aW5kb3cgaW4gbWlsbGlzZWNvbmRzLlxuICAgIGNvbnN0IFdJTkRPV19TSVpFX01TID0gNTAwMDtcbiAgICAvLyBUaGUgc2l6ZSBvZiB0aGUgc2xpZGluZyB3aW5kb3cgaW4gbnVtYmVyIG9mIGRhdGEgcG9pbnRzLlxuICAgIGNvbnN0IFdJTkRPV19TSVpFX0RBVEFfUE9JTlRTID0gNjtcbiAgICAvLyBUaGUgbnVtYmVyIG9mIGRhdGFwb2ludHMgYmVsb3cgd2hpY2ggd2Ugd29uJ3Qgc2hvdyBhIHRpbWUgZXN0aW1hdGUuXG4gICAgY29uc3QgTUlOSU1VTV9EQVRBX1BPSU5UX0NPVU5UID0gNDtcblxuICAgIC8vIEZpbmQgdGhlIGZpcnN0IGVsZW1lbnQgd2l0aGluIHRoZSB3aW5kb3cuIFdlIHVzZSB0aGUgbGFyZ2VyIHdpbmRvdyBvZiB0aGVcbiAgICAvLyB0d28gd2luZG93cyBjcmVhdGVkIGJ5IHRoZSB0d28gY29uc3RyYWludHMgKHRpbWUgYW5kIG51bWJlciBvZlxuICAgIC8vIGRhdGFwb2ludHMpLlxuICAgIGNvbnN0IHdpbmRvd1N0YXJ0ID0gTWF0aC5taW4oXG4gICAgICBwcm9ncmVzc0hpc3RvcnkuZmluZEluZGV4KHAgPT4gKG5vdyAtIHAudGltZXN0YW1wKSA8IFdJTkRPV19TSVpFX01TKSxcbiAgICAgIE1hdGgubWF4KDAsIHByb2dyZXNzSGlzdG9yeS5sZW5ndGggLSBXSU5ET1dfU0laRV9EQVRBX1BPSU5UUyksXG4gICAgKTtcblxuICAgIC8vIFJlbW92ZSBhbGwgZWxlbWVudHMgb3V0c2lkZSB0aGUgd2luZG93LlxuICAgIHByb2dyZXNzSGlzdG9yeS5zcGxpY2UoMCwgd2luZG93U3RhcnQpO1xuXG4gICAgbGV0IHNlY29uZHNMZWZ0OiBudWxsIHwgbnVtYmVyID0gbnVsbDtcbiAgICBpZiAocHJvZ3Jlc3NIaXN0b3J5Lmxlbmd0aCA+PSBNSU5JTVVNX0RBVEFfUE9JTlRfQ09VTlQpIHtcbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgcmVtYWluaW5nIHRpbWUgYmFzZWQgb24gdGhlIGF2ZXJhZ2Ugc3BlZWQgd2l0aGluIHRoZSB3aW5kb3cuXG4gICAgICBjb25zdCB3aW5kb3dMZW5ndGggPSBub3cgLSBwcm9ncmVzc0hpc3RvcnlbMF0udGltZXN0YW1wO1xuICAgICAgY29uc3QgcHJvZ3Jlc3NJbldpbmRvdyA9IHByb2dyZXNzIC0gcHJvZ3Jlc3NIaXN0b3J5WzBdLnByb2dyZXNzO1xuICAgICAgY29uc3QgcHJvZ3Jlc3NQZXJTZWNvbmQgPSAocHJvZ3Jlc3NJbldpbmRvdyAvIHdpbmRvd0xlbmd0aCkgKiAxMDAwO1xuICAgICAgY29uc3QgcHJvZ3Jlc3NMZWZ0ID0gMSAtIHByb2dyZXNzO1xuICAgICAgc2Vjb25kc0xlZnQgPSBNYXRoLm1heCgwLCBNYXRoLnJvdW5kKHByb2dyZXNzTGVmdCAvIHByb2dyZXNzUGVyU2Vjb25kKSk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHN0YXRlIGlmIGFueXRoaW5nIGNoYW5nZWQuIFdlIGFjdHVhbGx5IGNoZWNrIGZvciBlcXVhbGl0eSBoZXJlIHRvXG4gICAgLy8gYXZvaWQgdXNlbGVzcyByZWRyYXdzLlxuICAgIGlmICh1cGxvYWRTdGF0ZS5zZWNvbmRzTGVmdCAhPT0gc2Vjb25kc0xlZnQgfHwgdXBsb2FkU3RhdGUuY3VycmVudFByb2dyZXNzICE9PSBwcm9ncmVzcykge1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBcIlVQTE9BRF9QUk9HUkVTU19VUERBVEVcIixcbiAgICAgICAgc2Vjb25kc0xlZnQsXG4gICAgICAgIGN1cnJlbnRQcm9ncmVzczogcHJvZ3Jlc3MsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFRvIHN0aWxsIHVwZGF0ZSB0aGUgdGltZSBlc3RpbWF0aW9uLCB3ZSBtYWtlIHN1cmUgdG8gY2FsbCBgb25Qcm9ncmVzc2AgYXRcbiAgICAvLyBsZWFzdCBldmVyeSBzbyBvZnRlbi5cbiAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGlmICh1cGxvYWRTdGF0ZS5zdGF0ZSAhPT0gXCJ1cGxvYWRpbmdcIikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghcHJvZ3Jlc3NIaXN0b3J5Lmxlbmd0aCkge1xuICAgICAgICBvblByb2dyZXNzKDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbGFzdFByb2dyZXNzID0gcHJvZ3Jlc3NIaXN0b3J5W3Byb2dyZXNzSGlzdG9yeS5sZW5ndGggLSAxXTtcbiAgICAgICAgY29uc3QgdGltZVNpbmNlTGFzdFVwZGF0ZSA9IERhdGUubm93KCkgLSBsYXN0UHJvZ3Jlc3MudGltZXN0YW1wO1xuICAgICAgICBpZiAodGltZVNpbmNlTGFzdFVwZGF0ZSA+IDMwMDApIHtcbiAgICAgICAgICBvblByb2dyZXNzKGxhc3RQcm9ncmVzcy5wcm9ncmVzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCAxMDAwKTtcblxuICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSk7XG5cbiAgY29uc3QgaGFuZGxlVXBsb2FkOiBTdWJtaXRIYW5kbGVyPElucHV0cz4gPSBhc3luYyBkYXRhID0+IHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IFwiVVBMT0FEX1JFUVVFU1RcIiB9KTtcbiAgICBwcm9ncmVzc0hpc3RvcnkucHVzaCh7XG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICBwcm9ncmVzczogMCxcbiAgICB9KTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBvcGVuY2FzdC51cGxvYWQoe1xuICAgICAgcmVjb3JkaW5nczogcmVjb3JkaW5ncy5maWx0ZXIoQm9vbGVhbiksXG4gICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgIHByZXNlbnRlcjogZGF0YS5wcmVzZW50ZXIsXG4gICAgICBzZXJpZXM6IGRhdGEuc2VyaWVzLFxuICAgICAgdXBsb2FkU2V0dGluZ3M6IHNldHRpbmdzLnVwbG9hZCxcbiAgICAgIG9uUHJvZ3Jlc3MsXG4gICAgICBzdGFydDogc3RhdGUuc3RhcnQsXG4gICAgICBlbmQ6IHN0YXRlLmVuZCxcbiAgICAgIHN0YXJ0VGltZTogc3RhdGUucmVjb3JkaW5nU3RhcnRUaW1lID8/IHVucmVhY2hhYmxlKFwibm8gc3RhcnQgdGltZSBzZXRcIiksXG4gICAgICBlbmRUaW1lOiBzdGF0ZS5yZWNvcmRpbmdFbmRUaW1lID8/IHVucmVhY2hhYmxlKFwibm8gZW5kIHRpbWUgc2V0XCIpLFxuICAgIH0pO1xuICAgIHByb2dyZXNzSGlzdG9yeSA9IFtdO1xuXG4gICAgY29uc3QgZGlzcGF0Y2hFcnJvciA9IChtc2c6IHN0cmluZykgPT4gZGlzcGF0Y2goeyB0eXBlOiBcIlVQTE9BRF9FUlJPUlwiLCBtc2cgfSk7XG4gICAgbWF0Y2gocmVzdWx0LCB7XG4gICAgICBcInN1Y2Nlc3NcIjogKCkgPT4gZGlzcGF0Y2goeyB0eXBlOiBcIlVQTE9BRF9TVUNDRVNTXCIgfSksXG4gICAgICBcIm5ldHdvcmtfZXJyb3JcIjogKCkgPT4gZGlzcGF0Y2hFcnJvcih0KFwic3RlcHMuZmluaXNoLnVwbG9hZC51cGxvYWQtbmV0d29yay1lcnJvclwiKSksXG4gICAgICBcIm5vdF9hdXRob3JpemVkXCI6ICgpID0+IGRpc3BhdGNoRXJyb3IodChcInN0ZXBzLmZpbmlzaC51cGxvYWQudXBsb2FkLW5vdC1hdXRob3JpemVkXCIpKSxcbiAgICAgIFwidW5leHBlY3RlZF9yZXNwb25zZVwiOiAoKSA9PiBkaXNwYXRjaEVycm9yKHQoXCJzdGVwcy5maW5pc2gudXBsb2FkLnVwbG9hZC1pbnZhbGlkLXJlc3BvbnNlXCIpKSxcbiAgICB9LCAoKSA9PiBkaXNwYXRjaEVycm9yKHQoXCJzdGVwcy5maW5pc2gudXBsb2FkLnVwbG9hZC11bmtub3duLWVycm9yXCIpKSk7XG4gIH07XG5cbiAgc3dpdGNoICh1cGxvYWRTdGF0ZS5zdGF0ZSkge1xuICAgIGNhc2UgXCJ1cGxvYWRpbmdcIjpcbiAgICAgIHJldHVybiA8VXBsb2FkUHJvZ3Jlc3NcbiAgICAgICAgY3VycmVudFByb2dyZXNzPXt1cGxvYWRTdGF0ZS5jdXJyZW50UHJvZ3Jlc3N9XG4gICAgICAgIHNlY29uZHNMZWZ0PXt1cGxvYWRTdGF0ZS5zZWNvbmRzTGVmdH1cbiAgICAgIC8+O1xuICAgIGNhc2UgXCJ1cGxvYWRlZFwiOlxuICAgICAgcmV0dXJuIDxVcGxvYWRTdWNjZXNzIC8+O1xuICAgIGRlZmF1bHQ6IC8vIFwibm90X3VwbG9hZGVkXCIgb3IgXCJlcnJvclwiXG4gICAgICByZXR1cm4gPFVwbG9hZEZvcm0gey4uLnsgdXBsb2FkU3RhdGUsIGhhbmRsZVVwbG9hZCB9fSAvPjtcbiAgfVxufTtcblxuXG50eXBlIElucHV0cyA9IHtcbiAgdGl0bGU6IHN0cmluZztcbiAgcHJlc2VudGVyOiBzdHJpbmc7XG4gIHNlcmllczogc3RyaW5nO1xuICBzZXJ2ZXJVcmw6IHN0cmluZztcbiAgbG9naW5OYW1lOiBzdHJpbmc7XG4gIGxvZ2luUGFzc3dvcmQ6IHN0cmluZztcbn07XG5cbnR5cGUgVXBsb2FkRm9ybVByb3BzID0ge1xuICBoYW5kbGVVcGxvYWQ6IFN1Ym1pdEhhbmRsZXI8SW5wdXRzPjtcbn07XG5cbmNvbnN0IFVwbG9hZEZvcm06IFJlYWN0LkZDPFVwbG9hZEZvcm1Qcm9wcz4gPSAoeyBoYW5kbGVVcGxvYWQgfSkgPT4ge1xuICBjb25zdCB7XG4gICAgdGl0bGVGaWVsZCA9IFwicmVxdWlyZWRcIixcbiAgICBwcmVzZW50ZXJGaWVsZCA9IFwicmVxdWlyZWRcIixcbiAgICBzZXJpZXNGaWVsZCA9IFwib3B0aW9uYWxcIixcbiAgICBhdXRvZmlsbFByZXNlbnRlciA9IFtdLFxuICB9ID0gdXNlU2V0dGluZ3MoKS51cGxvYWQgPz8ge307XG5cbiAgY29uc3QgeyB0LCBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCBvcGVuY2FzdCA9IHVzZU9wZW5jYXN0KCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3Qgc2V0dGluZ3NNYW5hZ2VyID0gdXNlU2V0dGluZ3NNYW5hZ2VyKCk7XG4gIGNvbnN0IHsgdGl0bGUsIHByZXNlbnRlciwgdXBsb2FkOiB1cGxvYWRTdGF0ZSwgcmVjb3JkaW5ncyB9ID0gdXNlU3R1ZGlvU3RhdGUoKTtcbiAgY29uc3QgcHJlc2VudGVyVmFsdWUgPSBwcmVzZW50ZXJcbiAgICB8fCB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oTEFTVF9QUkVTRU5URVJfS0VZKVxuICAgIHx8IGF1dG9maWxsUHJlc2VudGVyXG4gICAgICAubWFwKHNvdXJjZSA9PiBtYXRjaChzb3VyY2UsIHtcbiAgICAgICAgXCJvcGVuY2FzdFwiOiAoKSA9PiBvcGVuY2FzdC5nZXRVc2VybmFtZSgpLFxuICAgICAgfSkpXG4gICAgICAuZmluZChCb29sZWFuKVxuICAgIHx8IFwiXCI7XG5cbiAgdHlwZSBGb3JtU3RhdGUgPSBcImlkbGVcIiB8IFwidGVzdGluZ1wiO1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlPEZvcm1TdGF0ZT4oXCJpZGxlXCIpO1xuXG4gIGNvbnN0IHsgZm9ybVN0YXRlOiB7IGVycm9ycyB9LCBoYW5kbGVTdWJtaXQsIHJlZ2lzdGVyLCBjb250cm9sLCBnZXRWYWx1ZXMgfSA9IHVzZUZvcm08SW5wdXRzPih7XG4gICAgZGVmYXVsdFZhbHVlczogc2V0dGluZ3NNYW5hZ2VyLmZvcm1WYWx1ZXMoKS5vcGVuY2FzdCxcbiAgfSk7XG4gIGNvbnN0IHsgZmllbGQ6IHNlcmllc1NlbGVjdCB9ID0gdXNlQ29udHJvbGxlcih7XG4gICAgbmFtZTogXCJzZXJpZXNcIixcbiAgICBjb250cm9sLFxuICAgIHJ1bGVzOiB7XG4gICAgICByZXF1aXJlZDogc2VyaWVzRmllbGQgPT09IFwicmVxdWlyZWRcIlxuICAgICAgICA/IHQoXCJzdGVwcy5maW5pc2gudXBsb2FkLnZhbGlkYXRpb24tZXJyb3ItcmVxdWlyZWRcIilcbiAgICAgICAgOiBmYWxzZSxcbiAgICB9LFxuICB9KTtcblxuICAvLyBUaGlzIGlzIGEgYml0IHVnbHksIGJ1dCB3b3Jrcy4gV2Ugd2FudCB0byBtYWtlIHN1cmUgdGhhdCB0aGUgYHRpdGxlYCBhbmRcbiAgLy8gYHByZXNlbnRlcmAgdmFsdWVzIGluIHRoZSBzdHVkaW8gc3RhdGUgYWx3YXlzIGVxdWFsIHRoZSBjdXJyZW50IHZhbHVlIGluXG4gIC8vIHRoZSBpbnB1dC5cbiAgZnVuY3Rpb24gaGFuZGxlSW5wdXRDaGFuZ2UoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IG5vdE51bGxpc2goXG4gICAgICAgICh7IHRpdGxlOiBcIlVQREFURV9USVRMRVwiLCBwcmVzZW50ZXI6IFwiVVBEQVRFX1BSRVNFTlRFUlwiIH0gYXMgY29uc3QpW3RhcmdldC5uYW1lXSxcbiAgICAgICksXG4gICAgICB2YWx1ZTogdGFyZ2V0LnZhbHVlLFxuICAgIH0pO1xuXG4gICAgaWYgKHRhcmdldC5uYW1lID09PSBcInByZXNlbnRlclwiKSB7XG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oTEFTVF9QUkVTRU5URVJfS0VZLCB0YXJnZXQudmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHRoZSB1c2VyIGhhcyBub3QgeWV0IGNoYW5nZWQgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZCwgYnV0IGl0IGhhcyBiZWVuIHByZWZpbGxlZFxuICAvLyBmcm9tIGxvY2FsIHN0b3JhZ2Ugb3Igb25lIG9mIHRoZSBgYXV0b2ZpbGxQcmVzZW50ZXJgIHNvdXJjZXMsIHVwZGF0ZSB0aGUgc3RhdGVcbiAgLy8gdXNpbmcgdGhhdCB2YWx1ZS5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocHJlc2VudGVyVmFsdWUgIT09IHByZXNlbnRlcikge1xuICAgICAgZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9QUkVTRU5URVJcIiwgdmFsdWU6IHByZXNlbnRlclZhbHVlIH0pO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIGNvbnN0IGNvbmZpZ3VyYWJsZVNlcnZlclVybCA9IHNldHRpbmdzTWFuYWdlci5pc0NvbmZpZ3VyYWJsZShcIm9wZW5jYXN0LnNlcnZlclVybFwiKTtcbiAgY29uc3QgY29uZmlndXJhYmxlVXNlcm5hbWUgPSBzZXR0aW5nc01hbmFnZXIuaXNVc2VybmFtZUNvbmZpZ3VyYWJsZSgpO1xuICBjb25zdCBjb25maWd1cmFibGVQYXNzd29yZCA9IHNldHRpbmdzTWFuYWdlci5pc1Bhc3N3b3JkQ29uZmlndXJhYmxlKCk7XG4gIGNvbnN0IHNob3dPcGVuY2FzdFNlY3Rpb24gPSBjb25maWd1cmFibGVTZXJ2ZXJVcmwgfHwgY29uZmlndXJhYmxlVXNlcm5hbWUgfHwgY29uZmlndXJhYmxlUGFzc3dvcmQ7XG5cbiAgY29uc3Qgb2NEYXRhRnJvbUlucHV0cyA9IChkYXRhOiBJbnB1dHMpID0+ICh7XG4gICAgc2VydmVyVXJsOiBkYXRhLnNlcnZlclVybCxcbiAgICBsb2dpbk5hbWU6IGRhdGEubG9naW5OYW1lLFxuICAgIGxvZ2luUGFzc3dvcmQ6IGRhdGEubG9naW5QYXNzd29yZCxcbiAgfSk7XG5cbiAgY29uc3Qgb25TdWJtaXQ6IFN1Ym1pdEhhbmRsZXI8SW5wdXRzPiA9IGFzeW5jIGRhdGEgPT4ge1xuICAgIGlmICghc2hvd09wZW5jYXN0U2VjdGlvbikge1xuICAgICAgYXdhaXQgaGFuZGxlVXBsb2FkKGRhdGEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgIHNldFN0YXRlKFwidGVzdGluZ1wiKTtcblxuICAgIC8vIFVwZGF0ZSBPcGVuY2FzdCBjb25uZWN0aW9uIGRhdGEuIFRoaXMgaXMgYSBiaXQgcm91bmRhYm91dCByaWdodCBub3cgYXNcbiAgICAvLyB0aGUgT3BlbmNhc3QgbG9naWMgaXMgc3RpbGwgZnJvbSBwcmUtcmVkZXNpZ24sIHdoZXJlIHRoZSBjb25uZWN0aW9uIGRhdGFcbiAgICAvLyB3YXMgZ2l2ZW4gb24gYSBzZXBhcmF0ZSBzZXR0aW5ncyBwYWdlLlxuICAgIGNvbnN0IG9jRGF0YSA9IG9jRGF0YUZyb21JbnB1dHMoZGF0YSk7XG4gICAgY29uc3Qgb2MgPSBhd2FpdCBPcGVuY2FzdC5pbml0KHtcbiAgICAgIC4uLnNldHRpbmdzTWFuYWdlci5zZXR0aW5ncygpLm9wZW5jYXN0LFxuICAgICAgLi4ub2NEYXRhLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZXJyb3IgPSBtYXRjaChvYy5nZXRTdGF0ZSgpLCB7XG4gICAgICBcImxvZ2dlZF9pblwiOiAoKSA9PiB7XG4gICAgICAgIG9wZW5jYXN0LnNldEdsb2JhbEluc3RhbmNlKG9jKTtcbiAgICAgICAgc2V0dGluZ3NNYW5hZ2VyLnNhdmVTZXR0aW5ncyh7IG9wZW5jYXN0OiBvY0RhdGEgfSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIFwiaW5jb3JyZWN0X2xvZ2luXCI6ICgpID0+IG9wZW5jYXN0LmlzTG9naW5Qcm92aWRlZCgpXG4gICAgICAgID8gdChcInN0ZXBzLmZpbmlzaC51cGxvYWQuc2V0dGluZ3MtaW52YWxpZC1wcm92aWRlZC1sb2dpblwiKVxuICAgICAgICA6IHQoXCJzdGVwcy5maW5pc2gudXBsb2FkLnNldHRpbmdzLWludmFsaWQtbG9naW4tZGF0YVwiKSxcbiAgICAgIFwibmV0d29ya19lcnJvclwiOiAoKSA9PiB0KFwic3RlcHMuZmluaXNoLnVwbG9hZC51cGxvYWQtbmV0d29yay1lcnJvclwiKSxcbiAgICAgIFwiaW52YWxpZF9yZXNwb25zZVwiOiAoKSA9PiB0KFwic3RlcHMuZmluaXNoLnVwbG9hZC51cGxvYWQtaW52YWxpZC1yZXNwb25zZVwiKSxcbiAgICAgIFwicmVzcG9uc2Vfbm90X29rXCI6ICgpID0+IHQoXCJzdGVwcy5maW5pc2gudXBsb2FkLnVwbG9hZC1pbnZhbGlkLXJlc3BvbnNlXCIpLFxuICAgIH0sICgpID0+IHVucmVhY2hhYmxlKCkpO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBkaXNwYXRjaCh7IHR5cGU6IFwiVVBMT0FEX0VSUk9SXCIsIG1zZzogZXJyb3IgfSk7XG4gICAgICBzZXRTdGF0ZShcImlkbGVcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZSBjb25uZWN0aW9uIHRvIE9wZW5jYXN0IHdvcmtzIC0+IG5vdyBhY3R1YWxseSBzdGFydCB0aGUgdXBsb2FkLlxuICAgICAgYXdhaXQgaGFuZGxlVXBsb2FkKGRhdGEpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCB0b3RhbEJ5dGVzID0gcmVjb3JkaW5ncy5yZWR1Y2UoKGFjYywgcmVjKSA9PiBhY2MgKyByZWMubWVkaWEuc2l6ZSwgMCk7XG4gIGNvbnN0IHVwbG9hZFNpemUgPSBwcmV0dHlGaWxlU2l6ZSh0b3RhbEJ5dGVzLCBpMThuKTtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICAvLyBUZXN0aW5nIHRoZSBuZXcgY29ubmVjdGlvbiBzZXR0aW5ncyB0byBlc3RhYmxpc2ggYSBjb25uZWN0aW9uIEFTQVAgdG8gbWFrZVxuICAvLyB0aGUgc2VyaWVzIHNlbGVjdG9yIHdvcmsuXG4gIGNvbnN0IG9uQ29ubmVjdGlvblNldHRpbmdDaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IGdldFZhbHVlcygpO1xuXG4gICAgLy8gSWYgbm90aGluZyBjaGFuZ2VkLCBkbyBub3RoaW5nLlxuICAgIGNvbnN0IG9jU2V0dGluZ3MgPSBzZXR0aW5nc01hbmFnZXIuc2V0dGluZ3MoKS5vcGVuY2FzdDtcbiAgICBjb25zdCBhbnlDaGFuZ2UgPSAoZGF0YS5zZXJ2ZXJVcmwgJiYgZGF0YS5zZXJ2ZXJVcmwgIT09IG9jU2V0dGluZ3M/LnNlcnZlclVybClcbiAgICAgIHx8IChkYXRhLmxvZ2luTmFtZSAmJiBkYXRhLmxvZ2luTmFtZSAhPT0gb2NTZXR0aW5ncz8ubG9naW5OYW1lKVxuICAgICAgfHwgKGRhdGEubG9naW5QYXNzd29yZCAmJiBkYXRhLmxvZ2luUGFzc3dvcmQgIT09IG9jU2V0dGluZ3M/LmxvZ2luUGFzc3dvcmQpO1xuICAgIGlmICghYW55Q2hhbmdlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgb2NEYXRhID0gb2NEYXRhRnJvbUlucHV0cyhkYXRhKTtcbiAgICBjb25zdCBvYyA9IGF3YWl0IE9wZW5jYXN0LmluaXQoe1xuICAgICAgLi4uc2V0dGluZ3NNYW5hZ2VyLnNldHRpbmdzKCkub3BlbmNhc3QsXG4gICAgICAuLi5vY0RhdGEsXG4gICAgfSk7XG5cbiAgICBpZiAob2MuZ2V0U3RhdGUoKSA9PT0gXCJsb2dnZWRfaW5cIikge1xuICAgICAgb3BlbmNhc3Quc2V0R2xvYmFsSW5zdGFuY2Uob2MpO1xuICAgICAgc2V0dGluZ3NNYW5hZ2VyLnNhdmVTZXR0aW5ncyh7IG9wZW5jYXN0OiBvY0RhdGEgfSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxmb3JtIG9uU3VibWl0PXtoYW5kbGVTdWJtaXQob25TdWJtaXQpfT5cbiAgICAgICAge3RpdGxlRmllbGQgIT09IFwiaGlkZGVuXCIgJiYgPElucHV0XG4gICAgICAgICAgbmFtZT1cInRpdGxlXCJcbiAgICAgICAgICBsYWJlbD17dChcInN0ZXBzLmZpbmlzaC51cGxvYWQubGFiZWwtdGl0bGVcIil9XG4gICAgICAgICAgcmVxdWlyZWQ9e3RpdGxlRmllbGQgPT09IFwicmVxdWlyZWRcIn1cbiAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgYXV0b0NvbXBsZXRlPVwib2ZmXCJcbiAgICAgICAgICBkZWZhdWx0VmFsdWU9e3RpdGxlfVxuICAgICAgICAgIGF1dG9Gb2N1c1xuICAgICAgICAgIHsuLi57IGVycm9ycywgcmVnaXN0ZXIgfX1cbiAgICAgICAgLz59XG4gICAgICAgIHtwcmVzZW50ZXJGaWVsZCAhPT0gXCJoaWRkZW5cIiAmJiA8SW5wdXRcbiAgICAgICAgICBuYW1lPVwicHJlc2VudGVyXCJcbiAgICAgICAgICBsYWJlbD17dChcInN0ZXBzLmZpbmlzaC51cGxvYWQubGFiZWwtcHJlc2VudGVyXCIpfVxuICAgICAgICAgIHJlcXVpcmVkPXtwcmVzZW50ZXJGaWVsZCA9PT0gXCJyZXF1aXJlZFwifVxuICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVJbnB1dENoYW5nZX1cbiAgICAgICAgICBhdXRvQ29tcGxldGU9XCJvZmZcIlxuICAgICAgICAgIGRlZmF1bHRWYWx1ZT17cHJlc2VudGVyVmFsdWV9XG4gICAgICAgICAgey4uLnsgZXJyb3JzLCByZWdpc3RlciB9fVxuICAgICAgICAvPn1cbiAgICAgICAge3Nlcmllc0ZpZWxkICE9PSBcImhpZGRlblwiICYmIDxTZXJpZXNTZWxlY3RcbiAgICAgICAgICBmb3JtUHJvcHM9e3Nlcmllc1NlbGVjdH1cbiAgICAgICAgICBzaG93T3BlbmNhc3RTZWN0aW9uPXtzaG93T3BlbmNhc3RTZWN0aW9ufVxuICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgICAgICAvPn1cblxuICAgICAgICB7c2hvd09wZW5jYXN0U2VjdGlvbiAmJiA8PlxuICAgICAgICAgIDxoMyBjc3M9e3tcbiAgICAgICAgICAgIGZvbnRTaXplOiAxNixcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDcwMCxcbiAgICAgICAgICAgIG1hcmdpblRvcDogMjAsXG4gICAgICAgICAgfX0+e3QoXCJzdGVwcy5maW5pc2gudXBsb2FkLnNldHRpbmdzLWhlYWRlclwiKX08L2gzPlxuXG4gICAgICAgICAge2NvbmZpZ3VyYWJsZVNlcnZlclVybCAmJiA8SW5wdXRcbiAgICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgICAgICAgICAgbGFiZWw9e3QoXCJzdGVwcy5maW5pc2gudXBsb2FkLnNldHRpbmdzLWxhYmVsLXNlcnZlci11cmxcIil9XG4gICAgICAgICAgICBuYW1lPVwic2VydmVyVXJsXCJcbiAgICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgICAgICAgICAgIG9uQmx1cj17b25Db25uZWN0aW9uU2V0dGluZ0NoYW5nZX1cbiAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgICB2YWxpZGF0ZT17KHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHVybC5wcm90b2NvbCA9PT0gXCJodHRwczpcIiB8fCB1cmwucHJvdG9jb2wgPT09IFwiaHR0cDpcIilcbiAgICAgICAgICAgICAgICAgIHx8IHQoXCJzdGVwcy5maW5pc2gudXBsb2FkLnNldHRpbmdzLWludmFsaWQtdXJsLWh0dHAtc3RhcnRcIik7XG4gICAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICAgIGxldCBlcnIgPSB0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5zZXR0aW5ncy1pbnZhbGlkLXVybFwiKTtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbHVlLnN0YXJ0c1dpdGgoXCJodHRwczovL1wiKSAmJiAhdmFsdWUuc3RhcnRzV2l0aChcImh0dHA6Ly9cIikpIHtcbiAgICAgICAgICAgICAgICAgIGVyciArPSBcIiBcIiArIHQoXCJzdGVwcy5maW5pc2gudXBsb2FkLnNldHRpbmdzLWludmFsaWQtdXJsLWh0dHAtc3RhcnRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBlcnI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz59XG5cbiAgICAgICAgICB7Y29uZmlndXJhYmxlVXNlcm5hbWUgJiYgPElucHV0XG4gICAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgICAgICAgICAgIGxhYmVsPXt0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5zZXR0aW5ncy1sYWJlbC11c2VybmFtZVwiKX1cbiAgICAgICAgICAgIG5hbWU9XCJsb2dpbk5hbWVcIlxuICAgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgICAgICAgICAgb25CbHVyPXtvbkNvbm5lY3Rpb25TZXR0aW5nQ2hhbmdlfVxuICAgICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgICAvPn1cblxuICAgICAgICAgIHtjb25maWd1cmFibGVQYXNzd29yZCAmJiA8SW5wdXRcbiAgICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgICAgICAgICAgbGFiZWw9e3QoXCJzdGVwcy5maW5pc2gudXBsb2FkLnNldHRpbmdzLWxhYmVsLXBhc3N3b3JkXCIpfVxuICAgICAgICAgICAgbmFtZT1cImxvZ2luUGFzc3dvcmRcIlxuICAgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgICAgICAgICAgb25CbHVyPXtvbkNvbm5lY3Rpb25TZXR0aW5nQ2hhbmdlfVxuICAgICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgLz59XG4gICAgICAgIDwvPn1cblxuICAgICAgICB7LyogVXBsb2FkIGJ1dHRvbiAqL31cbiAgICAgICAgPFByb3RvQnV0dG9uXG4gICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAuLi5zaGFyZWRCdXR0b25TdHlsZShpc0hpZ2hDb250cmFzdCksXG4gICAgICAgICAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG4gICAgICAgICAgICBtYXJnaW5Ub3A6IDI0LFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7bWF0Y2goc3RhdGUsIHtcbiAgICAgICAgICAgIFwiaWRsZVwiOiAoKSA9PiA8RmlVcGxvYWQgY3NzPXt7IGZvbnRTaXplOiAyMCB9fSAvPixcbiAgICAgICAgICAgIFwidGVzdGluZ1wiOiAoKSA9PiA8U3Bpbm5lciBzaXplPXsyMH0gLz4sXG4gICAgICAgICAgfSl9XG4gICAgICAgICAgPHNwYW4+e3QoXCJzdGVwcy5maW5pc2gudXBsb2FkLmxhYmVsXCIpICsgXCIgKFwiICsgdXBsb2FkU2l6ZSArIFwiKVwifTwvc3Bhbj5cbiAgICAgICAgPC9Qcm90b0J1dHRvbj5cbiAgICAgIDwvZm9ybT5cblxuICAgICAgey8qIFVwbG9hZCBlcnJvciBib3ggKi99XG4gICAgICA8ZGl2IGNzcz17eyBtYXJnaW5Ub3A6IDggfX0+XG4gICAgICAgIHt1cGxvYWRTdGF0ZS5zdGF0ZSA9PT0gXCJlcnJvclwiICYmIChcbiAgICAgICAgICA8RXJyb3JCb3hcbiAgICAgICAgICAgIGNzcz17eyBtYXJnaW46IDAgfX1cbiAgICAgICAgICAgIGJvZHk9e25vdE51bGxpc2godXBsb2FkU3RhdGUuZXJyb3IpfVxuICAgICAgICAgICAgZXh0cmFCb2R5PXt0KFwic3RlcHMuZmluaXNoLnVwbG9hZC53YXJuLWRvd25sb2FkLWhpbnRcIil9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufTtcblxudHlwZSBJbnB1dFByb3BzPEkgZXh0ZW5kcyBGaWVsZFZhbHVlcywgRj4gPVxuICBQaWNrPFxuICAgIEpTWC5JbnRyaW5zaWNFbGVtZW50c1tcImlucHV0XCJdLFxuICAgIFwib25DaGFuZ2VcIiB8IFwiYXV0b0NvbXBsZXRlXCIgfCBcImRlZmF1bHRWYWx1ZVwiIHwgXCJvbkJsdXJcIlxuICA+ICZcbiAgUGljazxSZXR1cm5UeXBlPHR5cGVvZiB1c2VGb3JtPEk+PiwgXCJyZWdpc3RlclwiPiAmIHtcbiAgICAvKiogSHVtYW4gcmVhZGFibGUgc3RyaW5nIGRlc2NyaWJpbmcgdGhlIGZpZWxkLiAqL1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgbmFtZTogUGF0aDxJPjtcbiAgICAvKiogV2hldGhlciB0aGlzIGZpZWxkIGlzIHJlcXVpcmVkIG9yIG1heSBiZSBlbXB0eS4gKi9cbiAgICByZXF1aXJlZDogYm9vbGVhbjtcbiAgICAvKiogRnVuY3Rpb24gdmFsaWRhdGluZyB0aGUgdmFsdWUgYW5kIHJldHVybmluZyBhIHN0cmluZyBpbiB0aGUgY2FzZSBvZiBlcnJvci4gKi9cbiAgICB2YWxpZGF0ZT86IFZhbGlkYXRlPEYsIEk+O1xuICAgIGVycm9yczogUGFydGlhbDxSZWNvcmQ8a2V5b2YgSSwgRmllbGRFcnJvcj4+O1xuICAgIC8qKiBQYXNzZWQgdG8gdGhlIGA8aW5wdXQ+YC4gKi9cbiAgICB0eXBlPzogSFRNTElucHV0VHlwZUF0dHJpYnV0ZTtcbiAgICBhdXRvRm9jdXM/OiBib29sZWFuO1xuICB9O1xuXG4vKipcbiAqIEEgc3R5bGVkIGA8aW5wdXQ+YCBlbGVtZW50IHdpdGggYSBsYWJlbC4gRGlzcGxheXMgZXJyb3JzIGFuZCBpbnRlZ3JhdGVkIHdpdGhcbiAqIGByZWFjdC1ob29rLWZvcm1gLlxuICovXG5leHBvcnQgY29uc3QgSW5wdXQgPSA8SSBleHRlbmRzIEZpZWxkVmFsdWVzLCBGPih7XG4gIGVycm9ycyxcbiAgcmVnaXN0ZXIsXG4gIGxhYmVsLFxuICBuYW1lLFxuICByZXF1aXJlZCxcbiAgdmFsaWRhdGUsXG4gIHR5cGUgPSBcInRleHRcIixcbiAgLi4ucmVzdFxufTogSW5wdXRQcm9wczxJLCBGPikgPT4ge1xuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IGVycm9yID0gZXJyb3JzW25hbWVdO1xuICBjb25zdCBpZCA9IHVzZUlkKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17eyBtYXJnaW5Cb3R0b206IDEyIH19PlxuICAgICAgPGxhYmVsIGh0bWxGb3I9e2lkfSBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICBmb250V2VpZ2h0OiA3MDAsXG4gICAgICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDcwLFxuICAgICAgICBtYXJnaW46IFwiNHB4IDBcIixcbiAgICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgfX0+XG4gICAgICAgIHtsYWJlbH1cbiAgICAgIDwvbGFiZWw+XG4gICAgICA8ZGl2IGNzcz17e1xuICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIHRleHRBbGlnbjogXCJsZWZ0XCIsXG4gICAgICB9fT5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgIGFyaWEtaW52YWxpZD17ZXJyb3IgPyBcInRydWVcIiA6IFwiZmFsc2VcIn1cbiAgICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PXtlcnJvciA/IGAke25hbWV9RXJyb3JgIDogaWR9XG4gICAgICAgICAgYXV0b0NvbXBsZXRlPVwib2ZmXCJcbiAgICAgICAgICB0eXBlPXt0eXBlfVxuICAgICAgICAgIHsuLi5yZXN0fVxuICAgICAgICAgIHsuLi5yZWdpc3RlcihuYW1lLCB7XG4gICAgICAgICAgICB2YWxpZGF0ZSxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiByZXN0Lm9uQ2hhbmdlLFxuICAgICAgICAgICAgb25CbHVyOiByZXN0Lm9uQmx1cixcbiAgICAgICAgICAgIC4uLnJlcXVpcmVkICYmIHsgcmVxdWlyZWQ6IHQoXCJzdGVwcy5maW5pc2gudXBsb2FkLnZhbGlkYXRpb24tZXJyb3ItcmVxdWlyZWRcIikgfSxcbiAgICAgICAgICB9KX1cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogNCxcbiAgICAgICAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAke2Vycm9yID8gQ09MT1JTLmRhbmdlcjQgOiBDT0xPUlMubmV1dHJhbDMwfWAsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDAsXG4gICAgICAgICAgICBjb2xvcjogQ09MT1JTLm5ldXRyYWw3MCxcbiAgICAgICAgICAgIHBhZGRpbmc6IFwiOHB4IDE2cHhcIixcbiAgICAgICAgICAgIC4uLmZvY3VzU3R5bGUoeyBvZmZzZXQ6IC0xIH0pLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICAgIHtlcnJvciAmJiA8RXJyb3JDb250YWluZXIgaWQ9e2Ake25hbWV9RXJyb3JgfT5cbiAgICAgICAgICB7ZXJyb3IubWVzc2FnZX1cbiAgICAgICAgPC9FcnJvckNvbnRhaW5lcj59XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbnR5cGUgRXJyb3JDb250YWluZXJQcm9wcyA9IFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPHtcbiAgaWQ6IHN0cmluZztcbn0+O1xuXG5jb25zdCBFcnJvckNvbnRhaW5lcjogUmVhY3QuRkM8RXJyb3JDb250YWluZXJQcm9wcz4gPSAoeyBpZCwgY2hpbGRyZW4gfSkgPT4gKFxuICA8ZGl2XG4gICAgaWQ9e2lkfVxuICAgIGNzcz17e1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMuZGFuZ2VyMSxcbiAgICAgIGNvbG9yOiBDT0xPUlMuZGFuZ2VyNSxcbiAgICAgIG1hcmdpblRvcDogNCxcbiAgICAgIGJvcmRlclJhZGl1czogNCxcbiAgICAgIHBhZGRpbmc6IFwiNnB4IDEycHhcIixcbiAgICAgIGxpbmVIZWlnaHQ6IDEuMixcbiAgICB9fVxuICA+XG4gICAge2NoaWxkcmVufVxuICA8L2Rpdj5cbik7XG5cblxudHlwZSBTZXJpZXNTZWxlY3RQcm9wcyA9IHtcbiAgZm9ybVByb3BzOiBDb250cm9sbGVyUmVuZGVyUHJvcHM8SW5wdXRzLCBcInNlcmllc1wiPjtcbiAgc2hvd09wZW5jYXN0U2VjdGlvbjogYm9vbGVhbjtcbiAgZXJyb3JzOiBQYXJ0aWFsPFJlY29yZDxrZXlvZiBJbnB1dHMsIEZpZWxkRXJyb3I+Pjtcbn07XG5cbmNvbnN0IFNlcmllc1NlbGVjdDogUmVhY3QuRkM8U2VyaWVzU2VsZWN0UHJvcHM+ID0gKHsgZm9ybVByb3BzLCBzaG93T3BlbmNhc3RTZWN0aW9uLCBlcnJvcnMgfSkgPT4ge1xuICBjb25zdCB7IHQsIGkxOG4gfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IG9wZW5jYXN0ID0gdXNlT3BlbmNhc3QoKTtcbiAgY29uc3QgeyBzY2hlbWUgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG4gIGNvbnN0IHNlcmllc0lkID0gdXNlU2V0dGluZ3MoKS51cGxvYWQ/LnNlcmllc0lkO1xuXG4gIHR5cGUgT3B0aW9uID0geyB2YWx1ZTogc3RyaW5nOyBsYWJlbDogc3RyaW5nIH07XG4gIGNvbnN0IFtvcHRpb25zLCBzZXRPcHRpb25zXSA9IHVzZVN0YXRlPE9wdGlvbltdIHwgXCJlcnJvclwiIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZjxTZWxlY3RJbnN0YW5jZTxPcHRpb24+PihudWxsKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRPcHRpb25zKG51bGwpO1xuICAgIG9wZW5jYXN0LmdldFNlcmllcygpLnRoZW4oXG4gICAgICByZXN1bHQgPT4ge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gWy4uLnJlc3VsdC5lbnRyaWVzKCldLm1hcCgoW3ZhbHVlLCBsYWJlbF0pID0+ICh7IHZhbHVlLCBsYWJlbCB9KSk7XG4gICAgICAgIG9wdGlvbnMuc29ydChcbiAgICAgICAgICAoYSwgYikgPT4gYS5sYWJlbC5sb2NhbGVDb21wYXJlKGIubGFiZWwsIGkxOG4ubGFuZ3VhZ2UsIHsgc2Vuc2l0aXZpdHk6IFwiYmFzZVwiIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gSWYgYSBzZXJpZXNJRCBpcyBnaXZlbiwgbWFrZSB0aGUgc2VsZWN0IHVzZSB0aGF0IGFzIGRlZmF1bHQgdmFsdWUuXG4gICAgICAgIGlmIChzZXJpZXNJZCkge1xuICAgICAgICAgIGNvbnN0IHRpdGxlID0gcmVzdWx0LmdldChzZXJpZXNJZCk7XG4gICAgICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbiA9IHtcbiAgICAgICAgICAgIGxhYmVsOiB0aXRsZSA/PyB0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5zZXJpZXMtdW5rbm93blwiKSxcbiAgICAgICAgICAgIHZhbHVlOiBzZXJpZXNJZCxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmICh0aXRsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goZGVmYXVsdE9wdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlZi5jdXJyZW50Py5zZXRWYWx1ZShkZWZhdWx0T3B0aW9uLCBcInNlbGVjdC1vcHRpb25cIik7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgfSxcbiAgICAgIGUgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yIGZldGNoaW5nIHNlcmllczogXCIsIGUpO1xuICAgICAgICBzZXRPcHRpb25zKFwiZXJyb3JcIik7XG4gICAgICB9LFxuICAgICk7XG4gIH0sIFtvcGVuY2FzdF0pO1xuXG4gIGNvbnN0IGlucHV0SWQgPSB1c2VJZCgpO1xuICBjb25zdCBlcnJvcklkID0gdXNlSWQoKTtcbiAgY29uc3QgZXJyb3IgPSBvcHRpb25zID09PSBcImVycm9yXCI7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3sgbWFyZ2luQm90dG9tOiAxMiB9fT5cbiAgICAgIDxsYWJlbCBodG1sRm9yPXtpbnB1dElkfSBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICBmb250V2VpZ2h0OiA3MDAsXG4gICAgICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDcwLFxuICAgICAgICBtYXJnaW46IFwiNHB4IDBcIixcbiAgICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgfX0+XG4gICAgICAgIHt0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5sYWJlbC1zZXJpZXNcIil9XG4gICAgICA8L2xhYmVsPlxuXG4gICAgICA8U2VsZWN0XG4gICAgICAgIGlkPXtpbnB1dElkfVxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgb3B0aW9ucz17b3B0aW9ucyAmJiBvcHRpb25zICE9PSBcImVycm9yXCIgPyBvcHRpb25zIDogW119XG4gICAgICAgIGlzTG9hZGluZz17b3B0aW9ucyA9PT0gbnVsbH1cbiAgICAgICAgaXNEaXNhYmxlZD17b3B0aW9ucyA9PT0gXCJlcnJvclwifVxuICAgICAgICBpc0NsZWFyYWJsZVxuICAgICAgICBpc1NlYXJjaGFibGVcbiAgICAgICAgb25DaGFuZ2U9e2RhdGEgPT4gZm9ybVByb3BzLm9uQ2hhbmdlKGRhdGE/LnZhbHVlKX1cbiAgICAgICAgb25CbHVyPXtmb3JtUHJvcHMub25CbHVyfVxuICAgICAgICBhcmlhLWludmFsaWQ9e2Vycm9yID8gXCJ0cnVlXCIgOiBcImZhbHNlXCJ9XG4gICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9e2Vycm9yID8gZXJyb3JJZCA6IGlucHV0SWR9XG5cbiAgICAgICAgLy8gU3R5bGluZ1xuICAgICAgICBwbGFjZWhvbGRlcj17dChcInN0ZXBzLmZpbmlzaC51cGxvYWQuc2VyaWVzLXBsYWNlaG9sZGVyXCIpfVxuICAgICAgICBsb2FkaW5nTWVzc2FnZT17KCkgPT4gdChcInN0ZXBzLmZpbmlzaC51cGxvYWQuc2VyaWVzLWxvYWRpbmdcIil9XG4gICAgICAgIG5vT3B0aW9uc01lc3NhZ2U9eygpID0+IHQoXCJzdGVwcy5maW5pc2gudXBsb2FkLnNlcmllcy1ub25lXCIpfVxuICAgICAgICBzdHlsZXM9e3NlbGVjdFN0eWxlcyhzY2hlbWUuc3RhcnRzV2l0aChcImRhcmtcIiksIHNjaGVtZS5lbmRzV2l0aChcImhpZ2gtY29udHJhc3RcIikpfVxuICAgICAgICB0aGVtZT17dGhlbWUgPT4gKHtcbiAgICAgICAgICAuLi50aGVtZSxcbiAgICAgICAgICBjb2xvcnM6IHtcbiAgICAgICAgICAgIC4uLnRoZW1lLmNvbG9ycyxcbiAgICAgICAgICAgIGRhbmdlcjogQ09MT1JTLmRhbmdlcjAsXG4gICAgICAgICAgICBwcmltYXJ5OiBDT0xPUlMuZm9jdXMsXG4gICAgICAgICAgICBuZXV0cmFsMDogQ09MT1JTLm5ldXRyYWwwMCxcbiAgICAgICAgICAgIG5ldXRyYWw1OiBDT0xPUlMubmV1dHJhbDE1LFxuICAgICAgICAgICAgbmV1dHJhbDEwOiBDT0xPUlMubmV1dHJhbDIwLFxuICAgICAgICAgICAgbmV1dHJhbDIwOiBDT0xPUlMubmV1dHJhbDMwLFxuICAgICAgICAgICAgbmV1dHJhbDMwOiBDT0xPUlMubmV1dHJhbDQwLFxuICAgICAgICAgICAgbmV1dHJhbDQwOiBDT0xPUlMubmV1dHJhbDUwLFxuICAgICAgICAgICAgbmV1dHJhbDUwOiBDT0xPUlMubmV1dHJhbDUwLFxuICAgICAgICAgICAgbmV1dHJhbDYwOiBDT0xPUlMubmV1dHJhbDYwLFxuICAgICAgICAgICAgbmV1dHJhbDcwOiBDT0xPUlMubmV1dHJhbDcwLFxuICAgICAgICAgICAgbmV1dHJhbDgwOiBDT0xPUlMubmV1dHJhbDgwLFxuICAgICAgICAgICAgbmV1dHJhbDkwOiBDT0xPUlMubmV1dHJhbDkwLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pfVxuICAgICAgLz5cbiAgICAgIHtlcnJvciAmJiAoXG4gICAgICAgIDxFcnJvckNvbnRhaW5lciBpZD17ZXJyb3JJZH0+XG4gICAgICAgICAge3QoXCJzdGVwcy5maW5pc2gudXBsb2FkLnNlcmllcy1mZXRjaC1lcnJvclwiKX1cbiAgICAgICAgICB7c2hvd09wZW5jYXN0U2VjdGlvbiAmJiAoXG4gICAgICAgICAgICBcIiBcIiArIHQoXCJzdGVwcy5maW5pc2gudXBsb2FkLnNlcmllcy1jb25uZWN0aW9uLXNldHRpbmdzLWhpbnRcIilcbiAgICAgICAgICApfVxuICAgICAgICA8L0Vycm9yQ29udGFpbmVyPlxuICAgICAgKX1cbiAgICAgIHtlcnJvcnNbXCJzZXJpZXNcIl0gJiYgKFxuICAgICAgICA8RXJyb3JDb250YWluZXIgaWQ9e2Vycm9ySWR9PntlcnJvcnNbXCJzZXJpZXNcIl0ubWVzc2FnZX08L0Vycm9yQ29udGFpbmVyPlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZWxlY3RTdHlsZXMgPSAoaXNEYXJrOiBib29sZWFuLCBpc0hpZ2hDb250cmFzdDogYm9vbGVhbikgPT4gKHtcbiAgY29udHJvbDogKGJhc2VTdHlsZXM6IENTU09iamVjdFdpdGhMYWJlbCwgc3RhdGU6IHsgaXNGb2N1c2VkOiBib29sZWFuIH0pID0+ICh7XG4gICAgLi4uYmFzZVN0eWxlcyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDAsXG4gICAgcGFkZGluZ0xlZnQ6IDgsXG4gICAgLi4uIXN0YXRlLmlzRm9jdXNlZCAmJiB7IGJvcmRlckNvbG9yOiBDT0xPUlMubmV1dHJhbDMwIH0sXG4gICAgLi4uc3RhdGUuaXNGb2N1c2VkICYmIHtcbiAgICAgIC8vIHJlYWN0LXNlbGVjdCB1c2VzIGJveC1zaGFkb3cgYXMgb3V0bGluZS4gQnV0IGl0J3Mgbm90IHF1aXRlIGxhcmdlXG4gICAgICAvLyBlbm91Z2gsIHNvIHdlIG92ZXJyaWRlIGl0IGhlcmUuXG4gICAgICBib3hTaGFkb3c6IGAwIDAgMCAxLjVweCAke0NPTE9SUy5mb2N1c31gLFxuICAgIH0sXG4gIH0pLFxuICBpbnB1dDogKGJhc2VTdHlsZXM6IENTU09iamVjdFdpdGhMYWJlbCkgPT4gKHtcbiAgICAuLi5iYXNlU3R5bGVzLFxuICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDgwLFxuICAgIHBhZGRpbmc6IFwiNHB4IDBcIixcbiAgfSksXG4gIHBsYWNlaG9sZGVyOiAoYmFzZVN0eWxlczogQ1NTT2JqZWN0V2l0aExhYmVsKSA9PiAoe1xuICAgIC4uLmJhc2VTdHlsZXMsXG4gICAgY29sb3I6IENPTE9SUy5uZXV0cmFsNjAsXG4gIH0pLFxuICBzaW5nbGVWYWx1ZTogKGJhc2VTdHlsZXM6IENTU09iamVjdFdpdGhMYWJlbCkgPT4gKHtcbiAgICAuLi5iYXNlU3R5bGVzLFxuICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDkwLFxuICB9KSxcbiAgbWVudUxpc3Q6IChiYXNlU3R5bGVzOiBDU1NPYmplY3RXaXRoTGFiZWwpID0+ICh7XG4gICAgLi4uYmFzZVN0eWxlcyxcbiAgICBwYWRkaW5nOiAwLFxuICB9KSxcbiAgbWVudTogKGJhc2VTdHlsZXM6IENTU09iamVjdFdpdGhMYWJlbCkgPT4gKHtcbiAgICAuLi5iYXNlU3R5bGVzLFxuICAgIC4uLmlzRGFyayAmJiB7IG91dGxpbmU6IGAxcHggc29saWQgJHtDT0xPUlMubmV1dHJhbDIwfWAgfSxcbiAgICAuLi5pc0hpZ2hDb250cmFzdCAmJiB7IG91dGxpbmU6IGAxcHggc29saWQgJHtDT0xPUlMubmV1dHJhbDkwfWAgfSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGlzRGFyayA/IENPTE9SUy5uZXV0cmFsMTAgOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICB9KSxcbiAgb3B0aW9uOiAoX2Jhc2VTdHlsZXM6IENTU09iamVjdFdpdGhMYWJlbCwgc3RhdGU6IHtcbiAgICBpc1NlbGVjdGVkOiBib29sZWFuO1xuICAgIGlzRm9jdXNlZDogYm9vbGVhbjtcbiAgfSkgPT4gKHtcbiAgICBjdXJzb3I6IFwiZGVmYXVsdFwiLFxuICAgIHBhZGRpbmc6IFwiNnB4IDEwcHhcIixcbiAgICBib3JkZXJMZWZ0OiBgNHB4IHNvbGlkICR7c3RhdGUuaXNTZWxlY3RlZCA/IENPTE9SUy5mb2N1cyA6IFwidHJhbnNwYXJlbnRcIn1gLFxuICAgIC4uLmlzSGlnaENvbnRyYXN0ICYmIHN0YXRlLmlzRm9jdXNlZCAmJiB7XG4gICAgICBvdXRsaW5lOiBgMnB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWw5MH1gLFxuICAgICAgb3V0bGluZU9mZnNldDogLTMsXG4gICAgfSxcbiAgICAuLi4oc3RhdGUuaXNGb2N1c2VkIHx8IHN0YXRlLmlzU2VsZWN0ZWQpICYmICFpc0hpZ2hDb250cmFzdCAmJiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGlzRGFyayA/IENPTE9SUy5uZXV0cmFsMjUgOiBDT0xPUlMubmV1dHJhbDEwLFxuICAgIH0sXG4gIH0pLFxufSk7XG5cblxudHlwZSBVcGxvYWRQcm9ncmVzc1Byb3BzID0ge1xuICBjdXJyZW50UHJvZ3Jlc3M6IG51bWJlcjtcbiAgc2Vjb25kc0xlZnQ6IG51bWJlciB8IG51bGw7XG59O1xuXG4vKipcbiAqIFNob3duIGR1cmluZyB1cGxvYWQuIFNob3dzIGEgcHJvZ3Jlc3NiYXIsIHRoZSBwZXJjZW50YWdlIG9mIGRhdGEgYWxyZWFkeVxuICogdXBsb2FkZWQgYW5kIGBzZWNvbmRzTGVmdGAgbmljZWx5IGZvcm1hdHRlZCBhcyBodW1hbiByZWFkYWJsZSB0aW1lLlxuICovXG5jb25zdCBVcGxvYWRQcm9ncmVzczogUmVhY3QuRkM8VXBsb2FkUHJvZ3Jlc3NQcm9wcz4gPSAoeyBjdXJyZW50UHJvZ3Jlc3MsIHNlY29uZHNMZWZ0IH0pID0+IHtcbiAgY29uc3QgeyB0LCBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuXG4gIC8vIFByb2dyZXNzIGFzIHBlcmNlbnQgd2l0aCBvbmUgZnJhY3Rpb25hbCBkaWdpdCwgZS5nLiAyNy4zJS5cbiAgY29uc3Qgcm91bmRlZFBlcmNlbnQgPSBNYXRoLm1pbigxMDAsIGN1cnJlbnRQcm9ncmVzcyAqIDEwMCkudG9Mb2NhbGVTdHJpbmcoaTE4bi5sYW5ndWFnZSwge1xuICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMSxcbiAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDEsXG4gIH0pO1xuXG4gIC8vIE5pY2VseSBmb3JtYXQgdGhlIHJlbWFpbmluZyB0aW1lLlxuICBsZXQgcHJldHR5VGltZTogc3RyaW5nIHwgbnVsbDtcbiAgaWYgKHNlY29uZHNMZWZ0ID09PSBudWxsKSB7XG4gICAgcHJldHR5VGltZSA9IG51bGw7XG4gIH0gZWxzZSBpZiAoc2Vjb25kc0xlZnQgPCA0KSB7XG4gICAgcHJldHR5VGltZSA9IHQoXCJzdGVwcy5maW5pc2gudXBsb2FkLnRpbWUuYS1mZXctc2Vjb25kc1wiKTtcbiAgfSBlbHNlIGlmIChzZWNvbmRzTGVmdCA8IDQ1KSB7XG4gICAgcHJldHR5VGltZSA9IGAke3NlY29uZHNMZWZ0fSAke3QoXCJzdGVwcy5maW5pc2gudXBsb2FkLnRpbWUuc2Vjb25kc1wiKX1gO1xuICB9IGVsc2UgaWYgKHNlY29uZHNMZWZ0IDwgOTApIHtcbiAgICBwcmV0dHlUaW1lID0gdChcInN0ZXBzLmZpbmlzaC51cGxvYWQudGltZS5hLW1pbnV0ZVwiKTtcbiAgfSBlbHNlIGlmIChzZWNvbmRzTGVmdCA8IDQ1ICogNjApIHtcbiAgICBwcmV0dHlUaW1lID0gYCR7TWF0aC5yb3VuZChzZWNvbmRzTGVmdCAvIDYwKX0gJHt0KFwic3RlcHMuZmluaXNoLnVwbG9hZC50aW1lLm1pbnV0ZXNcIil9YDtcbiAgfSBlbHNlIGlmIChzZWNvbmRzTGVmdCA8IDkwICogNjApIHtcbiAgICBwcmV0dHlUaW1lID0gdChcInN0ZXBzLmZpbmlzaC51cGxvYWQudGltZS5hbi1ob3VyXCIpO1xuICB9IGVsc2UgaWYgKHNlY29uZHNMZWZ0IDwgMjQgKiA2MCAqIDYwKSB7XG4gICAgcHJldHR5VGltZSA9IGAke01hdGgucm91bmQoc2Vjb25kc0xlZnQgLyAoNjAgKiA2MCkpfSAke3QoXCJzdGVwcy5maW5pc2gudXBsb2FkLnRpbWUuaG91cnNcIil9YDtcbiAgfSBlbHNlIHtcbiAgICBwcmV0dHlUaW1lID0gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEdyZXlJbm5lckJveD5cbiAgICAgIHsvKiBIZWFkaW5nICovfVxuICAgICAgPGRpdiBjc3M9e3sgZm9udFdlaWdodDogNzAwIH19Pnt0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5jdXJyZW50bHktdXBsb2FkaW5nXCIpfTwvZGl2PlxuXG4gICAgICB7LyogUHJvZ3Jlc3MgYmFyICovfVxuICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgbWFyZ2luVG9wOiAxNixcbiAgICAgICAgbWFyZ2luQm90dG9tOiA4LFxuICAgICAgICBoZWlnaHQ6IDYsXG4gICAgICAgIGJvcmRlclJhZGl1czogMyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICAgIH19PlxuICAgICAgICA8ZGl2IGNzcz17e1xuICAgICAgICAgIHdpZHRoOiBgJHtjdXJyZW50UHJvZ3Jlc3MgKiAxMDB9JWAsXG4gICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5hY2NlbnQ1LFxuICAgICAgICB9fS8+XG4gICAgICA8L2Rpdj5cblxuICAgICAgey8qIFBlcmNlbnQgYW5kIHRpbWUgZXN0aW1hdGlvbiAqL31cbiAgICAgIDxkaXYgY3NzPXt7IGRpc3BsYXk6IFwiZmxleFwiIH19PlxuICAgICAgICA8ZGl2Pntyb3VuZGVkUGVyY2VudH0lPC9kaXY+XG4gICAgICAgIDxkaXYgY3NzPXt7IGZsZXg6IDEgfX0gLz5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICB7cHJldHR5VGltZSAmJiA8VHJhbnMgaTE4bktleT1cInN0ZXBzLmZpbmlzaC51cGxvYWQudGltZS5sZWZ0XCI+XG4gICAgICAgICAgICB7eyB0aW1lOiBwcmV0dHlUaW1lIH19IGxlZnRcbiAgICAgICAgICA8L1RyYW5zPn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L0dyZXlJbm5lckJveD5cbiAgKTtcbn07XG5cbi8qKiBTaG93biBpZiB0aGUgdXBsb2FkIHdhcyBzdWNjZXNzZnVsLiBBIGJpZyBjaGVja21hcmsgYW5kIGEgdGV4dC4gKi9cbmNvbnN0IFVwbG9hZFN1Y2Nlc3MgPSAoKSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcblxuICByZXR1cm4gKFxuICAgIDxHcmV5SW5uZXJCb3g+XG4gICAgICA8ZGl2IGNzcz17eyBmb250V2VpZ2h0OiA3MDAgfX0+e3QoXCJzdGVwcy5maW5pc2gudXBsb2FkLmNvbXBsZXRlXCIpfTwvZGl2PlxuICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgZm9udFNpemU6IDUwLFxuICAgICAgICBtYXJnaW46IDI0LFxuICAgICAgICBsaW5lSGVpZ2h0OiAwLFxuICAgICAgICBjb2xvcjogQ09MT1JTLmFjY2VudDUsXG4gICAgICB9fT5cbiAgICAgICAgPEx1Q2hlY2tDaXJjbGUyIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+e3QoXCJzdGVwcy5maW5pc2gudXBsb2FkLmNvbXBsZXRlLWV4cGxhbmF0aW9uXCIpfTwvZGl2PlxuICAgIDwvR3JleUlubmVyQm94PlxuICApO1xufTtcblxuY29uc3QgR3JleUlubmVyQm94OiBSZWFjdC5GQzxSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbj4gPSAoeyBjaGlsZHJlbiB9KSA9PiAoXG4gIDxkaXYgY3NzPXt7XG4gICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDEwLFxuICAgIGZvbnRTaXplOiAxNCxcbiAgICBtYXJnaW5Ub3A6IDI0LFxuICAgIHBhZGRpbmc6IDI0LFxuICAgIGJvcmRlclJhZGl1czogNixcbiAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gIH19PlxuICAgIHtjaGlsZHJlbn1cbiAgPC9kaXY+XG4pO1xuIl19 */\"),\n    children: children\n  });\n};\nvar _ref12 =  false ? 0 : {\n  name: \"m794ts-SeriesSelect\",\n  styles: \"margin-bottom:12px;label:SeriesSelect;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst SeriesSelect = _ref10 => {\n  let {\n    formProps,\n    showOpencastSection,\n    errors\n  } = _ref10;\n  const {\n    t,\n    i18n\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const opencast = (0,_opencast__WEBPACK_IMPORTED_MODULE_4__.useOpencast)();\n  const {\n    scheme\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.useColorScheme)();\n  const seriesId = (0,_settings__WEBPACK_IMPORTED_MODULE_5__.useSettings)().upload?.seriesId;\n  const [options, setOptions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n  const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    setOptions(null);\n    opencast.getSeries().then(result => {\n      const options = [...result.entries()].map(_ref11 => {\n        let [value, label] = _ref11;\n        return {\n          value,\n          label\n        };\n      });\n      options.sort((a, b) => a.label.localeCompare(b.label, i18n.language, {\n        sensitivity: \"base\"\n      }));\n\n      // If a seriesID is given, make the select use that as default value.\n      if (seriesId) {\n        const title = result.get(seriesId);\n        const defaultOption = {\n          label: title ?? t(\"steps.finish.upload.series-unknown\"),\n          value: seriesId\n        };\n        if (title == null) {\n          options.push(defaultOption);\n        }\n        ref.current?.setValue(defaultOption, \"select-option\");\n      }\n      setOptions(options);\n    }, e => {\n      console.log(\"Error fetching series: \", e);\n      setOptions(\"error\");\n    });\n  }, [opencast]);\n  const inputId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n  const errorId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n  const error = options === \"error\";\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(\"div\", {\n    css: _ref12,\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"label\", {\n      htmlFor: inputId,\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n        display: \"block\",\n        fontWeight: 700,\n        color: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral70,\n        margin: \"4px 0\",\n        fontSize: 14\n      },  false ? 0 : \";label:SeriesSelect;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n      children: t(\"steps.finish.upload.label-series\")\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(react_select__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n      id: inputId,\n      ref: ref,\n      options: options && options !== \"error\" ? options : [],\n      isLoading: options === null,\n      isDisabled: options === \"error\",\n      isClearable: true,\n      isSearchable: true,\n      onChange: data => formProps.onChange(data?.value),\n      onBlur: formProps.onBlur,\n      \"aria-invalid\": error ? \"true\" : \"false\",\n      \"aria-describedby\": error ? errorId : inputId\n\n      // Styling\n      ,\n      placeholder: t(\"steps.finish.upload.series-placeholder\"),\n      loadingMessage: () => t(\"steps.finish.upload.series-loading\"),\n      noOptionsMessage: () => t(\"steps.finish.upload.series-none\"),\n      styles: selectStyles(scheme.startsWith(\"dark\"), scheme.endsWith(\"high-contrast\")),\n      theme: theme => ({\n        ...theme,\n        colors: {\n          ...theme.colors,\n          danger: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.danger0,\n          primary: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.focus,\n          neutral0: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral00,\n          neutral5: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral15,\n          neutral10: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral20,\n          neutral20: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral30,\n          neutral30: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral40,\n          neutral40: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral50,\n          neutral50: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral50,\n          neutral60: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral60,\n          neutral70: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral70,\n          neutral80: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral80,\n          neutral90: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral90\n        }\n      })\n    }), error && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(ErrorContainer, {\n      id: errorId,\n      children: [t(\"steps.finish.upload.series-fetch-error\"), showOpencastSection && \" \" + t(\"steps.finish.upload.series-connection-settings-hint\")]\n    }), errors[\"series\"] && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(ErrorContainer, {\n      id: errorId,\n      children: errors[\"series\"].message\n    })]\n  });\n};\nconst selectStyles = (isDark, isHighContrast) => ({\n  control: (baseStyles, state) => ({\n    ...baseStyles,\n    backgroundColor: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral00,\n    paddingLeft: 8,\n    ...(!state.isFocused && {\n      borderColor: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral30\n    }),\n    ...(state.isFocused && {\n      // react-select uses box-shadow as outline. But it's not quite large\n      // enough, so we override it here.\n      boxShadow: `0 0 0 1.5px ${_util__WEBPACK_IMPORTED_MODULE_6__.COLORS.focus}`\n    })\n  }),\n  input: baseStyles => ({\n    ...baseStyles,\n    color: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral80,\n    padding: \"4px 0\"\n  }),\n  placeholder: baseStyles => ({\n    ...baseStyles,\n    color: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral60\n  }),\n  singleValue: baseStyles => ({\n    ...baseStyles,\n    color: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral90\n  }),\n  menuList: baseStyles => ({\n    ...baseStyles,\n    padding: 0\n  }),\n  menu: baseStyles => ({\n    ...baseStyles,\n    ...(isDark && {\n      outline: `1px solid ${_util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral20}`\n    }),\n    ...(isHighContrast && {\n      outline: `1px solid ${_util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral90}`\n    }),\n    backgroundColor: isDark ? _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral10 : _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral05,\n    overflow: \"hidden\"\n  }),\n  option: (_baseStyles, state) => ({\n    cursor: \"default\",\n    padding: \"6px 10px\",\n    borderLeft: `4px solid ${state.isSelected ? _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.focus : \"transparent\"}`,\n    ...(isHighContrast && state.isFocused && {\n      outline: `2px solid ${_util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral90}`,\n      outlineOffset: -3\n    }),\n    ...((state.isFocused || state.isSelected) && !isHighContrast && {\n      backgroundColor: isDark ? _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral25 : _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral10\n    })\n  })\n});\nvar _ref14 =  false ? 0 : {\n  name: \"2665z6-UploadProgress\",\n  styles: \"font-weight:700;label:UploadProgress;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref15 =  false ? 0 : {\n  name: \"1cv9gya-UploadProgress\",\n  styles: \"display:flex;label:UploadProgress;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref16 =  false ? 0 : {\n  name: \"inkx6o-UploadProgress\",\n  styles: \"flex:1;label:UploadProgress;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n/**\n * Shown during upload. Shows a progressbar, the percentage of data already\n * uploaded and `secondsLeft` nicely formatted as human readable time.\n */\nconst UploadProgress = _ref13 => {\n  let {\n    currentProgress,\n    secondsLeft\n  } = _ref13;\n  const {\n    t,\n    i18n\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n\n  // Progress as percent with one fractional digit, e.g. 27.3%.\n  const roundedPercent = Math.min(100, currentProgress * 100).toLocaleString(i18n.language, {\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 1\n  });\n\n  // Nicely format the remaining time.\n  let prettyTime;\n  if (secondsLeft === null) {\n    prettyTime = null;\n  } else if (secondsLeft < 4) {\n    prettyTime = t(\"steps.finish.upload.time.a-few-seconds\");\n  } else if (secondsLeft < 45) {\n    prettyTime = `${secondsLeft} ${t(\"steps.finish.upload.time.seconds\")}`;\n  } else if (secondsLeft < 90) {\n    prettyTime = t(\"steps.finish.upload.time.a-minute\");\n  } else if (secondsLeft < 45 * 60) {\n    prettyTime = `${Math.round(secondsLeft / 60)} ${t(\"steps.finish.upload.time.minutes\")}`;\n  } else if (secondsLeft < 90 * 60) {\n    prettyTime = t(\"steps.finish.upload.time.an-hour\");\n  } else if (secondsLeft < 24 * 60 * 60) {\n    prettyTime = `${Math.round(secondsLeft / (60 * 60))} ${t(\"steps.finish.upload.time.hours\")}`;\n  } else {\n    prettyTime = null;\n  }\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(GreyInnerBox, {\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"div\", {\n      css: _ref14,\n      children: t(\"steps.finish.upload.currently-uploading\")\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"div\", {\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n        marginTop: 16,\n        marginBottom: 8,\n        height: 6,\n        borderRadius: 3,\n        backgroundColor: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral05,\n        overflow: \"hidden\"\n      },  false ? 0 : \";label:UploadProgress;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n      children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"div\", {\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n          width: `${currentProgress * 100}%`,\n          height: \"100%\",\n          backgroundColor: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.accent5\n        },  false ? 0 : \";label:UploadProgress;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n      })\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(\"div\", {\n      css: _ref15,\n      children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(\"div\", {\n        children: [roundedPercent, \"%\"]\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"div\", {\n        css: _ref16\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"div\", {\n        children: prettyTime && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(react_i18next__WEBPACK_IMPORTED_MODULE_1__.Trans, {\n          i18nKey: \"steps.finish.upload.time.left\",\n          children: [{\n            time: prettyTime\n          }, \" left\"]\n        })\n      })]\n    })]\n  });\n};\n\n/** Shown if the upload was successful. A big checkmark and a text. */\nvar _ref17 =  false ? 0 : {\n  name: \"mcuvsn-UploadSuccess\",\n  styles: \"font-weight:700;label:UploadSuccess;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2ZpbmlzaC91cGxvYWQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWd3QlciLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvZmluaXNoL3VwbG9hZC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIVE1MSW5wdXRUeXBlQXR0cmlidXRlLCB1c2VFZmZlY3QsIHVzZUlkLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBUcmFucywgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IFNlbGVjdCwgeyBDU1NPYmplY3RXaXRoTGFiZWwsIFNlbGVjdEluc3RhbmNlIH0gZnJvbSBcInJlYWN0LXNlbGVjdFwiO1xuaW1wb3J0IHtcbiAgQ29udHJvbGxlclJlbmRlclByb3BzLCBGaWVsZEVycm9yLCBGaWVsZFZhbHVlcywgUGF0aCwgU3VibWl0SGFuZGxlciwgVmFsaWRhdGUsXG4gIHVzZUNvbnRyb2xsZXIsIHVzZUZvcm0sXG59IGZyb20gXCJyZWFjdC1ob29rLWZvcm1cIjtcbmltcG9ydCB7IEZpVXBsb2FkIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5pbXBvcnQgeyBMdUNoZWNrQ2lyY2xlMiB9IGZyb20gXCJyZWFjdC1pY29ucy9sdVwiO1xuaW1wb3J0IHsgUHJvdG9CdXR0b24sIFNwaW5uZXIsIG1hdGNoLCBub3ROdWxsaXNoLCB1bnJlYWNoYWJsZSwgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU3R1ZGlvU3RhdGUgfSBmcm9tIFwiLi4vLi4vc3R1ZGlvLXN0YXRlXCI7XG5pbXBvcnQgeyBPcGVuY2FzdCwgdXNlT3BlbmNhc3QgfSBmcm9tIFwiLi4vLi4vb3BlbmNhc3RcIjtcbmltcG9ydCB7IHVzZVNldHRpbmdzLCB1c2VTZXR0aW5nc01hbmFnZXIgfSBmcm9tIFwiLi4vLi4vc2V0dGluZ3NcIjtcbmltcG9ydCB7IENPTE9SUywgZm9jdXNTdHlsZSB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBFcnJvckJveCB9IGZyb20gXCIuLi8uLi91aS9FcnJvckJveFwiO1xuaW1wb3J0IHsgcHJldHR5RmlsZVNpemUsIHNoYXJlZEJ1dHRvblN0eWxlIH0gZnJvbSBcIi5cIjtcblxuXG5jb25zdCBMQVNUX1BSRVNFTlRFUl9LRVkgPSBcIm9jU3R1ZGlvTGFzdFByZXNlbnRlclwiO1xuXG5sZXQgcHJvZ3Jlc3NIaXN0b3J5OiB7IHRpbWVzdGFtcDogbnVtYmVyOyBwcm9ncmVzczogbnVtYmVyIH1bXSA9IFtdO1xuXG5cbmV4cG9ydCBjb25zdCBVcGxvYWRCb3g6IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCBzZXR0aW5ncyA9IHVzZVNldHRpbmdzKCk7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3Qgb3BlbmNhc3QgPSB1c2VPcGVuY2FzdCgpO1xuICBjb25zdCB7IHJlY29yZGluZ3MsIHVwbG9hZDogdXBsb2FkU3RhdGUsIHRpdGxlLCBwcmVzZW50ZXIsIC4uLnN0YXRlIH0gPSB1c2VTdHVkaW9TdGF0ZSgpO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgZnVuY3Rpb24gb25Qcm9ncmVzcyhwcm9ncmVzczogbnVtYmVyKSB7XG4gICAgLy8gLS0tLS0gVGltZSBlc3RpbWF0aW9uIC0tLS0tXG4gICAgLy8gV2UgdXNlIGEgc2ltcGxlIHNsaWRpbmcgYXZlcmFnZSBvdmVyIHRoZSBsYXN0IGZldyBkYXRhIHBvaW50cyBhbmQgYXNzdW1lXG4gICAgLy8gdGhhdCBzcGVlZCBmb3IgdGhlIHJlc3Qgb2YgdGhlIHVwbG9hZC5cbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgLy8gQWRkIHByb2dyZXNzIGRhdGEgcG9pbnQgdG8gaGlzdG9yeS5cbiAgICBwcm9ncmVzc0hpc3RvcnkucHVzaCh7XG4gICAgICB0aW1lc3RhbXA6IG5vdyxcbiAgICAgIHByb2dyZXNzLFxuICAgIH0pO1xuXG4gICAgLy8gVGhlIHNpemUgb2YgdGhlIHNsaWRpbmcgd2luZG93IGluIG1pbGxpc2Vjb25kcy5cbiAgICBjb25zdCBXSU5ET1dfU0laRV9NUyA9IDUwMDA7XG4gICAgLy8gVGhlIHNpemUgb2YgdGhlIHNsaWRpbmcgd2luZG93IGluIG51bWJlciBvZiBkYXRhIHBvaW50cy5cbiAgICBjb25zdCBXSU5ET1dfU0laRV9EQVRBX1BPSU5UUyA9IDY7XG4gICAgLy8gVGhlIG51bWJlciBvZiBkYXRhcG9pbnRzIGJlbG93IHdoaWNoIHdlIHdvbid0IHNob3cgYSB0aW1lIGVzdGltYXRlLlxuICAgIGNvbnN0IE1JTklNVU1fREFUQV9QT0lOVF9DT1VOVCA9IDQ7XG5cbiAgICAvLyBGaW5kIHRoZSBmaXJzdCBlbGVtZW50IHdpdGhpbiB0aGUgd2luZG93LiBXZSB1c2UgdGhlIGxhcmdlciB3aW5kb3cgb2YgdGhlXG4gICAgLy8gdHdvIHdpbmRvd3MgY3JlYXRlZCBieSB0aGUgdHdvIGNvbnN0cmFpbnRzICh0aW1lIGFuZCBudW1iZXIgb2ZcbiAgICAvLyBkYXRhcG9pbnRzKS5cbiAgICBjb25zdCB3aW5kb3dTdGFydCA9IE1hdGgubWluKFxuICAgICAgcHJvZ3Jlc3NIaXN0b3J5LmZpbmRJbmRleChwID0+IChub3cgLSBwLnRpbWVzdGFtcCkgPCBXSU5ET1dfU0laRV9NUyksXG4gICAgICBNYXRoLm1heCgwLCBwcm9ncmVzc0hpc3RvcnkubGVuZ3RoIC0gV0lORE9XX1NJWkVfREFUQV9QT0lOVFMpLFxuICAgICk7XG5cbiAgICAvLyBSZW1vdmUgYWxsIGVsZW1lbnRzIG91dHNpZGUgdGhlIHdpbmRvdy5cbiAgICBwcm9ncmVzc0hpc3Rvcnkuc3BsaWNlKDAsIHdpbmRvd1N0YXJ0KTtcblxuICAgIGxldCBzZWNvbmRzTGVmdDogbnVsbCB8IG51bWJlciA9IG51bGw7XG4gICAgaWYgKHByb2dyZXNzSGlzdG9yeS5sZW5ndGggPj0gTUlOSU1VTV9EQVRBX1BPSU5UX0NPVU5UKSB7XG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIHJlbWFpbmluZyB0aW1lIGJhc2VkIG9uIHRoZSBhdmVyYWdlIHNwZWVkIHdpdGhpbiB0aGUgd2luZG93LlxuICAgICAgY29uc3Qgd2luZG93TGVuZ3RoID0gbm93IC0gcHJvZ3Jlc3NIaXN0b3J5WzBdLnRpbWVzdGFtcDtcbiAgICAgIGNvbnN0IHByb2dyZXNzSW5XaW5kb3cgPSBwcm9ncmVzcyAtIHByb2dyZXNzSGlzdG9yeVswXS5wcm9ncmVzcztcbiAgICAgIGNvbnN0IHByb2dyZXNzUGVyU2Vjb25kID0gKHByb2dyZXNzSW5XaW5kb3cgLyB3aW5kb3dMZW5ndGgpICogMTAwMDtcbiAgICAgIGNvbnN0IHByb2dyZXNzTGVmdCA9IDEgLSBwcm9ncmVzcztcbiAgICAgIHNlY29uZHNMZWZ0ID0gTWF0aC5tYXgoMCwgTWF0aC5yb3VuZChwcm9ncmVzc0xlZnQgLyBwcm9ncmVzc1BlclNlY29uZCkpO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBzdGF0ZSBpZiBhbnl0aGluZyBjaGFuZ2VkLiBXZSBhY3R1YWxseSBjaGVjayBmb3IgZXF1YWxpdHkgaGVyZSB0b1xuICAgIC8vIGF2b2lkIHVzZWxlc3MgcmVkcmF3cy5cbiAgICBpZiAodXBsb2FkU3RhdGUuc2Vjb25kc0xlZnQgIT09IHNlY29uZHNMZWZ0IHx8IHVwbG9hZFN0YXRlLmN1cnJlbnRQcm9ncmVzcyAhPT0gcHJvZ3Jlc3MpIHtcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogXCJVUExPQURfUFJPR1JFU1NfVVBEQVRFXCIsXG4gICAgICAgIHNlY29uZHNMZWZ0LFxuICAgICAgICBjdXJyZW50UHJvZ3Jlc3M6IHByb2dyZXNzLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBUbyBzdGlsbCB1cGRhdGUgdGhlIHRpbWUgZXN0aW1hdGlvbiwgd2UgbWFrZSBzdXJlIHRvIGNhbGwgYG9uUHJvZ3Jlc3NgIGF0XG4gICAgLy8gbGVhc3QgZXZlcnkgc28gb2Z0ZW4uXG4gICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAodXBsb2FkU3RhdGUuc3RhdGUgIT09IFwidXBsb2FkaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXByb2dyZXNzSGlzdG9yeS5sZW5ndGgpIHtcbiAgICAgICAgb25Qcm9ncmVzcygwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGxhc3RQcm9ncmVzcyA9IHByb2dyZXNzSGlzdG9yeVtwcm9ncmVzc0hpc3RvcnkubGVuZ3RoIC0gMV07XG4gICAgICAgIGNvbnN0IHRpbWVTaW5jZUxhc3RVcGRhdGUgPSBEYXRlLm5vdygpIC0gbGFzdFByb2dyZXNzLnRpbWVzdGFtcDtcbiAgICAgICAgaWYgKHRpbWVTaW5jZUxhc3RVcGRhdGUgPiAzMDAwKSB7XG4gICAgICAgICAgb25Qcm9ncmVzcyhsYXN0UHJvZ3Jlc3MucHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgMTAwMCk7XG5cbiAgICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gIH0pO1xuXG4gIGNvbnN0IGhhbmRsZVVwbG9hZDogU3VibWl0SGFuZGxlcjxJbnB1dHM+ID0gYXN5bmMgZGF0YSA9PiB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBcIlVQTE9BRF9SRVFVRVNUXCIgfSk7XG4gICAgcHJvZ3Jlc3NIaXN0b3J5LnB1c2goe1xuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgfSk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgb3BlbmNhc3QudXBsb2FkKHtcbiAgICAgIHJlY29yZGluZ3M6IHJlY29yZGluZ3MuZmlsdGVyKEJvb2xlYW4pLFxuICAgICAgdGl0bGU6IGRhdGEudGl0bGUsXG4gICAgICBwcmVzZW50ZXI6IGRhdGEucHJlc2VudGVyLFxuICAgICAgc2VyaWVzOiBkYXRhLnNlcmllcyxcbiAgICAgIHVwbG9hZFNldHRpbmdzOiBzZXR0aW5ncy51cGxvYWQsXG4gICAgICBvblByb2dyZXNzLFxuICAgICAgc3RhcnQ6IHN0YXRlLnN0YXJ0LFxuICAgICAgZW5kOiBzdGF0ZS5lbmQsXG4gICAgICBzdGFydFRpbWU6IHN0YXRlLnJlY29yZGluZ1N0YXJ0VGltZSA/PyB1bnJlYWNoYWJsZShcIm5vIHN0YXJ0IHRpbWUgc2V0XCIpLFxuICAgICAgZW5kVGltZTogc3RhdGUucmVjb3JkaW5nRW5kVGltZSA/PyB1bnJlYWNoYWJsZShcIm5vIGVuZCB0aW1lIHNldFwiKSxcbiAgICB9KTtcbiAgICBwcm9ncmVzc0hpc3RvcnkgPSBbXTtcblxuICAgIGNvbnN0IGRpc3BhdGNoRXJyb3IgPSAobXNnOiBzdHJpbmcpID0+IGRpc3BhdGNoKHsgdHlwZTogXCJVUExPQURfRVJST1JcIiwgbXNnIH0pO1xuICAgIG1hdGNoKHJlc3VsdCwge1xuICAgICAgXCJzdWNjZXNzXCI6ICgpID0+IGRpc3BhdGNoKHsgdHlwZTogXCJVUExPQURfU1VDQ0VTU1wiIH0pLFxuICAgICAgXCJuZXR3b3JrX2Vycm9yXCI6ICgpID0+IGRpc3BhdGNoRXJyb3IodChcInN0ZXBzLmZpbmlzaC51cGxvYWQudXBsb2FkLW5ldHdvcmstZXJyb3JcIikpLFxuICAgICAgXCJub3RfYXV0aG9yaXplZFwiOiAoKSA9PiBkaXNwYXRjaEVycm9yKHQoXCJzdGVwcy5maW5pc2gudXBsb2FkLnVwbG9hZC1ub3QtYXV0aG9yaXplZFwiKSksXG4gICAgICBcInVuZXhwZWN0ZWRfcmVzcG9uc2VcIjogKCkgPT4gZGlzcGF0Y2hFcnJvcih0KFwic3RlcHMuZmluaXNoLnVwbG9hZC51cGxvYWQtaW52YWxpZC1yZXNwb25zZVwiKSksXG4gICAgfSwgKCkgPT4gZGlzcGF0Y2hFcnJvcih0KFwic3RlcHMuZmluaXNoLnVwbG9hZC51cGxvYWQtdW5rbm93bi1lcnJvclwiKSkpO1xuICB9O1xuXG4gIHN3aXRjaCAodXBsb2FkU3RhdGUuc3RhdGUpIHtcbiAgICBjYXNlIFwidXBsb2FkaW5nXCI6XG4gICAgICByZXR1cm4gPFVwbG9hZFByb2dyZXNzXG4gICAgICAgIGN1cnJlbnRQcm9ncmVzcz17dXBsb2FkU3RhdGUuY3VycmVudFByb2dyZXNzfVxuICAgICAgICBzZWNvbmRzTGVmdD17dXBsb2FkU3RhdGUuc2Vjb25kc0xlZnR9XG4gICAgICAvPjtcbiAgICBjYXNlIFwidXBsb2FkZWRcIjpcbiAgICAgIHJldHVybiA8VXBsb2FkU3VjY2VzcyAvPjtcbiAgICBkZWZhdWx0OiAvLyBcIm5vdF91cGxvYWRlZFwiIG9yIFwiZXJyb3JcIlxuICAgICAgcmV0dXJuIDxVcGxvYWRGb3JtIHsuLi57IHVwbG9hZFN0YXRlLCBoYW5kbGVVcGxvYWQgfX0gLz47XG4gIH1cbn07XG5cblxudHlwZSBJbnB1dHMgPSB7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIHByZXNlbnRlcjogc3RyaW5nO1xuICBzZXJpZXM6IHN0cmluZztcbiAgc2VydmVyVXJsOiBzdHJpbmc7XG4gIGxvZ2luTmFtZTogc3RyaW5nO1xuICBsb2dpblBhc3N3b3JkOiBzdHJpbmc7XG59O1xuXG50eXBlIFVwbG9hZEZvcm1Qcm9wcyA9IHtcbiAgaGFuZGxlVXBsb2FkOiBTdWJtaXRIYW5kbGVyPElucHV0cz47XG59O1xuXG5jb25zdCBVcGxvYWRGb3JtOiBSZWFjdC5GQzxVcGxvYWRGb3JtUHJvcHM+ID0gKHsgaGFuZGxlVXBsb2FkIH0pID0+IHtcbiAgY29uc3Qge1xuICAgIHRpdGxlRmllbGQgPSBcInJlcXVpcmVkXCIsXG4gICAgcHJlc2VudGVyRmllbGQgPSBcInJlcXVpcmVkXCIsXG4gICAgc2VyaWVzRmllbGQgPSBcIm9wdGlvbmFsXCIsXG4gICAgYXV0b2ZpbGxQcmVzZW50ZXIgPSBbXSxcbiAgfSA9IHVzZVNldHRpbmdzKCkudXBsb2FkID8/IHt9O1xuXG4gIGNvbnN0IHsgdCwgaTE4biB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3Qgb3BlbmNhc3QgPSB1c2VPcGVuY2FzdCgpO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHNldHRpbmdzTWFuYWdlciA9IHVzZVNldHRpbmdzTWFuYWdlcigpO1xuICBjb25zdCB7IHRpdGxlLCBwcmVzZW50ZXIsIHVwbG9hZDogdXBsb2FkU3RhdGUsIHJlY29yZGluZ3MgfSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IHByZXNlbnRlclZhbHVlID0gcHJlc2VudGVyXG4gICAgfHwgd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKExBU1RfUFJFU0VOVEVSX0tFWSlcbiAgICB8fCBhdXRvZmlsbFByZXNlbnRlclxuICAgICAgLm1hcChzb3VyY2UgPT4gbWF0Y2goc291cmNlLCB7XG4gICAgICAgIFwib3BlbmNhc3RcIjogKCkgPT4gb3BlbmNhc3QuZ2V0VXNlcm5hbWUoKSxcbiAgICAgIH0pKVxuICAgICAgLmZpbmQoQm9vbGVhbilcbiAgICB8fCBcIlwiO1xuXG4gIHR5cGUgRm9ybVN0YXRlID0gXCJpZGxlXCIgfCBcInRlc3RpbmdcIjtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZTxGb3JtU3RhdGU+KFwiaWRsZVwiKTtcblxuICBjb25zdCB7IGZvcm1TdGF0ZTogeyBlcnJvcnMgfSwgaGFuZGxlU3VibWl0LCByZWdpc3RlciwgY29udHJvbCwgZ2V0VmFsdWVzIH0gPSB1c2VGb3JtPElucHV0cz4oe1xuICAgIGRlZmF1bHRWYWx1ZXM6IHNldHRpbmdzTWFuYWdlci5mb3JtVmFsdWVzKCkub3BlbmNhc3QsXG4gIH0pO1xuICBjb25zdCB7IGZpZWxkOiBzZXJpZXNTZWxlY3QgfSA9IHVzZUNvbnRyb2xsZXIoe1xuICAgIG5hbWU6IFwic2VyaWVzXCIsXG4gICAgY29udHJvbCxcbiAgICBydWxlczoge1xuICAgICAgcmVxdWlyZWQ6IHNlcmllc0ZpZWxkID09PSBcInJlcXVpcmVkXCJcbiAgICAgICAgPyB0KFwic3RlcHMuZmluaXNoLnVwbG9hZC52YWxpZGF0aW9uLWVycm9yLXJlcXVpcmVkXCIpXG4gICAgICAgIDogZmFsc2UsXG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gVGhpcyBpcyBhIGJpdCB1Z2x5LCBidXQgd29ya3MuIFdlIHdhbnQgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGB0aXRsZWAgYW5kXG4gIC8vIGBwcmVzZW50ZXJgIHZhbHVlcyBpbiB0aGUgc3R1ZGlvIHN0YXRlIGFsd2F5cyBlcXVhbCB0aGUgY3VycmVudCB2YWx1ZSBpblxuICAvLyB0aGUgaW5wdXQuXG4gIGZ1bmN0aW9uIGhhbmRsZUlucHV0Q2hhbmdlKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50Pikge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBub3ROdWxsaXNoKFxuICAgICAgICAoeyB0aXRsZTogXCJVUERBVEVfVElUTEVcIiwgcHJlc2VudGVyOiBcIlVQREFURV9QUkVTRU5URVJcIiB9IGFzIGNvbnN0KVt0YXJnZXQubmFtZV0sXG4gICAgICApLFxuICAgICAgdmFsdWU6IHRhcmdldC52YWx1ZSxcbiAgICB9KTtcblxuICAgIGlmICh0YXJnZXQubmFtZSA9PT0gXCJwcmVzZW50ZXJcIikge1xuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKExBU1RfUFJFU0VOVEVSX0tFWSwgdGFyZ2V0LnZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlciBoYXMgbm90IHlldCBjaGFuZ2VkIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGQsIGJ1dCBpdCBoYXMgYmVlbiBwcmVmaWxsZWRcbiAgLy8gZnJvbSBsb2NhbCBzdG9yYWdlIG9yIG9uZSBvZiB0aGUgYGF1dG9maWxsUHJlc2VudGVyYCBzb3VyY2VzLCB1cGRhdGUgdGhlIHN0YXRlXG4gIC8vIHVzaW5nIHRoYXQgdmFsdWUuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHByZXNlbnRlclZhbHVlICE9PSBwcmVzZW50ZXIpIHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfUFJFU0VOVEVSXCIsIHZhbHVlOiBwcmVzZW50ZXJWYWx1ZSB9KTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICBjb25zdCBjb25maWd1cmFibGVTZXJ2ZXJVcmwgPSBzZXR0aW5nc01hbmFnZXIuaXNDb25maWd1cmFibGUoXCJvcGVuY2FzdC5zZXJ2ZXJVcmxcIik7XG4gIGNvbnN0IGNvbmZpZ3VyYWJsZVVzZXJuYW1lID0gc2V0dGluZ3NNYW5hZ2VyLmlzVXNlcm5hbWVDb25maWd1cmFibGUoKTtcbiAgY29uc3QgY29uZmlndXJhYmxlUGFzc3dvcmQgPSBzZXR0aW5nc01hbmFnZXIuaXNQYXNzd29yZENvbmZpZ3VyYWJsZSgpO1xuICBjb25zdCBzaG93T3BlbmNhc3RTZWN0aW9uID0gY29uZmlndXJhYmxlU2VydmVyVXJsIHx8IGNvbmZpZ3VyYWJsZVVzZXJuYW1lIHx8IGNvbmZpZ3VyYWJsZVBhc3N3b3JkO1xuXG4gIGNvbnN0IG9jRGF0YUZyb21JbnB1dHMgPSAoZGF0YTogSW5wdXRzKSA9PiAoe1xuICAgIHNlcnZlclVybDogZGF0YS5zZXJ2ZXJVcmwsXG4gICAgbG9naW5OYW1lOiBkYXRhLmxvZ2luTmFtZSxcbiAgICBsb2dpblBhc3N3b3JkOiBkYXRhLmxvZ2luUGFzc3dvcmQsXG4gIH0pO1xuXG4gIGNvbnN0IG9uU3VibWl0OiBTdWJtaXRIYW5kbGVyPElucHV0cz4gPSBhc3luYyBkYXRhID0+IHtcbiAgICBpZiAoIXNob3dPcGVuY2FzdFNlY3Rpb24pIHtcbiAgICAgIGF3YWl0IGhhbmRsZVVwbG9hZChkYXRhKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICBzZXRTdGF0ZShcInRlc3RpbmdcIik7XG5cbiAgICAvLyBVcGRhdGUgT3BlbmNhc3QgY29ubmVjdGlvbiBkYXRhLiBUaGlzIGlzIGEgYml0IHJvdW5kYWJvdXQgcmlnaHQgbm93IGFzXG4gICAgLy8gdGhlIE9wZW5jYXN0IGxvZ2ljIGlzIHN0aWxsIGZyb20gcHJlLXJlZGVzaWduLCB3aGVyZSB0aGUgY29ubmVjdGlvbiBkYXRhXG4gICAgLy8gd2FzIGdpdmVuIG9uIGEgc2VwYXJhdGUgc2V0dGluZ3MgcGFnZS5cbiAgICBjb25zdCBvY0RhdGEgPSBvY0RhdGFGcm9tSW5wdXRzKGRhdGEpO1xuICAgIGNvbnN0IG9jID0gYXdhaXQgT3BlbmNhc3QuaW5pdCh7XG4gICAgICAuLi5zZXR0aW5nc01hbmFnZXIuc2V0dGluZ3MoKS5vcGVuY2FzdCxcbiAgICAgIC4uLm9jRGF0YSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGVycm9yID0gbWF0Y2gob2MuZ2V0U3RhdGUoKSwge1xuICAgICAgXCJsb2dnZWRfaW5cIjogKCkgPT4ge1xuICAgICAgICBvcGVuY2FzdC5zZXRHbG9iYWxJbnN0YW5jZShvYyk7XG4gICAgICAgIHNldHRpbmdzTWFuYWdlci5zYXZlU2V0dGluZ3MoeyBvcGVuY2FzdDogb2NEYXRhIH0pO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgICBcImluY29ycmVjdF9sb2dpblwiOiAoKSA9PiBvcGVuY2FzdC5pc0xvZ2luUHJvdmlkZWQoKVxuICAgICAgICA/IHQoXCJzdGVwcy5maW5pc2gudXBsb2FkLnNldHRpbmdzLWludmFsaWQtcHJvdmlkZWQtbG9naW5cIilcbiAgICAgICAgOiB0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5zZXR0aW5ncy1pbnZhbGlkLWxvZ2luLWRhdGFcIiksXG4gICAgICBcIm5ldHdvcmtfZXJyb3JcIjogKCkgPT4gdChcInN0ZXBzLmZpbmlzaC51cGxvYWQudXBsb2FkLW5ldHdvcmstZXJyb3JcIiksXG4gICAgICBcImludmFsaWRfcmVzcG9uc2VcIjogKCkgPT4gdChcInN0ZXBzLmZpbmlzaC51cGxvYWQudXBsb2FkLWludmFsaWQtcmVzcG9uc2VcIiksXG4gICAgICBcInJlc3BvbnNlX25vdF9va1wiOiAoKSA9PiB0KFwic3RlcHMuZmluaXNoLnVwbG9hZC51cGxvYWQtaW52YWxpZC1yZXNwb25zZVwiKSxcbiAgICB9LCAoKSA9PiB1bnJlYWNoYWJsZSgpKTtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgZGlzcGF0Y2goeyB0eXBlOiBcIlVQTE9BRF9FUlJPUlwiLCBtc2c6IGVycm9yIH0pO1xuICAgICAgc2V0U3RhdGUoXCJpZGxlXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgY29ubmVjdGlvbiB0byBPcGVuY2FzdCB3b3JrcyAtPiBub3cgYWN0dWFsbHkgc3RhcnQgdGhlIHVwbG9hZC5cbiAgICAgIGF3YWl0IGhhbmRsZVVwbG9hZChkYXRhKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdG90YWxCeXRlcyA9IHJlY29yZGluZ3MucmVkdWNlKChhY2MsIHJlYykgPT4gYWNjICsgcmVjLm1lZGlhLnNpemUsIDApO1xuICBjb25zdCB1cGxvYWRTaXplID0gcHJldHR5RmlsZVNpemUodG90YWxCeXRlcywgaTE4bik7XG4gIGNvbnN0IHsgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG5cbiAgLy8gVGVzdGluZyB0aGUgbmV3IGNvbm5lY3Rpb24gc2V0dGluZ3MgdG8gZXN0YWJsaXNoIGEgY29ubmVjdGlvbiBBU0FQIHRvIG1ha2VcbiAgLy8gdGhlIHNlcmllcyBzZWxlY3RvciB3b3JrLlxuICBjb25zdCBvbkNvbm5lY3Rpb25TZXR0aW5nQ2hhbmdlID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSBnZXRWYWx1ZXMoKTtcblxuICAgIC8vIElmIG5vdGhpbmcgY2hhbmdlZCwgZG8gbm90aGluZy5cbiAgICBjb25zdCBvY1NldHRpbmdzID0gc2V0dGluZ3NNYW5hZ2VyLnNldHRpbmdzKCkub3BlbmNhc3Q7XG4gICAgY29uc3QgYW55Q2hhbmdlID0gKGRhdGEuc2VydmVyVXJsICYmIGRhdGEuc2VydmVyVXJsICE9PSBvY1NldHRpbmdzPy5zZXJ2ZXJVcmwpXG4gICAgICB8fCAoZGF0YS5sb2dpbk5hbWUgJiYgZGF0YS5sb2dpbk5hbWUgIT09IG9jU2V0dGluZ3M/LmxvZ2luTmFtZSlcbiAgICAgIHx8IChkYXRhLmxvZ2luUGFzc3dvcmQgJiYgZGF0YS5sb2dpblBhc3N3b3JkICE9PSBvY1NldHRpbmdzPy5sb2dpblBhc3N3b3JkKTtcbiAgICBpZiAoIWFueUNoYW5nZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG9jRGF0YSA9IG9jRGF0YUZyb21JbnB1dHMoZGF0YSk7XG4gICAgY29uc3Qgb2MgPSBhd2FpdCBPcGVuY2FzdC5pbml0KHtcbiAgICAgIC4uLnNldHRpbmdzTWFuYWdlci5zZXR0aW5ncygpLm9wZW5jYXN0LFxuICAgICAgLi4ub2NEYXRhLFxuICAgIH0pO1xuXG4gICAgaWYgKG9jLmdldFN0YXRlKCkgPT09IFwibG9nZ2VkX2luXCIpIHtcbiAgICAgIG9wZW5jYXN0LnNldEdsb2JhbEluc3RhbmNlKG9jKTtcbiAgICAgIHNldHRpbmdzTWFuYWdlci5zYXZlU2V0dGluZ3MoeyBvcGVuY2FzdDogb2NEYXRhIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8Zm9ybSBvblN1Ym1pdD17aGFuZGxlU3VibWl0KG9uU3VibWl0KX0+XG4gICAgICAgIHt0aXRsZUZpZWxkICE9PSBcImhpZGRlblwiICYmIDxJbnB1dFxuICAgICAgICAgIG5hbWU9XCJ0aXRsZVwiXG4gICAgICAgICAgbGFiZWw9e3QoXCJzdGVwcy5maW5pc2gudXBsb2FkLmxhYmVsLXRpdGxlXCIpfVxuICAgICAgICAgIHJlcXVpcmVkPXt0aXRsZUZpZWxkID09PSBcInJlcXVpcmVkXCJ9XG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUlucHV0Q2hhbmdlfVxuICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm9mZlwiXG4gICAgICAgICAgZGVmYXVsdFZhbHVlPXt0aXRsZX1cbiAgICAgICAgICBhdXRvRm9jdXNcbiAgICAgICAgICB7Li4ueyBlcnJvcnMsIHJlZ2lzdGVyIH19XG4gICAgICAgIC8+fVxuICAgICAgICB7cHJlc2VudGVyRmllbGQgIT09IFwiaGlkZGVuXCIgJiYgPElucHV0XG4gICAgICAgICAgbmFtZT1cInByZXNlbnRlclwiXG4gICAgICAgICAgbGFiZWw9e3QoXCJzdGVwcy5maW5pc2gudXBsb2FkLmxhYmVsLXByZXNlbnRlclwiKX1cbiAgICAgICAgICByZXF1aXJlZD17cHJlc2VudGVyRmllbGQgPT09IFwicmVxdWlyZWRcIn1cbiAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgYXV0b0NvbXBsZXRlPVwib2ZmXCJcbiAgICAgICAgICBkZWZhdWx0VmFsdWU9e3ByZXNlbnRlclZhbHVlfVxuICAgICAgICAgIHsuLi57IGVycm9ycywgcmVnaXN0ZXIgfX1cbiAgICAgICAgLz59XG4gICAgICAgIHtzZXJpZXNGaWVsZCAhPT0gXCJoaWRkZW5cIiAmJiA8U2VyaWVzU2VsZWN0XG4gICAgICAgICAgZm9ybVByb3BzPXtzZXJpZXNTZWxlY3R9XG4gICAgICAgICAgc2hvd09wZW5jYXN0U2VjdGlvbj17c2hvd09wZW5jYXN0U2VjdGlvbn1cbiAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgICAgICAgLz59XG5cbiAgICAgICAge3Nob3dPcGVuY2FzdFNlY3Rpb24gJiYgPD5cbiAgICAgICAgICA8aDMgY3NzPXt7XG4gICAgICAgICAgICBmb250U2l6ZTogMTYsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiA3MDAsXG4gICAgICAgICAgICBtYXJnaW5Ub3A6IDIwLFxuICAgICAgICAgIH19Pnt0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5zZXR0aW5ncy1oZWFkZXJcIil9PC9oMz5cblxuICAgICAgICAgIHtjb25maWd1cmFibGVTZXJ2ZXJVcmwgJiYgPElucHV0XG4gICAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgICAgICAgICAgIGxhYmVsPXt0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5zZXR0aW5ncy1sYWJlbC1zZXJ2ZXItdXJsXCIpfVxuICAgICAgICAgICAgbmFtZT1cInNlcnZlclVybFwiXG4gICAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAgICAgICAgICBvbkJsdXI9e29uQ29ubmVjdGlvblNldHRpbmdDaGFuZ2V9XG4gICAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgICAgdmFsaWRhdGU9eyh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh1cmwucHJvdG9jb2wgPT09IFwiaHR0cHM6XCIgfHwgdXJsLnByb3RvY29sID09PSBcImh0dHA6XCIpXG4gICAgICAgICAgICAgICAgICB8fCB0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5zZXR0aW5ncy1pbnZhbGlkLXVybC1odHRwLXN0YXJ0XCIpO1xuICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICBsZXQgZXJyID0gdChcInN0ZXBzLmZpbmlzaC51cGxvYWQuc2V0dGluZ3MtaW52YWxpZC11cmxcIik7XG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZS5zdGFydHNXaXRoKFwiaHR0cHM6Ly9cIikgJiYgIXZhbHVlLnN0YXJ0c1dpdGgoXCJodHRwOi8vXCIpKSB7XG4gICAgICAgICAgICAgICAgICBlcnIgKz0gXCIgXCIgKyB0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5zZXR0aW5ncy1pbnZhbGlkLXVybC1odHRwLXN0YXJ0XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+fVxuXG4gICAgICAgICAge2NvbmZpZ3VyYWJsZVVzZXJuYW1lICYmIDxJbnB1dFxuICAgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAgICAgICAgICBsYWJlbD17dChcInN0ZXBzLmZpbmlzaC51cGxvYWQuc2V0dGluZ3MtbGFiZWwtdXNlcm5hbWVcIil9XG4gICAgICAgICAgICBuYW1lPVwibG9naW5OYW1lXCJcbiAgICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgICAgICAgICAgIG9uQmx1cj17b25Db25uZWN0aW9uU2V0dGluZ0NoYW5nZX1cbiAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgLz59XG5cbiAgICAgICAgICB7Y29uZmlndXJhYmxlUGFzc3dvcmQgJiYgPElucHV0XG4gICAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgICAgICAgICAgIGxhYmVsPXt0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5zZXR0aW5ncy1sYWJlbC1wYXNzd29yZFwiKX1cbiAgICAgICAgICAgIG5hbWU9XCJsb2dpblBhc3N3b3JkXCJcbiAgICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgICAgICAgICAgIG9uQmx1cj17b25Db25uZWN0aW9uU2V0dGluZ0NoYW5nZX1cbiAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgIC8+fVxuICAgICAgICA8Lz59XG5cbiAgICAgICAgey8qIFVwbG9hZCBidXR0b24gKi99XG4gICAgICAgIDxQcm90b0J1dHRvblxuICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgLi4uc2hhcmVkQnV0dG9uU3R5bGUoaXNIaWdoQ29udHJhc3QpLFxuICAgICAgICAgICAgbWFyZ2luOiBcIjAgYXV0b1wiLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiAyNCxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge21hdGNoKHN0YXRlLCB7XG4gICAgICAgICAgICBcImlkbGVcIjogKCkgPT4gPEZpVXBsb2FkIGNzcz17eyBmb250U2l6ZTogMjAgfX0gLz4sXG4gICAgICAgICAgICBcInRlc3RpbmdcIjogKCkgPT4gPFNwaW5uZXIgc2l6ZT17MjB9IC8+LFxuICAgICAgICAgIH0pfVxuICAgICAgICAgIDxzcGFuPnt0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5sYWJlbFwiKSArIFwiIChcIiArIHVwbG9hZFNpemUgKyBcIilcIn08L3NwYW4+XG4gICAgICAgIDwvUHJvdG9CdXR0b24+XG4gICAgICA8L2Zvcm0+XG5cbiAgICAgIHsvKiBVcGxvYWQgZXJyb3IgYm94ICovfVxuICAgICAgPGRpdiBjc3M9e3sgbWFyZ2luVG9wOiA4IH19PlxuICAgICAgICB7dXBsb2FkU3RhdGUuc3RhdGUgPT09IFwiZXJyb3JcIiAmJiAoXG4gICAgICAgICAgPEVycm9yQm94XG4gICAgICAgICAgICBjc3M9e3sgbWFyZ2luOiAwIH19XG4gICAgICAgICAgICBib2R5PXtub3ROdWxsaXNoKHVwbG9hZFN0YXRlLmVycm9yKX1cbiAgICAgICAgICAgIGV4dHJhQm9keT17dChcInN0ZXBzLmZpbmlzaC51cGxvYWQud2Fybi1kb3dubG9hZC1oaW50XCIpfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbnR5cGUgSW5wdXRQcm9wczxJIGV4dGVuZHMgRmllbGRWYWx1ZXMsIEY+ID1cbiAgUGljazxcbiAgICBKU1guSW50cmluc2ljRWxlbWVudHNbXCJpbnB1dFwiXSxcbiAgICBcIm9uQ2hhbmdlXCIgfCBcImF1dG9Db21wbGV0ZVwiIHwgXCJkZWZhdWx0VmFsdWVcIiB8IFwib25CbHVyXCJcbiAgPiAmXG4gIFBpY2s8UmV0dXJuVHlwZTx0eXBlb2YgdXNlRm9ybTxJPj4sIFwicmVnaXN0ZXJcIj4gJiB7XG4gICAgLyoqIEh1bWFuIHJlYWRhYmxlIHN0cmluZyBkZXNjcmliaW5nIHRoZSBmaWVsZC4gKi9cbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIG5hbWU6IFBhdGg8ST47XG4gICAgLyoqIFdoZXRoZXIgdGhpcyBmaWVsZCBpcyByZXF1aXJlZCBvciBtYXkgYmUgZW1wdHkuICovXG4gICAgcmVxdWlyZWQ6IGJvb2xlYW47XG4gICAgLyoqIEZ1bmN0aW9uIHZhbGlkYXRpbmcgdGhlIHZhbHVlIGFuZCByZXR1cm5pbmcgYSBzdHJpbmcgaW4gdGhlIGNhc2Ugb2YgZXJyb3IuICovXG4gICAgdmFsaWRhdGU/OiBWYWxpZGF0ZTxGLCBJPjtcbiAgICBlcnJvcnM6IFBhcnRpYWw8UmVjb3JkPGtleW9mIEksIEZpZWxkRXJyb3I+PjtcbiAgICAvKiogUGFzc2VkIHRvIHRoZSBgPGlucHV0PmAuICovXG4gICAgdHlwZT86IEhUTUxJbnB1dFR5cGVBdHRyaWJ1dGU7XG4gICAgYXV0b0ZvY3VzPzogYm9vbGVhbjtcbiAgfTtcblxuLyoqXG4gKiBBIHN0eWxlZCBgPGlucHV0PmAgZWxlbWVudCB3aXRoIGEgbGFiZWwuIERpc3BsYXlzIGVycm9ycyBhbmQgaW50ZWdyYXRlZCB3aXRoXG4gKiBgcmVhY3QtaG9vay1mb3JtYC5cbiAqL1xuZXhwb3J0IGNvbnN0IElucHV0ID0gPEkgZXh0ZW5kcyBGaWVsZFZhbHVlcywgRj4oe1xuICBlcnJvcnMsXG4gIHJlZ2lzdGVyLFxuICBsYWJlbCxcbiAgbmFtZSxcbiAgcmVxdWlyZWQsXG4gIHZhbGlkYXRlLFxuICB0eXBlID0gXCJ0ZXh0XCIsXG4gIC4uLnJlc3Rcbn06IElucHV0UHJvcHM8SSwgRj4pID0+IHtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCBlcnJvciA9IGVycm9yc1tuYW1lXTtcbiAgY29uc3QgaWQgPSB1c2VJZCgpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3sgbWFyZ2luQm90dG9tOiAxMiB9fT5cbiAgICAgIDxsYWJlbCBodG1sRm9yPXtpZH0gY3NzPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgICAgZm9udFdlaWdodDogNzAwLFxuICAgICAgICBjb2xvcjogQ09MT1JTLm5ldXRyYWw3MCxcbiAgICAgICAgbWFyZ2luOiBcIjRweCAwXCIsXG4gICAgICAgIGZvbnRTaXplOiAxNCxcbiAgICAgIH19PlxuICAgICAgICB7bGFiZWx9XG4gICAgICA8L2xhYmVsPlxuICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICB0ZXh0QWxpZ246IFwibGVmdFwiLFxuICAgICAgfX0+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIGlkPXtpZH1cbiAgICAgICAgICBhcmlhLWludmFsaWQ9e2Vycm9yID8gXCJ0cnVlXCIgOiBcImZhbHNlXCJ9XG4gICAgICAgICAgYXJpYS1kZXNjcmliZWRieT17ZXJyb3IgPyBgJHtuYW1lfUVycm9yYCA6IGlkfVxuICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm9mZlwiXG4gICAgICAgICAgdHlwZT17dHlwZX1cbiAgICAgICAgICB7Li4ucmVzdH1cbiAgICAgICAgICB7Li4ucmVnaXN0ZXIobmFtZSwge1xuICAgICAgICAgICAgdmFsaWRhdGUsXG4gICAgICAgICAgICBvbkNoYW5nZTogcmVzdC5vbkNoYW5nZSxcbiAgICAgICAgICAgIG9uQmx1cjogcmVzdC5vbkJsdXIsXG4gICAgICAgICAgICAuLi5yZXF1aXJlZCAmJiB7IHJlcXVpcmVkOiB0KFwic3RlcHMuZmluaXNoLnVwbG9hZC52YWxpZGF0aW9uLWVycm9yLXJlcXVpcmVkXCIpIH0sXG4gICAgICAgICAgfSl9XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDQsXG4gICAgICAgICAgICBib3JkZXI6IGAxcHggc29saWQgJHtlcnJvciA/IENPTE9SUy5kYW5nZXI0IDogQ09MT1JTLm5ldXRyYWwzMH1gLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDAwLFxuICAgICAgICAgICAgY29sb3I6IENPTE9SUy5uZXV0cmFsNzAsXG4gICAgICAgICAgICBwYWRkaW5nOiBcIjhweCAxNnB4XCIsXG4gICAgICAgICAgICAuLi5mb2N1c1N0eWxlKHsgb2Zmc2V0OiAtMSB9KSxcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgICB7ZXJyb3IgJiYgPEVycm9yQ29udGFpbmVyIGlkPXtgJHtuYW1lfUVycm9yYH0+XG4gICAgICAgICAge2Vycm9yLm1lc3NhZ2V9XG4gICAgICAgIDwvRXJyb3JDb250YWluZXI+fVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG50eXBlIEVycm9yQ29udGFpbmVyUHJvcHMgPSBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjx7XG4gIGlkOiBzdHJpbmc7XG59PjtcblxuY29uc3QgRXJyb3JDb250YWluZXI6IFJlYWN0LkZDPEVycm9yQ29udGFpbmVyUHJvcHM+ID0gKHsgaWQsIGNoaWxkcmVuIH0pID0+IChcbiAgPGRpdlxuICAgIGlkPXtpZH1cbiAgICBjc3M9e3tcbiAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLmRhbmdlcjEsXG4gICAgICBjb2xvcjogQ09MT1JTLmRhbmdlcjUsXG4gICAgICBtYXJnaW5Ub3A6IDQsXG4gICAgICBib3JkZXJSYWRpdXM6IDQsXG4gICAgICBwYWRkaW5nOiBcIjZweCAxMnB4XCIsXG4gICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgfX1cbiAgPlxuICAgIHtjaGlsZHJlbn1cbiAgPC9kaXY+XG4pO1xuXG5cbnR5cGUgU2VyaWVzU2VsZWN0UHJvcHMgPSB7XG4gIGZvcm1Qcm9wczogQ29udHJvbGxlclJlbmRlclByb3BzPElucHV0cywgXCJzZXJpZXNcIj47XG4gIHNob3dPcGVuY2FzdFNlY3Rpb246IGJvb2xlYW47XG4gIGVycm9yczogUGFydGlhbDxSZWNvcmQ8a2V5b2YgSW5wdXRzLCBGaWVsZEVycm9yPj47XG59O1xuXG5jb25zdCBTZXJpZXNTZWxlY3Q6IFJlYWN0LkZDPFNlcmllc1NlbGVjdFByb3BzPiA9ICh7IGZvcm1Qcm9wcywgc2hvd09wZW5jYXN0U2VjdGlvbiwgZXJyb3JzIH0pID0+IHtcbiAgY29uc3QgeyB0LCBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCBvcGVuY2FzdCA9IHVzZU9wZW5jYXN0KCk7XG4gIGNvbnN0IHsgc2NoZW1lIH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuICBjb25zdCBzZXJpZXNJZCA9IHVzZVNldHRpbmdzKCkudXBsb2FkPy5zZXJpZXNJZDtcblxuICB0eXBlIE9wdGlvbiA9IHsgdmFsdWU6IHN0cmluZzsgbGFiZWw6IHN0cmluZyB9O1xuICBjb25zdCBbb3B0aW9ucywgc2V0T3B0aW9uc10gPSB1c2VTdGF0ZTxPcHRpb25bXSB8IFwiZXJyb3JcIiB8IG51bGw+KG51bGwpO1xuICBjb25zdCByZWYgPSB1c2VSZWY8U2VsZWN0SW5zdGFuY2U8T3B0aW9uPj4obnVsbCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0T3B0aW9ucyhudWxsKTtcbiAgICBvcGVuY2FzdC5nZXRTZXJpZXMoKS50aGVuKFxuICAgICAgcmVzdWx0ID0+IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IFsuLi5yZXN1bHQuZW50cmllcygpXS5tYXAoKFt2YWx1ZSwgbGFiZWxdKSA9PiAoeyB2YWx1ZSwgbGFiZWwgfSkpO1xuICAgICAgICBvcHRpb25zLnNvcnQoXG4gICAgICAgICAgKGEsIGIpID0+IGEubGFiZWwubG9jYWxlQ29tcGFyZShiLmxhYmVsLCBpMThuLmxhbmd1YWdlLCB7IHNlbnNpdGl2aXR5OiBcImJhc2VcIiB9KVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIElmIGEgc2VyaWVzSUQgaXMgZ2l2ZW4sIG1ha2UgdGhlIHNlbGVjdCB1c2UgdGhhdCBhcyBkZWZhdWx0IHZhbHVlLlxuICAgICAgICBpZiAoc2VyaWVzSWQpIHtcbiAgICAgICAgICBjb25zdCB0aXRsZSA9IHJlc3VsdC5nZXQoc2VyaWVzSWQpO1xuICAgICAgICAgIGNvbnN0IGRlZmF1bHRPcHRpb24gPSB7XG4gICAgICAgICAgICBsYWJlbDogdGl0bGUgPz8gdChcInN0ZXBzLmZpbmlzaC51cGxvYWQuc2VyaWVzLXVua25vd25cIiksXG4gICAgICAgICAgICB2YWx1ZTogc2VyaWVzSWQsXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAodGl0bGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGRlZmF1bHRPcHRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZWYuY3VycmVudD8uc2V0VmFsdWUoZGVmYXVsdE9wdGlvbiwgXCJzZWxlY3Qtb3B0aW9uXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIH0sXG4gICAgICBlID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJFcnJvciBmZXRjaGluZyBzZXJpZXM6IFwiLCBlKTtcbiAgICAgICAgc2V0T3B0aW9ucyhcImVycm9yXCIpO1xuICAgICAgfSxcbiAgICApO1xuICB9LCBbb3BlbmNhc3RdKTtcblxuICBjb25zdCBpbnB1dElkID0gdXNlSWQoKTtcbiAgY29uc3QgZXJyb3JJZCA9IHVzZUlkKCk7XG4gIGNvbnN0IGVycm9yID0gb3B0aW9ucyA9PT0gXCJlcnJvclwiO1xuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7IG1hcmdpbkJvdHRvbTogMTIgfX0+XG4gICAgICA8bGFiZWwgaHRtbEZvcj17aW5wdXRJZH0gY3NzPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgICAgZm9udFdlaWdodDogNzAwLFxuICAgICAgICBjb2xvcjogQ09MT1JTLm5ldXRyYWw3MCxcbiAgICAgICAgbWFyZ2luOiBcIjRweCAwXCIsXG4gICAgICAgIGZvbnRTaXplOiAxNCxcbiAgICAgIH19PlxuICAgICAgICB7dChcInN0ZXBzLmZpbmlzaC51cGxvYWQubGFiZWwtc2VyaWVzXCIpfVxuICAgICAgPC9sYWJlbD5cblxuICAgICAgPFNlbGVjdFxuICAgICAgICBpZD17aW5wdXRJZH1cbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIG9wdGlvbnM9e29wdGlvbnMgJiYgb3B0aW9ucyAhPT0gXCJlcnJvclwiID8gb3B0aW9ucyA6IFtdfVxuICAgICAgICBpc0xvYWRpbmc9e29wdGlvbnMgPT09IG51bGx9XG4gICAgICAgIGlzRGlzYWJsZWQ9e29wdGlvbnMgPT09IFwiZXJyb3JcIn1cbiAgICAgICAgaXNDbGVhcmFibGVcbiAgICAgICAgaXNTZWFyY2hhYmxlXG4gICAgICAgIG9uQ2hhbmdlPXtkYXRhID0+IGZvcm1Qcm9wcy5vbkNoYW5nZShkYXRhPy52YWx1ZSl9XG4gICAgICAgIG9uQmx1cj17Zm9ybVByb3BzLm9uQmx1cn1cbiAgICAgICAgYXJpYS1pbnZhbGlkPXtlcnJvciA/IFwidHJ1ZVwiIDogXCJmYWxzZVwifVxuICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PXtlcnJvciA/IGVycm9ySWQgOiBpbnB1dElkfVxuXG4gICAgICAgIC8vIFN0eWxpbmdcbiAgICAgICAgcGxhY2Vob2xkZXI9e3QoXCJzdGVwcy5maW5pc2gudXBsb2FkLnNlcmllcy1wbGFjZWhvbGRlclwiKX1cbiAgICAgICAgbG9hZGluZ01lc3NhZ2U9eygpID0+IHQoXCJzdGVwcy5maW5pc2gudXBsb2FkLnNlcmllcy1sb2FkaW5nXCIpfVxuICAgICAgICBub09wdGlvbnNNZXNzYWdlPXsoKSA9PiB0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5zZXJpZXMtbm9uZVwiKX1cbiAgICAgICAgc3R5bGVzPXtzZWxlY3RTdHlsZXMoc2NoZW1lLnN0YXJ0c1dpdGgoXCJkYXJrXCIpLCBzY2hlbWUuZW5kc1dpdGgoXCJoaWdoLWNvbnRyYXN0XCIpKX1cbiAgICAgICAgdGhlbWU9e3RoZW1lID0+ICh7XG4gICAgICAgICAgLi4udGhlbWUsXG4gICAgICAgICAgY29sb3JzOiB7XG4gICAgICAgICAgICAuLi50aGVtZS5jb2xvcnMsXG4gICAgICAgICAgICBkYW5nZXI6IENPTE9SUy5kYW5nZXIwLFxuICAgICAgICAgICAgcHJpbWFyeTogQ09MT1JTLmZvY3VzLFxuICAgICAgICAgICAgbmV1dHJhbDA6IENPTE9SUy5uZXV0cmFsMDAsXG4gICAgICAgICAgICBuZXV0cmFsNTogQ09MT1JTLm5ldXRyYWwxNSxcbiAgICAgICAgICAgIG5ldXRyYWwxMDogQ09MT1JTLm5ldXRyYWwyMCxcbiAgICAgICAgICAgIG5ldXRyYWwyMDogQ09MT1JTLm5ldXRyYWwzMCxcbiAgICAgICAgICAgIG5ldXRyYWwzMDogQ09MT1JTLm5ldXRyYWw0MCxcbiAgICAgICAgICAgIG5ldXRyYWw0MDogQ09MT1JTLm5ldXRyYWw1MCxcbiAgICAgICAgICAgIG5ldXRyYWw1MDogQ09MT1JTLm5ldXRyYWw1MCxcbiAgICAgICAgICAgIG5ldXRyYWw2MDogQ09MT1JTLm5ldXRyYWw2MCxcbiAgICAgICAgICAgIG5ldXRyYWw3MDogQ09MT1JTLm5ldXRyYWw3MCxcbiAgICAgICAgICAgIG5ldXRyYWw4MDogQ09MT1JTLm5ldXRyYWw4MCxcbiAgICAgICAgICAgIG5ldXRyYWw5MDogQ09MT1JTLm5ldXRyYWw5MCxcbiAgICAgICAgICB9LFxuICAgICAgICB9KX1cbiAgICAgIC8+XG4gICAgICB7ZXJyb3IgJiYgKFxuICAgICAgICA8RXJyb3JDb250YWluZXIgaWQ9e2Vycm9ySWR9PlxuICAgICAgICAgIHt0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5zZXJpZXMtZmV0Y2gtZXJyb3JcIil9XG4gICAgICAgICAge3Nob3dPcGVuY2FzdFNlY3Rpb24gJiYgKFxuICAgICAgICAgICAgXCIgXCIgKyB0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5zZXJpZXMtY29ubmVjdGlvbi1zZXR0aW5ncy1oaW50XCIpXG4gICAgICAgICAgKX1cbiAgICAgICAgPC9FcnJvckNvbnRhaW5lcj5cbiAgICAgICl9XG4gICAgICB7ZXJyb3JzW1wic2VyaWVzXCJdICYmIChcbiAgICAgICAgPEVycm9yQ29udGFpbmVyIGlkPXtlcnJvcklkfT57ZXJyb3JzW1wic2VyaWVzXCJdLm1lc3NhZ2V9PC9FcnJvckNvbnRhaW5lcj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2VsZWN0U3R5bGVzID0gKGlzRGFyazogYm9vbGVhbiwgaXNIaWdoQ29udHJhc3Q6IGJvb2xlYW4pID0+ICh7XG4gIGNvbnRyb2w6IChiYXNlU3R5bGVzOiBDU1NPYmplY3RXaXRoTGFiZWwsIHN0YXRlOiB7IGlzRm9jdXNlZDogYm9vbGVhbiB9KSA9PiAoe1xuICAgIC4uLmJhc2VTdHlsZXMsXG4gICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDAwLFxuICAgIHBhZGRpbmdMZWZ0OiA4LFxuICAgIC4uLiFzdGF0ZS5pc0ZvY3VzZWQgJiYgeyBib3JkZXJDb2xvcjogQ09MT1JTLm5ldXRyYWwzMCB9LFxuICAgIC4uLnN0YXRlLmlzRm9jdXNlZCAmJiB7XG4gICAgICAvLyByZWFjdC1zZWxlY3QgdXNlcyBib3gtc2hhZG93IGFzIG91dGxpbmUuIEJ1dCBpdCdzIG5vdCBxdWl0ZSBsYXJnZVxuICAgICAgLy8gZW5vdWdoLCBzbyB3ZSBvdmVycmlkZSBpdCBoZXJlLlxuICAgICAgYm94U2hhZG93OiBgMCAwIDAgMS41cHggJHtDT0xPUlMuZm9jdXN9YCxcbiAgICB9LFxuICB9KSxcbiAgaW5wdXQ6IChiYXNlU3R5bGVzOiBDU1NPYmplY3RXaXRoTGFiZWwpID0+ICh7XG4gICAgLi4uYmFzZVN0eWxlcyxcbiAgICBjb2xvcjogQ09MT1JTLm5ldXRyYWw4MCxcbiAgICBwYWRkaW5nOiBcIjRweCAwXCIsXG4gIH0pLFxuICBwbGFjZWhvbGRlcjogKGJhc2VTdHlsZXM6IENTU09iamVjdFdpdGhMYWJlbCkgPT4gKHtcbiAgICAuLi5iYXNlU3R5bGVzLFxuICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDYwLFxuICB9KSxcbiAgc2luZ2xlVmFsdWU6IChiYXNlU3R5bGVzOiBDU1NPYmplY3RXaXRoTGFiZWwpID0+ICh7XG4gICAgLi4uYmFzZVN0eWxlcyxcbiAgICBjb2xvcjogQ09MT1JTLm5ldXRyYWw5MCxcbiAgfSksXG4gIG1lbnVMaXN0OiAoYmFzZVN0eWxlczogQ1NTT2JqZWN0V2l0aExhYmVsKSA9PiAoe1xuICAgIC4uLmJhc2VTdHlsZXMsXG4gICAgcGFkZGluZzogMCxcbiAgfSksXG4gIG1lbnU6IChiYXNlU3R5bGVzOiBDU1NPYmplY3RXaXRoTGFiZWwpID0+ICh7XG4gICAgLi4uYmFzZVN0eWxlcyxcbiAgICAuLi5pc0RhcmsgJiYgeyBvdXRsaW5lOiBgMXB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWwyMH1gIH0sXG4gICAgLi4uaXNIaWdoQ29udHJhc3QgJiYgeyBvdXRsaW5lOiBgMXB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWw5MH1gIH0sXG4gICAgYmFja2dyb3VuZENvbG9yOiBpc0RhcmsgPyBDT0xPUlMubmV1dHJhbDEwIDogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgfSksXG4gIG9wdGlvbjogKF9iYXNlU3R5bGVzOiBDU1NPYmplY3RXaXRoTGFiZWwsIHN0YXRlOiB7XG4gICAgaXNTZWxlY3RlZDogYm9vbGVhbjtcbiAgICBpc0ZvY3VzZWQ6IGJvb2xlYW47XG4gIH0pID0+ICh7XG4gICAgY3Vyc29yOiBcImRlZmF1bHRcIixcbiAgICBwYWRkaW5nOiBcIjZweCAxMHB4XCIsXG4gICAgYm9yZGVyTGVmdDogYDRweCBzb2xpZCAke3N0YXRlLmlzU2VsZWN0ZWQgPyBDT0xPUlMuZm9jdXMgOiBcInRyYW5zcGFyZW50XCJ9YCxcbiAgICAuLi5pc0hpZ2hDb250cmFzdCAmJiBzdGF0ZS5pc0ZvY3VzZWQgJiYge1xuICAgICAgb3V0bGluZTogYDJweCBzb2xpZCAke0NPTE9SUy5uZXV0cmFsOTB9YCxcbiAgICAgIG91dGxpbmVPZmZzZXQ6IC0zLFxuICAgIH0sXG4gICAgLi4uKHN0YXRlLmlzRm9jdXNlZCB8fCBzdGF0ZS5pc1NlbGVjdGVkKSAmJiAhaXNIaWdoQ29udHJhc3QgJiYge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBpc0RhcmsgPyBDT0xPUlMubmV1dHJhbDI1IDogQ09MT1JTLm5ldXRyYWwxMCxcbiAgICB9LFxuICB9KSxcbn0pO1xuXG5cbnR5cGUgVXBsb2FkUHJvZ3Jlc3NQcm9wcyA9IHtcbiAgY3VycmVudFByb2dyZXNzOiBudW1iZXI7XG4gIHNlY29uZHNMZWZ0OiBudW1iZXIgfCBudWxsO1xufTtcblxuLyoqXG4gKiBTaG93biBkdXJpbmcgdXBsb2FkLiBTaG93cyBhIHByb2dyZXNzYmFyLCB0aGUgcGVyY2VudGFnZSBvZiBkYXRhIGFscmVhZHlcbiAqIHVwbG9hZGVkIGFuZCBgc2Vjb25kc0xlZnRgIG5pY2VseSBmb3JtYXR0ZWQgYXMgaHVtYW4gcmVhZGFibGUgdGltZS5cbiAqL1xuY29uc3QgVXBsb2FkUHJvZ3Jlc3M6IFJlYWN0LkZDPFVwbG9hZFByb2dyZXNzUHJvcHM+ID0gKHsgY3VycmVudFByb2dyZXNzLCBzZWNvbmRzTGVmdCB9KSA9PiB7XG4gIGNvbnN0IHsgdCwgaTE4biB9ID0gdXNlVHJhbnNsYXRpb24oKTtcblxuICAvLyBQcm9ncmVzcyBhcyBwZXJjZW50IHdpdGggb25lIGZyYWN0aW9uYWwgZGlnaXQsIGUuZy4gMjcuMyUuXG4gIGNvbnN0IHJvdW5kZWRQZXJjZW50ID0gTWF0aC5taW4oMTAwLCBjdXJyZW50UHJvZ3Jlc3MgKiAxMDApLnRvTG9jYWxlU3RyaW5nKGkxOG4ubGFuZ3VhZ2UsIHtcbiAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IDEsXG4gICAgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiAxLFxuICB9KTtcblxuICAvLyBOaWNlbHkgZm9ybWF0IHRoZSByZW1haW5pbmcgdGltZS5cbiAgbGV0IHByZXR0eVRpbWU6IHN0cmluZyB8IG51bGw7XG4gIGlmIChzZWNvbmRzTGVmdCA9PT0gbnVsbCkge1xuICAgIHByZXR0eVRpbWUgPSBudWxsO1xuICB9IGVsc2UgaWYgKHNlY29uZHNMZWZ0IDwgNCkge1xuICAgIHByZXR0eVRpbWUgPSB0KFwic3RlcHMuZmluaXNoLnVwbG9hZC50aW1lLmEtZmV3LXNlY29uZHNcIik7XG4gIH0gZWxzZSBpZiAoc2Vjb25kc0xlZnQgPCA0NSkge1xuICAgIHByZXR0eVRpbWUgPSBgJHtzZWNvbmRzTGVmdH0gJHt0KFwic3RlcHMuZmluaXNoLnVwbG9hZC50aW1lLnNlY29uZHNcIil9YDtcbiAgfSBlbHNlIGlmIChzZWNvbmRzTGVmdCA8IDkwKSB7XG4gICAgcHJldHR5VGltZSA9IHQoXCJzdGVwcy5maW5pc2gudXBsb2FkLnRpbWUuYS1taW51dGVcIik7XG4gIH0gZWxzZSBpZiAoc2Vjb25kc0xlZnQgPCA0NSAqIDYwKSB7XG4gICAgcHJldHR5VGltZSA9IGAke01hdGgucm91bmQoc2Vjb25kc0xlZnQgLyA2MCl9ICR7dChcInN0ZXBzLmZpbmlzaC51cGxvYWQudGltZS5taW51dGVzXCIpfWA7XG4gIH0gZWxzZSBpZiAoc2Vjb25kc0xlZnQgPCA5MCAqIDYwKSB7XG4gICAgcHJldHR5VGltZSA9IHQoXCJzdGVwcy5maW5pc2gudXBsb2FkLnRpbWUuYW4taG91clwiKTtcbiAgfSBlbHNlIGlmIChzZWNvbmRzTGVmdCA8IDI0ICogNjAgKiA2MCkge1xuICAgIHByZXR0eVRpbWUgPSBgJHtNYXRoLnJvdW5kKHNlY29uZHNMZWZ0IC8gKDYwICogNjApKX0gJHt0KFwic3RlcHMuZmluaXNoLnVwbG9hZC50aW1lLmhvdXJzXCIpfWA7XG4gIH0gZWxzZSB7XG4gICAgcHJldHR5VGltZSA9IG51bGw7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxHcmV5SW5uZXJCb3g+XG4gICAgICB7LyogSGVhZGluZyAqL31cbiAgICAgIDxkaXYgY3NzPXt7IGZvbnRXZWlnaHQ6IDcwMCB9fT57dChcInN0ZXBzLmZpbmlzaC51cGxvYWQuY3VycmVudGx5LXVwbG9hZGluZ1wiKX08L2Rpdj5cblxuICAgICAgey8qIFByb2dyZXNzIGJhciAqL31cbiAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgIG1hcmdpblRvcDogMTYsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogOCxcbiAgICAgICAgaGVpZ2h0OiA2LFxuICAgICAgICBib3JkZXJSYWRpdXM6IDMsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCIsXG4gICAgICB9fT5cbiAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICB3aWR0aDogYCR7Y3VycmVudFByb2dyZXNzICogMTAwfSVgLFxuICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMuYWNjZW50NSxcbiAgICAgICAgfX0vPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIHsvKiBQZXJjZW50IGFuZCB0aW1lIGVzdGltYXRpb24gKi99XG4gICAgICA8ZGl2IGNzcz17eyBkaXNwbGF5OiBcImZsZXhcIiB9fT5cbiAgICAgICAgPGRpdj57cm91bmRlZFBlcmNlbnR9JTwvZGl2PlxuICAgICAgICA8ZGl2IGNzcz17eyBmbGV4OiAxIH19IC8+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAge3ByZXR0eVRpbWUgJiYgPFRyYW5zIGkxOG5LZXk9XCJzdGVwcy5maW5pc2gudXBsb2FkLnRpbWUubGVmdFwiPlxuICAgICAgICAgICAge3sgdGltZTogcHJldHR5VGltZSB9fSBsZWZ0XG4gICAgICAgICAgPC9UcmFucz59XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9HcmV5SW5uZXJCb3g+XG4gICk7XG59O1xuXG4vKiogU2hvd24gaWYgdGhlIHVwbG9hZCB3YXMgc3VjY2Vzc2Z1bC4gQSBiaWcgY2hlY2ttYXJrIGFuZCBhIHRleHQuICovXG5jb25zdCBVcGxvYWRTdWNjZXNzID0gKCkgPT4ge1xuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8R3JleUlubmVyQm94PlxuICAgICAgPGRpdiBjc3M9e3sgZm9udFdlaWdodDogNzAwIH19Pnt0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5jb21wbGV0ZVwiKX08L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgIGZvbnRTaXplOiA1MCxcbiAgICAgICAgbWFyZ2luOiAyNCxcbiAgICAgICAgbGluZUhlaWdodDogMCxcbiAgICAgICAgY29sb3I6IENPTE9SUy5hY2NlbnQ1LFxuICAgICAgfX0+XG4gICAgICAgIDxMdUNoZWNrQ2lyY2xlMiAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2Pnt0KFwic3RlcHMuZmluaXNoLnVwbG9hZC5jb21wbGV0ZS1leHBsYW5hdGlvblwiKX08L2Rpdj5cbiAgICA8L0dyZXlJbm5lckJveD5cbiAgKTtcbn07XG5cbmNvbnN0IEdyZXlJbm5lckJveDogUmVhY3QuRkM8UmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW4+ID0gKHsgY2hpbGRyZW4gfSkgPT4gKFxuICA8ZGl2IGNzcz17e1xuICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwxMCxcbiAgICBmb250U2l6ZTogMTQsXG4gICAgbWFyZ2luVG9wOiAyNCxcbiAgICBwYWRkaW5nOiAyNCxcbiAgICBib3JkZXJSYWRpdXM6IDYsXG4gICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICB9fT5cbiAgICB7Y2hpbGRyZW59XG4gIDwvZGl2PlxuKTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst UploadSuccess = () => {\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(GreyInnerBox, {\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"div\", {\n      css: _ref17,\n      children: t(\"steps.finish.upload.complete\")\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"div\", {\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n        fontSize: 50,\n        margin: 24,\n        lineHeight: 0,\n        color: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.accent5\n      },  false ? 0 : \";label:UploadSuccess;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n      children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(react_icons_lu__WEBPACK_IMPORTED_MODULE_14__.LuCheckCircle2, {})\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"div\", {\n      children: t(\"steps.finish.upload.complete-explanation\")\n    })]\n  });\n};\nconst GreyInnerBox = _ref18 => {\n  let {\n    children\n  } = _ref18;\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n      backgroundColor: _util__WEBPACK_IMPORTED_MODULE_6__.COLORS.neutral10,\n      fontSize: 14,\n      marginTop: 24,\n      padding: 24,\n      borderRadius: 6,\n      textAlign: \"center\"\n    },  false ? 0 : \";label:GreyInnerBox;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    children: children\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/steps/finish/upload.tsx\n");

/***/ }),

/***/ "./src/steps/index.tsx":
/*!*****************************!*\
  !*** ./src/steps/index.tsx ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Main: function() { return /* binding */ Main; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var _icons_step_current_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../icons/step-current.svg */ \"./src/icons/step-current.svg\");\n/* harmony import */ var _icons_step_done_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../icons/step-done.svg */ \"./src/icons/step-done.svg\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _video_setup__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./video-setup */ \"./src/steps/video-setup/index.tsx\");\n/* harmony import */ var _audio_setup__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./audio-setup */ \"./src/steps/audio-setup/index.tsx\");\n/* harmony import */ var _recording__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./recording */ \"./src/steps/recording/index.tsx\");\n/* harmony import */ var _review__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./review */ \"./src/steps/review/index.tsx\");\n/* harmony import */ var _finish__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./finish */ \"./src/steps/finish/index.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst STEPS = [\"video-select\", \"audio-select\", \"recording\", \"review\", \"finish\"];\nconst stepIndex = step => STEPS.indexOf(step);\nconst Main = _ref => {\n  let {\n    inert\n  } = _ref;\n  const [currentStep, setCurrentStep] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"video-select\");\n  const stepProps = {\n    goToNextStep: () => setCurrentStep((0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(STEPS[stepIndex(currentStep) + 1])),\n    goToPrevStep: () => setCurrentStep((0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(STEPS[stepIndex(currentStep) - 1])),\n    goToFirstStep: () => setCurrentStep(\"video-select\")\n  };\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"main\", {\n    inert: inert ? \"\" : null,\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.css)({\n      display: \"flex\",\n      flex: 1,\n      backgroundColor: _util__WEBPACK_IMPORTED_MODULE_5__.COLORS.neutral10,\n      [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.screenWidthAtMost)(_util__WEBPACK_IMPORTED_MODULE_5__.BREAKPOINTS.large)]: {\n        flexDirection: \"column-reverse\"\n      }\n    },  false ? 0 : \";label:Main;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(ProgressSidebar, {\n      currentStep: currentStep\n    }), (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.match)(currentStep, {\n      \"video-select\": () => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_video_setup__WEBPACK_IMPORTED_MODULE_6__.VideoSetup, {\n        ...stepProps\n      }),\n      \"audio-select\": () => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_audio_setup__WEBPACK_IMPORTED_MODULE_7__.AudioSetup, {\n        ...stepProps\n      }),\n      \"recording\": () => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_recording__WEBPACK_IMPORTED_MODULE_8__.Recording, {\n        ...stepProps\n      }),\n      \"review\": () => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_review__WEBPACK_IMPORTED_MODULE_9__.Review, {\n        ...stepProps\n      }),\n      \"finish\": () => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_finish__WEBPACK_IMPORTED_MODULE_10__.Finish, {\n        ...stepProps\n      })\n    })]\n  });\n};\n/**\n * The element that shows the progress through the five steps. Shown left on\n * desktop, at the bottom on mobile.\n */\nconst ProgressSidebar = _ref2 => {\n  let {\n    currentStep\n  } = _ref2;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.useColorScheme)();\n  const currentIndex = stepIndex(currentStep);\n  const labels = [t(\"steps.video.label\"), t(\"steps.audio.label\"), t(\"steps.record.label\"), t(\"steps.review.label\"), t(\"steps.finish.label\")];\n  const VERTICAL_MARGIN = \"calc(8px + max(0px, 20% - 44px))\";\n  const CIRCLE_RADIUS = 13;\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.css)({\n      position: \"relative\",\n      flexShrink: \"0\",\n      backgroundColor: _util__WEBPACK_IMPORTED_MODULE_5__.COLORS.neutral05,\n      ...(isHighContrast && {\n        borderRight: `1px solid ${_util__WEBPACK_IMPORTED_MODULE_5__.COLORS.neutral90}`\n      }),\n      [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.screenWidthAbove)(_util__WEBPACK_IMPORTED_MODULE_5__.BREAKPOINTS.large)]: {\n        width: 160,\n        minWidth: 160\n      },\n      [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.screenWidthAtMost)(_util__WEBPACK_IMPORTED_MODULE_5__.BREAKPOINTS.large)]: {\n        height: 42\n      }\n    },  false ? 0 : \";label:ProgressSidebar;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.css)({\n        position: \"absolute\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.screenWidthAbove)(_util__WEBPACK_IMPORTED_MODULE_5__.BREAKPOINTS.large)]: {\n          flexDirection: \"column\",\n          left: 8,\n          top: VERTICAL_MARGIN,\n          bottom: VERTICAL_MARGIN\n        },\n        [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.screenWidthAtMost)(_util__WEBPACK_IMPORTED_MODULE_5__.BREAKPOINTS.large)]: {\n          flexDirection: \"row\",\n          top: 8,\n          left: VERTICAL_MARGIN,\n          right: VERTICAL_MARGIN\n        }\n      },  false ? 0 : \";label:ProgressSidebar;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n      children: [labels.map((label, i) => {\n        let icon;\n        if (i < currentIndex) {\n          icon = (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_icons_step_done_svg__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {});\n        } else if (i === currentIndex) {\n          icon = (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_icons_step_current_svg__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {});\n        } else {\n          icon = (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_13__.FiCircle, {});\n        }\n        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n          css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.css)({\n            display: \"flex\",\n            gap: 12,\n            alignItems: \"center\",\n            zIndex: 100,\n            backgroundColor: _util__WEBPACK_IMPORTED_MODULE_5__.COLORS.neutral05,\n            svg: {\n              color: i === currentIndex ? _util__WEBPACK_IMPORTED_MODULE_5__.COLORS.accent6 : _util__WEBPACK_IMPORTED_MODULE_5__.COLORS.neutral40,\n              fontSize: 2 * CIRCLE_RADIUS,\n              flexShrink: 0,\n              // We want an effective stroke width of 2. If we scale the icon\n              // via `size`, the internal stroke width (of 2) gets scaled as\n              // well. So we override it by applying the inverse scaling. The\n              // intrinsic size of the SVG is 24.\n              strokeWidth: 2 * 24 / (2 * CIRCLE_RADIUS),\n              [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.screenWidthAbove)(_util__WEBPACK_IMPORTED_MODULE_5__.BREAKPOINTS.large)]: {\n                margin: \"4px 0\"\n              },\n              [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.screenWidthAtMost)(_util__WEBPACK_IMPORTED_MODULE_5__.BREAKPOINTS.large)]: {\n                margin: \"0 4px\"\n              }\n            }\n          },  false ? 0 : \";label:ProgressSidebar;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n          children: [icon, (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n            css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.css)({\n              fontSize: 14,\n              lineHeight: 1.2,\n              color: i == currentIndex ? _util__WEBPACK_IMPORTED_MODULE_5__.COLORS.accent8 : _util__WEBPACK_IMPORTED_MODULE_5__.COLORS.neutral70,\n              [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.screenWidthAtMost)(_util__WEBPACK_IMPORTED_MODULE_5__.BREAKPOINTS.large)]: {\n                display: \"none\"\n              }\n            },  false ? 0 : \";label:ProgressSidebar;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n            children: label\n          })]\n        }, i);\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.css)({\n          position: \"absolute\",\n          border: `1px solid ${_util__WEBPACK_IMPORTED_MODULE_5__.COLORS.neutral40}`,\n          [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.screenWidthAbove)(_util__WEBPACK_IMPORTED_MODULE_5__.BREAKPOINTS.large)]: {\n            top: CIRCLE_RADIUS,\n            bottom: CIRCLE_RADIUS,\n            left: CIRCLE_RADIUS - 1 // Border is 2px wide and we want to center that\n          },\n\n          [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.screenWidthAtMost)(_util__WEBPACK_IMPORTED_MODULE_5__.BREAKPOINTS.large)]: {\n            left: CIRCLE_RADIUS,\n            right: CIRCLE_RADIUS,\n            top: CIRCLE_RADIUS - 1 // Border is 2px wide and we want to center that\n          }\n        },  false ? 0 : \";label:ProgressSidebar;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxS2EiLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhY3ROb2RlLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IHsgbWF0Y2gsIG5vdE51bGxpc2gsIHNjcmVlbldpZHRoQWJvdmUsIHNjcmVlbldpZHRoQXRNb3N0LCB1c2VDb2xvclNjaGVtZSB9IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5pbXBvcnQgeyBGaUNpcmNsZSB9IGZyb20gXCJyZWFjdC1pY29ucy9maVwiO1xuXG5pbXBvcnQgU3RlcEN1cnJlbnQgZnJvbSBcIi4uL2ljb25zL3N0ZXAtY3VycmVudC5zdmdcIjtcbmltcG9ydCBTdGVwRG9uZSBmcm9tIFwiLi4vaWNvbnMvc3RlcC1kb25lLnN2Z1wiO1xuaW1wb3J0IHsgQlJFQUtQT0lOVFMsIENPTE9SUyB9IGZyb20gXCIuLi91dGlsXCI7XG5pbXBvcnQgeyBWaWRlb1NldHVwIH0gZnJvbSBcIi4vdmlkZW8tc2V0dXBcIjtcbmltcG9ydCB7IEF1ZGlvU2V0dXAgfSBmcm9tIFwiLi9hdWRpby1zZXR1cFwiO1xuaW1wb3J0IHsgUmVjb3JkaW5nIH0gZnJvbSBcIi4vcmVjb3JkaW5nXCI7XG5pbXBvcnQgeyBSZXZpZXcgfSBmcm9tIFwiLi9yZXZpZXdcIjtcbmltcG9ydCB7IEZpbmlzaCB9IGZyb20gXCIuL2ZpbmlzaFwiO1xuXG5cblxuZXhwb3J0IHR5cGUgU3RlcFByb3BzID0ge1xuICBnb1RvTmV4dFN0ZXA6ICgpID0+IHZvaWQ7XG4gIGdvVG9QcmV2U3RlcDogKCkgPT4gdm9pZDtcbiAgZ29Ub0ZpcnN0U3RlcDogKCkgPT4gdm9pZDtcbn07XG5cbmNvbnN0IFNURVBTID0gW1widmlkZW8tc2VsZWN0XCIsIFwiYXVkaW8tc2VsZWN0XCIsIFwicmVjb3JkaW5nXCIsIFwicmV2aWV3XCIsIFwiZmluaXNoXCJdIGFzIGNvbnN0O1xuZXhwb3J0IHR5cGUgU3RlcCA9IHR5cGVvZiBTVEVQU1tudW1iZXJdO1xuY29uc3Qgc3RlcEluZGV4ID0gKHN0ZXA6IFN0ZXApOiBudW1iZXIgPT4gU1RFUFMuaW5kZXhPZihzdGVwKTtcblxuXG50eXBlIFByb3BzID0ge1xuICBpbmVydDogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBjb25zdCBNYWluOiBSZWFjdC5GQzxQcm9wcz4gPSAoeyBpbmVydCB9KSA9PiB7XG4gIGNvbnN0IFtjdXJyZW50U3RlcCwgc2V0Q3VycmVudFN0ZXBdID0gdXNlU3RhdGU8U3RlcD4oXCJ2aWRlby1zZWxlY3RcIik7XG4gIGNvbnN0IHN0ZXBQcm9wcyA9IHtcbiAgICBnb1RvTmV4dFN0ZXA6ICgpID0+IHNldEN1cnJlbnRTdGVwKG5vdE51bGxpc2goU1RFUFNbc3RlcEluZGV4KGN1cnJlbnRTdGVwKSArIDFdKSksXG4gICAgZ29Ub1ByZXZTdGVwOiAoKSA9PiBzZXRDdXJyZW50U3RlcChub3ROdWxsaXNoKFNURVBTW3N0ZXBJbmRleChjdXJyZW50U3RlcCkgLSAxXSkpLFxuICAgIGdvVG9GaXJzdFN0ZXA6ICgpID0+IHNldEN1cnJlbnRTdGVwKFwidmlkZW8tc2VsZWN0XCIpLFxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPG1haW4gey4uLnsgaW5lcnQ6IGluZXJ0ID8gXCJcIiA6IG51bGwgfX0gY3NzPXt7XG4gICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgIGZsZXg6IDEsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMTAsXG4gICAgICBbc2NyZWVuV2lkdGhBdE1vc3QoQlJFQUtQT0lOVFMubGFyZ2UpXToge1xuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtbi1yZXZlcnNlXCIsXG4gICAgICB9LFxuICAgIH19PlxuICAgICAgPFByb2dyZXNzU2lkZWJhciBjdXJyZW50U3RlcD17Y3VycmVudFN0ZXB9IC8+XG4gICAgICB7bWF0Y2g8U3RlcCwgUmVhY3ROb2RlPihjdXJyZW50U3RlcCwge1xuICAgICAgICBcInZpZGVvLXNlbGVjdFwiOiAoKSA9PiA8VmlkZW9TZXR1cCB7Li4uc3RlcFByb3BzfSAvPixcbiAgICAgICAgXCJhdWRpby1zZWxlY3RcIjogKCkgPT4gPEF1ZGlvU2V0dXAgey4uLnN0ZXBQcm9wc30gLz4sXG4gICAgICAgIFwicmVjb3JkaW5nXCI6ICgpID0+IDxSZWNvcmRpbmcgey4uLnN0ZXBQcm9wc30gLz4sXG4gICAgICAgIFwicmV2aWV3XCI6ICgpID0+IDxSZXZpZXcgey4uLnN0ZXBQcm9wc30gLz4sXG4gICAgICAgIFwiZmluaXNoXCI6ICgpID0+IDxGaW5pc2ggey4uLnN0ZXBQcm9wc30gLz4sXG4gICAgICB9KX1cbiAgICA8L21haW4+XG4gICk7XG59O1xuXG5cbnR5cGUgUHJvZ3Jlc3NTaWRlYmFyUHJvcHMgPSB7XG4gIGN1cnJlbnRTdGVwOiBTdGVwO1xufTtcblxuLyoqXG4gKiBUaGUgZWxlbWVudCB0aGF0IHNob3dzIHRoZSBwcm9ncmVzcyB0aHJvdWdoIHRoZSBmaXZlIHN0ZXBzLiBTaG93biBsZWZ0IG9uXG4gKiBkZXNrdG9wLCBhdCB0aGUgYm90dG9tIG9uIG1vYmlsZS5cbiAqL1xuY29uc3QgUHJvZ3Jlc3NTaWRlYmFyOiBSZWFjdC5GQzxQcm9ncmVzc1NpZGViYXJQcm9wcz4gPSAoeyBjdXJyZW50U3RlcCB9KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICBjb25zdCBjdXJyZW50SW5kZXggPSBzdGVwSW5kZXgoY3VycmVudFN0ZXApO1xuICBjb25zdCBsYWJlbHMgPSBbXG4gICAgdChcInN0ZXBzLnZpZGVvLmxhYmVsXCIpLFxuICAgIHQoXCJzdGVwcy5hdWRpby5sYWJlbFwiKSxcbiAgICB0KFwic3RlcHMucmVjb3JkLmxhYmVsXCIpLFxuICAgIHQoXCJzdGVwcy5yZXZpZXcubGFiZWxcIiksXG4gICAgdChcInN0ZXBzLmZpbmlzaC5sYWJlbFwiKSxcbiAgXTtcblxuICBjb25zdCBWRVJUSUNBTF9NQVJHSU4gPSBcImNhbGMoOHB4ICsgbWF4KDBweCwgMjAlIC0gNDRweCkpXCI7XG4gIGNvbnN0IENJUkNMRV9SQURJVVMgPSAxMztcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgIGZsZXhTaHJpbms6IFwiMFwiLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgLi4uaXNIaWdoQ29udHJhc3QgJiYge1xuICAgICAgICBib3JkZXJSaWdodDogYDFweCBzb2xpZCAke0NPTE9SUy5uZXV0cmFsOTB9YCxcbiAgICAgIH0sXG4gICAgICBbc2NyZWVuV2lkdGhBYm92ZShCUkVBS1BPSU5UUy5sYXJnZSldOiB7XG4gICAgICAgIHdpZHRoOiAxNjAsXG4gICAgICAgIG1pbldpZHRoOiAxNjAsXG4gICAgICB9LFxuICAgICAgW3NjcmVlbldpZHRoQXRNb3N0KEJSRUFLUE9JTlRTLmxhcmdlKV06IHtcbiAgICAgICAgaGVpZ2h0OiA0MixcbiAgICAgIH0sXG4gICAgfX0+XG4gICAgICA8ZGl2IGNzcz17e1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwic3BhY2UtYmV0d2VlblwiLFxuICAgICAgICBbc2NyZWVuV2lkdGhBYm92ZShCUkVBS1BPSU5UUy5sYXJnZSldOiB7XG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICBsZWZ0OiA4LFxuICAgICAgICAgIHRvcDogVkVSVElDQUxfTUFSR0lOLFxuICAgICAgICAgIGJvdHRvbTogVkVSVElDQUxfTUFSR0lOLFxuICAgICAgICB9LFxuICAgICAgICBbc2NyZWVuV2lkdGhBdE1vc3QoQlJFQUtQT0lOVFMubGFyZ2UpXToge1xuICAgICAgICAgIGZsZXhEaXJlY3Rpb246IFwicm93XCIsXG4gICAgICAgICAgdG9wOiA4LFxuICAgICAgICAgIGxlZnQ6IFZFUlRJQ0FMX01BUkdJTixcbiAgICAgICAgICByaWdodDogVkVSVElDQUxfTUFSR0lOLFxuICAgICAgICB9LFxuICAgICAgfX0+XG4gICAgICAgIHtsYWJlbHMubWFwKChsYWJlbCwgaSkgPT4ge1xuICAgICAgICAgIGxldCBpY29uOiBKU1guRWxlbWVudDtcbiAgICAgICAgICBpZiAoaSA8IGN1cnJlbnRJbmRleCkge1xuICAgICAgICAgICAgaWNvbiA9IDxTdGVwRG9uZSAvPjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IGN1cnJlbnRJbmRleCkge1xuICAgICAgICAgICAgaWNvbiA9IDxTdGVwQ3VycmVudCAvPjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWNvbiA9IDxGaUNpcmNsZSAvPjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBrZXk9e2l9IGNzcz17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgICAgZ2FwOiAxMixcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgekluZGV4OiAxMDAsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICAgICAgICAgICAgc3ZnOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IGkgPT09IGN1cnJlbnRJbmRleCA/IENPTE9SUy5hY2NlbnQ2IDogQ09MT1JTLm5ldXRyYWw0MCxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogMiAqIENJUkNMRV9SQURJVVMsXG4gICAgICAgICAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgICAgICAgICAvLyBXZSB3YW50IGFuIGVmZmVjdGl2ZSBzdHJva2Ugd2lkdGggb2YgMi4gSWYgd2Ugc2NhbGUgdGhlIGljb25cbiAgICAgICAgICAgICAgICAvLyB2aWEgYHNpemVgLCB0aGUgaW50ZXJuYWwgc3Ryb2tlIHdpZHRoIChvZiAyKSBnZXRzIHNjYWxlZCBhc1xuICAgICAgICAgICAgICAgIC8vIHdlbGwuIFNvIHdlIG92ZXJyaWRlIGl0IGJ5IGFwcGx5aW5nIHRoZSBpbnZlcnNlIHNjYWxpbmcuIFRoZVxuICAgICAgICAgICAgICAgIC8vIGludHJpbnNpYyBzaXplIG9mIHRoZSBTVkcgaXMgMjQuXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDIgKiAyNCAvICgyICogQ0lSQ0xFX1JBRElVUyksXG4gICAgICAgICAgICAgICAgW3NjcmVlbldpZHRoQWJvdmUoQlJFQUtQT0lOVFMubGFyZ2UpXToge1xuICAgICAgICAgICAgICAgICAgbWFyZ2luOiBcIjRweCAwXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbc2NyZWVuV2lkdGhBdE1vc3QoQlJFQUtQT0lOVFMubGFyZ2UpXToge1xuICAgICAgICAgICAgICAgICAgbWFyZ2luOiBcIjAgNHB4XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICB7aWNvbn1cbiAgICAgICAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogMTQsXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBpID09IGN1cnJlbnRJbmRleCA/IENPTE9SUy5hY2NlbnQ4IDogQ09MT1JTLm5ldXRyYWw3MCxcbiAgICAgICAgICAgICAgICBbc2NyZWVuV2lkdGhBdE1vc3QoQlJFQUtQT0lOVFMubGFyZ2UpXToge1xuICAgICAgICAgICAgICAgICAgZGlzcGxheTogXCJub25lXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfX0+e2xhYmVsfTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKTtcbiAgICAgICAgfSl9XG5cbiAgICAgICAgey8qIExpbmUgY29ubmVjdGluZyBhbGwgc3RlcHMgKi99XG4gICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICBib3JkZXI6IGAxcHggc29saWQgJHtDT0xPUlMubmV1dHJhbDQwfWAsXG4gICAgICAgICAgW3NjcmVlbldpZHRoQWJvdmUoQlJFQUtQT0lOVFMubGFyZ2UpXToge1xuICAgICAgICAgICAgdG9wOiBDSVJDTEVfUkFESVVTLFxuICAgICAgICAgICAgYm90dG9tOiBDSVJDTEVfUkFESVVTLFxuICAgICAgICAgICAgbGVmdDogQ0lSQ0xFX1JBRElVUyAtIDEsIC8vIEJvcmRlciBpcyAycHggd2lkZSBhbmQgd2Ugd2FudCB0byBjZW50ZXIgdGhhdFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW3NjcmVlbldpZHRoQXRNb3N0KEJSRUFLUE9JTlRTLmxhcmdlKV06IHtcbiAgICAgICAgICAgIGxlZnQ6IENJUkNMRV9SQURJVVMsXG4gICAgICAgICAgICByaWdodDogQ0lSQ0xFX1JBRElVUyxcbiAgICAgICAgICAgIHRvcDogQ0lSQ0xFX1JBRElVUyAtIDEsIC8vIEJvcmRlciBpcyAycHggd2lkZSBhbmQgd2Ugd2FudCB0byBjZW50ZXIgdGhhdFxuICAgICAgICAgIH0sXG4gICAgICAgIH19IC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iXX0= */\")\n      })]\n    })\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/steps/index.tsx\n");

/***/ }),

/***/ "./src/steps/recording/controls.tsx":
/*!******************************************!*\
  !*** ./src/steps/recording/controls.tsx ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RecordingControls: function() { return /* binding */ RecordingControls; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var _shortcuts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shortcuts */ \"./src/shortcuts.tsx\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\nvar _ref2 =  false ? 0 : {\n  name: \"1w1w9vp-paused\",\n  styles: \"margin-left:4px;label:paused;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3JlY29yZGluZy9jb250cm9scy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0dvQyIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9zdGVwcy9yZWNvcmRpbmcvY29udHJvbHMudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgeyBXaXRoVG9vbHRpcCwgbWF0Y2gsIHVzZUNvbG9yU2NoZW1lIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcbmltcG9ydCB7IEZpUGF1c2UsIEZpUGxheSB9IGZyb20gXCJyZWFjdC1pY29ucy9maVwiO1xuXG5pbXBvcnQgeyBSZWNvcmRpbmdTdGF0ZSB9IGZyb20gXCIuXCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIFNob3J0Y3V0S2V5cywgdXNlU2hvcnRjdXQsIHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMgfSBmcm9tIFwiLi4vLi4vc2hvcnRjdXRzXCI7XG5pbXBvcnQgeyBDT0xPUlMgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuXG5cblxuXG50eXBlIFByb3BzID0ge1xuICByZWNvcmRpbmdTdGF0ZTogUmVjb3JkaW5nU3RhdGU7XG4gIHN0YXJ0UmVjb3JkaW5nOiAoKSA9PiB2b2lkO1xuICBwYXVzZVJlY29yZGluZzogKCkgPT4gdm9pZDtcbiAgcmVzdW1lUmVjb3JkaW5nOiAoKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGNvbnN0IFJlY29yZGluZ0NvbnRyb2xzOiBSZWFjdC5GQzxQcm9wcz4gPSAoe1xuICByZWNvcmRpbmdTdGF0ZSxcbiAgc3RhcnRSZWNvcmRpbmcsXG4gIHBhdXNlUmVjb3JkaW5nLFxuICByZXN1bWVSZWNvcmRpbmcsXG59KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgaXNMaWdodCA9IHVzZUNvbG9yU2NoZW1lKCkuc2NoZW1lID09PSBcImxpZ2h0XCI7XG4gIGNvbnN0IHsgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG4gIGNvbnN0IGZnQ29sb3IgPSBpc0xpZ2h0ID8gQ09MT1JTLm5ldXRyYWwwNSA6IENPTE9SUy5uZXV0cmFsOTA7XG5cbiAgY29uc3Qgc2hvd0F2YWlsYWJsZVNob3J0Y3V0cyA9IHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMoKTtcbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLnJlY29yZGluZy5zdGFydFBhdXNlUmVzdW1lLCAoKSA9PiB7XG4gICAgbWF0Y2gocmVjb3JkaW5nU3RhdGUsIHtcbiAgICAgIFwiaW5hY3RpdmVcIjogKCkgPT4gc3RhcnRSZWNvcmRpbmcoKSxcbiAgICAgIFwicGF1c2VkXCI6ICgpID0+IHJlc3VtZVJlY29yZGluZygpLFxuICAgICAgXCJyZWNvcmRpbmdcIjogKCkgPT4gcGF1c2VSZWNvcmRpbmcoKSxcbiAgICB9KTtcbiAgfSwge1xuICAgIGlnbm9yZUV2ZW50V2hlbjogZSA9PiBlLmNvZGUgPT09IFwiU3BhY2VcIiAmJiBlLnRhcmdldCBpbnN0YW5jZW9mIEhUTUxCdXR0b25FbGVtZW50LFxuICB9LCBbcmVjb3JkaW5nU3RhdGVdKTtcbiAgY29uc3QgbGFiZWwgPSBtYXRjaChyZWNvcmRpbmdTdGF0ZSwge1xuICAgIFwiaW5hY3RpdmVcIjogKCkgPT4gdChcInN0ZXBzLnJlY29yZC5yZWNvcmQtYnV0dG9uLXRpdGxlXCIpLFxuICAgIFwicGF1c2VkXCI6ICgpID0+IHQoXCJzdGVwcy5yZWNvcmQucmVzdW1lLWJ1dHRvbi10aXRsZVwiKSxcbiAgICBcInJlY29yZGluZ1wiOiAoKSA9PiB0KFwic3RlcHMucmVjb3JkLnBhdXNlLWJ1dHRvbi10aXRsZVwiKSxcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgbWFyZ2luOiBcIjAgYXV0b1wiLFxuICAgICAgd2lkdGg6IDE4MCxcbiAgICAgIGhlaWdodDogODUsXG4gICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgIGdhcDogMzIsXG4gICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGlzTGlnaHQgPyBDT0xPUlMubmV1dHJhbDcwIDogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAke2lzTGlnaHQgPyBDT0xPUlMubmV1dHJhbDUwIDogQ09MT1JTLm5ldXRyYWwyNX1gLFxuICAgICAgYm94U2hhZG93OiBpc0hpZ2hDb250cmFzdCA/IFwibm9uZVwiIDogXCIwIDRweCAxNnB4IHJnYmEoMCwgMCwgMCwgMC4yKVwiLFxuICAgICAgYm9yZGVyUmFkaXVzOiAxMixcbiAgICAgIGNvbG9yOiBmZ0NvbG9yLFxuICAgICAgLi4uaXNIaWdoQ29udHJhc3QgJiYge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgICAgIGJvcmRlcjogYDJweCBzb2xpZCAke0NPTE9SUy5uZXV0cmFsMjV9YCxcbiAgICAgIH0sXG4gICAgfX0+XG4gICAgICA8V2l0aFRvb2x0aXAgdG9vbHRpcD17bGFiZWx9PlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgb25DbGljaz17bWF0Y2gocmVjb3JkaW5nU3RhdGUsIHtcbiAgICAgICAgICAgIFwiaW5hY3RpdmVcIjogKCkgPT4gc3RhcnRSZWNvcmRpbmcsXG4gICAgICAgICAgICBcInBhdXNlZFwiOiAoKSA9PiByZXN1bWVSZWNvcmRpbmcsXG4gICAgICAgICAgICBcInJlY29yZGluZ1wiOiAoKSA9PiBwYXVzZVJlY29yZGluZyxcbiAgICAgICAgICB9KX1cbiAgICAgICAgICBhcmlhLWxhYmVsPXtsYWJlbH1cbiAgICAgICAgICBhcmlhLWxpdmU9XCJwb2xpdGVcIlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgICAgIHdpZHRoOiA1MCxcbiAgICAgICAgICAgIGhlaWdodDogNTAsXG4gICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZvbnRTaXplOiAyOCxcbiAgICAgICAgICAgIHBhZGRpbmc6IDAsXG5cbiAgICAgICAgICAgIGJveFNoYWRvdzogaXNIaWdoQ29udHJhc3QgPyBcIm5vbmVcIiA6IFwiMCA0cHggNHB4IHJnYmEoMCwgMCwgMCwgMC4xMilcIixcbiAgICAgICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCIsXG4gICAgICAgICAgICBjb2xvcjogKGlzSGlnaENvbnRyYXN0IHx8IGlzTGlnaHQpID8gXCJ3aGl0ZVwiIDogXCIjRDZENkQ2XCIsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IFwiNTAlXCIsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGlzTGlnaHQgPyBcIiNFNDJENDNcIiA6IFwiI2I4MDEyZFwiLFxuICAgICAgICAgICAgYm9yZGVyOiBgJHtpc0hpZ2hDb250cmFzdCA/IFwiMnB4XCIgOiBcIjFweFwifSBzb2xpZCAke2ZnQ29sb3J9YCxcbiAgICAgICAgICAgIFwiOmhvdmVyLCA6Zm9jdXMtdmlzaWJsZVwiOiB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogaXNMaWdodCA/IFwiI2M0MGEzMVwiIDogXCIjOGYwMTIxXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCI6Zm9jdXMtdmlzaWJsZVwiOiB7XG4gICAgICAgICAgICAgIG91dGxpbmU6IGA0cHggc29saWQgJHtmZ0NvbG9yfWAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7bWF0Y2gocmVjb3JkaW5nU3RhdGUsIHtcbiAgICAgICAgICAgIFwiaW5hY3RpdmVcIjogKCkgPT4gbnVsbCxcbiAgICAgICAgICAgIFwicGF1c2VkXCI6ICgpID0+IDxGaVBsYXkgY3NzPXt7IG1hcmdpbkxlZnQ6IDQgfX0gLz4sXG4gICAgICAgICAgICBcInJlY29yZGluZ1wiOiAoKSA9PiA8RmlQYXVzZSAvPixcbiAgICAgICAgICB9KX1cbiAgICAgICAgICB7c2hvd0F2YWlsYWJsZVNob3J0Y3V0cyAmJiAoXG4gICAgICAgICAgICA8ZGl2IGNzcz17eyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCByaWdodDogLTQsIGJvdHRvbTogLTQgfX0+XG4gICAgICAgICAgICAgIDxTaG9ydGN1dEtleXMgc2hvcnRjdXQ9e1NIT1JUQ1VUUy5yZWNvcmRpbmcuc3RhcnRQYXVzZVJlc3VtZS5zcGxpdChcIjtcIilbMF19IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvV2l0aFRvb2x0aXA+XG4gICAgICA8VGltZXIgaXNSZWNvcmRpbmc9e3JlY29yZGluZ1N0YXRlID09PSBcInJlY29yZGluZ1wifSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuXG50eXBlIFRpbWVyUHJvcHMgPSB7XG4gIGlzUmVjb3JkaW5nOiBib29sZWFuO1xufTtcblxuY29uc3QgVGltZXI6IFJlYWN0LkZDPFRpbWVyUHJvcHM+ID0gKHsgaXNSZWNvcmRpbmcgfSkgPT4ge1xuICBjb25zdCBbZm9ybWF0dGVkLCBzZXRGb3JtYXR0ZWRdID0gdXNlU3RhdGUoXCIwMDowMFwiKTtcbiAgY29uc3QgbWlsbGlzUGFzc2VkID0gdXNlUmVmKDApO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGxhc3RUaWNrID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCB0aWNrID0gKCkgPT4ge1xuICAgICAgY29uc3QgbmV3SW5zdGFudCA9IG5ldyBEYXRlKCk7XG4gICAgICBpZiAoaXNSZWNvcmRpbmcpIHtcbiAgICAgICAgbWlsbGlzUGFzc2VkLmN1cnJlbnQgKz0gbmV3SW5zdGFudC52YWx1ZU9mKCkgLSBsYXN0VGljay52YWx1ZU9mKCk7XG5cbiAgICAgICAgY29uc3QgbXMgPSBtaWxsaXNQYXNzZWQuY3VycmVudDtcbiAgICAgICAgbGV0IHNlZ21lbnRzID0gW1xuICAgICAgICAgIE1hdGguZmxvb3IobXMgLyAoNjAgKiA2MCAqIDEwMDApKSxcbiAgICAgICAgICBNYXRoLmZsb29yKG1zIC8gKDYwICogMTAwMCkpICUgNjAsXG4gICAgICAgICAgTWF0aC5mbG9vcihtcyAvIDEwMDApICUgNjAsXG4gICAgICAgIF07XG4gICAgICAgIGlmIChzZWdtZW50c1swXSA9PT0gMCkge1xuICAgICAgICAgIHNlZ21lbnRzID0gc2VnbWVudHMuc2xpY2UoMSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0Rm9ybWF0dGVkKHNlZ21lbnRzLm1hcCh1bml0ID0+ICh1bml0IDwgMTAgPyBcIjBcIiA6IFwiXCIpICsgdW5pdCkuam9pbihcIjpcIikpO1xuICAgICAgfVxuICAgICAgbGFzdFRpY2sgPSBuZXdJbnN0YW50O1xuICAgIH07XG4gICAgY29uc3QgY291bnRlcklkID0gc2V0SW50ZXJ2YWwodGljaywgMTAwKTtcbiAgICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChjb3VudGVySWQpO1xuICB9LCBbaXNSZWNvcmRpbmddKTtcblxuXG5cblxuICByZXR1cm4gPGRpdj57Zm9ybWF0dGVkfTwvZGl2Pjtcbn07XG4iXX0= */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst RecordingControls = _ref => {\n  let {\n    recordingState,\n    startRecording,\n    pauseRecording,\n    resumeRecording\n  } = _ref;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const isLight = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.useColorScheme)().scheme === \"light\";\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.useColorScheme)();\n  const fgColor = isLight ? _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral05 : _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral90;\n  const showAvailableShortcuts = (0,_shortcuts__WEBPACK_IMPORTED_MODULE_3__.useShowAvailableShortcuts)();\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_3__.useShortcut)(_shortcuts__WEBPACK_IMPORTED_MODULE_3__.SHORTCUTS.recording.startPauseResume, () => {\n    (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.match)(recordingState, {\n      \"inactive\": () => startRecording(),\n      \"paused\": () => resumeRecording(),\n      \"recording\": () => pauseRecording()\n    });\n  }, {\n    ignoreEventWhen: e => e.code === \"Space\" && e.target instanceof HTMLButtonElement\n  }, [recordingState]);\n  const label = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.match)(recordingState, {\n    \"inactive\": () => t(\"steps.record.record-button-title\"),\n    \"paused\": () => t(\"steps.record.resume-button-title\"),\n    \"recording\": () => t(\"steps.record.pause-button-title\")\n  });\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.css)({\n      margin: \"0 auto\",\n      width: 180,\n      height: 85,\n      display: \"flex\",\n      gap: 32,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      backgroundColor: isLight ? _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral70 : _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral05,\n      border: `1px solid ${isLight ? _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral50 : _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral25}`,\n      boxShadow: isHighContrast ? \"none\" : \"0 4px 16px rgba(0, 0, 0, 0.2)\",\n      borderRadius: 12,\n      color: fgColor,\n      ...(isHighContrast && {\n        backgroundColor: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral05,\n        border: `2px solid ${_util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral25}`\n      })\n    },  false ? 0 : \";label:RecordingControls;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3JlY29yZGluZy9jb250cm9scy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0NTIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3JlY29yZGluZy9jb250cm9scy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCB7IFdpdGhUb29sdGlwLCBtYXRjaCwgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuaW1wb3J0IHsgRmlQYXVzZSwgRmlQbGF5IH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5cbmltcG9ydCB7IFJlY29yZGluZ1N0YXRlIH0gZnJvbSBcIi5cIjtcbmltcG9ydCB7IFNIT1JUQ1VUUywgU2hvcnRjdXRLZXlzLCB1c2VTaG9ydGN1dCwgdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cyB9IGZyb20gXCIuLi8uLi9zaG9ydGN1dHNcIjtcbmltcG9ydCB7IENPTE9SUyB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5cblxuXG5cbnR5cGUgUHJvcHMgPSB7XG4gIHJlY29yZGluZ1N0YXRlOiBSZWNvcmRpbmdTdGF0ZTtcbiAgc3RhcnRSZWNvcmRpbmc6ICgpID0+IHZvaWQ7XG4gIHBhdXNlUmVjb3JkaW5nOiAoKSA9PiB2b2lkO1xuICByZXN1bWVSZWNvcmRpbmc6ICgpID0+IHZvaWQ7XG59O1xuXG5leHBvcnQgY29uc3QgUmVjb3JkaW5nQ29udHJvbHM6IFJlYWN0LkZDPFByb3BzPiA9ICh7XG4gIHJlY29yZGluZ1N0YXRlLFxuICBzdGFydFJlY29yZGluZyxcbiAgcGF1c2VSZWNvcmRpbmcsXG4gIHJlc3VtZVJlY29yZGluZyxcbn0pID0+IHtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCBpc0xpZ2h0ID0gdXNlQ29sb3JTY2hlbWUoKS5zY2hlbWUgPT09IFwibGlnaHRcIjtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcbiAgY29uc3QgZmdDb2xvciA9IGlzTGlnaHQgPyBDT0xPUlMubmV1dHJhbDA1IDogQ09MT1JTLm5ldXRyYWw5MDtcblxuICBjb25zdCBzaG93QXZhaWxhYmxlU2hvcnRjdXRzID0gdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cygpO1xuICB1c2VTaG9ydGN1dChTSE9SVENVVFMucmVjb3JkaW5nLnN0YXJ0UGF1c2VSZXN1bWUsICgpID0+IHtcbiAgICBtYXRjaChyZWNvcmRpbmdTdGF0ZSwge1xuICAgICAgXCJpbmFjdGl2ZVwiOiAoKSA9PiBzdGFydFJlY29yZGluZygpLFxuICAgICAgXCJwYXVzZWRcIjogKCkgPT4gcmVzdW1lUmVjb3JkaW5nKCksXG4gICAgICBcInJlY29yZGluZ1wiOiAoKSA9PiBwYXVzZVJlY29yZGluZygpLFxuICAgIH0pO1xuICB9LCB7XG4gICAgaWdub3JlRXZlbnRXaGVuOiBlID0+IGUuY29kZSA9PT0gXCJTcGFjZVwiICYmIGUudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEJ1dHRvbkVsZW1lbnQsXG4gIH0sIFtyZWNvcmRpbmdTdGF0ZV0pO1xuICBjb25zdCBsYWJlbCA9IG1hdGNoKHJlY29yZGluZ1N0YXRlLCB7XG4gICAgXCJpbmFjdGl2ZVwiOiAoKSA9PiB0KFwic3RlcHMucmVjb3JkLnJlY29yZC1idXR0b24tdGl0bGVcIiksXG4gICAgXCJwYXVzZWRcIjogKCkgPT4gdChcInN0ZXBzLnJlY29yZC5yZXN1bWUtYnV0dG9uLXRpdGxlXCIpLFxuICAgIFwicmVjb3JkaW5nXCI6ICgpID0+IHQoXCJzdGVwcy5yZWNvcmQucGF1c2UtYnV0dG9uLXRpdGxlXCIpLFxuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7XG4gICAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG4gICAgICB3aWR0aDogMTgwLFxuICAgICAgaGVpZ2h0OiA4NSxcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZ2FwOiAzMixcbiAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgIGJhY2tncm91bmRDb2xvcjogaXNMaWdodCA/IENPTE9SUy5uZXV0cmFsNzAgOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7aXNMaWdodCA/IENPTE9SUy5uZXV0cmFsNTAgOiBDT0xPUlMubmV1dHJhbDI1fWAsXG4gICAgICBib3hTaGFkb3c6IGlzSGlnaENvbnRyYXN0ID8gXCJub25lXCIgOiBcIjAgNHB4IDE2cHggcmdiYSgwLCAwLCAwLCAwLjIpXCIsXG4gICAgICBib3JkZXJSYWRpdXM6IDEyLFxuICAgICAgY29sb3I6IGZnQ29sb3IsXG4gICAgICAuLi5pc0hpZ2hDb250cmFzdCAmJiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICAgICAgYm9yZGVyOiBgMnB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWwyNX1gLFxuICAgICAgfSxcbiAgICB9fT5cbiAgICAgIDxXaXRoVG9vbHRpcCB0b29sdGlwPXtsYWJlbH0+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBvbkNsaWNrPXttYXRjaChyZWNvcmRpbmdTdGF0ZSwge1xuICAgICAgICAgICAgXCJpbmFjdGl2ZVwiOiAoKSA9PiBzdGFydFJlY29yZGluZyxcbiAgICAgICAgICAgIFwicGF1c2VkXCI6ICgpID0+IHJlc3VtZVJlY29yZGluZyxcbiAgICAgICAgICAgIFwicmVjb3JkaW5nXCI6ICgpID0+IHBhdXNlUmVjb3JkaW5nLFxuICAgICAgICAgIH0pfVxuICAgICAgICAgIGFyaWEtbGFiZWw9e2xhYmVsfVxuICAgICAgICAgIGFyaWEtbGl2ZT1cInBvbGl0ZVwiXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICAgICAgd2lkdGg6IDUwLFxuICAgICAgICAgICAgaGVpZ2h0OiA1MCxcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZm9udFNpemU6IDI4LFxuICAgICAgICAgICAgcGFkZGluZzogMCxcblxuICAgICAgICAgICAgYm94U2hhZG93OiBpc0hpZ2hDb250cmFzdCA/IFwibm9uZVwiIDogXCIwIDRweCA0cHggcmdiYSgwLCAwLCAwLCAwLjEyKVwiLFxuICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgICAgICAgIGNvbG9yOiAoaXNIaWdoQ29udHJhc3QgfHwgaXNMaWdodCkgPyBcIndoaXRlXCIgOiBcIiNENkQ2RDZcIixcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogaXNMaWdodCA/IFwiI0U0MkQ0M1wiIDogXCIjYjgwMTJkXCIsXG4gICAgICAgICAgICBib3JkZXI6IGAke2lzSGlnaENvbnRyYXN0ID8gXCIycHhcIiA6IFwiMXB4XCJ9IHNvbGlkICR7ZmdDb2xvcn1gLFxuICAgICAgICAgICAgXCI6aG92ZXIsIDpmb2N1cy12aXNpYmxlXCI6IHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBpc0xpZ2h0ID8gXCIjYzQwYTMxXCIgOiBcIiM4ZjAxMjFcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIjpmb2N1cy12aXNpYmxlXCI6IHtcbiAgICAgICAgICAgICAgb3V0bGluZTogYDRweCBzb2xpZCAke2ZnQ29sb3J9YCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHttYXRjaChyZWNvcmRpbmdTdGF0ZSwge1xuICAgICAgICAgICAgXCJpbmFjdGl2ZVwiOiAoKSA9PiBudWxsLFxuICAgICAgICAgICAgXCJwYXVzZWRcIjogKCkgPT4gPEZpUGxheSBjc3M9e3sgbWFyZ2luTGVmdDogNCB9fSAvPixcbiAgICAgICAgICAgIFwicmVjb3JkaW5nXCI6ICgpID0+IDxGaVBhdXNlIC8+LFxuICAgICAgICAgIH0pfVxuICAgICAgICAgIHtzaG93QXZhaWxhYmxlU2hvcnRjdXRzICYmIChcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHJpZ2h0OiAtNCwgYm90dG9tOiAtNCB9fT5cbiAgICAgICAgICAgICAgPFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17U0hPUlRDVVRTLnJlY29yZGluZy5zdGFydFBhdXNlUmVzdW1lLnNwbGl0KFwiO1wiKVswXX0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9XaXRoVG9vbHRpcD5cbiAgICAgIDxUaW1lciBpc1JlY29yZGluZz17cmVjb3JkaW5nU3RhdGUgPT09IFwicmVjb3JkaW5nXCJ9IC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5cbnR5cGUgVGltZXJQcm9wcyA9IHtcbiAgaXNSZWNvcmRpbmc6IGJvb2xlYW47XG59O1xuXG5jb25zdCBUaW1lcjogUmVhY3QuRkM8VGltZXJQcm9wcz4gPSAoeyBpc1JlY29yZGluZyB9KSA9PiB7XG4gIGNvbnN0IFtmb3JtYXR0ZWQsIHNldEZvcm1hdHRlZF0gPSB1c2VTdGF0ZShcIjAwOjAwXCIpO1xuICBjb25zdCBtaWxsaXNQYXNzZWQgPSB1c2VSZWYoMCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgbGFzdFRpY2sgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHRpY2sgPSAoKSA9PiB7XG4gICAgICBjb25zdCBuZXdJbnN0YW50ID0gbmV3IERhdGUoKTtcbiAgICAgIGlmIChpc1JlY29yZGluZykge1xuICAgICAgICBtaWxsaXNQYXNzZWQuY3VycmVudCArPSBuZXdJbnN0YW50LnZhbHVlT2YoKSAtIGxhc3RUaWNrLnZhbHVlT2YoKTtcblxuICAgICAgICBjb25zdCBtcyA9IG1pbGxpc1Bhc3NlZC5jdXJyZW50O1xuICAgICAgICBsZXQgc2VnbWVudHMgPSBbXG4gICAgICAgICAgTWF0aC5mbG9vcihtcyAvICg2MCAqIDYwICogMTAwMCkpLFxuICAgICAgICAgIE1hdGguZmxvb3IobXMgLyAoNjAgKiAxMDAwKSkgJSA2MCxcbiAgICAgICAgICBNYXRoLmZsb29yKG1zIC8gMTAwMCkgJSA2MCxcbiAgICAgICAgXTtcbiAgICAgICAgaWYgKHNlZ21lbnRzWzBdID09PSAwKSB7XG4gICAgICAgICAgc2VnbWVudHMgPSBzZWdtZW50cy5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRGb3JtYXR0ZWQoc2VnbWVudHMubWFwKHVuaXQgPT4gKHVuaXQgPCAxMCA/IFwiMFwiIDogXCJcIikgKyB1bml0KS5qb2luKFwiOlwiKSk7XG4gICAgICB9XG4gICAgICBsYXN0VGljayA9IG5ld0luc3RhbnQ7XG4gICAgfTtcbiAgICBjb25zdCBjb3VudGVySWQgPSBzZXRJbnRlcnZhbCh0aWNrLCAxMDApO1xuICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGNvdW50ZXJJZCk7XG4gIH0sIFtpc1JlY29yZGluZ10pO1xuXG5cblxuXG4gIHJldHVybiA8ZGl2Pntmb3JtYXR0ZWR9PC9kaXY+O1xufTtcbiJdfQ== */\"),\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.WithTooltip, {\n      tooltip: label,\n      children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"button\", {\n        onClick: (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.match)(recordingState, {\n          \"inactive\": () => startRecording,\n          \"paused\": () => resumeRecording,\n          \"recording\": () => pauseRecording\n        }),\n        \"aria-label\": label,\n        \"aria-live\": \"polite\",\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.css)({\n          position: \"relative\",\n          width: 50,\n          height: 50,\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          fontSize: 28,\n          padding: 0,\n          boxShadow: isHighContrast ? \"none\" : \"0 4px 4px rgba(0, 0, 0, 0.12)\",\n          cursor: \"pointer\",\n          color: isHighContrast || isLight ? \"white\" : \"#D6D6D6\",\n          borderRadius: \"50%\",\n          backgroundColor: isLight ? \"#E42D43\" : \"#b8012d\",\n          border: `${isHighContrast ? \"2px\" : \"1px\"} solid ${fgColor}`,\n          \":hover, :focus-visible\": {\n            backgroundColor: isLight ? \"#c40a31\" : \"#8f0121\"\n          },\n          \":focus-visible\": {\n            outline: `4px solid ${fgColor}`\n          }\n        },  false ? 0 : \";label:RecordingControls;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3JlY29yZGluZy9jb250cm9scy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEVVIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3JlY29yZGluZy9jb250cm9scy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCB7IFdpdGhUb29sdGlwLCBtYXRjaCwgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuaW1wb3J0IHsgRmlQYXVzZSwgRmlQbGF5IH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5cbmltcG9ydCB7IFJlY29yZGluZ1N0YXRlIH0gZnJvbSBcIi5cIjtcbmltcG9ydCB7IFNIT1JUQ1VUUywgU2hvcnRjdXRLZXlzLCB1c2VTaG9ydGN1dCwgdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cyB9IGZyb20gXCIuLi8uLi9zaG9ydGN1dHNcIjtcbmltcG9ydCB7IENPTE9SUyB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5cblxuXG5cbnR5cGUgUHJvcHMgPSB7XG4gIHJlY29yZGluZ1N0YXRlOiBSZWNvcmRpbmdTdGF0ZTtcbiAgc3RhcnRSZWNvcmRpbmc6ICgpID0+IHZvaWQ7XG4gIHBhdXNlUmVjb3JkaW5nOiAoKSA9PiB2b2lkO1xuICByZXN1bWVSZWNvcmRpbmc6ICgpID0+IHZvaWQ7XG59O1xuXG5leHBvcnQgY29uc3QgUmVjb3JkaW5nQ29udHJvbHM6IFJlYWN0LkZDPFByb3BzPiA9ICh7XG4gIHJlY29yZGluZ1N0YXRlLFxuICBzdGFydFJlY29yZGluZyxcbiAgcGF1c2VSZWNvcmRpbmcsXG4gIHJlc3VtZVJlY29yZGluZyxcbn0pID0+IHtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCBpc0xpZ2h0ID0gdXNlQ29sb3JTY2hlbWUoKS5zY2hlbWUgPT09IFwibGlnaHRcIjtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcbiAgY29uc3QgZmdDb2xvciA9IGlzTGlnaHQgPyBDT0xPUlMubmV1dHJhbDA1IDogQ09MT1JTLm5ldXRyYWw5MDtcblxuICBjb25zdCBzaG93QXZhaWxhYmxlU2hvcnRjdXRzID0gdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cygpO1xuICB1c2VTaG9ydGN1dChTSE9SVENVVFMucmVjb3JkaW5nLnN0YXJ0UGF1c2VSZXN1bWUsICgpID0+IHtcbiAgICBtYXRjaChyZWNvcmRpbmdTdGF0ZSwge1xuICAgICAgXCJpbmFjdGl2ZVwiOiAoKSA9PiBzdGFydFJlY29yZGluZygpLFxuICAgICAgXCJwYXVzZWRcIjogKCkgPT4gcmVzdW1lUmVjb3JkaW5nKCksXG4gICAgICBcInJlY29yZGluZ1wiOiAoKSA9PiBwYXVzZVJlY29yZGluZygpLFxuICAgIH0pO1xuICB9LCB7XG4gICAgaWdub3JlRXZlbnRXaGVuOiBlID0+IGUuY29kZSA9PT0gXCJTcGFjZVwiICYmIGUudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEJ1dHRvbkVsZW1lbnQsXG4gIH0sIFtyZWNvcmRpbmdTdGF0ZV0pO1xuICBjb25zdCBsYWJlbCA9IG1hdGNoKHJlY29yZGluZ1N0YXRlLCB7XG4gICAgXCJpbmFjdGl2ZVwiOiAoKSA9PiB0KFwic3RlcHMucmVjb3JkLnJlY29yZC1idXR0b24tdGl0bGVcIiksXG4gICAgXCJwYXVzZWRcIjogKCkgPT4gdChcInN0ZXBzLnJlY29yZC5yZXN1bWUtYnV0dG9uLXRpdGxlXCIpLFxuICAgIFwicmVjb3JkaW5nXCI6ICgpID0+IHQoXCJzdGVwcy5yZWNvcmQucGF1c2UtYnV0dG9uLXRpdGxlXCIpLFxuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7XG4gICAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG4gICAgICB3aWR0aDogMTgwLFxuICAgICAgaGVpZ2h0OiA4NSxcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZ2FwOiAzMixcbiAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgIGJhY2tncm91bmRDb2xvcjogaXNMaWdodCA/IENPTE9SUy5uZXV0cmFsNzAgOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7aXNMaWdodCA/IENPTE9SUy5uZXV0cmFsNTAgOiBDT0xPUlMubmV1dHJhbDI1fWAsXG4gICAgICBib3hTaGFkb3c6IGlzSGlnaENvbnRyYXN0ID8gXCJub25lXCIgOiBcIjAgNHB4IDE2cHggcmdiYSgwLCAwLCAwLCAwLjIpXCIsXG4gICAgICBib3JkZXJSYWRpdXM6IDEyLFxuICAgICAgY29sb3I6IGZnQ29sb3IsXG4gICAgICAuLi5pc0hpZ2hDb250cmFzdCAmJiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICAgICAgYm9yZGVyOiBgMnB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWwyNX1gLFxuICAgICAgfSxcbiAgICB9fT5cbiAgICAgIDxXaXRoVG9vbHRpcCB0b29sdGlwPXtsYWJlbH0+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBvbkNsaWNrPXttYXRjaChyZWNvcmRpbmdTdGF0ZSwge1xuICAgICAgICAgICAgXCJpbmFjdGl2ZVwiOiAoKSA9PiBzdGFydFJlY29yZGluZyxcbiAgICAgICAgICAgIFwicGF1c2VkXCI6ICgpID0+IHJlc3VtZVJlY29yZGluZyxcbiAgICAgICAgICAgIFwicmVjb3JkaW5nXCI6ICgpID0+IHBhdXNlUmVjb3JkaW5nLFxuICAgICAgICAgIH0pfVxuICAgICAgICAgIGFyaWEtbGFiZWw9e2xhYmVsfVxuICAgICAgICAgIGFyaWEtbGl2ZT1cInBvbGl0ZVwiXG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICAgICAgd2lkdGg6IDUwLFxuICAgICAgICAgICAgaGVpZ2h0OiA1MCxcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZm9udFNpemU6IDI4LFxuICAgICAgICAgICAgcGFkZGluZzogMCxcblxuICAgICAgICAgICAgYm94U2hhZG93OiBpc0hpZ2hDb250cmFzdCA/IFwibm9uZVwiIDogXCIwIDRweCA0cHggcmdiYSgwLCAwLCAwLCAwLjEyKVwiLFxuICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgICAgICAgIGNvbG9yOiAoaXNIaWdoQ29udHJhc3QgfHwgaXNMaWdodCkgPyBcIndoaXRlXCIgOiBcIiNENkQ2RDZcIixcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogaXNMaWdodCA/IFwiI0U0MkQ0M1wiIDogXCIjYjgwMTJkXCIsXG4gICAgICAgICAgICBib3JkZXI6IGAke2lzSGlnaENvbnRyYXN0ID8gXCIycHhcIiA6IFwiMXB4XCJ9IHNvbGlkICR7ZmdDb2xvcn1gLFxuICAgICAgICAgICAgXCI6aG92ZXIsIDpmb2N1cy12aXNpYmxlXCI6IHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBpc0xpZ2h0ID8gXCIjYzQwYTMxXCIgOiBcIiM4ZjAxMjFcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIjpmb2N1cy12aXNpYmxlXCI6IHtcbiAgICAgICAgICAgICAgb3V0bGluZTogYDRweCBzb2xpZCAke2ZnQ29sb3J9YCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHttYXRjaChyZWNvcmRpbmdTdGF0ZSwge1xuICAgICAgICAgICAgXCJpbmFjdGl2ZVwiOiAoKSA9PiBudWxsLFxuICAgICAgICAgICAgXCJwYXVzZWRcIjogKCkgPT4gPEZpUGxheSBjc3M9e3sgbWFyZ2luTGVmdDogNCB9fSAvPixcbiAgICAgICAgICAgIFwicmVjb3JkaW5nXCI6ICgpID0+IDxGaVBhdXNlIC8+LFxuICAgICAgICAgIH0pfVxuICAgICAgICAgIHtzaG93QXZhaWxhYmxlU2hvcnRjdXRzICYmIChcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHJpZ2h0OiAtNCwgYm90dG9tOiAtNCB9fT5cbiAgICAgICAgICAgICAgPFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17U0hPUlRDVVRTLnJlY29yZGluZy5zdGFydFBhdXNlUmVzdW1lLnNwbGl0KFwiO1wiKVswXX0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9XaXRoVG9vbHRpcD5cbiAgICAgIDxUaW1lciBpc1JlY29yZGluZz17cmVjb3JkaW5nU3RhdGUgPT09IFwicmVjb3JkaW5nXCJ9IC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5cbnR5cGUgVGltZXJQcm9wcyA9IHtcbiAgaXNSZWNvcmRpbmc6IGJvb2xlYW47XG59O1xuXG5jb25zdCBUaW1lcjogUmVhY3QuRkM8VGltZXJQcm9wcz4gPSAoeyBpc1JlY29yZGluZyB9KSA9PiB7XG4gIGNvbnN0IFtmb3JtYXR0ZWQsIHNldEZvcm1hdHRlZF0gPSB1c2VTdGF0ZShcIjAwOjAwXCIpO1xuICBjb25zdCBtaWxsaXNQYXNzZWQgPSB1c2VSZWYoMCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgbGFzdFRpY2sgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHRpY2sgPSAoKSA9PiB7XG4gICAgICBjb25zdCBuZXdJbnN0YW50ID0gbmV3IERhdGUoKTtcbiAgICAgIGlmIChpc1JlY29yZGluZykge1xuICAgICAgICBtaWxsaXNQYXNzZWQuY3VycmVudCArPSBuZXdJbnN0YW50LnZhbHVlT2YoKSAtIGxhc3RUaWNrLnZhbHVlT2YoKTtcblxuICAgICAgICBjb25zdCBtcyA9IG1pbGxpc1Bhc3NlZC5jdXJyZW50O1xuICAgICAgICBsZXQgc2VnbWVudHMgPSBbXG4gICAgICAgICAgTWF0aC5mbG9vcihtcyAvICg2MCAqIDYwICogMTAwMCkpLFxuICAgICAgICAgIE1hdGguZmxvb3IobXMgLyAoNjAgKiAxMDAwKSkgJSA2MCxcbiAgICAgICAgICBNYXRoLmZsb29yKG1zIC8gMTAwMCkgJSA2MCxcbiAgICAgICAgXTtcbiAgICAgICAgaWYgKHNlZ21lbnRzWzBdID09PSAwKSB7XG4gICAgICAgICAgc2VnbWVudHMgPSBzZWdtZW50cy5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRGb3JtYXR0ZWQoc2VnbWVudHMubWFwKHVuaXQgPT4gKHVuaXQgPCAxMCA/IFwiMFwiIDogXCJcIikgKyB1bml0KS5qb2luKFwiOlwiKSk7XG4gICAgICB9XG4gICAgICBsYXN0VGljayA9IG5ld0luc3RhbnQ7XG4gICAgfTtcbiAgICBjb25zdCBjb3VudGVySWQgPSBzZXRJbnRlcnZhbCh0aWNrLCAxMDApO1xuICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGNvdW50ZXJJZCk7XG4gIH0sIFtpc1JlY29yZGluZ10pO1xuXG5cblxuXG4gIHJldHVybiA8ZGl2Pntmb3JtYXR0ZWR9PC9kaXY+O1xufTtcbiJdfQ== */\"),\n        children: [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.match)(recordingState, {\n          \"inactive\": () => null,\n          \"paused\": () => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_7__.FiPlay, {\n            css: _ref2\n          }),\n          \"recording\": () => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_7__.FiPause, {})\n        }), showAvailableShortcuts && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"div\", {\n          css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.css)({\n            position: \"absolute\",\n            right: -4,\n            bottom: -4\n          },  false ? 0 : \";label:RecordingControls;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3JlY29yZGluZy9jb250cm9scy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0dpQiIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9zdGVwcy9yZWNvcmRpbmcvY29udHJvbHMudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgeyBXaXRoVG9vbHRpcCwgbWF0Y2gsIHVzZUNvbG9yU2NoZW1lIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcbmltcG9ydCB7IEZpUGF1c2UsIEZpUGxheSB9IGZyb20gXCJyZWFjdC1pY29ucy9maVwiO1xuXG5pbXBvcnQgeyBSZWNvcmRpbmdTdGF0ZSB9IGZyb20gXCIuXCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIFNob3J0Y3V0S2V5cywgdXNlU2hvcnRjdXQsIHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMgfSBmcm9tIFwiLi4vLi4vc2hvcnRjdXRzXCI7XG5pbXBvcnQgeyBDT0xPUlMgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuXG5cblxuXG50eXBlIFByb3BzID0ge1xuICByZWNvcmRpbmdTdGF0ZTogUmVjb3JkaW5nU3RhdGU7XG4gIHN0YXJ0UmVjb3JkaW5nOiAoKSA9PiB2b2lkO1xuICBwYXVzZVJlY29yZGluZzogKCkgPT4gdm9pZDtcbiAgcmVzdW1lUmVjb3JkaW5nOiAoKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGNvbnN0IFJlY29yZGluZ0NvbnRyb2xzOiBSZWFjdC5GQzxQcm9wcz4gPSAoe1xuICByZWNvcmRpbmdTdGF0ZSxcbiAgc3RhcnRSZWNvcmRpbmcsXG4gIHBhdXNlUmVjb3JkaW5nLFxuICByZXN1bWVSZWNvcmRpbmcsXG59KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgaXNMaWdodCA9IHVzZUNvbG9yU2NoZW1lKCkuc2NoZW1lID09PSBcImxpZ2h0XCI7XG4gIGNvbnN0IHsgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG4gIGNvbnN0IGZnQ29sb3IgPSBpc0xpZ2h0ID8gQ09MT1JTLm5ldXRyYWwwNSA6IENPTE9SUy5uZXV0cmFsOTA7XG5cbiAgY29uc3Qgc2hvd0F2YWlsYWJsZVNob3J0Y3V0cyA9IHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMoKTtcbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLnJlY29yZGluZy5zdGFydFBhdXNlUmVzdW1lLCAoKSA9PiB7XG4gICAgbWF0Y2gocmVjb3JkaW5nU3RhdGUsIHtcbiAgICAgIFwiaW5hY3RpdmVcIjogKCkgPT4gc3RhcnRSZWNvcmRpbmcoKSxcbiAgICAgIFwicGF1c2VkXCI6ICgpID0+IHJlc3VtZVJlY29yZGluZygpLFxuICAgICAgXCJyZWNvcmRpbmdcIjogKCkgPT4gcGF1c2VSZWNvcmRpbmcoKSxcbiAgICB9KTtcbiAgfSwge1xuICAgIGlnbm9yZUV2ZW50V2hlbjogZSA9PiBlLmNvZGUgPT09IFwiU3BhY2VcIiAmJiBlLnRhcmdldCBpbnN0YW5jZW9mIEhUTUxCdXR0b25FbGVtZW50LFxuICB9LCBbcmVjb3JkaW5nU3RhdGVdKTtcbiAgY29uc3QgbGFiZWwgPSBtYXRjaChyZWNvcmRpbmdTdGF0ZSwge1xuICAgIFwiaW5hY3RpdmVcIjogKCkgPT4gdChcInN0ZXBzLnJlY29yZC5yZWNvcmQtYnV0dG9uLXRpdGxlXCIpLFxuICAgIFwicGF1c2VkXCI6ICgpID0+IHQoXCJzdGVwcy5yZWNvcmQucmVzdW1lLWJ1dHRvbi10aXRsZVwiKSxcbiAgICBcInJlY29yZGluZ1wiOiAoKSA9PiB0KFwic3RlcHMucmVjb3JkLnBhdXNlLWJ1dHRvbi10aXRsZVwiKSxcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgbWFyZ2luOiBcIjAgYXV0b1wiLFxuICAgICAgd2lkdGg6IDE4MCxcbiAgICAgIGhlaWdodDogODUsXG4gICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgIGdhcDogMzIsXG4gICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGlzTGlnaHQgPyBDT0xPUlMubmV1dHJhbDcwIDogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAke2lzTGlnaHQgPyBDT0xPUlMubmV1dHJhbDUwIDogQ09MT1JTLm5ldXRyYWwyNX1gLFxuICAgICAgYm94U2hhZG93OiBpc0hpZ2hDb250cmFzdCA/IFwibm9uZVwiIDogXCIwIDRweCAxNnB4IHJnYmEoMCwgMCwgMCwgMC4yKVwiLFxuICAgICAgYm9yZGVyUmFkaXVzOiAxMixcbiAgICAgIGNvbG9yOiBmZ0NvbG9yLFxuICAgICAgLi4uaXNIaWdoQ29udHJhc3QgJiYge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgICAgIGJvcmRlcjogYDJweCBzb2xpZCAke0NPTE9SUy5uZXV0cmFsMjV9YCxcbiAgICAgIH0sXG4gICAgfX0+XG4gICAgICA8V2l0aFRvb2x0aXAgdG9vbHRpcD17bGFiZWx9PlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgb25DbGljaz17bWF0Y2gocmVjb3JkaW5nU3RhdGUsIHtcbiAgICAgICAgICAgIFwiaW5hY3RpdmVcIjogKCkgPT4gc3RhcnRSZWNvcmRpbmcsXG4gICAgICAgICAgICBcInBhdXNlZFwiOiAoKSA9PiByZXN1bWVSZWNvcmRpbmcsXG4gICAgICAgICAgICBcInJlY29yZGluZ1wiOiAoKSA9PiBwYXVzZVJlY29yZGluZyxcbiAgICAgICAgICB9KX1cbiAgICAgICAgICBhcmlhLWxhYmVsPXtsYWJlbH1cbiAgICAgICAgICBhcmlhLWxpdmU9XCJwb2xpdGVcIlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgICAgIHdpZHRoOiA1MCxcbiAgICAgICAgICAgIGhlaWdodDogNTAsXG4gICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZvbnRTaXplOiAyOCxcbiAgICAgICAgICAgIHBhZGRpbmc6IDAsXG5cbiAgICAgICAgICAgIGJveFNoYWRvdzogaXNIaWdoQ29udHJhc3QgPyBcIm5vbmVcIiA6IFwiMCA0cHggNHB4IHJnYmEoMCwgMCwgMCwgMC4xMilcIixcbiAgICAgICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCIsXG4gICAgICAgICAgICBjb2xvcjogKGlzSGlnaENvbnRyYXN0IHx8IGlzTGlnaHQpID8gXCJ3aGl0ZVwiIDogXCIjRDZENkQ2XCIsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IFwiNTAlXCIsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGlzTGlnaHQgPyBcIiNFNDJENDNcIiA6IFwiI2I4MDEyZFwiLFxuICAgICAgICAgICAgYm9yZGVyOiBgJHtpc0hpZ2hDb250cmFzdCA/IFwiMnB4XCIgOiBcIjFweFwifSBzb2xpZCAke2ZnQ29sb3J9YCxcbiAgICAgICAgICAgIFwiOmhvdmVyLCA6Zm9jdXMtdmlzaWJsZVwiOiB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogaXNMaWdodCA/IFwiI2M0MGEzMVwiIDogXCIjOGYwMTIxXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCI6Zm9jdXMtdmlzaWJsZVwiOiB7XG4gICAgICAgICAgICAgIG91dGxpbmU6IGA0cHggc29saWQgJHtmZ0NvbG9yfWAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7bWF0Y2gocmVjb3JkaW5nU3RhdGUsIHtcbiAgICAgICAgICAgIFwiaW5hY3RpdmVcIjogKCkgPT4gbnVsbCxcbiAgICAgICAgICAgIFwicGF1c2VkXCI6ICgpID0+IDxGaVBsYXkgY3NzPXt7IG1hcmdpbkxlZnQ6IDQgfX0gLz4sXG4gICAgICAgICAgICBcInJlY29yZGluZ1wiOiAoKSA9PiA8RmlQYXVzZSAvPixcbiAgICAgICAgICB9KX1cbiAgICAgICAgICB7c2hvd0F2YWlsYWJsZVNob3J0Y3V0cyAmJiAoXG4gICAgICAgICAgICA8ZGl2IGNzcz17eyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCByaWdodDogLTQsIGJvdHRvbTogLTQgfX0+XG4gICAgICAgICAgICAgIDxTaG9ydGN1dEtleXMgc2hvcnRjdXQ9e1NIT1JUQ1VUUy5yZWNvcmRpbmcuc3RhcnRQYXVzZVJlc3VtZS5zcGxpdChcIjtcIilbMF19IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvV2l0aFRvb2x0aXA+XG4gICAgICA8VGltZXIgaXNSZWNvcmRpbmc9e3JlY29yZGluZ1N0YXRlID09PSBcInJlY29yZGluZ1wifSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuXG50eXBlIFRpbWVyUHJvcHMgPSB7XG4gIGlzUmVjb3JkaW5nOiBib29sZWFuO1xufTtcblxuY29uc3QgVGltZXI6IFJlYWN0LkZDPFRpbWVyUHJvcHM+ID0gKHsgaXNSZWNvcmRpbmcgfSkgPT4ge1xuICBjb25zdCBbZm9ybWF0dGVkLCBzZXRGb3JtYXR0ZWRdID0gdXNlU3RhdGUoXCIwMDowMFwiKTtcbiAgY29uc3QgbWlsbGlzUGFzc2VkID0gdXNlUmVmKDApO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGxhc3RUaWNrID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCB0aWNrID0gKCkgPT4ge1xuICAgICAgY29uc3QgbmV3SW5zdGFudCA9IG5ldyBEYXRlKCk7XG4gICAgICBpZiAoaXNSZWNvcmRpbmcpIHtcbiAgICAgICAgbWlsbGlzUGFzc2VkLmN1cnJlbnQgKz0gbmV3SW5zdGFudC52YWx1ZU9mKCkgLSBsYXN0VGljay52YWx1ZU9mKCk7XG5cbiAgICAgICAgY29uc3QgbXMgPSBtaWxsaXNQYXNzZWQuY3VycmVudDtcbiAgICAgICAgbGV0IHNlZ21lbnRzID0gW1xuICAgICAgICAgIE1hdGguZmxvb3IobXMgLyAoNjAgKiA2MCAqIDEwMDApKSxcbiAgICAgICAgICBNYXRoLmZsb29yKG1zIC8gKDYwICogMTAwMCkpICUgNjAsXG4gICAgICAgICAgTWF0aC5mbG9vcihtcyAvIDEwMDApICUgNjAsXG4gICAgICAgIF07XG4gICAgICAgIGlmIChzZWdtZW50c1swXSA9PT0gMCkge1xuICAgICAgICAgIHNlZ21lbnRzID0gc2VnbWVudHMuc2xpY2UoMSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0Rm9ybWF0dGVkKHNlZ21lbnRzLm1hcCh1bml0ID0+ICh1bml0IDwgMTAgPyBcIjBcIiA6IFwiXCIpICsgdW5pdCkuam9pbihcIjpcIikpO1xuICAgICAgfVxuICAgICAgbGFzdFRpY2sgPSBuZXdJbnN0YW50O1xuICAgIH07XG4gICAgY29uc3QgY291bnRlcklkID0gc2V0SW50ZXJ2YWwodGljaywgMTAwKTtcbiAgICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChjb3VudGVySWQpO1xuICB9LCBbaXNSZWNvcmRpbmddKTtcblxuXG5cblxuICByZXR1cm4gPGRpdj57Zm9ybWF0dGVkfTwvZGl2Pjtcbn07XG4iXX0= */\"),\n          children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_shortcuts__WEBPACK_IMPORTED_MODULE_3__.ShortcutKeys, {\n            shortcut: _shortcuts__WEBPACK_IMPORTED_MODULE_3__.SHORTCUTS.recording.startPauseResume.split(\";\")[0]\n          })\n        })]\n      })\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Timer, {\n      isRecording: recordingState === \"recording\"\n    })]\n  });\n};\nconst Timer = _ref3 => {\n  let {\n    isRecording\n  } = _ref3;\n  const [formatted, setFormatted] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"00:00\");\n  const millisPassed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    let lastTick = new Date();\n    const tick = () => {\n      const newInstant = new Date();\n      if (isRecording) {\n        millisPassed.current += newInstant.valueOf() - lastTick.valueOf();\n        const ms = millisPassed.current;\n        let segments = [Math.floor(ms / (60 * 60 * 1000)), Math.floor(ms / (60 * 1000)) % 60, Math.floor(ms / 1000) % 60];\n        if (segments[0] === 0) {\n          segments = segments.slice(1);\n        }\n        setFormatted(segments.map(unit => (unit < 10 ? \"0\" : \"\") + unit).join(\":\"));\n      }\n      lastTick = newInstant;\n    };\n    const counterId = setInterval(tick, 100);\n    return () => clearInterval(counterId);\n  }, [isRecording]);\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"div\", {\n    children: formatted\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RlcHMvcmVjb3JkaW5nL2NvbnRyb2xzLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBWUE7QUFLQTtBQUpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBR0E7QUFPQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUFBO0FBQUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5jYXN0LXN0dWRpby8uL3NyYy9zdGVwcy9yZWNvcmRpbmcvY29udHJvbHMudHN4PzZjOWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgeyBXaXRoVG9vbHRpcCwgbWF0Y2gsIHVzZUNvbG9yU2NoZW1lIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcbmltcG9ydCB7IEZpUGF1c2UsIEZpUGxheSB9IGZyb20gXCJyZWFjdC1pY29ucy9maVwiO1xuXG5pbXBvcnQgeyBSZWNvcmRpbmdTdGF0ZSB9IGZyb20gXCIuXCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIFNob3J0Y3V0S2V5cywgdXNlU2hvcnRjdXQsIHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMgfSBmcm9tIFwiLi4vLi4vc2hvcnRjdXRzXCI7XG5pbXBvcnQgeyBDT0xPUlMgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuXG5cblxuXG50eXBlIFByb3BzID0ge1xuICByZWNvcmRpbmdTdGF0ZTogUmVjb3JkaW5nU3RhdGU7XG4gIHN0YXJ0UmVjb3JkaW5nOiAoKSA9PiB2b2lkO1xuICBwYXVzZVJlY29yZGluZzogKCkgPT4gdm9pZDtcbiAgcmVzdW1lUmVjb3JkaW5nOiAoKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGNvbnN0IFJlY29yZGluZ0NvbnRyb2xzOiBSZWFjdC5GQzxQcm9wcz4gPSAoe1xuICByZWNvcmRpbmdTdGF0ZSxcbiAgc3RhcnRSZWNvcmRpbmcsXG4gIHBhdXNlUmVjb3JkaW5nLFxuICByZXN1bWVSZWNvcmRpbmcsXG59KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgaXNMaWdodCA9IHVzZUNvbG9yU2NoZW1lKCkuc2NoZW1lID09PSBcImxpZ2h0XCI7XG4gIGNvbnN0IHsgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG4gIGNvbnN0IGZnQ29sb3IgPSBpc0xpZ2h0ID8gQ09MT1JTLm5ldXRyYWwwNSA6IENPTE9SUy5uZXV0cmFsOTA7XG5cbiAgY29uc3Qgc2hvd0F2YWlsYWJsZVNob3J0Y3V0cyA9IHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMoKTtcbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLnJlY29yZGluZy5zdGFydFBhdXNlUmVzdW1lLCAoKSA9PiB7XG4gICAgbWF0Y2gocmVjb3JkaW5nU3RhdGUsIHtcbiAgICAgIFwiaW5hY3RpdmVcIjogKCkgPT4gc3RhcnRSZWNvcmRpbmcoKSxcbiAgICAgIFwicGF1c2VkXCI6ICgpID0+IHJlc3VtZVJlY29yZGluZygpLFxuICAgICAgXCJyZWNvcmRpbmdcIjogKCkgPT4gcGF1c2VSZWNvcmRpbmcoKSxcbiAgICB9KTtcbiAgfSwge1xuICAgIGlnbm9yZUV2ZW50V2hlbjogZSA9PiBlLmNvZGUgPT09IFwiU3BhY2VcIiAmJiBlLnRhcmdldCBpbnN0YW5jZW9mIEhUTUxCdXR0b25FbGVtZW50LFxuICB9LCBbcmVjb3JkaW5nU3RhdGVdKTtcbiAgY29uc3QgbGFiZWwgPSBtYXRjaChyZWNvcmRpbmdTdGF0ZSwge1xuICAgIFwiaW5hY3RpdmVcIjogKCkgPT4gdChcInN0ZXBzLnJlY29yZC5yZWNvcmQtYnV0dG9uLXRpdGxlXCIpLFxuICAgIFwicGF1c2VkXCI6ICgpID0+IHQoXCJzdGVwcy5yZWNvcmQucmVzdW1lLWJ1dHRvbi10aXRsZVwiKSxcbiAgICBcInJlY29yZGluZ1wiOiAoKSA9PiB0KFwic3RlcHMucmVjb3JkLnBhdXNlLWJ1dHRvbi10aXRsZVwiKSxcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgbWFyZ2luOiBcIjAgYXV0b1wiLFxuICAgICAgd2lkdGg6IDE4MCxcbiAgICAgIGhlaWdodDogODUsXG4gICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgIGdhcDogMzIsXG4gICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGlzTGlnaHQgPyBDT0xPUlMubmV1dHJhbDcwIDogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAke2lzTGlnaHQgPyBDT0xPUlMubmV1dHJhbDUwIDogQ09MT1JTLm5ldXRyYWwyNX1gLFxuICAgICAgYm94U2hhZG93OiBpc0hpZ2hDb250cmFzdCA/IFwibm9uZVwiIDogXCIwIDRweCAxNnB4IHJnYmEoMCwgMCwgMCwgMC4yKVwiLFxuICAgICAgYm9yZGVyUmFkaXVzOiAxMixcbiAgICAgIGNvbG9yOiBmZ0NvbG9yLFxuICAgICAgLi4uaXNIaWdoQ29udHJhc3QgJiYge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgICAgIGJvcmRlcjogYDJweCBzb2xpZCAke0NPTE9SUy5uZXV0cmFsMjV9YCxcbiAgICAgIH0sXG4gICAgfX0+XG4gICAgICA8V2l0aFRvb2x0aXAgdG9vbHRpcD17bGFiZWx9PlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgb25DbGljaz17bWF0Y2gocmVjb3JkaW5nU3RhdGUsIHtcbiAgICAgICAgICAgIFwiaW5hY3RpdmVcIjogKCkgPT4gc3RhcnRSZWNvcmRpbmcsXG4gICAgICAgICAgICBcInBhdXNlZFwiOiAoKSA9PiByZXN1bWVSZWNvcmRpbmcsXG4gICAgICAgICAgICBcInJlY29yZGluZ1wiOiAoKSA9PiBwYXVzZVJlY29yZGluZyxcbiAgICAgICAgICB9KX1cbiAgICAgICAgICBhcmlhLWxhYmVsPXtsYWJlbH1cbiAgICAgICAgICBhcmlhLWxpdmU9XCJwb2xpdGVcIlxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgICAgIHdpZHRoOiA1MCxcbiAgICAgICAgICAgIGhlaWdodDogNTAsXG4gICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGZvbnRTaXplOiAyOCxcbiAgICAgICAgICAgIHBhZGRpbmc6IDAsXG5cbiAgICAgICAgICAgIGJveFNoYWRvdzogaXNIaWdoQ29udHJhc3QgPyBcIm5vbmVcIiA6IFwiMCA0cHggNHB4IHJnYmEoMCwgMCwgMCwgMC4xMilcIixcbiAgICAgICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCIsXG4gICAgICAgICAgICBjb2xvcjogKGlzSGlnaENvbnRyYXN0IHx8IGlzTGlnaHQpID8gXCJ3aGl0ZVwiIDogXCIjRDZENkQ2XCIsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IFwiNTAlXCIsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGlzTGlnaHQgPyBcIiNFNDJENDNcIiA6IFwiI2I4MDEyZFwiLFxuICAgICAgICAgICAgYm9yZGVyOiBgJHtpc0hpZ2hDb250cmFzdCA/IFwiMnB4XCIgOiBcIjFweFwifSBzb2xpZCAke2ZnQ29sb3J9YCxcbiAgICAgICAgICAgIFwiOmhvdmVyLCA6Zm9jdXMtdmlzaWJsZVwiOiB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogaXNMaWdodCA/IFwiI2M0MGEzMVwiIDogXCIjOGYwMTIxXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCI6Zm9jdXMtdmlzaWJsZVwiOiB7XG4gICAgICAgICAgICAgIG91dGxpbmU6IGA0cHggc29saWQgJHtmZ0NvbG9yfWAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7bWF0Y2gocmVjb3JkaW5nU3RhdGUsIHtcbiAgICAgICAgICAgIFwiaW5hY3RpdmVcIjogKCkgPT4gbnVsbCxcbiAgICAgICAgICAgIFwicGF1c2VkXCI6ICgpID0+IDxGaVBsYXkgY3NzPXt7IG1hcmdpbkxlZnQ6IDQgfX0gLz4sXG4gICAgICAgICAgICBcInJlY29yZGluZ1wiOiAoKSA9PiA8RmlQYXVzZSAvPixcbiAgICAgICAgICB9KX1cbiAgICAgICAgICB7c2hvd0F2YWlsYWJsZVNob3J0Y3V0cyAmJiAoXG4gICAgICAgICAgICA8ZGl2IGNzcz17eyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCByaWdodDogLTQsIGJvdHRvbTogLTQgfX0+XG4gICAgICAgICAgICAgIDxTaG9ydGN1dEtleXMgc2hvcnRjdXQ9e1NIT1JUQ1VUUy5yZWNvcmRpbmcuc3RhcnRQYXVzZVJlc3VtZS5zcGxpdChcIjtcIilbMF19IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvV2l0aFRvb2x0aXA+XG4gICAgICA8VGltZXIgaXNSZWNvcmRpbmc9e3JlY29yZGluZ1N0YXRlID09PSBcInJlY29yZGluZ1wifSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuXG50eXBlIFRpbWVyUHJvcHMgPSB7XG4gIGlzUmVjb3JkaW5nOiBib29sZWFuO1xufTtcblxuY29uc3QgVGltZXI6IFJlYWN0LkZDPFRpbWVyUHJvcHM+ID0gKHsgaXNSZWNvcmRpbmcgfSkgPT4ge1xuICBjb25zdCBbZm9ybWF0dGVkLCBzZXRGb3JtYXR0ZWRdID0gdXNlU3RhdGUoXCIwMDowMFwiKTtcbiAgY29uc3QgbWlsbGlzUGFzc2VkID0gdXNlUmVmKDApO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGxhc3RUaWNrID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCB0aWNrID0gKCkgPT4ge1xuICAgICAgY29uc3QgbmV3SW5zdGFudCA9IG5ldyBEYXRlKCk7XG4gICAgICBpZiAoaXNSZWNvcmRpbmcpIHtcbiAgICAgICAgbWlsbGlzUGFzc2VkLmN1cnJlbnQgKz0gbmV3SW5zdGFudC52YWx1ZU9mKCkgLSBsYXN0VGljay52YWx1ZU9mKCk7XG5cbiAgICAgICAgY29uc3QgbXMgPSBtaWxsaXNQYXNzZWQuY3VycmVudDtcbiAgICAgICAgbGV0IHNlZ21lbnRzID0gW1xuICAgICAgICAgIE1hdGguZmxvb3IobXMgLyAoNjAgKiA2MCAqIDEwMDApKSxcbiAgICAgICAgICBNYXRoLmZsb29yKG1zIC8gKDYwICogMTAwMCkpICUgNjAsXG4gICAgICAgICAgTWF0aC5mbG9vcihtcyAvIDEwMDApICUgNjAsXG4gICAgICAgIF07XG4gICAgICAgIGlmIChzZWdtZW50c1swXSA9PT0gMCkge1xuICAgICAgICAgIHNlZ21lbnRzID0gc2VnbWVudHMuc2xpY2UoMSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0Rm9ybWF0dGVkKHNlZ21lbnRzLm1hcCh1bml0ID0+ICh1bml0IDwgMTAgPyBcIjBcIiA6IFwiXCIpICsgdW5pdCkuam9pbihcIjpcIikpO1xuICAgICAgfVxuICAgICAgbGFzdFRpY2sgPSBuZXdJbnN0YW50O1xuICAgIH07XG4gICAgY29uc3QgY291bnRlcklkID0gc2V0SW50ZXJ2YWwodGljaywgMTAwKTtcbiAgICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChjb3VudGVySWQpO1xuICB9LCBbaXNSZWNvcmRpbmddKTtcblxuXG5cblxuICByZXR1cm4gPGRpdj57Zm9ybWF0dGVkfTwvZGl2Pjtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/steps/recording/controls.tsx\n");

/***/ }),

/***/ "./src/steps/recording/index.tsx":
/*!***************************************!*\
  !*** ./src/steps/recording/index.tsx ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Recording: function() { return /* binding */ Recording; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_beforeunload__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! react-beforeunload */ \"./node_modules/react-beforeunload/dist/react-beforeunload.js\");\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var _studio_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../studio-state */ \"./src/studio-state.tsx\");\n/* harmony import */ var _opencast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../opencast */ \"./src/opencast.tsx\");\n/* harmony import */ var _capturer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../capturer */ \"./src/capturer.tsx\");\n/* harmony import */ var _ui_ErrorBox__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../ui/ErrorBox */ \"./src/ui/ErrorBox.tsx\");\n/* harmony import */ var _elements__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../elements */ \"./src/steps/elements.tsx\");\n/* harmony import */ var _ui_VideoBox__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../ui/VideoBox */ \"./src/ui/VideoBox.tsx\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _controls__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./controls */ \"./src/steps/recording/controls.tsx\");\n/* harmony import */ var _recorder__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./recorder */ \"./src/steps/recording/recorder.tsx\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../settings */ \"./src/settings.tsx\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst addRecordOnStop = (dispatch, deviceType) => {\n  return _ref => {\n    let {\n      media,\n      url,\n      mimeType,\n      dimensions\n    } = _ref;\n    dispatch({\n      type: \"ADD_RECORDING\",\n      recording: {\n        deviceType,\n        media,\n        url,\n        mimeType,\n        dimensions\n      }\n    });\n  };\n};\nconst mixAudioIntoVideo = (audioStream, videoStream) => {\n  if (!audioStream?.getAudioTracks().length) {\n    return videoStream;\n  }\n  return new MediaStream([...videoStream.getVideoTracks(), ...audioStream.getAudioTracks()]);\n};\nvar _ref3 =  false ? 0 : {\n  name: \"rw06kn-Recording\",\n  styles: \"position:absolute;bottom:32px;width:100%;label:Recording;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst Recording = _ref2 => {\n  let {\n    goToNextStep,\n    goToPrevStep\n  } = _ref2;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_0__.useTranslation)();\n  const recordingDispatch = (0,_studio_state__WEBPACK_IMPORTED_MODULE_2__.useDispatch)();\n  const opencast = (0,_opencast__WEBPACK_IMPORTED_MODULE_3__.useOpencast)();\n  const dispatch = (0,_studio_state__WEBPACK_IMPORTED_MODULE_2__.useDispatch)();\n  const settings = (0,_settings__WEBPACK_IMPORTED_MODULE_11__.useSettings)();\n  const state = (0,_studio_state__WEBPACK_IMPORTED_MODULE_2__.useStudioState)();\n  const {\n    displayStream,\n    userStream,\n    displayUnexpectedEnd,\n    userUnexpectedEnd,\n    audioUnexpectedEnd\n  } = state;\n  const [recordingState, setRecordingState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"inactive\");\n  const desktopRecorder = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n  const videoRecorder = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n  const canRecord = (displayStream || userStream) && !userUnexpectedEnd && !displayUnexpectedEnd && !audioUnexpectedEnd;\n  const startRecording = () => {\n    // In theory, we should never have recordings at this point. But just to be\n    // sure, in case of a bug elsewhere, we clear the recordings here.\n    dispatch({\n      type: \"CLEAR_RECORDINGS\"\n    });\n    if (displayStream) {\n      const onStop = addRecordOnStop(dispatch, \"desktop\");\n      const stream = mixAudioIntoVideo(state.audioStream, displayStream);\n      desktopRecorder.current = new _recorder__WEBPACK_IMPORTED_MODULE_10__[\"default\"](stream, settings.recording, onStop);\n      desktopRecorder.current.start();\n    }\n    if (userStream) {\n      const onStop = addRecordOnStop(dispatch, \"video\");\n      const stream = mixAudioIntoVideo(state.audioStream, userStream);\n      videoRecorder.current = new _recorder__WEBPACK_IMPORTED_MODULE_10__[\"default\"](stream, settings.recording, onStop);\n      videoRecorder.current.start();\n    }\n    setRecordingState(\"recording\");\n    dispatch({\n      type: \"START_RECORDING\"\n    });\n  };\n  const stopRecording = premature => {\n    desktopRecorder.current?.stop();\n    videoRecorder.current?.stop();\n    dispatch({\n      type: premature ? \"STOP_RECORDING_PREMATURELY\" : \"STOP_RECORDING\"\n    });\n    opencast.refreshConnection();\n    (0,_capturer__WEBPACK_IMPORTED_MODULE_4__.stopCapture)(state, recordingDispatch);\n    goToNextStep();\n  };\n  const pauseRecording = () => {\n    setRecordingState(\"paused\");\n    desktopRecorder.current?.pause();\n    videoRecorder.current?.pause();\n  };\n  const resumeRecording = () => {\n    setRecordingState(\"recording\");\n    desktopRecorder.current?.resume();\n    videoRecorder.current?.resume();\n  };\n\n  // Detect if a stream ended unexpectedly. In that case we want to stop the\n  // recording completely.\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    const unexpectedEnd = userUnexpectedEnd || displayUnexpectedEnd || audioUnexpectedEnd;\n    if (unexpectedEnd && (recordingState === \"recording\" || recordingState === \"paused\")) {\n      stopRecording(true);\n    }\n  });\n  const paused = recordingState === \"paused\";\n  const previews = [];\n  if (displayStream || displayUnexpectedEnd) {\n    previews.push({\n      body: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(StreamPreview, {\n        stream: displayStream,\n        paused: paused\n      }),\n      dimensions: () => (0,_util__WEBPACK_IMPORTED_MODULE_8__.dimensionsOf)(displayStream),\n      autoSize: !displayStream\n    });\n  }\n  if (userStream || userUnexpectedEnd) {\n    previews.push({\n      body: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(StreamPreview, {\n        stream: userStream,\n        paused: paused\n      }),\n      dimensions: () => (0,_util__WEBPACK_IMPORTED_MODULE_8__.dimensionsOf)(userStream),\n      autoSize: !userStream\n    });\n  }\n  (0,react_beforeunload__WEBPACK_IMPORTED_MODULE_14__.useBeforeunload)(event => {\n    if (recordingState !== \"inactive\") {\n      event.preventDefault();\n    }\n  });\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxs)(_elements__WEBPACK_IMPORTED_MODULE_6__.StepContainer, {\n    title: t(\"steps.record.label\"),\n    prevButton: {\n      onClick: goToPrevStep,\n      disabled: recordingState !== \"inactive\"\n    },\n    nextButton: {\n      onClick: () => stopRecording(false),\n      disabled: recordingState !== \"paused\",\n      label: t(\"steps.record.stop-button-title\")\n    },\n    children: [audioUnexpectedEnd && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(_ui_ErrorBox__WEBPACK_IMPORTED_MODULE_5__.ErrorBox, {\n      body: t(\"error-lost-audio-stream\")\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(_ui_VideoBox__WEBPACK_IMPORTED_MODULE_7__.VideoBox, {\n      gap: 20,\n      children: previews\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(\"div\", {\n      css: _ref3,\n      children: canRecord && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(_controls__WEBPACK_IMPORTED_MODULE_9__.RecordingControls, {\n        startRecording,\n        pauseRecording,\n        resumeRecording,\n        recordingState\n      })\n    })]\n  });\n};\nvar _ref5 =  false ? 0 : {\n  name: \"1d5j0au-StreamPreview\",\n  styles: \"margin:0;label:StreamPreview;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref6 =  false ? 0 : {\n  name: \"1dvfjpp-StreamPreview\",\n  styles: \"outline:none;width:100%;height:100%;background:transparent;label:StreamPreview;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst StreamPreview = _ref4 => {\n  let {\n    stream,\n    paused\n  } = _ref4;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_0__.useTranslation)();\n  const resizeVideoBox = (0,_ui_VideoBox__WEBPACK_IMPORTED_MODULE_7__.useVideoBoxResize)();\n  const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_12__.useColorScheme)();\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    const v = videoRef.current;\n    if (v && stream) {\n      if (!v.srcObject) {\n        v.srcObject = stream;\n      }\n      v.addEventListener(\"resize\", resizeVideoBox);\n      if (paused) {\n        v.pause();\n      } else {\n        v.play();\n      }\n      return () => v.removeEventListener(\"resize\", resizeVideoBox);\n    }\n  });\n  if (!stream) {\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(_ui_ErrorBox__WEBPACK_IMPORTED_MODULE_5__.ErrorBox, {\n      css: _ref5,\n      body: t(\"error-lost-video-stream\")\n    });\n  }\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxs)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_15__.css)({\n      position: \"relative\",\n      boxShadow: isHighContrast ? \"none\" : \"0 2px 12px rgba(0, 0, 0, 0.35)\",\n      overflow: \"hidden\",\n      height: \"100%\"\n    },  false ? 0 : \";label:StreamPreview;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    children: [paused && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(PauseOverlay, {}), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      muted: true,\n      playsInline: true,\n      tabIndex: -1,\n      css: _ref6\n    })]\n  });\n};\nvar _ref7 =  false ? 0 : {\n  name: \"gbp6xc-PauseOverlay\",\n  styles: \"position:absolute;width:100%;height:100%;background-color:rgba(50, 50, 50, 0.7);label:PauseOverlay;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref8 =  false ? 0 : {\n  name: \"6v288z-PauseOverlay\",\n  styles: \"font-size:26px;label:PauseOverlay;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst PauseOverlay = () => {\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_0__.useTranslation)();\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(\"div\", {\n    css: _ref7,\n    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxs)(\"div\", {\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_15__.css)({\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        color: \"white\",\n        gap: 8,\n        fontSize: 20,\n        marginTop: 32,\n        textShadow: \"0 0 12px rgba(0, 0, 0, 0.6)\",\n        animation: `2s ease-in-out infinite none ${(0,_emotion_react__WEBPACK_IMPORTED_MODULE_15__.keyframes)({\n          \"0%\": {\n            opacity: 1\n          },\n          \"50%\": {\n            opacity: 0.7\n          },\n          \"100%\": {\n            opacity: 1\n          }\n        })}`\n      },  false ? 0 : \";label:PauseOverlay;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n      children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_16__.FiPauseCircle, {\n        css: _ref8\n      }), t(\"steps.record.is-paused\")]\n    })\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/steps/recording/index.tsx\n");

/***/ }),

/***/ "./src/steps/recording/recorder.tsx":
/*!******************************************!*\
  !*** ./src/steps/recording/recorder.tsx ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Recorder; }\n/* harmony export */ });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util */ \"./src/util/index.tsx\");\n\nclass Recorder {\n  #recorder;\n  #data = [];\n  #dimensions;\n  onStop;\n  constructor(stream, settings, onStop) {\n    // Figure out MIME type.\n    let mimeType;\n    if (\"isTypeSupported\" in MediaRecorder) {\n      mimeType = (settings?.mimes || []).find(mime => MediaRecorder.isTypeSupported(mime));\n      if (mimeType) {\n        console.debug(\"using first supported MIME type from settings: \", mimeType);\n      } else if (settings?.mimes) {\n        console.debug(\"None of the MIME types specified in settings are supported by \" + \"this `MediaRecorder`\");\n      }\n    } else if (settings?.mimes) {\n      console.debug(\"MIME types were specified, but `MediaRecorder.isTypeSupported` is not \" + \"supported by your browser\");\n    }\n    this.#reset();\n    this.#dimensions = (0,_util__WEBPACK_IMPORTED_MODULE_0__.dimensionsOf)(stream);\n    this.onStop = onStop;\n    const videoBitsPerSecond = settings?.videoBitrate;\n    this.#recorder = new MediaRecorder(stream, {\n      mimeType,\n      videoBitsPerSecond\n    });\n    this.#recorder.ondataavailable = this.#onDataAvailable;\n    this.#recorder.onstop = this.#onStop;\n  }\n  #reset = () => {\n    this.#data = [];\n  };\n  #onDataAvailable = event => {\n    if (event.data.size > 0) {\n      this.#data.push(event.data);\n    } else {\n      console.log(\"Recording data has size 0!\", event);\n    }\n  };\n  #onStop = _event => {\n    const mimeType = this.#data[0]?.type || this.#recorder.mimeType;\n    const media = new Blob(this.#data, {\n      type: mimeType\n    });\n    const url = URL.createObjectURL(media);\n    this.#reset();\n    this.onStop?.({\n      url,\n      media,\n      mimeType,\n      dimensions: this.#dimensions\n    });\n  };\n  start() {\n    this.#recorder.start();\n  }\n  pause() {\n    this.#recorder.pause();\n  }\n  resume() {\n    this.#recorder.resume();\n  }\n  stop() {\n    this.#recorder.stop();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RlcHMvcmVjb3JkaW5nL3JlY29yZGVyLnRzeCIsIm1hcHBpbmdzIjoiOzs7OztBQUNBO0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmNhc3Qtc3R1ZGlvLy4vc3JjL3N0ZXBzL3JlY29yZGluZy9yZWNvcmRlci50c3g/NDkyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXR0aW5ncyB9IGZyb20gXCIuLi8uLi9zZXR0aW5nc1wiO1xuaW1wb3J0IHsgZGltZW5zaW9uc09mIH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcblxuXG5leHBvcnQgdHlwZSBPblN0b3BDYWxsYmFjayA9IChhcmdzOiB7XG4gIHVybDogc3RyaW5nO1xuICBtZWRpYTogQmxvYjtcbiAgbWltZVR5cGU6IHN0cmluZztcbiAgZGltZW5zaW9uczogW251bWJlciwgbnVtYmVyXSB8IG51bGw7XG59KSA9PiB2b2lkO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWNvcmRlciB7XG4gICNyZWNvcmRlcjogTWVkaWFSZWNvcmRlcjtcbiAgI2RhdGE6IEJsb2JbXSA9IFtdO1xuICAjZGltZW5zaW9uczogW251bWJlciwgbnVtYmVyXSB8IG51bGw7XG5cbiAgb25TdG9wOiBPblN0b3BDYWxsYmFjaztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBzdHJlYW06IE1lZGlhU3RyZWFtLFxuICAgIHNldHRpbmdzOiBTZXR0aW5nc1tcInJlY29yZGluZ1wiXSxcbiAgICBvblN0b3A6IE9uU3RvcENhbGxiYWNrLFxuICApIHtcbiAgICAvLyBGaWd1cmUgb3V0IE1JTUUgdHlwZS5cbiAgICBsZXQgbWltZVR5cGU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBpZiAoXCJpc1R5cGVTdXBwb3J0ZWRcIiBpbiBNZWRpYVJlY29yZGVyKSB7XG4gICAgICBtaW1lVHlwZSA9IChzZXR0aW5ncz8ubWltZXMgfHwgW10pXG4gICAgICAgIC5maW5kKG1pbWUgPT4gTWVkaWFSZWNvcmRlci5pc1R5cGVTdXBwb3J0ZWQobWltZSkpO1xuICAgICAgaWYgKG1pbWVUeXBlKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJ1c2luZyBmaXJzdCBzdXBwb3J0ZWQgTUlNRSB0eXBlIGZyb20gc2V0dGluZ3M6IFwiLCBtaW1lVHlwZSk7XG4gICAgICB9IGVsc2UgaWYgKHNldHRpbmdzPy5taW1lcykge1xuICAgICAgICBjb25zb2xlLmRlYnVnKFwiTm9uZSBvZiB0aGUgTUlNRSB0eXBlcyBzcGVjaWZpZWQgaW4gc2V0dGluZ3MgYXJlIHN1cHBvcnRlZCBieSBcIlxuICAgICAgICAgICsgXCJ0aGlzIGBNZWRpYVJlY29yZGVyYFwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNldHRpbmdzPy5taW1lcykge1xuICAgICAgY29uc29sZS5kZWJ1ZyhcIk1JTUUgdHlwZXMgd2VyZSBzcGVjaWZpZWQsIGJ1dCBgTWVkaWFSZWNvcmRlci5pc1R5cGVTdXBwb3J0ZWRgIGlzIG5vdCBcIlxuICAgICAgICArIFwic3VwcG9ydGVkIGJ5IHlvdXIgYnJvd3NlclwiKTtcbiAgICB9XG5cblxuICAgIHRoaXMuI3Jlc2V0KCk7XG5cbiAgICB0aGlzLiNkaW1lbnNpb25zID0gZGltZW5zaW9uc09mKHN0cmVhbSk7XG4gICAgdGhpcy5vblN0b3AgPSBvblN0b3A7XG5cbiAgICBjb25zdCB2aWRlb0JpdHNQZXJTZWNvbmQgPSBzZXR0aW5ncz8udmlkZW9CaXRyYXRlO1xuICAgIHRoaXMuI3JlY29yZGVyID0gbmV3IE1lZGlhUmVjb3JkZXIoc3RyZWFtLCB7IG1pbWVUeXBlLCB2aWRlb0JpdHNQZXJTZWNvbmQgfSk7XG4gICAgdGhpcy4jcmVjb3JkZXIub25kYXRhYXZhaWxhYmxlID0gdGhpcy4jb25EYXRhQXZhaWxhYmxlO1xuICAgIHRoaXMuI3JlY29yZGVyLm9uc3RvcCA9IHRoaXMuI29uU3RvcDtcbiAgfVxuXG4gICNyZXNldCA9ICgpID0+IHtcbiAgICB0aGlzLiNkYXRhID0gW107XG4gIH07XG5cbiAgI29uRGF0YUF2YWlsYWJsZSA9IChldmVudDogQmxvYkV2ZW50KSA9PiB7XG4gICAgaWYgKGV2ZW50LmRhdGEuc2l6ZSA+IDApIHtcbiAgICAgIHRoaXMuI2RhdGEucHVzaChldmVudC5kYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coXCJSZWNvcmRpbmcgZGF0YSBoYXMgc2l6ZSAwIVwiLCBldmVudCk7XG4gICAgfVxuICB9O1xuXG4gICNvblN0b3AgPSAoX2V2ZW50OiBFdmVudCkgPT4ge1xuICAgIGNvbnN0IG1pbWVUeXBlID0gdGhpcy4jZGF0YVswXT8udHlwZSB8fCB0aGlzLiNyZWNvcmRlci5taW1lVHlwZTtcbiAgICBjb25zdCBtZWRpYSA9IG5ldyBCbG9iKHRoaXMuI2RhdGEsIHsgdHlwZTogbWltZVR5cGUgfSk7XG4gICAgY29uc3QgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChtZWRpYSk7XG5cbiAgICB0aGlzLiNyZXNldCgpO1xuXG4gICAgdGhpcy5vblN0b3A/Lih7IHVybCwgbWVkaWEsIG1pbWVUeXBlLCBkaW1lbnNpb25zOiB0aGlzLiNkaW1lbnNpb25zIH0pO1xuICB9O1xuXG4gIHN0YXJ0KCkge1xuICAgIHRoaXMuI3JlY29yZGVyLnN0YXJ0KCk7XG4gIH1cblxuICBwYXVzZSgpIHtcbiAgICB0aGlzLiNyZWNvcmRlci5wYXVzZSgpO1xuICB9XG5cbiAgcmVzdW1lKCkge1xuICAgIHRoaXMuI3JlY29yZGVyLnJlc3VtZSgpO1xuICB9XG5cbiAgc3RvcCgpIHtcbiAgICB0aGlzLiNyZWNvcmRlci5zdG9wKCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/steps/recording/recorder.tsx\n");

/***/ }),

/***/ "./src/steps/review/control-box.tsx":
/*!******************************************!*\
  !*** ./src/steps/review/control-box.tsx ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ControlBox: function() { return /* binding */ ControlBox; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var _studio_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../studio-state */ \"./src/studio-state.tsx\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../settings */ \"./src/settings.tsx\");\n/* harmony import */ var _cut_here_icon_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cut-here-icon.svg */ \"./src/steps/review/cut-here-icon.svg\");\n/* harmony import */ var _cut_marker_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cut-marker.svg */ \"./src/steps/review/cut-marker.svg\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util */ \"./src/util/index.tsx\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! . */ \"./src/steps/review/index.tsx\");\n/* harmony import */ var _shortcuts__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../shortcuts */ \"./src/shortcuts.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst ControlBox = _ref => {\n  let {\n    previewController,\n    currentTime\n  } = _ref;\n  const {\n    i18n\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const duration = previewController.current?.duration;\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.useColorScheme)();\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n      backgroundColor: _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.neutral05,\n      borderRadius: 8,\n      padding: 16,\n      boxShadow: isHighContrast ? \"none\" : \"0 4px 4px var(--shadow-color)\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: 12\n    },  false ? 0 : \";label:ControlBox;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(Controls, {\n      previewController,\n      currentTime\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n        textAlign: \"center\",\n        color: _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.neutral70\n      },  false ? 0 : \";label:ControlBox;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n      children: [formatTime(currentTime, duration, i18n.language), \"/\", formatTime(duration, duration, i18n.language)]\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(Scrubber, {\n      previewController,\n      currentTime\n    })]\n  });\n};\nconst formatTime = (seconds, totalDuration, lang) => {\n  const MINUTE = 60;\n  const HOUR = 60 * MINUTE;\n  if (seconds === undefined) {\n    return \"--:--\";\n  }\n  const secondsPart = seconds % 60;\n  const minutesPart = Math.floor(seconds / MINUTE) % 60;\n  const hoursPart = Math.floor(seconds / HOUR);\n  const secondsFormatted = secondsPart.toLocaleString(lang, {\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 1\n  });\n  const lowerPart = `${minutesPart <= 9 ? \"0\" : \"\"}${minutesPart}` + `:${secondsPart <= 9 ? \"0\" : \"\"}${secondsFormatted}`;\n  return totalDuration && totalDuration >= HOUR ? `${hoursPart}:${lowerPart}` : lowerPart;\n};\nvar _ref3 =  false ? 0 : {\n  name: \"3y8t19-Scrubber\",\n  styles: \"padding:4px;label:Scrubber;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst Scrubber = _ref2 => {\n  let {\n    previewController,\n    currentTime\n  } = _ref2;\n  const duration = previewController.current?.duration || Infinity;\n  const settings = (0,_settings__WEBPACK_IMPORTED_MODULE_4__.useSettings)();\n  const dispatch = (0,_studio_state__WEBPACK_IMPORTED_MODULE_3__.useDispatch)();\n  const {\n    start,\n    end\n  } = (0,_studio_state__WEBPACK_IMPORTED_MODULE_3__.useStudioState)();\n  const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.useColorScheme)();\n  const setTime = mouseEvent => {\n    const rect = mouseEvent.currentTarget.getBoundingClientRect();\n    const x = mouseEvent.clientX - rect.x;\n    let progress = x / rect.width;\n    if (progress < 0) {\n      progress = 0;\n    } else if (progress > 1) {\n      progress = 1;\n    }\n    if (previewController.current) {\n      previewController.current.currentTime = progress * duration;\n    }\n  };\n  const cutStyle = {\n    position: \"absolute\",\n    backgroundColor: _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.danger1,\n    height: \"var(--scrubber-height)\",\n    borderRadius: \"var(--scrubber-border-radius)\",\n    boxSizing: \"content-box\",\n    background: \"repeating-linear-gradient(45deg,\" + `${_util__WEBPACK_IMPORTED_MODULE_7__.COLORS.danger2}, ${_util__WEBPACK_IMPORTED_MODULE_7__.COLORS.danger2} 4px,` + `${_util__WEBPACK_IMPORTED_MODULE_7__.COLORS.danger1} 4px, ${_util__WEBPACK_IMPORTED_MODULE_7__.COLORS.danger1} 8px)`\n  };\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n    css: _ref3,\n    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n      ref: ref,\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n        \"--scrubber-border-radius\": \"3px\",\n        \"--scrubber-height\": \"6px\",\n        \"@media not (any-pointer: fine)\": {\n          \"--scrubber-border-radius\": \"6px\",\n          \"--scrubber-height\": \"12px\"\n        },\n        position: \"relative\",\n        backgroundColor: _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.accent4,\n        width: \"100%\",\n        height: \"var(--scrubber-height)\",\n        borderRadius: \"var(--scrubber-border-radius)\"\n      },  false ? 0 : \";label:Scrubber;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n      children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n        onClick: e => setTime(e),\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n          position: \"absolute\",\n          width: \"100%\",\n          cursor: \"pointer\",\n          zIndex: 5,\n          top: -6,\n          bottom: -6\n        },  false ? 0 : \";label:Scrubber;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(Draggable, {\n          scrubberRef: ref,\n          previewController: previewController,\n          initialTime: currentTime,\n          onDrag: time => (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(previewController.current).currentTime = time,\n          children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n            css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n              width: 16,\n              height: 16,\n              \"@media not (any-pointer: fine)\": {\n                width: 24,\n                height: 24\n              },\n              borderRadius: \"50%\",\n              backgroundColor: _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.neutral05,\n              border: `1px solid ${_util__WEBPACK_IMPORTED_MODULE_7__.COLORS.neutral40}`\n            },  false ? 0 : \";label:Scrubber;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n          })\n        })\n      }), start != null && start > 0 && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n          left: 0,\n          borderRight: \"2px solid black\",\n          width: `${start / duration * 100}%`,\n          ...cutStyle\n        },  false ? 0 : \";label:Scrubber;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n      }), end != null && end < duration && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n          right: 0,\n          borderLeft: \"2px solid black\",\n          width: `${(duration - end) / duration * 100}%`,\n          ...cutStyle,\n          backgroundPosition: \"right\",\n          backgroundSize: \"100vw\"\n        },  false ? 0 : \";label:Scrubber;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n      }), settings.review?.disableCutting || (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n        children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(Draggable, {\n          scrubberRef: ref,\n          previewController: previewController,\n          initialTime: start ?? 0,\n          clamp: time => Math.min(time, end ?? duration),\n          onDrag: time => dispatch({\n            type: \"UPDATE_START\",\n            time\n          }),\n          children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(CutMarker, {\n            side: \"left\",\n            isHighContrast: isHighContrast\n          })\n        }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(Draggable, {\n          scrubberRef: ref,\n          previewController: previewController,\n          initialTime: end ?? duration,\n          clamp: time => Math.max(time, start ?? 0),\n          onDrag: time => dispatch({\n            type: \"UPDATE_END\",\n            time\n          }),\n          children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(CutMarker, {\n            side: \"right\",\n            isHighContrast: isHighContrast\n          })\n        })]\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n          position: \"absolute\",\n          left: 0,\n          width: `${currentTime / duration * 100}%`,\n          backdropFilter: \"brightness(0.75)\",\n          height: \"var(--scrubber-height)\",\n          borderRadius: \"var(--scrubber-border-radius)\"\n        },  false ? 0 : \";label:Scrubber;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n      })]\n    })\n  });\n};\nconst CutMarker = _ref4 => {\n  let {\n    side,\n    isHighContrast\n  } = _ref4;\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n      width: 14,\n      height: 20,\n      \"@media not (any-pointer: fine)\": {\n        height: 24\n      },\n      backgroundColor: _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.neutral05,\n      color: _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.neutral70,\n      border: `1px solid ${_util__WEBPACK_IMPORTED_MODULE_7__.COLORS.neutral40}`,\n      borderRadius: 4,\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      boxShadow: isHighContrast ? \"none\" : \"0 1px 2px var(--shadow-color)\"\n    },  false ? 0 : \";label:CutMarker;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_cut_marker_svg__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n        transform: `scale(1.2) ${side == \"right\" ? \"scaleX(-1)\" : \"\"}`\n      },  false ? 0 : \";label:CutMarker;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n    })\n  });\n};\n/**\n * Makes the given `children` draggable, letting the user adjust its x position\n * inside the scrubber.\n */\nconst Draggable = _ref5 => {\n  let {\n    previewController,\n    scrubberRef,\n    initialTime,\n    onDrag,\n    clamp = t => t,\n    children\n  } = _ref5;\n  const duration = previewController.current?.duration || Infinity;\n  const initialPos = initialTime / duration;\n  const pos = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialPos);\n  const scrubberRect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const isDragging = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const onMouseUp = () => {\n      if (isDragging.current) {\n        isDragging.current = false;\n        onDrag?.(pos.current * duration);\n\n        // Reset the element style so that the `left` value from the class CSS\n        // can take over again.\n        (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(ref.current).style.left = \"\";\n      }\n    };\n    const onMouseMove = e => {\n      onMove(e.pageX);\n    };\n    const onMove = pageX => {\n      if (isDragging.current) {\n        const rect = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(scrubberRect.current);\n        const percentage = Math.min(1.0, Math.max(0.0, (pageX - rect.left) / rect.width));\n        pos.current = clamp(duration * percentage) / duration;\n        onDrag?.(pos.current * duration);\n\n        // We set the left value here directly instead of waiting for the React\n        // state change to trickle through. This actually leads to less input\n        // delay and a smoother dragging.\n        (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(ref.current).style.left = `${pos.current * 100}%`;\n      }\n    };\n    const onTouchMove = e => {\n      if (e.touches.length > 0) {\n        onMove(e.touches[0].pageX);\n      }\n    };\n    document.addEventListener(\"mouseup\", onMouseUp);\n    document.addEventListener(\"touchend\", onMouseUp);\n    document.addEventListener(\"mousemove\", onMouseMove);\n    document.addEventListener(\"touchmove\", onTouchMove);\n    return () => {\n      document.removeEventListener(\"mouseup\", onMouseUp);\n      document.removeEventListener(\"touchend\", onMouseUp);\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"touchmove\", onTouchMove);\n    };\n  });\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n    ref: ref,\n    onMouseDown: () => {\n      isDragging.current = true;\n      scrubberRect.current = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(scrubberRef.current).getBoundingClientRect();\n    },\n    onTouchStart: () => {\n      console.log(\"TOUCH START\");\n      isDragging.current = true;\n      scrubberRect.current = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(scrubberRef.current).getBoundingClientRect();\n    },\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n      position: \"absolute\",\n      zIndex: 10,\n      left: `${initialPos * 100}%`,\n      cursor: \"grab\",\n      userSelect: \"none\",\n      top: \"50%\",\n      transform: \"translateY(-50%) translateX(-50%)\",\n      padding: \"8px 4px\" // To make grabbing it easier\n    },  false ? 0 : \";label:Draggable;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3Jldmlldy9jb250cm9sLWJveC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdVVNIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3Jldmlldy9jb250cm9sLWJveC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUmVmT2JqZWN0LCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IHsgUHJvdG9CdXR0b24sIFdpdGhUb29sdGlwLCBub3ROdWxsaXNoLCB1c2VDb2xvclNjaGVtZSB9IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5pbXBvcnQgeyBGaVBhdXNlLCBGaVBsYXkgfSBmcm9tIFwicmVhY3QtaWNvbnMvZmlcIjtcblxuaW1wb3J0IHsgdXNlU3R1ZGlvU3RhdGUsIHVzZURpc3BhdGNoLCBEaXNwYXRjaGVyIH0gZnJvbSBcIi4uLy4uL3N0dWRpby1zdGF0ZVwiO1xuaW1wb3J0IHsgdXNlU2V0dGluZ3MgfSBmcm9tIFwiLi4vLi4vc2V0dGluZ3NcIjtcbmltcG9ydCBDdXRIZXJlSWNvbiBmcm9tIFwiLi9jdXQtaGVyZS1pY29uLnN2Z1wiO1xuaW1wb3J0IEN1dE1hcmtlckljb24gZnJvbSBcIi4vY3V0LW1hcmtlci5zdmdcIjtcbmltcG9ydCB7IENPTE9SUywgZm9jdXNTdHlsZSB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBBTE1PU1RfWkVSTyB9IGZyb20gXCIuXCI7XG5pbXBvcnQgeyBQcmV2aWV3SGFuZGxlIH0gZnJvbSBcIi4vcHJldmlld1wiO1xuaW1wb3J0IHsgU0hPUlRDVVRTLCBTaG9ydGN1dEtleXMsIHVzZVNob3J0Y3V0LCB1c2VTaG93QXZhaWxhYmxlU2hvcnRjdXRzIH0gZnJvbSBcIi4uLy4uL3Nob3J0Y3V0c1wiO1xuXG5cbnR5cGUgU2hhcmVkUHJvcHMgPSB7XG4gIHByZXZpZXdDb250cm9sbGVyOiBSZWFjdC5SZWZPYmplY3Q8UHJldmlld0hhbmRsZT47XG4gIGN1cnJlbnRUaW1lOiBudW1iZXI7XG59O1xuXG5leHBvcnQgY29uc3QgQ29udHJvbEJveDogUmVhY3QuRkM8U2hhcmVkUHJvcHM+ID0gKHsgcHJldmlld0NvbnRyb2xsZXIsIGN1cnJlbnRUaW1lIH0pID0+IHtcbiAgY29uc3QgeyBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCBkdXJhdGlvbiA9IHByZXZpZXdDb250cm9sbGVyLmN1cnJlbnQ/LmR1cmF0aW9uO1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICAgIGJvcmRlclJhZGl1czogOCxcbiAgICAgIHBhZGRpbmc6IDE2LFxuICAgICAgYm94U2hhZG93OiBpc0hpZ2hDb250cmFzdCA/IFwibm9uZVwiIDogXCIwIDRweCA0cHggdmFyKC0tc2hhZG93LWNvbG9yKVwiLFxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgZ2FwOiAxMixcbiAgICB9fT5cbiAgICAgIDxDb250cm9scyB7Li4ueyBwcmV2aWV3Q29udHJvbGxlciwgY3VycmVudFRpbWUgfX0gLz5cbiAgICAgIDxkaXYgY3NzPXt7IHRleHRBbGlnbjogXCJjZW50ZXJcIiwgY29sb3I6IENPTE9SUy5uZXV0cmFsNzAgfX0+XG4gICAgICAgIHtmb3JtYXRUaW1lKGN1cnJlbnRUaW1lLCBkdXJhdGlvbiwgaTE4bi5sYW5ndWFnZSl9XG4gICAgICAgIC9cbiAgICAgICAge2Zvcm1hdFRpbWUoZHVyYXRpb24sIGR1cmF0aW9uLCBpMThuLmxhbmd1YWdlKX1cbiAgICAgIDwvZGl2PlxuICAgICAgPFNjcnViYmVyIHsuLi57IHByZXZpZXdDb250cm9sbGVyLCBjdXJyZW50VGltZSB9fSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgZm9ybWF0VGltZSA9IChcbiAgc2Vjb25kczogbnVtYmVyIHwgdW5kZWZpbmVkLFxuICB0b3RhbER1cmF0aW9uOiBudW1iZXIgfCB1bmRlZmluZWQsXG4gIGxhbmc6IHN0cmluZyxcbik6IHN0cmluZyA9PiB7XG4gIGNvbnN0IE1JTlVURSA9IDYwO1xuICBjb25zdCBIT1VSID0gNjAgKiBNSU5VVEU7XG5cbiAgaWYgKHNlY29uZHMgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBcIi0tOi0tXCI7XG4gIH1cblxuICBjb25zdCBzZWNvbmRzUGFydCA9IHNlY29uZHMgJSA2MDtcbiAgY29uc3QgbWludXRlc1BhcnQgPSBNYXRoLmZsb29yKHNlY29uZHMgLyBNSU5VVEUpICUgNjA7XG4gIGNvbnN0IGhvdXJzUGFydCA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIEhPVVIpO1xuXG4gIGNvbnN0IHNlY29uZHNGb3JtYXR0ZWQgPSBzZWNvbmRzUGFydC50b0xvY2FsZVN0cmluZyhsYW5nLCB7XG4gICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAxLFxuICAgIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMSxcbiAgfSk7XG5cbiAgY29uc3QgbG93ZXJQYXJ0ID0gYCR7bWludXRlc1BhcnQgPD0gOSA/IFwiMFwiIDogXCJcIn0ke21pbnV0ZXNQYXJ0fWBcbiAgICArIGA6JHtzZWNvbmRzUGFydCA8PSA5ID8gXCIwXCIgOiBcIlwifSR7c2Vjb25kc0Zvcm1hdHRlZH1gO1xuXG4gIHJldHVybiAodG90YWxEdXJhdGlvbiAmJiB0b3RhbER1cmF0aW9uID49IEhPVVIpXG4gICAgPyBgJHtob3Vyc1BhcnR9OiR7bG93ZXJQYXJ0fWBcbiAgICA6IGxvd2VyUGFydDtcbn07XG5cbmNvbnN0IFNjcnViYmVyOiBSZWFjdC5GQzxTaGFyZWRQcm9wcz4gPSAoeyBwcmV2aWV3Q29udHJvbGxlciwgY3VycmVudFRpbWUgfSkgPT4ge1xuICBjb25zdCBkdXJhdGlvbiA9IHByZXZpZXdDb250cm9sbGVyLmN1cnJlbnQ/LmR1cmF0aW9uIHx8IEluZmluaXR5O1xuICBjb25zdCBzZXR0aW5ncyA9IHVzZVNldHRpbmdzKCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3QgeyBzdGFydCwgZW5kIH0gPSB1c2VTdHVkaW9TdGF0ZSgpO1xuICBjb25zdCByZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuXG4gIGNvbnN0IHNldFRpbWUgPSAobW91c2VFdmVudDogUmVhY3QuTW91c2VFdmVudDxIVE1MRGl2RWxlbWVudCwgTW91c2VFdmVudD4pID0+IHtcbiAgICBjb25zdCByZWN0ID0gbW91c2VFdmVudC5jdXJyZW50VGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHggPSBtb3VzZUV2ZW50LmNsaWVudFggLSByZWN0Lng7XG4gICAgbGV0IHByb2dyZXNzID0geCAvIHJlY3Qud2lkdGg7XG4gICAgaWYgKHByb2dyZXNzIDwgMCkge1xuICAgICAgcHJvZ3Jlc3MgPSAwO1xuICAgIH0gZWxzZSBpZiAocHJvZ3Jlc3MgPiAxKSB7XG4gICAgICBwcm9ncmVzcyA9IDE7XG4gICAgfVxuXG4gICAgaWYgKHByZXZpZXdDb250cm9sbGVyLmN1cnJlbnQpIHtcbiAgICAgIHByZXZpZXdDb250cm9sbGVyLmN1cnJlbnQuY3VycmVudFRpbWUgPSBwcm9ncmVzcyAqIGR1cmF0aW9uO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBjdXRTdHlsZSA9IHtcbiAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLmRhbmdlcjEsXG4gICAgaGVpZ2h0OiBcInZhcigtLXNjcnViYmVyLWhlaWdodClcIixcbiAgICBib3JkZXJSYWRpdXM6IFwidmFyKC0tc2NydWJiZXItYm9yZGVyLXJhZGl1cylcIixcbiAgICBib3hTaXppbmc6IFwiY29udGVudC1ib3hcIixcbiAgICBiYWNrZ3JvdW5kOiBcInJlcGVhdGluZy1saW5lYXItZ3JhZGllbnQoNDVkZWcsXCJcbiAgICAgICsgYCR7Q09MT1JTLmRhbmdlcjJ9LCAke0NPTE9SUy5kYW5nZXIyfSA0cHgsYFxuICAgICAgKyBgJHtDT0xPUlMuZGFuZ2VyMX0gNHB4LCAke0NPTE9SUy5kYW5nZXIxfSA4cHgpYCxcbiAgfSBhcyBjb25zdDtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7IHBhZGRpbmc6IDQgfX0+XG4gICAgICA8ZGl2IHJlZj17cmVmfSBjc3M9e3tcbiAgICAgICAgXCItLXNjcnViYmVyLWJvcmRlci1yYWRpdXNcIjogXCIzcHhcIixcbiAgICAgICAgXCItLXNjcnViYmVyLWhlaWdodFwiOiBcIjZweFwiLFxuICAgICAgICBcIkBtZWRpYSBub3QgKGFueS1wb2ludGVyOiBmaW5lKVwiOiB7XG4gICAgICAgICAgXCItLXNjcnViYmVyLWJvcmRlci1yYWRpdXNcIjogXCI2cHhcIixcbiAgICAgICAgICBcIi0tc2NydWJiZXItaGVpZ2h0XCI6IFwiMTJweFwiLFxuICAgICAgICB9LFxuXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLmFjY2VudDQsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcInZhcigtLXNjcnViYmVyLWhlaWdodClcIixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBcInZhcigtLXNjcnViYmVyLWJvcmRlci1yYWRpdXMpXCIsXG4gICAgICB9fT5cbiAgICAgICAgey8qIEFuIG92ZXJsYXkgdGhhdCBleHRlbmRzIGZ1cnRoZXIgYWJvdmUgYW5kIGJlbG93IHRoZSBwYXJlbnQgZm9yIGVhc2llciBjbGlja2luZy4gKi99XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBvbkNsaWNrPXtlID0+IHNldFRpbWUoZSl9XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgICAgICAgIHpJbmRleDogNSxcbiAgICAgICAgICAgIHRvcDogLTYsXG4gICAgICAgICAgICBib3R0b206IC02LFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7LyogVGhlIHBsYXloZWFkICovfVxuICAgICAgICAgIDxEcmFnZ2FibGVcbiAgICAgICAgICAgIHNjcnViYmVyUmVmPXtyZWZ9XG4gICAgICAgICAgICBwcmV2aWV3Q29udHJvbGxlcj17cHJldmlld0NvbnRyb2xsZXJ9XG4gICAgICAgICAgICBpbml0aWFsVGltZT17Y3VycmVudFRpbWV9XG4gICAgICAgICAgICBvbkRyYWc9e3RpbWUgPT4gbm90TnVsbGlzaChwcmV2aWV3Q29udHJvbGxlci5jdXJyZW50KS5jdXJyZW50VGltZSA9IHRpbWV9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICAgICAgd2lkdGg6IDE2LFxuICAgICAgICAgICAgICBoZWlnaHQ6IDE2LFxuICAgICAgICAgICAgICBcIkBtZWRpYSBub3QgKGFueS1wb2ludGVyOiBmaW5lKVwiOiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDI0LFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjQsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgICAgICAgICBib3JkZXI6IGAxcHggc29saWQgJHtDT0xPUlMubmV1dHJhbDQwfWAsXG4gICAgICAgICAgICB9fS8+XG4gICAgICAgICAgPC9EcmFnZ2FibGU+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIHsvKiBUaGUgdHdvIFwiZGVsZXRlZFwiIGFyZWFzICovfVxuICAgICAgICB7KHN0YXJ0ICE9IG51bGwgJiYgc3RhcnQgPiAwKSAmJiA8ZGl2IGNzcz17e1xuICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgYm9yZGVyUmlnaHQ6IFwiMnB4IHNvbGlkIGJsYWNrXCIsXG4gICAgICAgICAgd2lkdGg6IGAkeyhzdGFydCAvIGR1cmF0aW9uKSAqIDEwMH0lYCxcbiAgICAgICAgICAuLi5jdXRTdHlsZSxcbiAgICAgICAgfX0gLz59XG4gICAgICAgIHsoZW5kICE9IG51bGwgJiYgZW5kIDwgZHVyYXRpb24pICYmIDxkaXYgY3NzPXt7XG4gICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgYm9yZGVyTGVmdDogXCIycHggc29saWQgYmxhY2tcIixcbiAgICAgICAgICB3aWR0aDogYCR7KChkdXJhdGlvbiAtIGVuZCkgLyBkdXJhdGlvbikgKiAxMDB9JWAsXG4gICAgICAgICAgLi4uY3V0U3R5bGUsXG4gICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcInJpZ2h0XCIsXG4gICAgICAgICAgYmFja2dyb3VuZFNpemU6IFwiMTAwdndcIixcbiAgICAgICAgfX0gLz59XG5cbiAgICAgICAgey8qIFRoZSB0d28gdHJpbSBtYXJrZXJzICovfVxuICAgICAgICB7c2V0dGluZ3MucmV2aWV3Py5kaXNhYmxlQ3V0dGluZyB8fCA8PlxuICAgICAgICAgIDxEcmFnZ2FibGVcbiAgICAgICAgICAgIHNjcnViYmVyUmVmPXtyZWZ9XG4gICAgICAgICAgICBwcmV2aWV3Q29udHJvbGxlcj17cHJldmlld0NvbnRyb2xsZXJ9XG4gICAgICAgICAgICBpbml0aWFsVGltZT17c3RhcnQgPz8gMH1cbiAgICAgICAgICAgIGNsYW1wPXt0aW1lID0+IE1hdGgubWluKHRpbWUsIGVuZCA/PyBkdXJhdGlvbil9XG4gICAgICAgICAgICBvbkRyYWc9e3RpbWUgPT4gZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9TVEFSVFwiLCB0aW1lIH0pfVxuICAgICAgICAgID48Q3V0TWFya2VyIHNpZGU9XCJsZWZ0XCIgaXNIaWdoQ29udHJhc3Q9e2lzSGlnaENvbnRyYXN0fSAvPjwvRHJhZ2dhYmxlPlxuICAgICAgICAgIDxEcmFnZ2FibGVcbiAgICAgICAgICAgIHNjcnViYmVyUmVmPXtyZWZ9XG4gICAgICAgICAgICBwcmV2aWV3Q29udHJvbGxlcj17cHJldmlld0NvbnRyb2xsZXJ9XG4gICAgICAgICAgICBpbml0aWFsVGltZT17ZW5kID8/IGR1cmF0aW9ufVxuICAgICAgICAgICAgY2xhbXA9e3RpbWUgPT4gTWF0aC5tYXgodGltZSwgc3RhcnQgPz8gMCl9XG4gICAgICAgICAgICBvbkRyYWc9e3RpbWUgPT4gZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9FTkRcIiwgdGltZSB9KX1cbiAgICAgICAgICA+PEN1dE1hcmtlciBzaWRlPVwicmlnaHRcIiBpc0hpZ2hDb250cmFzdD17aXNIaWdoQ29udHJhc3R9IC8+PC9EcmFnZ2FibGU+XG4gICAgICAgIDwvPn1cblxuICAgICAgICB7LyogVGhlIHBsYXkgcHJvZ3Jlc3MgYmFyLCBvdmVybGF5aW5nIGRhcmtlbmluZyBldmVyeXRoaW5nIGJlaGluZC4gKi99XG4gICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgIHdpZHRoOiBgJHsoY3VycmVudFRpbWUgLyBkdXJhdGlvbikgKiAxMDB9JWAsXG4gICAgICAgICAgYmFja2Ryb3BGaWx0ZXI6IFwiYnJpZ2h0bmVzcygwLjc1KVwiLFxuICAgICAgICAgIGhlaWdodDogXCJ2YXIoLS1zY3J1YmJlci1oZWlnaHQpXCIsXG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiBcInZhcigtLXNjcnViYmVyLWJvcmRlci1yYWRpdXMpXCIsXG4gICAgICAgIH19IC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbnR5cGUgQ3V0TWFya2VyUHJvcHMgPSB7XG4gIHNpZGU6IFwibGVmdFwiIHwgXCJyaWdodFwiO1xuICBpc0hpZ2hDb250cmFzdDogYm9vbGVhbjtcbn07XG5cbmNvbnN0IEN1dE1hcmtlcjogUmVhY3QuRkM8Q3V0TWFya2VyUHJvcHM+ID0gKHsgc2lkZSwgaXNIaWdoQ29udHJhc3QgfSkgPT4gKFxuICA8ZGl2IGNzcz17e1xuICAgIHdpZHRoOiAxNCxcbiAgICBoZWlnaHQ6IDIwLFxuICAgIFwiQG1lZGlhIG5vdCAoYW55LXBvaW50ZXI6IGZpbmUpXCI6IHtcbiAgICAgIGhlaWdodDogMjQsXG4gICAgfSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgY29sb3I6IENPTE9SUy5uZXV0cmFsNzAsXG4gICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWw0MH1gLFxuICAgIGJvcmRlclJhZGl1czogNCxcbiAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgIGJveFNoYWRvdzogaXNIaWdoQ29udHJhc3QgPyBcIm5vbmVcIiA6IFwiMCAxcHggMnB4IHZhcigtLXNoYWRvdy1jb2xvcilcIixcbiAgfX0+XG4gICAgPEN1dE1hcmtlckljb24gY3NzPXt7XG4gICAgICB0cmFuc2Zvcm06IGBzY2FsZSgxLjIpICR7c2lkZSA9PSBcInJpZ2h0XCIgPyBcInNjYWxlWCgtMSlcIiA6IFwiXCJ9YCxcbiAgICB9fSAvPlxuICA8L2Rpdj5cbik7XG5cbnR5cGUgRHJhZ2dhYmxlUHJvcHMgPSBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjx7XG4gIHByZXZpZXdDb250cm9sbGVyOiBSZWZPYmplY3Q8UHJldmlld0hhbmRsZT47XG4gIHNjcnViYmVyUmVmOiBSZWZPYmplY3Q8SFRNTERpdkVsZW1lbnQ+O1xuICBpbml0aWFsVGltZTogbnVtYmVyO1xuXG4gIC8qKiBDYWxsZWQgb24gZXZlcnkgbW91c2UgbW92ZSB3aXRoIHRoZSB1cGRhdGVkIHZhbHVlICovXG4gIG9uRHJhZz86ICh0aW1lOiBudW1iZXIpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIENhbGxlZCBvbiBldmVyeSBtb3VzZSBtb3ZlLiBUaGUgY2FsY3VsYXRlIHRpbWUgaXMgcGFzc2VkIGFzIGFyZ3VtZW50IGFuZFxuICAgKiB0aGUgZnVuY3Rpb24gY2FuIG1vZGlmeSBpdCBzb21laG93LCBpLmUuIGNsYW1wIGl0IHRvIGEgcmFuZ2UuIENhbGxlZFxuICAgKiBiZWZvcmUgYG9uRHJhZ2AuXG4gICAqL1xuICBjbGFtcD86ICh0aW1lOiBudW1iZXIpID0+IG51bWJlcjtcbn0+O1xuXG4vKipcbiAqIE1ha2VzIHRoZSBnaXZlbiBgY2hpbGRyZW5gIGRyYWdnYWJsZSwgbGV0dGluZyB0aGUgdXNlciBhZGp1c3QgaXRzIHggcG9zaXRpb25cbiAqIGluc2lkZSB0aGUgc2NydWJiZXIuXG4gKi9cbmNvbnN0IERyYWdnYWJsZTogUmVhY3QuRkM8RHJhZ2dhYmxlUHJvcHM+ID0gKHtcbiAgcHJldmlld0NvbnRyb2xsZXIsXG4gIHNjcnViYmVyUmVmLFxuICBpbml0aWFsVGltZSxcbiAgb25EcmFnLFxuICBjbGFtcCA9IHQgPT4gdCxcbiAgY2hpbGRyZW4sXG59KSA9PiB7XG4gIGNvbnN0IGR1cmF0aW9uID0gcHJldmlld0NvbnRyb2xsZXIuY3VycmVudD8uZHVyYXRpb24gfHwgSW5maW5pdHk7XG5cbiAgY29uc3QgaW5pdGlhbFBvcyA9IGluaXRpYWxUaW1lIC8gZHVyYXRpb247XG4gIGNvbnN0IHBvcyA9IHVzZVJlZjxudW1iZXI+KGluaXRpYWxQb3MpO1xuICBjb25zdCBzY3J1YmJlclJlY3QgPSB1c2VSZWY8RE9NUmVjdD4oKTtcbiAgY29uc3QgcmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcbiAgY29uc3QgaXNEcmFnZ2luZyA9IHVzZVJlZihmYWxzZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBvbk1vdXNlVXAgPSAoKSA9PiB7XG4gICAgICBpZiAoaXNEcmFnZ2luZy5jdXJyZW50KSB7XG4gICAgICAgIGlzRHJhZ2dpbmcuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICBvbkRyYWc/Lihwb3MuY3VycmVudCAqIGR1cmF0aW9uKTtcblxuICAgICAgICAvLyBSZXNldCB0aGUgZWxlbWVudCBzdHlsZSBzbyB0aGF0IHRoZSBgbGVmdGAgdmFsdWUgZnJvbSB0aGUgY2xhc3MgQ1NTXG4gICAgICAgIC8vIGNhbiB0YWtlIG92ZXIgYWdhaW4uXG4gICAgICAgIG5vdE51bGxpc2gocmVmLmN1cnJlbnQpLnN0eWxlLmxlZnQgPSBcIlwiO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgb25Nb3VzZU1vdmUgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgb25Nb3ZlKGUucGFnZVgpO1xuICAgIH07XG4gICAgY29uc3Qgb25Nb3ZlID0gKHBhZ2VYOiBudW1iZXIpID0+IHtcbiAgICAgIGlmIChpc0RyYWdnaW5nLmN1cnJlbnQpIHtcbiAgICAgICAgY29uc3QgcmVjdCA9IG5vdE51bGxpc2goc2NydWJiZXJSZWN0LmN1cnJlbnQpO1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gTWF0aC5taW4oMS4wLCBNYXRoLm1heCgwLjAsIChwYWdlWCAtIHJlY3QubGVmdCkgLyByZWN0LndpZHRoKSk7XG4gICAgICAgIHBvcy5jdXJyZW50ID0gY2xhbXAoZHVyYXRpb24gKiBwZXJjZW50YWdlKSAvIGR1cmF0aW9uO1xuICAgICAgICBvbkRyYWc/Lihwb3MuY3VycmVudCAqIGR1cmF0aW9uKTtcblxuICAgICAgICAvLyBXZSBzZXQgdGhlIGxlZnQgdmFsdWUgaGVyZSBkaXJlY3RseSBpbnN0ZWFkIG9mIHdhaXRpbmcgZm9yIHRoZSBSZWFjdFxuICAgICAgICAvLyBzdGF0ZSBjaGFuZ2UgdG8gdHJpY2tsZSB0aHJvdWdoLiBUaGlzIGFjdHVhbGx5IGxlYWRzIHRvIGxlc3MgaW5wdXRcbiAgICAgICAgLy8gZGVsYXkgYW5kIGEgc21vb3RoZXIgZHJhZ2dpbmcuXG4gICAgICAgIG5vdE51bGxpc2gocmVmLmN1cnJlbnQpLnN0eWxlLmxlZnQgPSBgJHtwb3MuY3VycmVudCAqIDEwMH0lYDtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG9uVG91Y2hNb3ZlID0gKGU6IFRvdWNoRXZlbnQpID0+IHtcbiAgICAgIGlmIChlLnRvdWNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBvbk1vdmUoZS50b3VjaGVzWzBdLnBhZ2VYKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgb25Nb3VzZVVwKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgb25Nb3VzZVVwKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG9uTW91c2VNb3ZlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIG9uVG91Y2hNb3ZlKTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBvbk1vdXNlVXApO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIG9uTW91c2VVcCk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG9uTW91c2VNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgb25Ub3VjaE1vdmUpO1xuICAgIH07XG4gIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgcmVmPXtyZWZ9XG4gICAgICBvbk1vdXNlRG93bj17KCkgPT4ge1xuICAgICAgICBpc0RyYWdnaW5nLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICBzY3J1YmJlclJlY3QuY3VycmVudCA9IG5vdE51bGxpc2goc2NydWJiZXJSZWYuY3VycmVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB9fVxuICAgICAgb25Ub3VjaFN0YXJ0PXsoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVE9VQ0ggU1RBUlRcIik7XG4gICAgICAgIGlzRHJhZ2dpbmcuY3VycmVudCA9IHRydWU7XG4gICAgICAgIHNjcnViYmVyUmVjdC5jdXJyZW50ID0gbm90TnVsbGlzaChzY3J1YmJlclJlZi5jdXJyZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIH19XG4gICAgICBjc3M9e3tcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgekluZGV4OiAxMCxcbiAgICAgICAgbGVmdDogYCR7aW5pdGlhbFBvcyAqIDEwMH0lYCxcbiAgICAgICAgY3Vyc29yOiBcImdyYWJcIixcbiAgICAgICAgdXNlclNlbGVjdDogXCJub25lXCIsXG4gICAgICAgIHRvcDogXCI1MCVcIixcbiAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoLTUwJSkgdHJhbnNsYXRlWCgtNTAlKVwiLFxuICAgICAgICBwYWRkaW5nOiBcIjhweCA0cHhcIiwgLy8gVG8gbWFrZSBncmFiYmluZyBpdCBlYXNpZXJcbiAgICAgIH19XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgQ29udHJvbHM6IFJlYWN0LkZDPFNoYXJlZFByb3BzPiA9ICh7IGN1cnJlbnRUaW1lLCBwcmV2aWV3Q29udHJvbGxlciB9KSA9PiB7XG4gIGNvbnN0IHsgc3RhcnQsIGVuZCB9ID0gdXNlU3R1ZGlvU3RhdGUoKTtcbiAgY29uc3QgcmVjb3JkaW5nRGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBzZXR0aW5ncyA9IHVzZVNldHRpbmdzKCk7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcblxuICBjb25zdCB0b2dnbGVQbGF5UGF1c2UgPSAoKSA9PiB7XG4gICAgY29uc3QgY29udHJvbGxlciA9IHByZXZpZXdDb250cm9sbGVyLmN1cnJlbnQ7XG4gICAgaWYgKGNvbnRyb2xsZXIpIHtcbiAgICAgIGlmIChjb250cm9sbGVyLmlzUGxheWluZykge1xuICAgICAgICBjb250cm9sbGVyLnBhdXNlKCk7XG4gICAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZXIuaXNSZWFkeVRvUGxheSkge1xuICAgICAgICBjb250cm9sbGVyLnBsYXkoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLnJldmlldy5wbGF5UGF1c2UsIHRvZ2dsZVBsYXlQYXVzZSwge1xuICAgIGlnbm9yZUV2ZW50V2hlbjogZSA9PiBlLmNvZGUgPT09IFwiU3BhY2VcIiAmJiBlLnRhcmdldCBpbnN0YW5jZW9mIEhUTUxCdXR0b25FbGVtZW50LFxuICB9KTtcbiAgY29uc3Qgc2hvd1Nob3J0Y3V0cyA9IHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMoKTtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICBjb25zdCBpc1BsYXlpbmcgPSBwcmV2aWV3Q29udHJvbGxlci5jdXJyZW50Py5pc1BsYXlpbmc7XG4gIGNvbnN0IGxhYmVsID0gdChgc3RlcHMucmV2aWV3LiR7aXNQbGF5aW5nID8gXCJwYXVzZVwiIDogXCJwbGF5XCJ9YCk7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZ2FwOiAxNixcbiAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgYWxpZ25JdGVtczogXCJmbGV4LWVuZFwiLFxuICAgIH19PlxuICAgICAgey8qIEN1dCBzdGFydCAqL31cbiAgICAgIHtzZXR0aW5ncy5yZXZpZXc/LmRpc2FibGVDdXR0aW5nIHx8IDxDdXRDb250cm9sc1xuICAgICAgICBtYXJrZXI9XCJzdGFydFwiXG4gICAgICAgIHZhbHVlPXtzdGFydH1cbiAgICAgICAgY29udHJvbD17ZW5kfVxuICAgICAgICBpbnZhcmlhbnQ9eyhzdGFydCwgZW5kKSA9PiBzdGFydCA8IGVuZH1cbiAgICAgICAgey4uLnsgcmVjb3JkaW5nRGlzcGF0Y2gsIHByZXZpZXdDb250cm9sbGVyLCBjdXJyZW50VGltZSB9fVxuICAgICAgLz59XG5cbiAgICAgIHsvKiBQbGF5L3BhdXNlIGJ1dHRvbiAqL31cbiAgICAgIDxXaXRoVG9vbHRpcCB0b29sdGlwPXtsYWJlbH0+XG4gICAgICAgIDxQcm90b0J1dHRvblxuICAgICAgICAgIGFyaWEtbGFiZWw9e2xhYmVsfVxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMuYWNjZW50NSxcbiAgICAgICAgICAgIGNvbG9yOiBpc0hpZ2hDb250cmFzdCA/IENPTE9SUy5uZXV0cmFsMDUgOiBcIndoaXRlXCIsXG4gICAgICAgICAgICBib3JkZXI6IFwibm9uZVwiLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjUwJVwiLFxuICAgICAgICAgICAgd2lkdGg6IDQ4LFxuICAgICAgICAgICAgaGVpZ2h0OiA0OCxcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZm9udFNpemU6IDI0LFxuICAgICAgICAgICAgLi4uZm9jdXNTdHlsZSh7IG9mZnNldDogMSB9KSxcbiAgICAgICAgICAgIFwiJjpob3ZlciwgOmZvY3VzLXZpc2libGVcIjoge1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5hY2NlbnQ2LFxuICAgICAgICAgICAgICAuLi5pc0hpZ2hDb250cmFzdCAmJiB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgICAgICAgICAgIG91dGxpbmU6IGAycHggc29saWQgJHtDT0xPUlMuYWNjZW50NH1gLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBDT0xPUlMuYWNjZW50NCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfX1cbiAgICAgICAgICBvbkNsaWNrPXt0b2dnbGVQbGF5UGF1c2V9XG4gICAgICAgICAgb25Nb3VzZURvd249e2UgPT4gZS5wcmV2ZW50RGVmYXVsdCgpfVxuICAgICAgICA+XG4gICAgICAgICAge3Nob3dTaG9ydGN1dHMgJiYgKFxuICAgICAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgYm90dG9tOiAtMjAsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDIsXG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogNCxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgICAgICAgfX0+PFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17U0hPUlRDVVRTLnJldmlldy5wbGF5UGF1c2Uuc3BsaXQoXCI7XCIpWzBdfSAvPjwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgICAge2lzUGxheWluZyA/IDxGaVBhdXNlIC8+IDogPEZpUGxheSBjc3M9e3sgbWFyZ2luTGVmdDogMyB9fSAvPn1cbiAgICAgICAgPC9Qcm90b0J1dHRvbj5cbiAgICAgIDwvV2l0aFRvb2x0aXA+XG5cbiAgICAgIHsvKiBDdXQgZW5kICovfVxuICAgICAge3NldHRpbmdzLnJldmlldz8uZGlzYWJsZUN1dHRpbmcgfHwgPEN1dENvbnRyb2xzXG4gICAgICAgIG1hcmtlcj1cImVuZFwiXG4gICAgICAgIHZhbHVlPXtlbmR9XG4gICAgICAgIGNvbnRyb2w9e3N0YXJ0fVxuICAgICAgICBpbnZhcmlhbnQ9eyhlbmQsIHN0YXJ0KSA9PiBzdGFydCA8IGVuZH1cbiAgICAgICAgey4uLnsgcmVjb3JkaW5nRGlzcGF0Y2gsIHByZXZpZXdDb250cm9sbGVyLCBjdXJyZW50VGltZSB9fVxuICAgICAgLz59XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG50eXBlIEN1dENvbnRyb2xzUHJvcHMgPSBTaGFyZWRQcm9wcyAmIHtcbiAgbWFya2VyOiBcInN0YXJ0XCIgfCBcImVuZFwiO1xuICB2YWx1ZTogbnVtYmVyIHwgbnVsbDtcbiAgY29udHJvbDogbnVtYmVyIHwgbnVsbDtcbiAgaW52YXJpYW50OiAoc2VsZjogbnVtYmVyLCBjb250cm9sOiBudW1iZXIpID0+IGJvb2xlYW47XG4gIHJlY29yZGluZ0Rpc3BhdGNoOiBEaXNwYXRjaGVyO1xufTtcblxuY29uc3QgQ3V0Q29udHJvbHM6IFJlYWN0LkZDPEN1dENvbnRyb2xzUHJvcHM+ID0gKFxuICB7IG1hcmtlciwgdmFsdWUsIGNvbnRyb2wsIGludmFyaWFudCwgY3VycmVudFRpbWUsIHByZXZpZXdDb250cm9sbGVyLCByZWNvcmRpbmdEaXNwYXRjaCB9XG4pID0+IHtcbiAgY29uc3QgeyB0LCBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuXG4gIGNvbnN0IGRpc2FibGVkID0gY3VycmVudFRpbWUgPD0gQUxNT1NUX1pFUk9cbiAgICB8fCAocHJldmlld0NvbnRyb2xsZXIuY3VycmVudCAmJiBjdXJyZW50VGltZSA+PSBwcmV2aWV3Q29udHJvbGxlci5jdXJyZW50LmR1cmF0aW9uKVxuICAgIHx8IChjb250cm9sICE9IG51bGwgJiYgIWludmFyaWFudChjdXJyZW50VGltZSwgY29udHJvbCkpO1xuXG4gIGNvbnN0IGN1dCA9ICgpID0+IHtcbiAgICBpZiAoIXByZXZpZXdDb250cm9sbGVyLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgdmFsdWUgPSBwcmV2aWV3Q29udHJvbGxlci5jdXJyZW50LmN1cnJlbnRUaW1lO1xuICAgIC8vIFdlIGRpc2FibGUgdGhlIGJ1dHRvbnMgd2hlbiB0aGUgZ2VuZXJhdGVkIHZhbHVlcyB3b3VsZCBiZSBpbnZhbGlkLFxuICAgIC8vIGJ1dCB3ZSByZWx5IG9uIGB0aW1ldXBkYXRlYCBldmVudHMgZm9yIHRoYXQsIHdoaWNoIGFyZSBub3QgZ3VhcmFudGVlZFxuICAgIC8vIHRvIGJlIHRpbWVseSwgc28gd2Ugc3RpbGwgaGF2ZSB0byBjaGVjayB0aGUgaW52YXJpYW50IHdoZW4gYWN0dWFsbHlcbiAgICAvLyB1cGRhdGluZyB0aGUgc3RhdGUuIEhlcmUgd2UgZGVjaWRlZCB0byBqdXN0IGNsYW1wIHRoZSB2YWx1ZSBhcHByb3ByaWF0ZWx5LlxuICAgIGlmIChjb250cm9sICE9IG51bGwgJiYgIWludmFyaWFudCh2YWx1ZSwgY29udHJvbCkpIHtcbiAgICAgIHZhbHVlID0gY29udHJvbDtcbiAgICB9XG4gICAgcmVjb3JkaW5nRGlzcGF0Y2goe1xuICAgICAgdHlwZTogbWFya2VyID09PSBcInN0YXJ0XCIgPyBcIlVQREFURV9TVEFSVFwiIDogXCJVUERBVEVfRU5EXCIsXG4gICAgICB0aW1lOiB2YWx1ZSxcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBzaG9ydGN1dCA9IFNIT1JUQ1VUUy5yZXZpZXdbbWFya2VyID09PSBcInN0YXJ0XCIgPyBcImN1dExlZnRcIiA6IFwiY3V0UmlnaHRcIl07XG4gIHVzZVNob3J0Y3V0KHNob3J0Y3V0LCBjdXQsIHsgZW5hYmxlZDogIWRpc2FibGVkIH0pO1xuICB1c2VTaG9ydGN1dChcbiAgICBTSE9SVENVVFMucmV2aWV3W21hcmtlciA9PT0gXCJzdGFydFwiID8gXCJyZW1vdmVDdXRMZWZ0XCIgOiBcInJlbW92ZUN1dFJpZ2h0XCJdLFxuICAgICgpID0+IHJlY29yZGluZ0Rpc3BhdGNoKHtcbiAgICAgIHR5cGU6IG1hcmtlciA9PT0gXCJzdGFydFwiID8gXCJVUERBVEVfU1RBUlRcIiA6IFwiVVBEQVRFX0VORFwiLFxuICAgICAgdGltZTogbnVsbCxcbiAgICB9KSxcbiAgKTtcbiAgY29uc3Qgc2hvd1Nob3J0Y3V0cyA9IHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMoKTtcblxuICBjb25zdCB0aW1lc3RhbXAgPSAoXG4gICAgPGRpdiBjc3M9e3sgbWluV2lkdGg6IDY4LCB0ZXh0QWxpZ246IG1hcmtlciA9PSBcInN0YXJ0XCIgPyBcInJpZ2h0XCIgOiBcImxlZnRcIiB9fT5cbiAgICAgIHsgdmFsdWUgIT09IG51bGwgJiYgKFxuICAgICAgICA8V2l0aFRvb2x0aXAgdG9vbHRpcD17dChcInN0ZXBzLnJldmlldy5qdW1wLXRvLWN1dC1wb2ludFwiKX0+XG4gICAgICAgICAgPFByb3RvQnV0dG9uXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgcGFkZGluZzogXCI0cHggMFwiLFxuICAgICAgICAgICAgICBjb2xvcjogQ09MT1JTLmFjY2VudDYsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25DbGljaz17ZXZlbnQgPT4ge1xuICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBpZiAocHJldmlld0NvbnRyb2xsZXIuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHByZXZpZXdDb250cm9sbGVyLmN1cnJlbnQuY3VycmVudFRpbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uTW91c2VEb3duPXtlID0+IGUucHJldmVudERlZmF1bHQoKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7Zm9ybWF0VGltZSh2YWx1ZSwgdmFsdWUsIGkxOG4ubGFuZ3VhZ2UpfVxuICAgICAgICAgIDwvUHJvdG9CdXR0b24+XG4gICAgICAgIDwvV2l0aFRvb2x0aXA+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xuXG4gIGNvbnN0IGN1dEJ1dHRvbiA9IChcbiAgICA8V2l0aFRvb2x0aXAgdG9vbHRpcD17dChgc3RlcHMucmV2aWV3LnNldC0ke21hcmtlcn1gKX0+XG4gICAgICA8UHJvdG9CdXR0b25cbiAgICAgICAgey4uLnsgZGlzYWJsZWQgfX1cbiAgICAgICAgYXJpYS1sYWJlbD17dChgc3RlcHMucmV2aWV3LnNldC0ke21hcmtlcn1gKX1cbiAgICAgICAgb25DbGljaz17Y3V0fVxuICAgICAgICBvbk1vdXNlRG93bj17ZSA9PiBlLnByZXZlbnREZWZhdWx0KCl9XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGxpbmVIZWlnaHQ6IDAsXG4gICAgICAgICAgcGFkZGluZzogXCI0cHggOHB4XCIsXG4gICAgICAgICAgcGFkZGluZ1RvcDogNCxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDQsXG4gICAgICAgICAgLi4uZm9jdXNTdHlsZSgpLFxuICAgICAgICAgIFwiJjpkaXNhYmxlZFwiOiB7XG4gICAgICAgICAgICBvcGFjaXR5OiAwLjMsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIiY6bm90KDpkaXNhYmxlZCk6aG92ZXJcIjoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDEwLFxuICAgICAgICAgICAgY29sb3I6IGlzSGlnaENvbnRyYXN0ID8gQ09MT1JTLmFjY2VudDQgOiBcImluaGVyaXRcIixcbiAgICAgICAgICB9LFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8Q3V0SGVyZUljb24gY3NzPXt7XG4gICAgICAgICAgaGVpZ2h0OiAzNixcbiAgICAgICAgICB3aWR0aDogMzYsXG4gICAgICAgICAgdHJhbnNmb3JtOiBtYXJrZXIgPT09IFwiZW5kXCIgPyBcInNjYWxlWCgtMSlcIiA6IFwiXCIsXG4gICAgICAgIH19IC8+XG4gICAgICAgIHtzaG93U2hvcnRjdXRzICYmICFkaXNhYmxlZCAmJiAoXG4gICAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICBib3R0b206IC0yMCxcbiAgICAgICAgICAgIHBhZGRpbmc6IDIsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDQsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgICAgICAgfX0+PFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17c2hvcnRjdXR9IC8+PC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L1Byb3RvQnV0dG9uPlxuICAgIDwvV2l0aFRvb2x0aXA+XG4gICk7XG5cbiAgcmV0dXJuIG1hcmtlciA9PT0gXCJzdGFydFwiXG4gICAgPyA8Pnt0aW1lc3RhbXB9e2N1dEJ1dHRvbn08Lz5cbiAgICA6IDw+e2N1dEJ1dHRvbn17dGltZXN0YW1wfTwvPjtcbn07XG4iXX0= */\"),\n    children: children\n  });\n};\nvar _ref7 =  false ? 0 : {\n  name: \"10lds32-Controls\",\n  styles: \"display:flex;gap:16px;justify-content:center;align-items:flex-end;label:Controls;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref8 =  false ? 0 : {\n  name: \"88jhcw-Controls\",\n  styles: \"margin-left:3px;label:Controls;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst Controls = _ref6 => {\n  let {\n    currentTime,\n    previewController\n  } = _ref6;\n  const {\n    start,\n    end\n  } = (0,_studio_state__WEBPACK_IMPORTED_MODULE_3__.useStudioState)();\n  const recordingDispatch = (0,_studio_state__WEBPACK_IMPORTED_MODULE_3__.useDispatch)();\n  const settings = (0,_settings__WEBPACK_IMPORTED_MODULE_4__.useSettings)();\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const togglePlayPause = () => {\n    const controller = previewController.current;\n    if (controller) {\n      if (controller.isPlaying) {\n        controller.pause();\n      } else if (controller.isReadyToPlay) {\n        controller.play();\n      }\n    }\n  };\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_9__.useShortcut)(_shortcuts__WEBPACK_IMPORTED_MODULE_9__.SHORTCUTS.review.playPause, togglePlayPause, {\n    ignoreEventWhen: e => e.code === \"Space\" && e.target instanceof HTMLButtonElement\n  });\n  const showShortcuts = (0,_shortcuts__WEBPACK_IMPORTED_MODULE_9__.useShowAvailableShortcuts)();\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.useColorScheme)();\n  const isPlaying = previewController.current?.isPlaying;\n  const label = t(`steps.review.${isPlaying ? \"pause\" : \"play\"}`);\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n    css: _ref7,\n    children: [settings.review?.disableCutting || (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(CutControls, {\n      marker: \"start\",\n      value: start,\n      control: end,\n      invariant: (start, end) => start < end,\n      recordingDispatch,\n      previewController,\n      currentTime\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.WithTooltip, {\n      tooltip: label,\n      children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.ProtoButton, {\n        \"aria-label\": label,\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n          backgroundColor: _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.accent5,\n          color: isHighContrast ? _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.neutral05 : \"white\",\n          border: \"none\",\n          borderRadius: \"50%\",\n          width: 48,\n          height: 48,\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          fontSize: 24,\n          ...(0,_util__WEBPACK_IMPORTED_MODULE_7__.focusStyle)({\n            offset: 1\n          }),\n          \"&:hover, :focus-visible\": {\n            backgroundColor: _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.accent6,\n            ...(isHighContrast && {\n              backgroundColor: _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.neutral05,\n              outline: `2px solid ${_util__WEBPACK_IMPORTED_MODULE_7__.COLORS.accent4}`,\n              color: _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.accent4\n            })\n          }\n        },  false ? 0 : \";label:Controls;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n        onClick: togglePlayPause,\n        onMouseDown: e => e.preventDefault(),\n        children: [showShortcuts && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n          css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n            position: \"absolute\",\n            bottom: -20,\n            padding: 2,\n            borderRadius: 4,\n            backgroundColor: _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.neutral05\n          },  false ? 0 : \";label:Controls;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n          children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_shortcuts__WEBPACK_IMPORTED_MODULE_9__.ShortcutKeys, {\n            shortcut: _shortcuts__WEBPACK_IMPORTED_MODULE_9__.SHORTCUTS.review.playPause.split(\";\")[0]\n          })\n        }), isPlaying ? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_12__.FiPause, {}) : (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_12__.FiPlay, {\n          css: _ref8\n        })]\n      })\n    }), settings.review?.disableCutting || (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(CutControls, {\n      marker: \"end\",\n      value: end,\n      control: start,\n      invariant: (end, start) => start < end,\n      recordingDispatch,\n      previewController,\n      currentTime\n    })]\n  });\n};\nconst CutControls = _ref9 => {\n  let {\n    marker,\n    value,\n    control,\n    invariant,\n    currentTime,\n    previewController,\n    recordingDispatch\n  } = _ref9;\n  const {\n    t,\n    i18n\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.useColorScheme)();\n  const disabled = currentTime <= ___WEBPACK_IMPORTED_MODULE_8__.ALMOST_ZERO || previewController.current && currentTime >= previewController.current.duration || control != null && !invariant(currentTime, control);\n  const cut = () => {\n    if (!previewController.current) {\n      return;\n    }\n    let value = previewController.current.currentTime;\n    // We disable the buttons when the generated values would be invalid,\n    // but we rely on `timeupdate` events for that, which are not guaranteed\n    // to be timely, so we still have to check the invariant when actually\n    // updating the state. Here we decided to just clamp the value appropriately.\n    if (control != null && !invariant(value, control)) {\n      value = control;\n    }\n    recordingDispatch({\n      type: marker === \"start\" ? \"UPDATE_START\" : \"UPDATE_END\",\n      time: value\n    });\n  };\n  const shortcut = _shortcuts__WEBPACK_IMPORTED_MODULE_9__.SHORTCUTS.review[marker === \"start\" ? \"cutLeft\" : \"cutRight\"];\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_9__.useShortcut)(shortcut, cut, {\n    enabled: !disabled\n  });\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_9__.useShortcut)(_shortcuts__WEBPACK_IMPORTED_MODULE_9__.SHORTCUTS.review[marker === \"start\" ? \"removeCutLeft\" : \"removeCutRight\"], () => recordingDispatch({\n    type: marker === \"start\" ? \"UPDATE_START\" : \"UPDATE_END\",\n    time: null\n  }));\n  const showShortcuts = (0,_shortcuts__WEBPACK_IMPORTED_MODULE_9__.useShowAvailableShortcuts)();\n  const timestamp = (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n      minWidth: 68,\n      textAlign: marker == \"start\" ? \"right\" : \"left\"\n    },  false ? 0 : \";label:timestamp;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3Jldmlldy9jb250cm9sLWJveC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc2VTIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3Jldmlldy9jb250cm9sLWJveC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUmVmT2JqZWN0LCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IHsgUHJvdG9CdXR0b24sIFdpdGhUb29sdGlwLCBub3ROdWxsaXNoLCB1c2VDb2xvclNjaGVtZSB9IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5pbXBvcnQgeyBGaVBhdXNlLCBGaVBsYXkgfSBmcm9tIFwicmVhY3QtaWNvbnMvZmlcIjtcblxuaW1wb3J0IHsgdXNlU3R1ZGlvU3RhdGUsIHVzZURpc3BhdGNoLCBEaXNwYXRjaGVyIH0gZnJvbSBcIi4uLy4uL3N0dWRpby1zdGF0ZVwiO1xuaW1wb3J0IHsgdXNlU2V0dGluZ3MgfSBmcm9tIFwiLi4vLi4vc2V0dGluZ3NcIjtcbmltcG9ydCBDdXRIZXJlSWNvbiBmcm9tIFwiLi9jdXQtaGVyZS1pY29uLnN2Z1wiO1xuaW1wb3J0IEN1dE1hcmtlckljb24gZnJvbSBcIi4vY3V0LW1hcmtlci5zdmdcIjtcbmltcG9ydCB7IENPTE9SUywgZm9jdXNTdHlsZSB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBBTE1PU1RfWkVSTyB9IGZyb20gXCIuXCI7XG5pbXBvcnQgeyBQcmV2aWV3SGFuZGxlIH0gZnJvbSBcIi4vcHJldmlld1wiO1xuaW1wb3J0IHsgU0hPUlRDVVRTLCBTaG9ydGN1dEtleXMsIHVzZVNob3J0Y3V0LCB1c2VTaG93QXZhaWxhYmxlU2hvcnRjdXRzIH0gZnJvbSBcIi4uLy4uL3Nob3J0Y3V0c1wiO1xuXG5cbnR5cGUgU2hhcmVkUHJvcHMgPSB7XG4gIHByZXZpZXdDb250cm9sbGVyOiBSZWFjdC5SZWZPYmplY3Q8UHJldmlld0hhbmRsZT47XG4gIGN1cnJlbnRUaW1lOiBudW1iZXI7XG59O1xuXG5leHBvcnQgY29uc3QgQ29udHJvbEJveDogUmVhY3QuRkM8U2hhcmVkUHJvcHM+ID0gKHsgcHJldmlld0NvbnRyb2xsZXIsIGN1cnJlbnRUaW1lIH0pID0+IHtcbiAgY29uc3QgeyBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCBkdXJhdGlvbiA9IHByZXZpZXdDb250cm9sbGVyLmN1cnJlbnQ/LmR1cmF0aW9uO1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICAgIGJvcmRlclJhZGl1czogOCxcbiAgICAgIHBhZGRpbmc6IDE2LFxuICAgICAgYm94U2hhZG93OiBpc0hpZ2hDb250cmFzdCA/IFwibm9uZVwiIDogXCIwIDRweCA0cHggdmFyKC0tc2hhZG93LWNvbG9yKVwiLFxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgZ2FwOiAxMixcbiAgICB9fT5cbiAgICAgIDxDb250cm9scyB7Li4ueyBwcmV2aWV3Q29udHJvbGxlciwgY3VycmVudFRpbWUgfX0gLz5cbiAgICAgIDxkaXYgY3NzPXt7IHRleHRBbGlnbjogXCJjZW50ZXJcIiwgY29sb3I6IENPTE9SUy5uZXV0cmFsNzAgfX0+XG4gICAgICAgIHtmb3JtYXRUaW1lKGN1cnJlbnRUaW1lLCBkdXJhdGlvbiwgaTE4bi5sYW5ndWFnZSl9XG4gICAgICAgIC9cbiAgICAgICAge2Zvcm1hdFRpbWUoZHVyYXRpb24sIGR1cmF0aW9uLCBpMThuLmxhbmd1YWdlKX1cbiAgICAgIDwvZGl2PlxuICAgICAgPFNjcnViYmVyIHsuLi57IHByZXZpZXdDb250cm9sbGVyLCBjdXJyZW50VGltZSB9fSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgZm9ybWF0VGltZSA9IChcbiAgc2Vjb25kczogbnVtYmVyIHwgdW5kZWZpbmVkLFxuICB0b3RhbER1cmF0aW9uOiBudW1iZXIgfCB1bmRlZmluZWQsXG4gIGxhbmc6IHN0cmluZyxcbik6IHN0cmluZyA9PiB7XG4gIGNvbnN0IE1JTlVURSA9IDYwO1xuICBjb25zdCBIT1VSID0gNjAgKiBNSU5VVEU7XG5cbiAgaWYgKHNlY29uZHMgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBcIi0tOi0tXCI7XG4gIH1cblxuICBjb25zdCBzZWNvbmRzUGFydCA9IHNlY29uZHMgJSA2MDtcbiAgY29uc3QgbWludXRlc1BhcnQgPSBNYXRoLmZsb29yKHNlY29uZHMgLyBNSU5VVEUpICUgNjA7XG4gIGNvbnN0IGhvdXJzUGFydCA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIEhPVVIpO1xuXG4gIGNvbnN0IHNlY29uZHNGb3JtYXR0ZWQgPSBzZWNvbmRzUGFydC50b0xvY2FsZVN0cmluZyhsYW5nLCB7XG4gICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAxLFxuICAgIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMSxcbiAgfSk7XG5cbiAgY29uc3QgbG93ZXJQYXJ0ID0gYCR7bWludXRlc1BhcnQgPD0gOSA/IFwiMFwiIDogXCJcIn0ke21pbnV0ZXNQYXJ0fWBcbiAgICArIGA6JHtzZWNvbmRzUGFydCA8PSA5ID8gXCIwXCIgOiBcIlwifSR7c2Vjb25kc0Zvcm1hdHRlZH1gO1xuXG4gIHJldHVybiAodG90YWxEdXJhdGlvbiAmJiB0b3RhbER1cmF0aW9uID49IEhPVVIpXG4gICAgPyBgJHtob3Vyc1BhcnR9OiR7bG93ZXJQYXJ0fWBcbiAgICA6IGxvd2VyUGFydDtcbn07XG5cbmNvbnN0IFNjcnViYmVyOiBSZWFjdC5GQzxTaGFyZWRQcm9wcz4gPSAoeyBwcmV2aWV3Q29udHJvbGxlciwgY3VycmVudFRpbWUgfSkgPT4ge1xuICBjb25zdCBkdXJhdGlvbiA9IHByZXZpZXdDb250cm9sbGVyLmN1cnJlbnQ/LmR1cmF0aW9uIHx8IEluZmluaXR5O1xuICBjb25zdCBzZXR0aW5ncyA9IHVzZVNldHRpbmdzKCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3QgeyBzdGFydCwgZW5kIH0gPSB1c2VTdHVkaW9TdGF0ZSgpO1xuICBjb25zdCByZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuXG4gIGNvbnN0IHNldFRpbWUgPSAobW91c2VFdmVudDogUmVhY3QuTW91c2VFdmVudDxIVE1MRGl2RWxlbWVudCwgTW91c2VFdmVudD4pID0+IHtcbiAgICBjb25zdCByZWN0ID0gbW91c2VFdmVudC5jdXJyZW50VGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHggPSBtb3VzZUV2ZW50LmNsaWVudFggLSByZWN0Lng7XG4gICAgbGV0IHByb2dyZXNzID0geCAvIHJlY3Qud2lkdGg7XG4gICAgaWYgKHByb2dyZXNzIDwgMCkge1xuICAgICAgcHJvZ3Jlc3MgPSAwO1xuICAgIH0gZWxzZSBpZiAocHJvZ3Jlc3MgPiAxKSB7XG4gICAgICBwcm9ncmVzcyA9IDE7XG4gICAgfVxuXG4gICAgaWYgKHByZXZpZXdDb250cm9sbGVyLmN1cnJlbnQpIHtcbiAgICAgIHByZXZpZXdDb250cm9sbGVyLmN1cnJlbnQuY3VycmVudFRpbWUgPSBwcm9ncmVzcyAqIGR1cmF0aW9uO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBjdXRTdHlsZSA9IHtcbiAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLmRhbmdlcjEsXG4gICAgaGVpZ2h0OiBcInZhcigtLXNjcnViYmVyLWhlaWdodClcIixcbiAgICBib3JkZXJSYWRpdXM6IFwidmFyKC0tc2NydWJiZXItYm9yZGVyLXJhZGl1cylcIixcbiAgICBib3hTaXppbmc6IFwiY29udGVudC1ib3hcIixcbiAgICBiYWNrZ3JvdW5kOiBcInJlcGVhdGluZy1saW5lYXItZ3JhZGllbnQoNDVkZWcsXCJcbiAgICAgICsgYCR7Q09MT1JTLmRhbmdlcjJ9LCAke0NPTE9SUy5kYW5nZXIyfSA0cHgsYFxuICAgICAgKyBgJHtDT0xPUlMuZGFuZ2VyMX0gNHB4LCAke0NPTE9SUy5kYW5nZXIxfSA4cHgpYCxcbiAgfSBhcyBjb25zdDtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7IHBhZGRpbmc6IDQgfX0+XG4gICAgICA8ZGl2IHJlZj17cmVmfSBjc3M9e3tcbiAgICAgICAgXCItLXNjcnViYmVyLWJvcmRlci1yYWRpdXNcIjogXCIzcHhcIixcbiAgICAgICAgXCItLXNjcnViYmVyLWhlaWdodFwiOiBcIjZweFwiLFxuICAgICAgICBcIkBtZWRpYSBub3QgKGFueS1wb2ludGVyOiBmaW5lKVwiOiB7XG4gICAgICAgICAgXCItLXNjcnViYmVyLWJvcmRlci1yYWRpdXNcIjogXCI2cHhcIixcbiAgICAgICAgICBcIi0tc2NydWJiZXItaGVpZ2h0XCI6IFwiMTJweFwiLFxuICAgICAgICB9LFxuXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLmFjY2VudDQsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcInZhcigtLXNjcnViYmVyLWhlaWdodClcIixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBcInZhcigtLXNjcnViYmVyLWJvcmRlci1yYWRpdXMpXCIsXG4gICAgICB9fT5cbiAgICAgICAgey8qIEFuIG92ZXJsYXkgdGhhdCBleHRlbmRzIGZ1cnRoZXIgYWJvdmUgYW5kIGJlbG93IHRoZSBwYXJlbnQgZm9yIGVhc2llciBjbGlja2luZy4gKi99XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBvbkNsaWNrPXtlID0+IHNldFRpbWUoZSl9XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgICAgICAgIHpJbmRleDogNSxcbiAgICAgICAgICAgIHRvcDogLTYsXG4gICAgICAgICAgICBib3R0b206IC02LFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7LyogVGhlIHBsYXloZWFkICovfVxuICAgICAgICAgIDxEcmFnZ2FibGVcbiAgICAgICAgICAgIHNjcnViYmVyUmVmPXtyZWZ9XG4gICAgICAgICAgICBwcmV2aWV3Q29udHJvbGxlcj17cHJldmlld0NvbnRyb2xsZXJ9XG4gICAgICAgICAgICBpbml0aWFsVGltZT17Y3VycmVudFRpbWV9XG4gICAgICAgICAgICBvbkRyYWc9e3RpbWUgPT4gbm90TnVsbGlzaChwcmV2aWV3Q29udHJvbGxlci5jdXJyZW50KS5jdXJyZW50VGltZSA9IHRpbWV9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICAgICAgd2lkdGg6IDE2LFxuICAgICAgICAgICAgICBoZWlnaHQ6IDE2LFxuICAgICAgICAgICAgICBcIkBtZWRpYSBub3QgKGFueS1wb2ludGVyOiBmaW5lKVwiOiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDI0LFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjQsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgICAgICAgICBib3JkZXI6IGAxcHggc29saWQgJHtDT0xPUlMubmV1dHJhbDQwfWAsXG4gICAgICAgICAgICB9fS8+XG4gICAgICAgICAgPC9EcmFnZ2FibGU+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIHsvKiBUaGUgdHdvIFwiZGVsZXRlZFwiIGFyZWFzICovfVxuICAgICAgICB7KHN0YXJ0ICE9IG51bGwgJiYgc3RhcnQgPiAwKSAmJiA8ZGl2IGNzcz17e1xuICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgYm9yZGVyUmlnaHQ6IFwiMnB4IHNvbGlkIGJsYWNrXCIsXG4gICAgICAgICAgd2lkdGg6IGAkeyhzdGFydCAvIGR1cmF0aW9uKSAqIDEwMH0lYCxcbiAgICAgICAgICAuLi5jdXRTdHlsZSxcbiAgICAgICAgfX0gLz59XG4gICAgICAgIHsoZW5kICE9IG51bGwgJiYgZW5kIDwgZHVyYXRpb24pICYmIDxkaXYgY3NzPXt7XG4gICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgYm9yZGVyTGVmdDogXCIycHggc29saWQgYmxhY2tcIixcbiAgICAgICAgICB3aWR0aDogYCR7KChkdXJhdGlvbiAtIGVuZCkgLyBkdXJhdGlvbikgKiAxMDB9JWAsXG4gICAgICAgICAgLi4uY3V0U3R5bGUsXG4gICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcInJpZ2h0XCIsXG4gICAgICAgICAgYmFja2dyb3VuZFNpemU6IFwiMTAwdndcIixcbiAgICAgICAgfX0gLz59XG5cbiAgICAgICAgey8qIFRoZSB0d28gdHJpbSBtYXJrZXJzICovfVxuICAgICAgICB7c2V0dGluZ3MucmV2aWV3Py5kaXNhYmxlQ3V0dGluZyB8fCA8PlxuICAgICAgICAgIDxEcmFnZ2FibGVcbiAgICAgICAgICAgIHNjcnViYmVyUmVmPXtyZWZ9XG4gICAgICAgICAgICBwcmV2aWV3Q29udHJvbGxlcj17cHJldmlld0NvbnRyb2xsZXJ9XG4gICAgICAgICAgICBpbml0aWFsVGltZT17c3RhcnQgPz8gMH1cbiAgICAgICAgICAgIGNsYW1wPXt0aW1lID0+IE1hdGgubWluKHRpbWUsIGVuZCA/PyBkdXJhdGlvbil9XG4gICAgICAgICAgICBvbkRyYWc9e3RpbWUgPT4gZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9TVEFSVFwiLCB0aW1lIH0pfVxuICAgICAgICAgID48Q3V0TWFya2VyIHNpZGU9XCJsZWZ0XCIgaXNIaWdoQ29udHJhc3Q9e2lzSGlnaENvbnRyYXN0fSAvPjwvRHJhZ2dhYmxlPlxuICAgICAgICAgIDxEcmFnZ2FibGVcbiAgICAgICAgICAgIHNjcnViYmVyUmVmPXtyZWZ9XG4gICAgICAgICAgICBwcmV2aWV3Q29udHJvbGxlcj17cHJldmlld0NvbnRyb2xsZXJ9XG4gICAgICAgICAgICBpbml0aWFsVGltZT17ZW5kID8/IGR1cmF0aW9ufVxuICAgICAgICAgICAgY2xhbXA9e3RpbWUgPT4gTWF0aC5tYXgodGltZSwgc3RhcnQgPz8gMCl9XG4gICAgICAgICAgICBvbkRyYWc9e3RpbWUgPT4gZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9FTkRcIiwgdGltZSB9KX1cbiAgICAgICAgICA+PEN1dE1hcmtlciBzaWRlPVwicmlnaHRcIiBpc0hpZ2hDb250cmFzdD17aXNIaWdoQ29udHJhc3R9IC8+PC9EcmFnZ2FibGU+XG4gICAgICAgIDwvPn1cblxuICAgICAgICB7LyogVGhlIHBsYXkgcHJvZ3Jlc3MgYmFyLCBvdmVybGF5aW5nIGRhcmtlbmluZyBldmVyeXRoaW5nIGJlaGluZC4gKi99XG4gICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgIHdpZHRoOiBgJHsoY3VycmVudFRpbWUgLyBkdXJhdGlvbikgKiAxMDB9JWAsXG4gICAgICAgICAgYmFja2Ryb3BGaWx0ZXI6IFwiYnJpZ2h0bmVzcygwLjc1KVwiLFxuICAgICAgICAgIGhlaWdodDogXCJ2YXIoLS1zY3J1YmJlci1oZWlnaHQpXCIsXG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiBcInZhcigtLXNjcnViYmVyLWJvcmRlci1yYWRpdXMpXCIsXG4gICAgICAgIH19IC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbnR5cGUgQ3V0TWFya2VyUHJvcHMgPSB7XG4gIHNpZGU6IFwibGVmdFwiIHwgXCJyaWdodFwiO1xuICBpc0hpZ2hDb250cmFzdDogYm9vbGVhbjtcbn07XG5cbmNvbnN0IEN1dE1hcmtlcjogUmVhY3QuRkM8Q3V0TWFya2VyUHJvcHM+ID0gKHsgc2lkZSwgaXNIaWdoQ29udHJhc3QgfSkgPT4gKFxuICA8ZGl2IGNzcz17e1xuICAgIHdpZHRoOiAxNCxcbiAgICBoZWlnaHQ6IDIwLFxuICAgIFwiQG1lZGlhIG5vdCAoYW55LXBvaW50ZXI6IGZpbmUpXCI6IHtcbiAgICAgIGhlaWdodDogMjQsXG4gICAgfSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgY29sb3I6IENPTE9SUy5uZXV0cmFsNzAsXG4gICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWw0MH1gLFxuICAgIGJvcmRlclJhZGl1czogNCxcbiAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgIGJveFNoYWRvdzogaXNIaWdoQ29udHJhc3QgPyBcIm5vbmVcIiA6IFwiMCAxcHggMnB4IHZhcigtLXNoYWRvdy1jb2xvcilcIixcbiAgfX0+XG4gICAgPEN1dE1hcmtlckljb24gY3NzPXt7XG4gICAgICB0cmFuc2Zvcm06IGBzY2FsZSgxLjIpICR7c2lkZSA9PSBcInJpZ2h0XCIgPyBcInNjYWxlWCgtMSlcIiA6IFwiXCJ9YCxcbiAgICB9fSAvPlxuICA8L2Rpdj5cbik7XG5cbnR5cGUgRHJhZ2dhYmxlUHJvcHMgPSBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjx7XG4gIHByZXZpZXdDb250cm9sbGVyOiBSZWZPYmplY3Q8UHJldmlld0hhbmRsZT47XG4gIHNjcnViYmVyUmVmOiBSZWZPYmplY3Q8SFRNTERpdkVsZW1lbnQ+O1xuICBpbml0aWFsVGltZTogbnVtYmVyO1xuXG4gIC8qKiBDYWxsZWQgb24gZXZlcnkgbW91c2UgbW92ZSB3aXRoIHRoZSB1cGRhdGVkIHZhbHVlICovXG4gIG9uRHJhZz86ICh0aW1lOiBudW1iZXIpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIENhbGxlZCBvbiBldmVyeSBtb3VzZSBtb3ZlLiBUaGUgY2FsY3VsYXRlIHRpbWUgaXMgcGFzc2VkIGFzIGFyZ3VtZW50IGFuZFxuICAgKiB0aGUgZnVuY3Rpb24gY2FuIG1vZGlmeSBpdCBzb21laG93LCBpLmUuIGNsYW1wIGl0IHRvIGEgcmFuZ2UuIENhbGxlZFxuICAgKiBiZWZvcmUgYG9uRHJhZ2AuXG4gICAqL1xuICBjbGFtcD86ICh0aW1lOiBudW1iZXIpID0+IG51bWJlcjtcbn0+O1xuXG4vKipcbiAqIE1ha2VzIHRoZSBnaXZlbiBgY2hpbGRyZW5gIGRyYWdnYWJsZSwgbGV0dGluZyB0aGUgdXNlciBhZGp1c3QgaXRzIHggcG9zaXRpb25cbiAqIGluc2lkZSB0aGUgc2NydWJiZXIuXG4gKi9cbmNvbnN0IERyYWdnYWJsZTogUmVhY3QuRkM8RHJhZ2dhYmxlUHJvcHM+ID0gKHtcbiAgcHJldmlld0NvbnRyb2xsZXIsXG4gIHNjcnViYmVyUmVmLFxuICBpbml0aWFsVGltZSxcbiAgb25EcmFnLFxuICBjbGFtcCA9IHQgPT4gdCxcbiAgY2hpbGRyZW4sXG59KSA9PiB7XG4gIGNvbnN0IGR1cmF0aW9uID0gcHJldmlld0NvbnRyb2xsZXIuY3VycmVudD8uZHVyYXRpb24gfHwgSW5maW5pdHk7XG5cbiAgY29uc3QgaW5pdGlhbFBvcyA9IGluaXRpYWxUaW1lIC8gZHVyYXRpb247XG4gIGNvbnN0IHBvcyA9IHVzZVJlZjxudW1iZXI+KGluaXRpYWxQb3MpO1xuICBjb25zdCBzY3J1YmJlclJlY3QgPSB1c2VSZWY8RE9NUmVjdD4oKTtcbiAgY29uc3QgcmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcbiAgY29uc3QgaXNEcmFnZ2luZyA9IHVzZVJlZihmYWxzZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBvbk1vdXNlVXAgPSAoKSA9PiB7XG4gICAgICBpZiAoaXNEcmFnZ2luZy5jdXJyZW50KSB7XG4gICAgICAgIGlzRHJhZ2dpbmcuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICBvbkRyYWc/Lihwb3MuY3VycmVudCAqIGR1cmF0aW9uKTtcblxuICAgICAgICAvLyBSZXNldCB0aGUgZWxlbWVudCBzdHlsZSBzbyB0aGF0IHRoZSBgbGVmdGAgdmFsdWUgZnJvbSB0aGUgY2xhc3MgQ1NTXG4gICAgICAgIC8vIGNhbiB0YWtlIG92ZXIgYWdhaW4uXG4gICAgICAgIG5vdE51bGxpc2gocmVmLmN1cnJlbnQpLnN0eWxlLmxlZnQgPSBcIlwiO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgb25Nb3VzZU1vdmUgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgb25Nb3ZlKGUucGFnZVgpO1xuICAgIH07XG4gICAgY29uc3Qgb25Nb3ZlID0gKHBhZ2VYOiBudW1iZXIpID0+IHtcbiAgICAgIGlmIChpc0RyYWdnaW5nLmN1cnJlbnQpIHtcbiAgICAgICAgY29uc3QgcmVjdCA9IG5vdE51bGxpc2goc2NydWJiZXJSZWN0LmN1cnJlbnQpO1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gTWF0aC5taW4oMS4wLCBNYXRoLm1heCgwLjAsIChwYWdlWCAtIHJlY3QubGVmdCkgLyByZWN0LndpZHRoKSk7XG4gICAgICAgIHBvcy5jdXJyZW50ID0gY2xhbXAoZHVyYXRpb24gKiBwZXJjZW50YWdlKSAvIGR1cmF0aW9uO1xuICAgICAgICBvbkRyYWc/Lihwb3MuY3VycmVudCAqIGR1cmF0aW9uKTtcblxuICAgICAgICAvLyBXZSBzZXQgdGhlIGxlZnQgdmFsdWUgaGVyZSBkaXJlY3RseSBpbnN0ZWFkIG9mIHdhaXRpbmcgZm9yIHRoZSBSZWFjdFxuICAgICAgICAvLyBzdGF0ZSBjaGFuZ2UgdG8gdHJpY2tsZSB0aHJvdWdoLiBUaGlzIGFjdHVhbGx5IGxlYWRzIHRvIGxlc3MgaW5wdXRcbiAgICAgICAgLy8gZGVsYXkgYW5kIGEgc21vb3RoZXIgZHJhZ2dpbmcuXG4gICAgICAgIG5vdE51bGxpc2gocmVmLmN1cnJlbnQpLnN0eWxlLmxlZnQgPSBgJHtwb3MuY3VycmVudCAqIDEwMH0lYDtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG9uVG91Y2hNb3ZlID0gKGU6IFRvdWNoRXZlbnQpID0+IHtcbiAgICAgIGlmIChlLnRvdWNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBvbk1vdmUoZS50b3VjaGVzWzBdLnBhZ2VYKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgb25Nb3VzZVVwKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgb25Nb3VzZVVwKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG9uTW91c2VNb3ZlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIG9uVG91Y2hNb3ZlKTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBvbk1vdXNlVXApO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIG9uTW91c2VVcCk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG9uTW91c2VNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgb25Ub3VjaE1vdmUpO1xuICAgIH07XG4gIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgcmVmPXtyZWZ9XG4gICAgICBvbk1vdXNlRG93bj17KCkgPT4ge1xuICAgICAgICBpc0RyYWdnaW5nLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICBzY3J1YmJlclJlY3QuY3VycmVudCA9IG5vdE51bGxpc2goc2NydWJiZXJSZWYuY3VycmVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB9fVxuICAgICAgb25Ub3VjaFN0YXJ0PXsoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVE9VQ0ggU1RBUlRcIik7XG4gICAgICAgIGlzRHJhZ2dpbmcuY3VycmVudCA9IHRydWU7XG4gICAgICAgIHNjcnViYmVyUmVjdC5jdXJyZW50ID0gbm90TnVsbGlzaChzY3J1YmJlclJlZi5jdXJyZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIH19XG4gICAgICBjc3M9e3tcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgekluZGV4OiAxMCxcbiAgICAgICAgbGVmdDogYCR7aW5pdGlhbFBvcyAqIDEwMH0lYCxcbiAgICAgICAgY3Vyc29yOiBcImdyYWJcIixcbiAgICAgICAgdXNlclNlbGVjdDogXCJub25lXCIsXG4gICAgICAgIHRvcDogXCI1MCVcIixcbiAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoLTUwJSkgdHJhbnNsYXRlWCgtNTAlKVwiLFxuICAgICAgICBwYWRkaW5nOiBcIjhweCA0cHhcIiwgLy8gVG8gbWFrZSBncmFiYmluZyBpdCBlYXNpZXJcbiAgICAgIH19XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgQ29udHJvbHM6IFJlYWN0LkZDPFNoYXJlZFByb3BzPiA9ICh7IGN1cnJlbnRUaW1lLCBwcmV2aWV3Q29udHJvbGxlciB9KSA9PiB7XG4gIGNvbnN0IHsgc3RhcnQsIGVuZCB9ID0gdXNlU3R1ZGlvU3RhdGUoKTtcbiAgY29uc3QgcmVjb3JkaW5nRGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBzZXR0aW5ncyA9IHVzZVNldHRpbmdzKCk7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcblxuICBjb25zdCB0b2dnbGVQbGF5UGF1c2UgPSAoKSA9PiB7XG4gICAgY29uc3QgY29udHJvbGxlciA9IHByZXZpZXdDb250cm9sbGVyLmN1cnJlbnQ7XG4gICAgaWYgKGNvbnRyb2xsZXIpIHtcbiAgICAgIGlmIChjb250cm9sbGVyLmlzUGxheWluZykge1xuICAgICAgICBjb250cm9sbGVyLnBhdXNlKCk7XG4gICAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZXIuaXNSZWFkeVRvUGxheSkge1xuICAgICAgICBjb250cm9sbGVyLnBsYXkoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLnJldmlldy5wbGF5UGF1c2UsIHRvZ2dsZVBsYXlQYXVzZSwge1xuICAgIGlnbm9yZUV2ZW50V2hlbjogZSA9PiBlLmNvZGUgPT09IFwiU3BhY2VcIiAmJiBlLnRhcmdldCBpbnN0YW5jZW9mIEhUTUxCdXR0b25FbGVtZW50LFxuICB9KTtcbiAgY29uc3Qgc2hvd1Nob3J0Y3V0cyA9IHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMoKTtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICBjb25zdCBpc1BsYXlpbmcgPSBwcmV2aWV3Q29udHJvbGxlci5jdXJyZW50Py5pc1BsYXlpbmc7XG4gIGNvbnN0IGxhYmVsID0gdChgc3RlcHMucmV2aWV3LiR7aXNQbGF5aW5nID8gXCJwYXVzZVwiIDogXCJwbGF5XCJ9YCk7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgZ2FwOiAxNixcbiAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgYWxpZ25JdGVtczogXCJmbGV4LWVuZFwiLFxuICAgIH19PlxuICAgICAgey8qIEN1dCBzdGFydCAqL31cbiAgICAgIHtzZXR0aW5ncy5yZXZpZXc/LmRpc2FibGVDdXR0aW5nIHx8IDxDdXRDb250cm9sc1xuICAgICAgICBtYXJrZXI9XCJzdGFydFwiXG4gICAgICAgIHZhbHVlPXtzdGFydH1cbiAgICAgICAgY29udHJvbD17ZW5kfVxuICAgICAgICBpbnZhcmlhbnQ9eyhzdGFydCwgZW5kKSA9PiBzdGFydCA8IGVuZH1cbiAgICAgICAgey4uLnsgcmVjb3JkaW5nRGlzcGF0Y2gsIHByZXZpZXdDb250cm9sbGVyLCBjdXJyZW50VGltZSB9fVxuICAgICAgLz59XG5cbiAgICAgIHsvKiBQbGF5L3BhdXNlIGJ1dHRvbiAqL31cbiAgICAgIDxXaXRoVG9vbHRpcCB0b29sdGlwPXtsYWJlbH0+XG4gICAgICAgIDxQcm90b0J1dHRvblxuICAgICAgICAgIGFyaWEtbGFiZWw9e2xhYmVsfVxuICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMuYWNjZW50NSxcbiAgICAgICAgICAgIGNvbG9yOiBpc0hpZ2hDb250cmFzdCA/IENPTE9SUy5uZXV0cmFsMDUgOiBcIndoaXRlXCIsXG4gICAgICAgICAgICBib3JkZXI6IFwibm9uZVwiLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjUwJVwiLFxuICAgICAgICAgICAgd2lkdGg6IDQ4LFxuICAgICAgICAgICAgaGVpZ2h0OiA0OCxcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZm9udFNpemU6IDI0LFxuICAgICAgICAgICAgLi4uZm9jdXNTdHlsZSh7IG9mZnNldDogMSB9KSxcbiAgICAgICAgICAgIFwiJjpob3ZlciwgOmZvY3VzLXZpc2libGVcIjoge1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5hY2NlbnQ2LFxuICAgICAgICAgICAgICAuLi5pc0hpZ2hDb250cmFzdCAmJiB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgICAgICAgICAgIG91dGxpbmU6IGAycHggc29saWQgJHtDT0xPUlMuYWNjZW50NH1gLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBDT0xPUlMuYWNjZW50NCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfX1cbiAgICAgICAgICBvbkNsaWNrPXt0b2dnbGVQbGF5UGF1c2V9XG4gICAgICAgICAgb25Nb3VzZURvd249e2UgPT4gZS5wcmV2ZW50RGVmYXVsdCgpfVxuICAgICAgICA+XG4gICAgICAgICAge3Nob3dTaG9ydGN1dHMgJiYgKFxuICAgICAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgYm90dG9tOiAtMjAsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDIsXG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogNCxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgICAgICAgfX0+PFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17U0hPUlRDVVRTLnJldmlldy5wbGF5UGF1c2Uuc3BsaXQoXCI7XCIpWzBdfSAvPjwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgICAge2lzUGxheWluZyA/IDxGaVBhdXNlIC8+IDogPEZpUGxheSBjc3M9e3sgbWFyZ2luTGVmdDogMyB9fSAvPn1cbiAgICAgICAgPC9Qcm90b0J1dHRvbj5cbiAgICAgIDwvV2l0aFRvb2x0aXA+XG5cbiAgICAgIHsvKiBDdXQgZW5kICovfVxuICAgICAge3NldHRpbmdzLnJldmlldz8uZGlzYWJsZUN1dHRpbmcgfHwgPEN1dENvbnRyb2xzXG4gICAgICAgIG1hcmtlcj1cImVuZFwiXG4gICAgICAgIHZhbHVlPXtlbmR9XG4gICAgICAgIGNvbnRyb2w9e3N0YXJ0fVxuICAgICAgICBpbnZhcmlhbnQ9eyhlbmQsIHN0YXJ0KSA9PiBzdGFydCA8IGVuZH1cbiAgICAgICAgey4uLnsgcmVjb3JkaW5nRGlzcGF0Y2gsIHByZXZpZXdDb250cm9sbGVyLCBjdXJyZW50VGltZSB9fVxuICAgICAgLz59XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG50eXBlIEN1dENvbnRyb2xzUHJvcHMgPSBTaGFyZWRQcm9wcyAmIHtcbiAgbWFya2VyOiBcInN0YXJ0XCIgfCBcImVuZFwiO1xuICB2YWx1ZTogbnVtYmVyIHwgbnVsbDtcbiAgY29udHJvbDogbnVtYmVyIHwgbnVsbDtcbiAgaW52YXJpYW50OiAoc2VsZjogbnVtYmVyLCBjb250cm9sOiBudW1iZXIpID0+IGJvb2xlYW47XG4gIHJlY29yZGluZ0Rpc3BhdGNoOiBEaXNwYXRjaGVyO1xufTtcblxuY29uc3QgQ3V0Q29udHJvbHM6IFJlYWN0LkZDPEN1dENvbnRyb2xzUHJvcHM+ID0gKFxuICB7IG1hcmtlciwgdmFsdWUsIGNvbnRyb2wsIGludmFyaWFudCwgY3VycmVudFRpbWUsIHByZXZpZXdDb250cm9sbGVyLCByZWNvcmRpbmdEaXNwYXRjaCB9XG4pID0+IHtcbiAgY29uc3QgeyB0LCBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuXG4gIGNvbnN0IGRpc2FibGVkID0gY3VycmVudFRpbWUgPD0gQUxNT1NUX1pFUk9cbiAgICB8fCAocHJldmlld0NvbnRyb2xsZXIuY3VycmVudCAmJiBjdXJyZW50VGltZSA+PSBwcmV2aWV3Q29udHJvbGxlci5jdXJyZW50LmR1cmF0aW9uKVxuICAgIHx8IChjb250cm9sICE9IG51bGwgJiYgIWludmFyaWFudChjdXJyZW50VGltZSwgY29udHJvbCkpO1xuXG4gIGNvbnN0IGN1dCA9ICgpID0+IHtcbiAgICBpZiAoIXByZXZpZXdDb250cm9sbGVyLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgdmFsdWUgPSBwcmV2aWV3Q29udHJvbGxlci5jdXJyZW50LmN1cnJlbnRUaW1lO1xuICAgIC8vIFdlIGRpc2FibGUgdGhlIGJ1dHRvbnMgd2hlbiB0aGUgZ2VuZXJhdGVkIHZhbHVlcyB3b3VsZCBiZSBpbnZhbGlkLFxuICAgIC8vIGJ1dCB3ZSByZWx5IG9uIGB0aW1ldXBkYXRlYCBldmVudHMgZm9yIHRoYXQsIHdoaWNoIGFyZSBub3QgZ3VhcmFudGVlZFxuICAgIC8vIHRvIGJlIHRpbWVseSwgc28gd2Ugc3RpbGwgaGF2ZSB0byBjaGVjayB0aGUgaW52YXJpYW50IHdoZW4gYWN0dWFsbHlcbiAgICAvLyB1cGRhdGluZyB0aGUgc3RhdGUuIEhlcmUgd2UgZGVjaWRlZCB0byBqdXN0IGNsYW1wIHRoZSB2YWx1ZSBhcHByb3ByaWF0ZWx5LlxuICAgIGlmIChjb250cm9sICE9IG51bGwgJiYgIWludmFyaWFudCh2YWx1ZSwgY29udHJvbCkpIHtcbiAgICAgIHZhbHVlID0gY29udHJvbDtcbiAgICB9XG4gICAgcmVjb3JkaW5nRGlzcGF0Y2goe1xuICAgICAgdHlwZTogbWFya2VyID09PSBcInN0YXJ0XCIgPyBcIlVQREFURV9TVEFSVFwiIDogXCJVUERBVEVfRU5EXCIsXG4gICAgICB0aW1lOiB2YWx1ZSxcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBzaG9ydGN1dCA9IFNIT1JUQ1VUUy5yZXZpZXdbbWFya2VyID09PSBcInN0YXJ0XCIgPyBcImN1dExlZnRcIiA6IFwiY3V0UmlnaHRcIl07XG4gIHVzZVNob3J0Y3V0KHNob3J0Y3V0LCBjdXQsIHsgZW5hYmxlZDogIWRpc2FibGVkIH0pO1xuICB1c2VTaG9ydGN1dChcbiAgICBTSE9SVENVVFMucmV2aWV3W21hcmtlciA9PT0gXCJzdGFydFwiID8gXCJyZW1vdmVDdXRMZWZ0XCIgOiBcInJlbW92ZUN1dFJpZ2h0XCJdLFxuICAgICgpID0+IHJlY29yZGluZ0Rpc3BhdGNoKHtcbiAgICAgIHR5cGU6IG1hcmtlciA9PT0gXCJzdGFydFwiID8gXCJVUERBVEVfU1RBUlRcIiA6IFwiVVBEQVRFX0VORFwiLFxuICAgICAgdGltZTogbnVsbCxcbiAgICB9KSxcbiAgKTtcbiAgY29uc3Qgc2hvd1Nob3J0Y3V0cyA9IHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMoKTtcblxuICBjb25zdCB0aW1lc3RhbXAgPSAoXG4gICAgPGRpdiBjc3M9e3sgbWluV2lkdGg6IDY4LCB0ZXh0QWxpZ246IG1hcmtlciA9PSBcInN0YXJ0XCIgPyBcInJpZ2h0XCIgOiBcImxlZnRcIiB9fT5cbiAgICAgIHsgdmFsdWUgIT09IG51bGwgJiYgKFxuICAgICAgICA8V2l0aFRvb2x0aXAgdG9vbHRpcD17dChcInN0ZXBzLnJldmlldy5qdW1wLXRvLWN1dC1wb2ludFwiKX0+XG4gICAgICAgICAgPFByb3RvQnV0dG9uXG4gICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgcGFkZGluZzogXCI0cHggMFwiLFxuICAgICAgICAgICAgICBjb2xvcjogQ09MT1JTLmFjY2VudDYsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25DbGljaz17ZXZlbnQgPT4ge1xuICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBpZiAocHJldmlld0NvbnRyb2xsZXIuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHByZXZpZXdDb250cm9sbGVyLmN1cnJlbnQuY3VycmVudFRpbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uTW91c2VEb3duPXtlID0+IGUucHJldmVudERlZmF1bHQoKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7Zm9ybWF0VGltZSh2YWx1ZSwgdmFsdWUsIGkxOG4ubGFuZ3VhZ2UpfVxuICAgICAgICAgIDwvUHJvdG9CdXR0b24+XG4gICAgICAgIDwvV2l0aFRvb2x0aXA+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xuXG4gIGNvbnN0IGN1dEJ1dHRvbiA9IChcbiAgICA8V2l0aFRvb2x0aXAgdG9vbHRpcD17dChgc3RlcHMucmV2aWV3LnNldC0ke21hcmtlcn1gKX0+XG4gICAgICA8UHJvdG9CdXR0b25cbiAgICAgICAgey4uLnsgZGlzYWJsZWQgfX1cbiAgICAgICAgYXJpYS1sYWJlbD17dChgc3RlcHMucmV2aWV3LnNldC0ke21hcmtlcn1gKX1cbiAgICAgICAgb25DbGljaz17Y3V0fVxuICAgICAgICBvbk1vdXNlRG93bj17ZSA9PiBlLnByZXZlbnREZWZhdWx0KCl9XG4gICAgICAgIGNzcz17e1xuICAgICAgICAgIGxpbmVIZWlnaHQ6IDAsXG4gICAgICAgICAgcGFkZGluZzogXCI0cHggOHB4XCIsXG4gICAgICAgICAgcGFkZGluZ1RvcDogNCxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDQsXG4gICAgICAgICAgLi4uZm9jdXNTdHlsZSgpLFxuICAgICAgICAgIFwiJjpkaXNhYmxlZFwiOiB7XG4gICAgICAgICAgICBvcGFjaXR5OiAwLjMsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIiY6bm90KDpkaXNhYmxlZCk6aG92ZXJcIjoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDEwLFxuICAgICAgICAgICAgY29sb3I6IGlzSGlnaENvbnRyYXN0ID8gQ09MT1JTLmFjY2VudDQgOiBcImluaGVyaXRcIixcbiAgICAgICAgICB9LFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8Q3V0SGVyZUljb24gY3NzPXt7XG4gICAgICAgICAgaGVpZ2h0OiAzNixcbiAgICAgICAgICB3aWR0aDogMzYsXG4gICAgICAgICAgdHJhbnNmb3JtOiBtYXJrZXIgPT09IFwiZW5kXCIgPyBcInNjYWxlWCgtMSlcIiA6IFwiXCIsXG4gICAgICAgIH19IC8+XG4gICAgICAgIHtzaG93U2hvcnRjdXRzICYmICFkaXNhYmxlZCAmJiAoXG4gICAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICBib3R0b206IC0yMCxcbiAgICAgICAgICAgIHBhZGRpbmc6IDIsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDQsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgICAgICAgfX0+PFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17c2hvcnRjdXR9IC8+PC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L1Byb3RvQnV0dG9uPlxuICAgIDwvV2l0aFRvb2x0aXA+XG4gICk7XG5cbiAgcmV0dXJuIG1hcmtlciA9PT0gXCJzdGFydFwiXG4gICAgPyA8Pnt0aW1lc3RhbXB9e2N1dEJ1dHRvbn08Lz5cbiAgICA6IDw+e2N1dEJ1dHRvbn17dGltZXN0YW1wfTwvPjtcbn07XG4iXX0= */\"),\n    children: value !== null && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.WithTooltip, {\n      tooltip: t(\"steps.review.jump-to-cut-point\"),\n      children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.ProtoButton, {\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n          padding: \"4px 0\",\n          color: _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.accent6\n        },  false ? 0 : \";label:timestamp;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n        onClick: event => {\n          event.preventDefault();\n          if (previewController.current) {\n            previewController.current.currentTime = value;\n          }\n        },\n        onMouseDown: e => e.preventDefault(),\n        children: formatTime(value, value, i18n.language)\n      })\n    })\n  });\n  const cutButton = (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.WithTooltip, {\n    tooltip: t(`steps.review.set-${marker}`),\n    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.ProtoButton, {\n      disabled,\n      \"aria-label\": t(`steps.review.set-${marker}`),\n      onClick: cut,\n      onMouseDown: e => e.preventDefault(),\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n        lineHeight: 0,\n        padding: \"4px 8px\",\n        paddingTop: 4,\n        borderRadius: 4,\n        ...(0,_util__WEBPACK_IMPORTED_MODULE_7__.focusStyle)(),\n        \"&:disabled\": {\n          opacity: 0.3\n        },\n        \"&:not(:disabled):hover\": {\n          backgroundColor: _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.neutral10,\n          color: isHighContrast ? _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.accent4 : \"inherit\"\n        }\n      },  false ? 0 : \";label:cutButton;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n      children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_cut_here_icon_svg__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n          height: 36,\n          width: 36,\n          transform: marker === \"end\" ? \"scaleX(-1)\" : \"\"\n        },  false ? 0 : \";label:cutButton;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n      }), showShortcuts && !disabled && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n          position: \"absolute\",\n          bottom: -20,\n          padding: 2,\n          borderRadius: 4,\n          backgroundColor: _util__WEBPACK_IMPORTED_MODULE_7__.COLORS.neutral05\n        },  false ? 0 : \";label:cutButton;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_shortcuts__WEBPACK_IMPORTED_MODULE_9__.ShortcutKeys, {\n          shortcut: shortcut\n        })\n      })]\n    })\n  });\n  return marker === \"start\" ? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n    children: [timestamp, cutButton]\n  }) : (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n    children: [cutButton, timestamp]\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/steps/review/control-box.tsx\n");

/***/ }),

/***/ "./src/steps/review/index.tsx":
/*!************************************!*\
  !*** ./src/steps/review/index.tsx ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALMOST_ZERO: function() { return /* binding */ ALMOST_ZERO; },\n/* harmony export */   Review: function() { return /* binding */ Review; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var _elements__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../elements */ \"./src/steps/elements.tsx\");\n/* harmony import */ var _studio_state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../studio-state */ \"./src/studio-state.tsx\");\n/* harmony import */ var _ui_ErrorBox__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../ui/ErrorBox */ \"./src/ui/ErrorBox.tsx\");\n/* harmony import */ var _control_box__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./control-box */ \"./src/steps/review/control-box.tsx\");\n/* harmony import */ var _preview__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./preview */ \"./src/steps/review/preview.tsx\");\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\n\n\n// In some situation we would like to set the current time to 0 or check for it.\n// Thanks to a browser bug, setting the current time to 0 fails. Using a number\n// slightly higher works though. So we use this 1ms time for now. Sigh.\n\n\nconst ALMOST_ZERO = 0.001;\nvar _ref2 =  false ? 0 : {\n  name: \"67vtkd-Review\",\n  styles: \"flex:1;display:flex;align-items:center;justify-content:center;font-size:42px;label:Review;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3Jldmlldy9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOERhIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3Jldmlldy9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IHsgU3Bpbm5lciwgbWF0Y2ggfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5pbXBvcnQgeyBTdGVwQ29udGFpbmVyIH0gZnJvbSBcIi4uL2VsZW1lbnRzXCI7XG5pbXBvcnQgeyB1c2VTdHVkaW9TdGF0ZSwgdXNlRGlzcGF0Y2ggfSBmcm9tIFwiLi4vLi4vc3R1ZGlvLXN0YXRlXCI7XG5pbXBvcnQgeyBTdGVwUHJvcHMgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7IEVycm9yQm94IH0gZnJvbSBcIi4uLy4uL3VpL0Vycm9yQm94XCI7XG5pbXBvcnQgeyBDb250cm9sQm94IH0gZnJvbSBcIi4vY29udHJvbC1ib3hcIjtcbmltcG9ydCB7IFByZXZpZXcsIFByZXZpZXdIYW5kbGUgfSBmcm9tIFwiLi9wcmV2aWV3XCI7XG5pbXBvcnQgeyBGaVRyYXNoIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5cblxuLy8gSW4gc29tZSBzaXR1YXRpb24gd2Ugd291bGQgbGlrZSB0byBzZXQgdGhlIGN1cnJlbnQgdGltZSB0byAwIG9yIGNoZWNrIGZvciBpdC5cbi8vIFRoYW5rcyB0byBhIGJyb3dzZXIgYnVnLCBzZXR0aW5nIHRoZSBjdXJyZW50IHRpbWUgdG8gMCBmYWlscy4gVXNpbmcgYSBudW1iZXJcbi8vIHNsaWdodGx5IGhpZ2hlciB3b3JrcyB0aG91Z2guIFNvIHdlIHVzZSB0aGlzIDFtcyB0aW1lIGZvciBub3cuIFNpZ2guXG5leHBvcnQgY29uc3QgQUxNT1NUX1pFUk8gPSAwLjAwMTtcblxuZXhwb3J0IGNvbnN0IFJldmlldzogUmVhY3QuRkM8U3RlcFByb3BzPiA9ICh7IGdvVG9GaXJzdFN0ZXAsIGdvVG9OZXh0U3RlcCB9KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgcmVjb3JkaW5nRGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCB7IHJlY29yZGluZ3MsIHByZW1hdHVyZVJlY29yZGluZ0VuZCwgdmlkZW9DaG9pY2UgfSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IGVtcHR5UmVjb3JkaW5nID0gcmVjb3JkaW5ncy5zb21lKHJlYyA9PiByZWMubWVkaWEuc2l6ZSA9PT0gMCk7XG4gIGNvbnN0IHByZXZpZXdDb250cm9sbGVyID0gdXNlUmVmPFByZXZpZXdIYW5kbGU+KG51bGwpO1xuICBjb25zdCBbY3VycmVudFRpbWUsIHNldEN1cnJlbnRUaW1lXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbcHJldmlld1JlYWR5LCBzZXRQcmV2aWV3UmVhZHldID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbX2lzUGF1c2VkLCBzZXRJc1BhdXNlZF0gPSB1c2VTdGF0ZSh0cnVlKTtcblxuICBjb25zdCBleHBlY3RlZFJlY29yZGluZ3MgPSBtYXRjaCh2aWRlb0Nob2ljZSwge1xuICAgIFwiYm90aFwiOiAoKSA9PiAyLFxuICAgIFwiZGlzcGxheVwiOiAoKSA9PiAxLFxuICAgIFwidXNlclwiOiAoKSA9PiAxLFxuICAgIFwibm9uZVwiOiAoKSA9PiAwLFxuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxTdGVwQ29udGFpbmVyXG4gICAgICB0aXRsZT17dChcInN0ZXBzLnJldmlldy5sYWJlbFwiKX1cbiAgICAgIG5vdGU9e3QoXCJzdGVwcy5yZXZpZXcub25seS1vbi11cGxvYWQtbm90ZVwiKX1cbiAgICAgIHByZXZCdXR0b249e3tcbiAgICAgICAgZGFuZ2VyOiB0cnVlLFxuICAgICAgICBpY29uOiA8RmlUcmFzaCAvPixcbiAgICAgICAgbGFiZWw6IHQoXCJzdGVwcy5yZXZpZXcuYnV0dG9uLWRpc2NhcmQtYW5kLXJlY29yZFwiKSxcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGRvSXQgPSB3aW5kb3cuY29uZmlybSh0KFwiY29uZmlybS1kaXNjYXJkLXJlY29yZGluZ3NcIikpO1xuICAgICAgICAgIGlmIChkb0l0KSB7XG4gICAgICAgICAgICByZWNvcmRpbmdEaXNwYXRjaCh7IHR5cGU6IFwiUkVTRVRcIiB9KTtcbiAgICAgICAgICAgIGdvVG9GaXJzdFN0ZXAoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9fVxuICAgICAgbmV4dEJ1dHRvbj17eyBvbkNsaWNrOiBnb1RvTmV4dFN0ZXAgfX1cbiAgICA+XG4gICAgICB7cHJlbWF0dXJlUmVjb3JkaW5nRW5kICYmIChcbiAgICAgICAgPEVycm9yQm94IGJvZHk9e3QoXCJlcnJvci1sb3N0LXN0cmVhbS1lbmQtcmVjb3JkaW5nXCIpfSAvPlxuICAgICAgKX1cblxuICAgICAge2VtcHR5UmVjb3JkaW5nICYmIChcbiAgICAgICAgPEVycm9yQm94IGJvZHk9e3QoXCJzdGVwcy5yZXZpZXcuZXJyb3ItZW1wdHktcmVjb3JkaW5nXCIpfSAvPlxuICAgICAgKX1cblxuICAgICAgeyghcHJldmlld1JlYWR5IHx8IHJlY29yZGluZ3MubGVuZ3RoICE9PSBleHBlY3RlZFJlY29yZGluZ3MpICYmIChcbiAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICBmbGV4OiAxLFxuICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgICAgZm9udFNpemU6IDQyLFxuICAgICAgICB9fT5cbiAgICAgICAgICA8U3Bpbm5lciAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgICB7cmVjb3JkaW5ncy5sZW5ndGggPT09IGV4cGVjdGVkUmVjb3JkaW5ncyAmJiAoXG4gICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogcHJldmlld1JlYWR5ID8gXCJmbGV4XCIgOiBcIm5vbmVcIixcbiAgICAgICAgICBmbGV4OiBcIjEgMSBhdXRvXCIsXG4gICAgICAgICAgZ2FwOiAxNixcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICB9fT5cbiAgICAgICAgICA8UHJldmlld1xuICAgICAgICAgICAgcmVmPXtwcmV2aWV3Q29udHJvbGxlcn1cbiAgICAgICAgICAgIG9uVGltZVVwZGF0ZT17ZXZlbnQgPT4ge1xuICAgICAgICAgICAgICBzZXRDdXJyZW50VGltZShldmVudC5jdXJyZW50VGFyZ2V0LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvblBhdXNlUGxheT17cGF1c2VkID0+IHNldElzUGF1c2VkKHBhdXNlZCl9XG4gICAgICAgICAgICBvblJlYWR5PXsoKSA9PiBzZXRQcmV2aWV3UmVhZHkodHJ1ZSl9XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIDxDb250cm9sQm94IHsuLi57IHByZXZpZXdDb250cm9sbGVyLCBjdXJyZW50VGltZSB9fSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9TdGVwQ29udGFpbmVyPlxuICApO1xufTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst Review = _ref => {\n  let {\n    goToFirstStep,\n    goToNextStep\n  } = _ref;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const recordingDispatch = (0,_studio_state__WEBPACK_IMPORTED_MODULE_4__.useDispatch)();\n  const {\n    recordings,\n    prematureRecordingEnd,\n    videoChoice\n  } = (0,_studio_state__WEBPACK_IMPORTED_MODULE_4__.useStudioState)();\n  const emptyRecording = recordings.some(rec => rec.media.size === 0);\n  const previewController = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const [currentTime, setCurrentTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  const [previewReady, setPreviewReady] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const [_isPaused, setIsPaused] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n  const expectedRecordings = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.match)(videoChoice, {\n    \"both\": () => 2,\n    \"display\": () => 1,\n    \"user\": () => 1,\n    \"none\": () => 0\n  });\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_elements__WEBPACK_IMPORTED_MODULE_3__.StepContainer, {\n    title: t(\"steps.review.label\"),\n    note: t(\"steps.review.only-on-upload-note\"),\n    prevButton: {\n      danger: true,\n      icon: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_9__.FiTrash, {}),\n      label: t(\"steps.review.button-discard-and-record\"),\n      onClick: () => {\n        const doIt = window.confirm(t(\"confirm-discard-recordings\"));\n        if (doIt) {\n          recordingDispatch({\n            type: \"RESET\"\n          });\n          goToFirstStep();\n        }\n      }\n    },\n    nextButton: {\n      onClick: goToNextStep\n    },\n    children: [prematureRecordingEnd && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_ui_ErrorBox__WEBPACK_IMPORTED_MODULE_5__.ErrorBox, {\n      body: t(\"error-lost-stream-end-recording\")\n    }), emptyRecording && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_ui_ErrorBox__WEBPACK_IMPORTED_MODULE_5__.ErrorBox, {\n      body: t(\"steps.review.error-empty-recording\")\n    }), (!previewReady || recordings.length !== expectedRecordings) && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"div\", {\n      css: _ref2,\n      children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.Spinner, {})\n    }), recordings.length === expectedRecordings && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(\"div\", {\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_10__.css)({\n        display: previewReady ? \"flex\" : \"none\",\n        flex: \"1 1 auto\",\n        gap: 16,\n        flexDirection: \"column\"\n      },  false ? 0 : \";label:Review;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3Jldmlldy9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUVhIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3Jldmlldy9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IHsgU3Bpbm5lciwgbWF0Y2ggfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5pbXBvcnQgeyBTdGVwQ29udGFpbmVyIH0gZnJvbSBcIi4uL2VsZW1lbnRzXCI7XG5pbXBvcnQgeyB1c2VTdHVkaW9TdGF0ZSwgdXNlRGlzcGF0Y2ggfSBmcm9tIFwiLi4vLi4vc3R1ZGlvLXN0YXRlXCI7XG5pbXBvcnQgeyBTdGVwUHJvcHMgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7IEVycm9yQm94IH0gZnJvbSBcIi4uLy4uL3VpL0Vycm9yQm94XCI7XG5pbXBvcnQgeyBDb250cm9sQm94IH0gZnJvbSBcIi4vY29udHJvbC1ib3hcIjtcbmltcG9ydCB7IFByZXZpZXcsIFByZXZpZXdIYW5kbGUgfSBmcm9tIFwiLi9wcmV2aWV3XCI7XG5pbXBvcnQgeyBGaVRyYXNoIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5cblxuLy8gSW4gc29tZSBzaXR1YXRpb24gd2Ugd291bGQgbGlrZSB0byBzZXQgdGhlIGN1cnJlbnQgdGltZSB0byAwIG9yIGNoZWNrIGZvciBpdC5cbi8vIFRoYW5rcyB0byBhIGJyb3dzZXIgYnVnLCBzZXR0aW5nIHRoZSBjdXJyZW50IHRpbWUgdG8gMCBmYWlscy4gVXNpbmcgYSBudW1iZXJcbi8vIHNsaWdodGx5IGhpZ2hlciB3b3JrcyB0aG91Z2guIFNvIHdlIHVzZSB0aGlzIDFtcyB0aW1lIGZvciBub3cuIFNpZ2guXG5leHBvcnQgY29uc3QgQUxNT1NUX1pFUk8gPSAwLjAwMTtcblxuZXhwb3J0IGNvbnN0IFJldmlldzogUmVhY3QuRkM8U3RlcFByb3BzPiA9ICh7IGdvVG9GaXJzdFN0ZXAsIGdvVG9OZXh0U3RlcCB9KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgcmVjb3JkaW5nRGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCB7IHJlY29yZGluZ3MsIHByZW1hdHVyZVJlY29yZGluZ0VuZCwgdmlkZW9DaG9pY2UgfSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IGVtcHR5UmVjb3JkaW5nID0gcmVjb3JkaW5ncy5zb21lKHJlYyA9PiByZWMubWVkaWEuc2l6ZSA9PT0gMCk7XG4gIGNvbnN0IHByZXZpZXdDb250cm9sbGVyID0gdXNlUmVmPFByZXZpZXdIYW5kbGU+KG51bGwpO1xuICBjb25zdCBbY3VycmVudFRpbWUsIHNldEN1cnJlbnRUaW1lXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbcHJldmlld1JlYWR5LCBzZXRQcmV2aWV3UmVhZHldID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbX2lzUGF1c2VkLCBzZXRJc1BhdXNlZF0gPSB1c2VTdGF0ZSh0cnVlKTtcblxuICBjb25zdCBleHBlY3RlZFJlY29yZGluZ3MgPSBtYXRjaCh2aWRlb0Nob2ljZSwge1xuICAgIFwiYm90aFwiOiAoKSA9PiAyLFxuICAgIFwiZGlzcGxheVwiOiAoKSA9PiAxLFxuICAgIFwidXNlclwiOiAoKSA9PiAxLFxuICAgIFwibm9uZVwiOiAoKSA9PiAwLFxuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxTdGVwQ29udGFpbmVyXG4gICAgICB0aXRsZT17dChcInN0ZXBzLnJldmlldy5sYWJlbFwiKX1cbiAgICAgIG5vdGU9e3QoXCJzdGVwcy5yZXZpZXcub25seS1vbi11cGxvYWQtbm90ZVwiKX1cbiAgICAgIHByZXZCdXR0b249e3tcbiAgICAgICAgZGFuZ2VyOiB0cnVlLFxuICAgICAgICBpY29uOiA8RmlUcmFzaCAvPixcbiAgICAgICAgbGFiZWw6IHQoXCJzdGVwcy5yZXZpZXcuYnV0dG9uLWRpc2NhcmQtYW5kLXJlY29yZFwiKSxcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGRvSXQgPSB3aW5kb3cuY29uZmlybSh0KFwiY29uZmlybS1kaXNjYXJkLXJlY29yZGluZ3NcIikpO1xuICAgICAgICAgIGlmIChkb0l0KSB7XG4gICAgICAgICAgICByZWNvcmRpbmdEaXNwYXRjaCh7IHR5cGU6IFwiUkVTRVRcIiB9KTtcbiAgICAgICAgICAgIGdvVG9GaXJzdFN0ZXAoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9fVxuICAgICAgbmV4dEJ1dHRvbj17eyBvbkNsaWNrOiBnb1RvTmV4dFN0ZXAgfX1cbiAgICA+XG4gICAgICB7cHJlbWF0dXJlUmVjb3JkaW5nRW5kICYmIChcbiAgICAgICAgPEVycm9yQm94IGJvZHk9e3QoXCJlcnJvci1sb3N0LXN0cmVhbS1lbmQtcmVjb3JkaW5nXCIpfSAvPlxuICAgICAgKX1cblxuICAgICAge2VtcHR5UmVjb3JkaW5nICYmIChcbiAgICAgICAgPEVycm9yQm94IGJvZHk9e3QoXCJzdGVwcy5yZXZpZXcuZXJyb3ItZW1wdHktcmVjb3JkaW5nXCIpfSAvPlxuICAgICAgKX1cblxuICAgICAgeyghcHJldmlld1JlYWR5IHx8IHJlY29yZGluZ3MubGVuZ3RoICE9PSBleHBlY3RlZFJlY29yZGluZ3MpICYmIChcbiAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICBmbGV4OiAxLFxuICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgICAgZm9udFNpemU6IDQyLFxuICAgICAgICB9fT5cbiAgICAgICAgICA8U3Bpbm5lciAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgICB7cmVjb3JkaW5ncy5sZW5ndGggPT09IGV4cGVjdGVkUmVjb3JkaW5ncyAmJiAoXG4gICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogcHJldmlld1JlYWR5ID8gXCJmbGV4XCIgOiBcIm5vbmVcIixcbiAgICAgICAgICBmbGV4OiBcIjEgMSBhdXRvXCIsXG4gICAgICAgICAgZ2FwOiAxNixcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICB9fT5cbiAgICAgICAgICA8UHJldmlld1xuICAgICAgICAgICAgcmVmPXtwcmV2aWV3Q29udHJvbGxlcn1cbiAgICAgICAgICAgIG9uVGltZVVwZGF0ZT17ZXZlbnQgPT4ge1xuICAgICAgICAgICAgICBzZXRDdXJyZW50VGltZShldmVudC5jdXJyZW50VGFyZ2V0LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvblBhdXNlUGxheT17cGF1c2VkID0+IHNldElzUGF1c2VkKHBhdXNlZCl9XG4gICAgICAgICAgICBvblJlYWR5PXsoKSA9PiBzZXRQcmV2aWV3UmVhZHkodHJ1ZSl9XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIDxDb250cm9sQm94IHsuLi57IHByZXZpZXdDb250cm9sbGVyLCBjdXJyZW50VGltZSB9fSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9TdGVwQ29udGFpbmVyPlxuICApO1xufTtcbiJdfQ== */\"),\n      children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_preview__WEBPACK_IMPORTED_MODULE_7__.Preview, {\n        ref: previewController,\n        onTimeUpdate: event => {\n          setCurrentTime(event.currentTarget.currentTime);\n        },\n        onPausePlay: paused => setIsPaused(paused),\n        onReady: () => setPreviewReady(true)\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_control_box__WEBPACK_IMPORTED_MODULE_6__.ControlBox, {\n        previewController,\n        currentTime\n      })]\n    })]\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RlcHMvcmV2aWV3L2luZGV4LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBR0E7QUFBQTtBQUlBO0FBQUE7QUFJQTtBQU1BO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmNhc3Qtc3R1ZGlvLy4vc3JjL3N0ZXBzL3Jldmlldy9pbmRleC50c3g/NzdlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IHsgU3Bpbm5lciwgbWF0Y2ggfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5pbXBvcnQgeyBTdGVwQ29udGFpbmVyIH0gZnJvbSBcIi4uL2VsZW1lbnRzXCI7XG5pbXBvcnQgeyB1c2VTdHVkaW9TdGF0ZSwgdXNlRGlzcGF0Y2ggfSBmcm9tIFwiLi4vLi4vc3R1ZGlvLXN0YXRlXCI7XG5pbXBvcnQgeyBTdGVwUHJvcHMgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7IEVycm9yQm94IH0gZnJvbSBcIi4uLy4uL3VpL0Vycm9yQm94XCI7XG5pbXBvcnQgeyBDb250cm9sQm94IH0gZnJvbSBcIi4vY29udHJvbC1ib3hcIjtcbmltcG9ydCB7IFByZXZpZXcsIFByZXZpZXdIYW5kbGUgfSBmcm9tIFwiLi9wcmV2aWV3XCI7XG5pbXBvcnQgeyBGaVRyYXNoIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5cblxuLy8gSW4gc29tZSBzaXR1YXRpb24gd2Ugd291bGQgbGlrZSB0byBzZXQgdGhlIGN1cnJlbnQgdGltZSB0byAwIG9yIGNoZWNrIGZvciBpdC5cbi8vIFRoYW5rcyB0byBhIGJyb3dzZXIgYnVnLCBzZXR0aW5nIHRoZSBjdXJyZW50IHRpbWUgdG8gMCBmYWlscy4gVXNpbmcgYSBudW1iZXJcbi8vIHNsaWdodGx5IGhpZ2hlciB3b3JrcyB0aG91Z2guIFNvIHdlIHVzZSB0aGlzIDFtcyB0aW1lIGZvciBub3cuIFNpZ2guXG5leHBvcnQgY29uc3QgQUxNT1NUX1pFUk8gPSAwLjAwMTtcblxuZXhwb3J0IGNvbnN0IFJldmlldzogUmVhY3QuRkM8U3RlcFByb3BzPiA9ICh7IGdvVG9GaXJzdFN0ZXAsIGdvVG9OZXh0U3RlcCB9KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgcmVjb3JkaW5nRGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCB7IHJlY29yZGluZ3MsIHByZW1hdHVyZVJlY29yZGluZ0VuZCwgdmlkZW9DaG9pY2UgfSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IGVtcHR5UmVjb3JkaW5nID0gcmVjb3JkaW5ncy5zb21lKHJlYyA9PiByZWMubWVkaWEuc2l6ZSA9PT0gMCk7XG4gIGNvbnN0IHByZXZpZXdDb250cm9sbGVyID0gdXNlUmVmPFByZXZpZXdIYW5kbGU+KG51bGwpO1xuICBjb25zdCBbY3VycmVudFRpbWUsIHNldEN1cnJlbnRUaW1lXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbcHJldmlld1JlYWR5LCBzZXRQcmV2aWV3UmVhZHldID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbX2lzUGF1c2VkLCBzZXRJc1BhdXNlZF0gPSB1c2VTdGF0ZSh0cnVlKTtcblxuICBjb25zdCBleHBlY3RlZFJlY29yZGluZ3MgPSBtYXRjaCh2aWRlb0Nob2ljZSwge1xuICAgIFwiYm90aFwiOiAoKSA9PiAyLFxuICAgIFwiZGlzcGxheVwiOiAoKSA9PiAxLFxuICAgIFwidXNlclwiOiAoKSA9PiAxLFxuICAgIFwibm9uZVwiOiAoKSA9PiAwLFxuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxTdGVwQ29udGFpbmVyXG4gICAgICB0aXRsZT17dChcInN0ZXBzLnJldmlldy5sYWJlbFwiKX1cbiAgICAgIG5vdGU9e3QoXCJzdGVwcy5yZXZpZXcub25seS1vbi11cGxvYWQtbm90ZVwiKX1cbiAgICAgIHByZXZCdXR0b249e3tcbiAgICAgICAgZGFuZ2VyOiB0cnVlLFxuICAgICAgICBpY29uOiA8RmlUcmFzaCAvPixcbiAgICAgICAgbGFiZWw6IHQoXCJzdGVwcy5yZXZpZXcuYnV0dG9uLWRpc2NhcmQtYW5kLXJlY29yZFwiKSxcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGRvSXQgPSB3aW5kb3cuY29uZmlybSh0KFwiY29uZmlybS1kaXNjYXJkLXJlY29yZGluZ3NcIikpO1xuICAgICAgICAgIGlmIChkb0l0KSB7XG4gICAgICAgICAgICByZWNvcmRpbmdEaXNwYXRjaCh7IHR5cGU6IFwiUkVTRVRcIiB9KTtcbiAgICAgICAgICAgIGdvVG9GaXJzdFN0ZXAoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9fVxuICAgICAgbmV4dEJ1dHRvbj17eyBvbkNsaWNrOiBnb1RvTmV4dFN0ZXAgfX1cbiAgICA+XG4gICAgICB7cHJlbWF0dXJlUmVjb3JkaW5nRW5kICYmIChcbiAgICAgICAgPEVycm9yQm94IGJvZHk9e3QoXCJlcnJvci1sb3N0LXN0cmVhbS1lbmQtcmVjb3JkaW5nXCIpfSAvPlxuICAgICAgKX1cblxuICAgICAge2VtcHR5UmVjb3JkaW5nICYmIChcbiAgICAgICAgPEVycm9yQm94IGJvZHk9e3QoXCJzdGVwcy5yZXZpZXcuZXJyb3ItZW1wdHktcmVjb3JkaW5nXCIpfSAvPlxuICAgICAgKX1cblxuICAgICAgeyghcHJldmlld1JlYWR5IHx8IHJlY29yZGluZ3MubGVuZ3RoICE9PSBleHBlY3RlZFJlY29yZGluZ3MpICYmIChcbiAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICBmbGV4OiAxLFxuICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgICAgZm9udFNpemU6IDQyLFxuICAgICAgICB9fT5cbiAgICAgICAgICA8U3Bpbm5lciAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgICB7cmVjb3JkaW5ncy5sZW5ndGggPT09IGV4cGVjdGVkUmVjb3JkaW5ncyAmJiAoXG4gICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgZGlzcGxheTogcHJldmlld1JlYWR5ID8gXCJmbGV4XCIgOiBcIm5vbmVcIixcbiAgICAgICAgICBmbGV4OiBcIjEgMSBhdXRvXCIsXG4gICAgICAgICAgZ2FwOiAxNixcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICB9fT5cbiAgICAgICAgICA8UHJldmlld1xuICAgICAgICAgICAgcmVmPXtwcmV2aWV3Q29udHJvbGxlcn1cbiAgICAgICAgICAgIG9uVGltZVVwZGF0ZT17ZXZlbnQgPT4ge1xuICAgICAgICAgICAgICBzZXRDdXJyZW50VGltZShldmVudC5jdXJyZW50VGFyZ2V0LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvblBhdXNlUGxheT17cGF1c2VkID0+IHNldElzUGF1c2VkKHBhdXNlZCl9XG4gICAgICAgICAgICBvblJlYWR5PXsoKSA9PiBzZXRQcmV2aWV3UmVhZHkodHJ1ZSl9XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIDxDb250cm9sQm94IHsuLi57IHByZXZpZXdDb250cm9sbGVyLCBjdXJyZW50VGltZSB9fSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9TdGVwQ29udGFpbmVyPlxuICApO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/steps/review/index.tsx\n");

/***/ }),

/***/ "./src/steps/review/preview.tsx":
/*!**************************************!*\
  !*** ./src/steps/review/preview.tsx ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Preview: function() { return /* binding */ Preview; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var _studio_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../studio-state */ \"./src/studio-state.tsx\");\n/* harmony import */ var _cut_out_icon_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cut-out-icon.svg */ \"./src/steps/review/cut-out-icon.svg\");\n/* harmony import */ var _ui_VideoBox__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../ui/VideoBox */ \"./src/ui/VideoBox.tsx\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! . */ \"./src/steps/review/index.tsx\");\n/* harmony import */ var _shortcuts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../shortcuts */ \"./src/shortcuts.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\n\n\nvar _ref2 =  false ? 0 : {\n  name: \"1datbu6-body\",\n  styles: \"position:relative;width:100%;height:100%;label:body;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref3 =  false ? 0 : {\n  name: \"v58vxh-body\",\n  styles: \"position:absolute;left:0;right:0;top:0;bottom:0;background-color:rgba(0, 0, 0, 0.65);color:white;display:flex;flex-direction:column;align-items:center;justify-content:start;padding-top:16px;pointer-events:none;label:body;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3Jldmlldy9wcmV2aWV3LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2TGUiLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvcmV2aWV3L3ByZXZpZXcudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgZm9yd2FyZFJlZiwgdXNlU3RhdGUsIHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VJbXBlcmF0aXZlSGFuZGxlLCBTeW50aGV0aWNFdmVudCxcbn0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgeyBtYXRjaCwgbm90TnVsbGlzaCwgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5pbXBvcnQgeyB1c2VTdHVkaW9TdGF0ZSB9IGZyb20gXCIuLi8uLi9zdHVkaW8tc3RhdGVcIjtcbmltcG9ydCBDdXRPdXRJY29uIGZyb20gXCIuL2N1dC1vdXQtaWNvbi5zdmdcIjtcbmltcG9ydCB7IFZpZGVvQm94IH0gZnJvbSBcIi4uLy4uL3VpL1ZpZGVvQm94XCI7XG5pbXBvcnQgeyBBTE1PU1RfWkVSTyB9IGZyb20gXCIuXCI7XG5pbXBvcnQgeyBTSE9SVENVVFMsIHVzZVNob3J0Y3V0IH0gZnJvbSBcIi4uLy4uL3Nob3J0Y3V0c1wiO1xuXG5cbnR5cGUgUHJldmlld1Byb3BzID0ge1xuICBvblRpbWVVcGRhdGU6IChldmVudDogU3ludGhldGljRXZlbnQ8SFRNTFZpZGVvRWxlbWVudCwgRXZlbnQ+KSA9PiB2b2lkO1xuICBvblBhdXNlUGxheTogKHBhdXNlZDogYm9vbGVhbikgPT4gdm9pZDtcbiAgb25SZWFkeTogKCkgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCB0eXBlIFByZXZpZXdIYW5kbGUgPSB7XG4gIGN1cnJlbnRUaW1lOiBudW1iZXI7XG4gIHJlYWRvbmx5IGR1cmF0aW9uOiBudW1iZXI7XG4gIHJlYWRvbmx5IGlzUGxheWluZzogYm9vbGVhbjtcbiAgcmVhZG9ubHkgaXNSZWFkeVRvUGxheTogYm9vbGVhbjtcbiAgcGxheSgpOiB2b2lkO1xuICBwYXVzZSgpOiB2b2lkO1xufTtcblxuZXhwb3J0IGNvbnN0IFByZXZpZXcgPSBmb3J3YXJkUmVmPFByZXZpZXdIYW5kbGUsIFByZXZpZXdQcm9wcz4oKFxuICB7IG9uVGltZVVwZGF0ZSwgb25SZWFkeSwgb25QYXVzZVBsYXkgfSxcbiAgcmVmLFxuKSA9PiB7XG4gIGNvbnN0IHsgcmVjb3JkaW5ncywgc3RhcnQsIGVuZCB9ID0gdXNlU3R1ZGlvU3RhdGUoKTtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuXG4gIGNvbnN0IHZpZGVvUmVmcyA9IFt1c2VSZWY8SFRNTFZpZGVvRWxlbWVudD4obnVsbCksIHVzZVJlZjxIVE1MVmlkZW9FbGVtZW50PihudWxsKV07XG4gIGNvbnN0IGFsbFZpZGVvcyA9IHZpZGVvUmVmcy5zbGljZSgwLCByZWNvcmRpbmdzLmxlbmd0aCk7XG5cbiAgY29uc3QgZGVza3RvcEluZGV4ID0gcmVjb3JkaW5ncy5sZW5ndGggPT09IDJcbiAgICA/IChyZWNvcmRpbmdzWzBdLmRldmljZVR5cGUgPT09IFwiZGVza3RvcFwiID8gMCA6IDEpXG4gICAgOiBudWxsO1xuXG4gIC8vIFRoZSBpbmRleCBvZiB0aGUgbGFzdCB2aWRlbyByZWYgdGhhdCByZWNlaXZlZCBhbiBldmVudCAoMCBvciAxKS5cbiAgY29uc3QgbGFzdE9yaWdpbiA9IHVzZVJlZjwwIHwgMT4oKTtcblxuICAvLyBXaGVuIHVwZGF0aW5nIHRoZSBjdXJyZW5UaW1lLCBpLmUuIHRoZSBwbGF5IHBvc2l0aW9uLCB3ZSB3YW50IHRvIHRocm90dGxlXG4gIC8vIHRoaXMgc29tZWhvdy4gSnVzdCBhbHdheXMgc2V0dGluZyBgY3VycmVudFRpbWVgIGlzIG5vdCBpZGVhbDogY29uc2lkZXJcbiAgLy8gYG9uTW91c2VNb3ZlYCwgd2hpY2ggd291bGQgc2V0IGEgbmV3IHZhbHVlIHZlcnkgZnJlcXVlbnRseS4gQ2hyb21lIGFuZFxuICAvLyBGaXJlZm94IGRvbid0IHNlZW0gdG8gaGFuZGxlIHRoYXQgdmVyeSB3ZWxsOiBldmVyeSBuZXcgdGltZSBzZXQgd2lsbFxuICAvLyBjYW5jZWwgdGhlIGluLXByb2dyZXNzIHNlZWtpbmcsIGxlYWRpbmcgdG8gcXVpdGUgbGFyZ2UgZGVsYXlzLlxuICAvL1xuICAvLyBXaGF0IHdlIGRvIGluc3RlYWQgaXM6IGlmIHdlIGFyZSBub3QgY3VycmVudGx5IHNlZWtpbmcsIGp1c3Qgc2V0IHRoZSB0aW1lXG4gIC8vIGFzIG5vcm1hbC4gQnV0IGlmIGEgc2VlayBvcGVyYXRpb24gaXMgaW4gcHJvZ3Jlc3MsIHdlIGp1c3QgcXVldWUgdGhlIHRpbWUuXG4gIC8vIEZ1cnRoZXIgYmVsb3csIHRoZSBgb25TZWVrZWRgIGV2ZW50IGhhbmRsZXIgaXMgdGhlIHNlY29uZCBwYXJ0IG9mIHRoZVxuICAvLyBzb2x1dGlvbjogd2hlbiBhIHNlZWsgb3BlcmF0aW9uIGhhcyBlbmRlZCBhbmQgYSBuZXcgdGltZSBpcyBxdWV1ZWQsIHdlXG4gIC8vIHNlZWsgdG8gdGhhdCB0aW1lIGFnYWluLiBQdXQgc2ltcGx5OiB3ZSBqdXN0IHdhaXQgZm9yIHNlZWsgb3BlcmF0aW9ucyB0b1xuICAvLyBmaW5pc2ggYmVmb3JlIGNoYW5naW5nIGBjdXJyZW5UaW1lYCBhZ2Fpbi5cbiAgY29uc3QgcXVldWVkU2VlayA9IHVzZVJlZjxudW1iZXIgfCBudWxsPihudWxsKTtcbiAgY29uc3Qgc2V0VGltZSA9IChuZXdUaW1lOiBudW1iZXIpID0+IHtcbiAgICBjb25zdCBpc1NlZWtpbmcgPSBhbGxWaWRlb3Muc29tZSh2ID0+IHYuY3VycmVudD8uc2Vla2luZyk7XG4gICAgaWYgKGlzU2Vla2luZykge1xuICAgICAgcXVldWVkU2Vlay5jdXJyZW50ID0gbmV3VGltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWxsVmlkZW9zLmZvckVhY2gociA9PiB7XG4gICAgICAgIGlmIChyLmN1cnJlbnQpIHtcbiAgICAgICAgICByLmN1cnJlbnQuY3VycmVudFRpbWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihuZXdUaW1lLCByLmN1cnJlbnQuZHVyYXRpb24pKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCAoKSA9PiAoe1xuICAgIGdldCBjdXJyZW50VGltZSgpIHtcbiAgICAgIHJldHVybiBub3ROdWxsaXNoKHZpZGVvUmVmc1tsYXN0T3JpZ2luLmN1cnJlbnQgPz8gMF0uY3VycmVudD8uY3VycmVudFRpbWUpO1xuICAgIH0sXG4gICAgc2V0IGN1cnJlbnRUaW1lKG5ld1RpbWUpIHtcbiAgICAgIHNldFRpbWUobmV3VGltZSk7XG4gICAgfSxcbiAgICBnZXQgZHVyYXRpb24oKSB7XG4gICAgICByZXR1cm4gbm90TnVsbGlzaCh2aWRlb1JlZnNbbGFzdE9yaWdpbi5jdXJyZW50ID8/IDBdLmN1cnJlbnQ/LmR1cmF0aW9uKTtcbiAgICB9LFxuICAgIGdldCBpc1BsYXlpbmcoKSB7XG4gICAgICBjb25zdCB2ID0gdmlkZW9SZWZzW2xhc3RPcmlnaW4uY3VycmVudCA/PyAwXS5jdXJyZW50O1xuICAgICAgcmV0dXJuIHYgIT0gbnVsbCAmJiB2LmN1cnJlbnRUaW1lID4gMCAmJiAhdi5wYXVzZWQgJiYgIXYuZW5kZWQ7XG4gICAgfSxcbiAgICBnZXQgaXNSZWFkeVRvUGxheSgpIHtcbiAgICAgIC8vIFN0YXRlIDIgbWVhbnMgXCJhdCBsZWFzdCBlbm91Z2ggZGF0YSB0byBwbGF5IG9uZSBmcmFtZVwiXG4gICAgICByZXR1cm4gYWxsVmlkZW9zLmV2ZXJ5KHIgPT4gKHIuY3VycmVudD8ucmVhZHlTdGF0ZSA/PyAwKSA+PSAyKTtcbiAgICB9LFxuICAgIHBsYXkoKSB7XG4gICAgICBhbGxWaWRlb3MuZm9yRWFjaChyID0+IHIuY3VycmVudD8ucGxheSgpKTtcbiAgICAgIG9uUGF1c2VQbGF5KGZhbHNlKTtcbiAgICB9LFxuICAgIHBhdXNlKCkge1xuICAgICAgYWxsVmlkZW9zLmZvckVhY2gociA9PiByLmN1cnJlbnQ/LnBhdXNlKCkpO1xuICAgICAgb25QYXVzZVBsYXkodHJ1ZSk7XG4gICAgfSxcbiAgfSkpO1xuXG4gIC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3QgY2FsY3VsYXRlIHRoZSBkdXJhdGlvbiBmb3IgdGhlIHJlY29yZGVkIHZpZGVvc1xuICAvLyBwcmV2ZW50aW5nIHVzIGZyb20gc2Vla2luZyBpbiB0aGUgdmlkZW8uIFdlIGZvcmNlIGl0IGJlbG93XG4gIC8vIGluIHRoZSBldmVudCBoYW5kbGVycyBvZiB0aGUgdmlkZW8gZWxlbWVudHMsIGJ1dCB3ZSB3YW50IHRvIGhvbGQgb2ZmXG4gIC8vIG9uIHNvbWUgZWZmZWN0cyB1bnRpbCB0aGF0IGNhbGN1bGF0aW9uIGlzIGRvbmUuXG4gIHR5cGUgRHVyYXRpb25DYWxjU3RhdGUgPSBcImRvbmVcIiB8IFwic3RhcnRlZFwiO1xuICBjb25zdCBkdXJhdGlvbkNhbGN1bGF0aW9uUHJvZ3Jlc3MgPSBbXG4gICAgdXNlUmVmPER1cmF0aW9uQ2FsY1N0YXRlPigpLFxuICAgIHVzZVJlZjxEdXJhdGlvbkNhbGNTdGF0ZT4oKSxcbiAgXTtcbiAgY29uc3QgW2R1cmF0aW9uc0NhbGN1bGF0ZWQsIHNldER1cmF0aW9uc0NhbGN1bGF0ZWRdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuXG4gIC8vIFNvbWUgbG9naWMgdG8gZGVjaWRlIHdoZXRoZXIgd2UgY3VycmVudGx5IGFyZSBpbiBhIHBhcnQgb2YgdGhlIHZpZGVvIHRoYXRcbiAgLy8gd2lsbCBiZSByZW1vdmVkLiBUaGUgc3RhdGUgd2lsbCBiZSB1cGRhdGVkIGluIGBvblRpbWVVcGRhdGVgIGJlbG93IGFuZCBpc1xuICAvLyBvbmx5IGhlcmUgdG8gdHJpZ2dlciBhIHJlcmVuZGVyOiB0aGUgY29uZGl0aW9uIGZvciByZW5kZXJpbmcgdGhlIG92ZXJsYXkgaXNcbiAgLy8gYmVsb3cuXG4gIGNvbnN0IGlzSW5DdXRSZWdpb24gPSAodGltZTogbnVtYmVyKSA9PlxuICAgIChzdGFydCAhPT0gbnVsbCAmJiB0aW1lIDwgc3RhcnQpIHx8IChlbmQgIT09IG51bGwgJiYgdGltZSA+IGVuZCk7XG4gIGNvbnN0IGN1cnJlbnRUaW1lID0gdmlkZW9SZWZzW2xhc3RPcmlnaW4uY3VycmVudCA/PyAwXS5jdXJyZW50Py5jdXJyZW50VGltZSB8fCAwO1xuICBjb25zdCBvdmVybGF5VmlzaWJsZSA9IGlzSW5DdXRSZWdpb24oY3VycmVudFRpbWUpO1xuICBjb25zdCBbLCBzZXRPdmVybGF5VmlzaWJsZV0gPSB1c2VTdGF0ZShvdmVybGF5VmlzaWJsZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZHVyYXRpb25zQ2FsY3VsYXRlZCkge1xuICAgICAgb25SZWFkeSgpO1xuICAgIH1cbiAgfSwgW29uUmVhZHksIGR1cmF0aW9uc0NhbGN1bGF0ZWRdKTtcblxuICAvLyBTZXR1cCBiYWNrdXAgc3luY2hyb25pemF0aW9uIGJldHdlZW4gYm90aCB2aWRlbyBlbGVtZW50c1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghZHVyYXRpb25zQ2FsY3VsYXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChkZXNrdG9wSW5kZXggIT0gbnVsbCkge1xuICAgICAgLy8gSWYgd2UgaGF2ZSB0d28gcmVjb3JkaW5ncywgYm90aCB3aWxsIGhhdmUgYXVkaW8uIEJ1dCB0aGUgdXNlciBkb2Vzbid0XG4gICAgICAvLyB3YW50IHRvIGhlYXIgYXVkaW8gdHdpY2UsIHNvIHdlIG11dGUgb25lIHZpZGVvIGVsZW1lbnQuIFBhcnRpY3VsYXJseSxcbiAgICAgIC8vIHdlIG11dGUgdGhlIGRlc2t0b3AgdmlkZW8sIGFzIHRoZXJlIHRoZSBhdWRpby92aWRlbyBzeW5jaHJvbml6YXRpb24gaXNcbiAgICAgIC8vIG5vdCBhcyBjcml0aWNhbC5cbiAgICAgIG5vdE51bGxpc2godmlkZW9SZWZzW2Rlc2t0b3BJbmRleF0uY3VycmVudCkudm9sdW1lID0gMDtcblxuICAgICAgY29uc3QgdmEgPSBub3ROdWxsaXNoKHZpZGVvUmVmc1swXS5jdXJyZW50KTtcbiAgICAgIGNvbnN0IHZiID0gbm90TnVsbGlzaCh2aWRlb1JlZnNbMV0uY3VycmVudCk7XG5cbiAgICAgIC8vIFdlIHJlZ3VsYXJseSBjaGVjayBpZiBib3RoIHZpZGVvIGVsZW1lbnRzIGRpdmVyZ2UgdG9vIG11Y2ggZnJvbSBvbmVcbiAgICAgIC8vIGFub3RoZXIuXG4gICAgICBsZXQgZnJhbWVDb3VudGVyID0gMDtcbiAgICAgIGxldCBmaXhSZXF1ZXN0OiBudW1iZXI7XG4gICAgICBjb25zdCBmaXhUaW1lID0gKCkgPT4ge1xuICAgICAgICAvLyBPbmx5IHJ1biBldmVyeSA2MCBmcmFtZXMuXG4gICAgICAgIGlmIChmcmFtZUNvdW50ZXIgJSA2MCA9PT0gMCkge1xuICAgICAgICAgIC8vIFdlIHdhbnQgdGhlIGRpZmZlcmVuY2UgdG8gYmUgYmVsb3cgMTUwbXMuIFVzdWFsbHksIGV2ZW4gd2l0aG91dFxuICAgICAgICAgIC8vIHRoaXMgYmFja3VwIHNvbHV0aW9uLCBpdCBzaG91bGQgYmUgYmVsb3cgNTBtcyBhdCBhbGwgdGltZS4gVGhhdCdzXG4gICAgICAgICAgLy8gd2hhdCB0ZXN0aW5nIHNob3dlZC5cbiAgICAgICAgICBjb25zdCBkaWZmID0gTWF0aC5hYnModmEuY3VycmVudFRpbWUgLSB2Yi5jdXJyZW50VGltZSk7XG4gICAgICAgICAgaWYgKGRpZmYgPiAwLjE1ICYmIGxhc3RPcmlnaW4uY3VycmVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBvcmlnaW4gPSB2aWRlb1JlZnNbbGFzdE9yaWdpbi5jdXJyZW50XS5jdXJyZW50O1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdmlkZW9SZWZzW2xhc3RPcmlnaW4uY3VycmVudCA9PT0gMCA/IDEgOiAwXS5jdXJyZW50O1xuICAgICAgICAgICAgbm90TnVsbGlzaCh0YXJnZXQpLmN1cnJlbnRUaW1lID0gbm90TnVsbGlzaChvcmlnaW4pLmN1cnJlbnRUaW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZyYW1lQ291bnRlcisrO1xuICAgICAgICBmaXhSZXF1ZXN0ID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmaXhUaW1lKTtcbiAgICAgIH07XG4gICAgICBmaXhSZXF1ZXN0ID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmaXhUaW1lKTtcblxuICAgICAgcmV0dXJuICgpID0+IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShmaXhSZXF1ZXN0KTtcbiAgICB9XG4gIH0pO1xuXG5cbiAgY29uc3QganVtcEluVGltZSA9IChkaWZmOiBudW1iZXIpID0+XG4gICAgc2V0VGltZShub3ROdWxsaXNoKHZpZGVvUmVmc1tsYXN0T3JpZ2luLmN1cnJlbnQgPz8gMF0uY3VycmVudD8uY3VycmVudFRpbWUpICsgZGlmZik7XG5cbiAgLy8gVE9ETzogVGhpcyBpcyBvYnZpb3VzbHkgbm90IGFsd2F5cyBjb3JyZWN0LiBGaW5kaW5nIG91dCB0aGUgRlBTIG9mIHRoZVxuICAvLyByZWNvcmRpbmcgaXMgc3VycHJpc2luZ2x5IHRyaWNreS4gQW5kIGFjdHVhbGx5LCBicm93c2VycyBzZWVtIHRvIHJlY29yZFxuICAvLyB3aXRoIDMwZnBzIGFsbW9zdCBhbGwgb2YgdGhlIHRpbWUgcmlnaHQgbm93IGFud2F5LlxuICBjb25zdCBmcHMgPSAzMDtcbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLnJldmlldy5mb3J3YXJkczVzZWNzLCAoKSA9PiBqdW1wSW5UaW1lKDUpKTtcbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLnJldmlldy5iYWNrd2FyZHM1c2VjcywgKCkgPT4ganVtcEluVGltZSgtNSkpO1xuICB1c2VTaG9ydGN1dChTSE9SVENVVFMucmV2aWV3LmZvcndhcmRzRnJhbWUsICgpID0+IGp1bXBJblRpbWUoMSAvIGZwcykpO1xuICB1c2VTaG9ydGN1dChTSE9SVENVVFMucmV2aWV3LmJhY2t3YXJkc0ZyYW1lLCAoKSA9PiBqdW1wSW5UaW1lKC0xIC8gZnBzKSk7XG5cblxuICBjb25zdCBjaGlsZHJlbiA9IHJlY29yZGluZ3MubWFwKChyZWNvcmRpbmcsIGluZGV4KSA9PiAoe1xuICAgIGRpbWVuc2lvbnM6ICgpID0+IHJlY29yZGluZy5kaW1lbnNpb25zLFxuICAgIGJvZHk6IChcbiAgICAgIDxkaXYgY3NzPXt7IHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsIHdpZHRoOiBcIjEwMCVcIiwgaGVpZ2h0OiBcIjEwMCVcIiB9fT5cbiAgICAgICAge292ZXJsYXlWaXNpYmxlICYmIChcbiAgICAgICAgICA8ZGl2IGNzcz17e1xuICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDAsIDAsIDAsIDAuNjUpXCIsXG4gICAgICAgICAgICBjb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcInN0YXJ0XCIsXG4gICAgICAgICAgICBwYWRkaW5nVG9wOiAxNixcbiAgICAgICAgICAgIHBvaW50ZXJFdmVudHM6IFwibm9uZVwiLFxuICAgICAgICAgIH19PlxuICAgICAgICAgICAgPEN1dE91dEljb24gY3NzPXt7IGZvbnRTaXplOiBcIjNlbVwiIH19Lz5cbiAgICAgICAgICAgIDxwIGNzcz17eyBtYXJnaW46IFwiOHB4IDBcIiB9fT57dChcInN0ZXBzLnJldmlldy5wYXJ0LXdpbGwtYmUtcmVtb3ZlZFwiKX08L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICAgIDx2aWRlb1xuICAgICAgICAgIHJlZj17dmlkZW9SZWZzW2luZGV4XX1cbiAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgIHNyYz17cmVjb3JkaW5nLnVybH1cbiAgICAgICAgICBvbkxvYWRlZERhdGE9e2V2ZW50ID0+IHtcbiAgICAgICAgICAgIC8vIEZvcmNlIHRoZSBicm93c2VyIHRvIGNhbGN1bGF0ZSB0aGUgZHVyYXRpb24gb2YgdGhlIHN0cmVhbVxuICAgICAgICAgICAgLy8gYnkgc2Vla2luZyB3YXkgcGFzdCBpdHMgZW5kLiAqZmluZ2VycyBjcm9zc2VkKlxuICAgICAgICAgICAgLy8gV2UgcmVzZXQgdGhpcyBsYXRlciBpbiBhbiBlZmZlY3QuIChTZWUgYWJvdmUuKVxuICAgICAgICAgICAgLy8gQWxzbyB3aXRob3V0IHNldHRpbmcgdGhlIGN1cnJlbnQgdGltZSBvbmNlIGluaXRpYWxseSxcbiAgICAgICAgICAgIC8vIHNvbWUgYnJvd3NlcnMgc2hvdyBhIGJsYWNrIHZpZGVvIGVsZW1lbnQgaW5zdGVhZCBvZiB0aGUgZmlyc3QgZnJhbWUuXG4gICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmN1cnJlbnRUaW1lID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgICAgIGR1cmF0aW9uQ2FsY3VsYXRpb25Qcm9ncmVzc1tpbmRleF0uY3VycmVudCA9IFwic3RhcnRlZFwiO1xuICAgICAgICAgIH19XG4gICAgICAgICAgb25TZWVrZWQ9eygpID0+IHtcbiAgICAgICAgICAgIGlmIChkdXJhdGlvbnNDYWxjdWxhdGVkKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGlzT3RoZXJTZWVraW5nID0gdmlkZW9SZWZzW2luZGV4ID09IDAgPyAxIDogMF0uY3VycmVudD8uc2Vla2luZztcbiAgICAgICAgICAgICAgY29uc3QgcXVldWVkID0gcXVldWVkU2Vlay5jdXJyZW50O1xuICAgICAgICAgICAgICBpZiAoIWlzT3RoZXJTZWVraW5nICYmIHF1ZXVlZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYWxsVmlkZW9zLmZvckVhY2gociA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoci5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHIuY3VycmVudC5jdXJyZW50VGltZSA9IHF1ZXVlZDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBxdWV1ZWRTZWVrLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgICBvblRpbWVVcGRhdGU9e2V2ZW50ID0+IHtcbiAgICAgICAgICAgIGlmIChkdXJhdGlvbnNDYWxjdWxhdGVkKSB7XG4gICAgICAgICAgICAgIHNldE92ZXJsYXlWaXNpYmxlKGlzSW5DdXRSZWdpb24oZXZlbnQuY3VycmVudFRhcmdldC5jdXJyZW50VGltZSkpO1xuICAgICAgICAgICAgICBvblRpbWVVcGRhdGUoZXZlbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWF0Y2gobm90TnVsbGlzaChkdXJhdGlvbkNhbGN1bGF0aW9uUHJvZ3Jlc3NbaW5kZXhdLmN1cnJlbnQpLCB7XG4gICAgICAgICAgICAgICAgXCJzdGFydGVkXCI6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY3VycmVudFRpbWUgPSBBTE1PU1RfWkVSTztcbiAgICAgICAgICAgICAgICAgIGR1cmF0aW9uQ2FsY3VsYXRpb25Qcm9ncmVzc1tpbmRleF0uY3VycmVudCA9IFwiZG9uZVwiO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJkb25lXCI6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbmlzaGVkQ2FsY3VsYXRpb25zID0gZHVyYXRpb25DYWxjdWxhdGlvblByb2dyZXNzXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIocCA9PiBwLmN1cnJlbnQgPT09IFwiZG9uZVwiKVxuICAgICAgICAgICAgICAgICAgICAubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgaWYgKGZpbmlzaGVkQ2FsY3VsYXRpb25zID09PSByZWNvcmRpbmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBzZXREdXJhdGlvbnNDYWxjdWxhdGVkKHRydWUpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG5cbiAgICAgICAgICAvLyBGb3IgaU9TOiB3aXRob3V0IHRoZSBhdXRvcGxheSBhdHRyaWJ1dGUsIHRoZSBgbG9hZGVkZGF0YWAgZXZlbnQgaXNcbiAgICAgICAgICAvLyBuZXZlciBmaXJlZCBmb3Igc29tZSByZWFzb24uIEFkZGluZyB0aGlzIGRvZXMgbm90IHNlZW0gdG8gYWN0dWFsbHlcbiAgICAgICAgICAvLyBjYXVzZSBTYWZhcmkgdG8gYXV0b3BsYXkuXG4gICAgICAgICAgYXV0b1BsYXk9ey9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpfVxuXG4gICAgICAgICAgLy8gQWxzbyBmb3IgaU9TOiB3aXRob3V0IHRoaXMsIHRoZSB2aWRlbyBtYXhpbWl6ZXMgYXV0b21hdGljYWxseS5cbiAgICAgICAgICBwbGF5c0lubGluZVxuXG4gICAgICAgICAgcHJlbG9hZD1cImF1dG9cIlxuICAgICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgICBvdXRsaW5lOiBcIm5vbmVcIixcbiAgICAgICAgICAgIGJveFNoYWRvdzogaXNIaWdoQ29udHJhc3QgPyBcIm5vbmVcIiA6IFwiMCA0cHggMTZweCB2YXIoLS1zaGFkb3ctY29sb3IpXCIsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDE2LFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApLFxuICB9KSk7XG5cbiAgcmV0dXJuIDxWaWRlb0JveCBnYXA9ezIwfT57Y2hpbGRyZW59PC9WaWRlb0JveD47XG59KTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref4 =  false ? 0 : {\n  name: \"bhhag8-body\",\n  styles: \"font-size:3em;label:body;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3Jldmlldy9wcmV2aWV3LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE0TXdCIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3Jldmlldy9wcmV2aWV3LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGZvcndhcmRSZWYsIHVzZVN0YXRlLCB1c2VSZWYsIHVzZUVmZmVjdCwgdXNlSW1wZXJhdGl2ZUhhbmRsZSwgU3ludGhldGljRXZlbnQsXG59IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IHsgbWF0Y2gsIG5vdE51bGxpc2gsIHVzZUNvbG9yU2NoZW1lIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcblxuaW1wb3J0IHsgdXNlU3R1ZGlvU3RhdGUgfSBmcm9tIFwiLi4vLi4vc3R1ZGlvLXN0YXRlXCI7XG5pbXBvcnQgQ3V0T3V0SWNvbiBmcm9tIFwiLi9jdXQtb3V0LWljb24uc3ZnXCI7XG5pbXBvcnQgeyBWaWRlb0JveCB9IGZyb20gXCIuLi8uLi91aS9WaWRlb0JveFwiO1xuaW1wb3J0IHsgQUxNT1NUX1pFUk8gfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgU0hPUlRDVVRTLCB1c2VTaG9ydGN1dCB9IGZyb20gXCIuLi8uLi9zaG9ydGN1dHNcIjtcblxuXG50eXBlIFByZXZpZXdQcm9wcyA9IHtcbiAgb25UaW1lVXBkYXRlOiAoZXZlbnQ6IFN5bnRoZXRpY0V2ZW50PEhUTUxWaWRlb0VsZW1lbnQsIEV2ZW50PikgPT4gdm9pZDtcbiAgb25QYXVzZVBsYXk6IChwYXVzZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XG4gIG9uUmVhZHk6ICgpID0+IHZvaWQ7XG59O1xuXG5leHBvcnQgdHlwZSBQcmV2aWV3SGFuZGxlID0ge1xuICBjdXJyZW50VGltZTogbnVtYmVyO1xuICByZWFkb25seSBkdXJhdGlvbjogbnVtYmVyO1xuICByZWFkb25seSBpc1BsYXlpbmc6IGJvb2xlYW47XG4gIHJlYWRvbmx5IGlzUmVhZHlUb1BsYXk6IGJvb2xlYW47XG4gIHBsYXkoKTogdm9pZDtcbiAgcGF1c2UoKTogdm9pZDtcbn07XG5cbmV4cG9ydCBjb25zdCBQcmV2aWV3ID0gZm9yd2FyZFJlZjxQcmV2aWV3SGFuZGxlLCBQcmV2aWV3UHJvcHM+KChcbiAgeyBvblRpbWVVcGRhdGUsIG9uUmVhZHksIG9uUGF1c2VQbGF5IH0sXG4gIHJlZixcbikgPT4ge1xuICBjb25zdCB7IHJlY29yZGluZ3MsIHN0YXJ0LCBlbmQgfSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICBjb25zdCB2aWRlb1JlZnMgPSBbdXNlUmVmPEhUTUxWaWRlb0VsZW1lbnQ+KG51bGwpLCB1c2VSZWY8SFRNTFZpZGVvRWxlbWVudD4obnVsbCldO1xuICBjb25zdCBhbGxWaWRlb3MgPSB2aWRlb1JlZnMuc2xpY2UoMCwgcmVjb3JkaW5ncy5sZW5ndGgpO1xuXG4gIGNvbnN0IGRlc2t0b3BJbmRleCA9IHJlY29yZGluZ3MubGVuZ3RoID09PSAyXG4gICAgPyAocmVjb3JkaW5nc1swXS5kZXZpY2VUeXBlID09PSBcImRlc2t0b3BcIiA/IDAgOiAxKVxuICAgIDogbnVsbDtcblxuICAvLyBUaGUgaW5kZXggb2YgdGhlIGxhc3QgdmlkZW8gcmVmIHRoYXQgcmVjZWl2ZWQgYW4gZXZlbnQgKDAgb3IgMSkuXG4gIGNvbnN0IGxhc3RPcmlnaW4gPSB1c2VSZWY8MCB8IDE+KCk7XG5cbiAgLy8gV2hlbiB1cGRhdGluZyB0aGUgY3VycmVuVGltZSwgaS5lLiB0aGUgcGxheSBwb3NpdGlvbiwgd2Ugd2FudCB0byB0aHJvdHRsZVxuICAvLyB0aGlzIHNvbWVob3cuIEp1c3QgYWx3YXlzIHNldHRpbmcgYGN1cnJlbnRUaW1lYCBpcyBub3QgaWRlYWw6IGNvbnNpZGVyXG4gIC8vIGBvbk1vdXNlTW92ZWAsIHdoaWNoIHdvdWxkIHNldCBhIG5ldyB2YWx1ZSB2ZXJ5IGZyZXF1ZW50bHkuIENocm9tZSBhbmRcbiAgLy8gRmlyZWZveCBkb24ndCBzZWVtIHRvIGhhbmRsZSB0aGF0IHZlcnkgd2VsbDogZXZlcnkgbmV3IHRpbWUgc2V0IHdpbGxcbiAgLy8gY2FuY2VsIHRoZSBpbi1wcm9ncmVzcyBzZWVraW5nLCBsZWFkaW5nIHRvIHF1aXRlIGxhcmdlIGRlbGF5cy5cbiAgLy9cbiAgLy8gV2hhdCB3ZSBkbyBpbnN0ZWFkIGlzOiBpZiB3ZSBhcmUgbm90IGN1cnJlbnRseSBzZWVraW5nLCBqdXN0IHNldCB0aGUgdGltZVxuICAvLyBhcyBub3JtYWwuIEJ1dCBpZiBhIHNlZWsgb3BlcmF0aW9uIGlzIGluIHByb2dyZXNzLCB3ZSBqdXN0IHF1ZXVlIHRoZSB0aW1lLlxuICAvLyBGdXJ0aGVyIGJlbG93LCB0aGUgYG9uU2Vla2VkYCBldmVudCBoYW5kbGVyIGlzIHRoZSBzZWNvbmQgcGFydCBvZiB0aGVcbiAgLy8gc29sdXRpb246IHdoZW4gYSBzZWVrIG9wZXJhdGlvbiBoYXMgZW5kZWQgYW5kIGEgbmV3IHRpbWUgaXMgcXVldWVkLCB3ZVxuICAvLyBzZWVrIHRvIHRoYXQgdGltZSBhZ2Fpbi4gUHV0IHNpbXBseTogd2UganVzdCB3YWl0IGZvciBzZWVrIG9wZXJhdGlvbnMgdG9cbiAgLy8gZmluaXNoIGJlZm9yZSBjaGFuZ2luZyBgY3VycmVuVGltZWAgYWdhaW4uXG4gIGNvbnN0IHF1ZXVlZFNlZWsgPSB1c2VSZWY8bnVtYmVyIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IHNldFRpbWUgPSAobmV3VGltZTogbnVtYmVyKSA9PiB7XG4gICAgY29uc3QgaXNTZWVraW5nID0gYWxsVmlkZW9zLnNvbWUodiA9PiB2LmN1cnJlbnQ/LnNlZWtpbmcpO1xuICAgIGlmIChpc1NlZWtpbmcpIHtcbiAgICAgIHF1ZXVlZFNlZWsuY3VycmVudCA9IG5ld1RpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFsbFZpZGVvcy5mb3JFYWNoKHIgPT4ge1xuICAgICAgICBpZiAoci5jdXJyZW50KSB7XG4gICAgICAgICAgci5jdXJyZW50LmN1cnJlbnRUaW1lID0gTWF0aC5tYXgoMCwgTWF0aC5taW4obmV3VGltZSwgci5jdXJyZW50LmR1cmF0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB1c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgKCkgPT4gKHtcbiAgICBnZXQgY3VycmVudFRpbWUoKSB7XG4gICAgICByZXR1cm4gbm90TnVsbGlzaCh2aWRlb1JlZnNbbGFzdE9yaWdpbi5jdXJyZW50ID8/IDBdLmN1cnJlbnQ/LmN1cnJlbnRUaW1lKTtcbiAgICB9LFxuICAgIHNldCBjdXJyZW50VGltZShuZXdUaW1lKSB7XG4gICAgICBzZXRUaW1lKG5ld1RpbWUpO1xuICAgIH0sXG4gICAgZ2V0IGR1cmF0aW9uKCkge1xuICAgICAgcmV0dXJuIG5vdE51bGxpc2godmlkZW9SZWZzW2xhc3RPcmlnaW4uY3VycmVudCA/PyAwXS5jdXJyZW50Py5kdXJhdGlvbik7XG4gICAgfSxcbiAgICBnZXQgaXNQbGF5aW5nKCkge1xuICAgICAgY29uc3QgdiA9IHZpZGVvUmVmc1tsYXN0T3JpZ2luLmN1cnJlbnQgPz8gMF0uY3VycmVudDtcbiAgICAgIHJldHVybiB2ICE9IG51bGwgJiYgdi5jdXJyZW50VGltZSA+IDAgJiYgIXYucGF1c2VkICYmICF2LmVuZGVkO1xuICAgIH0sXG4gICAgZ2V0IGlzUmVhZHlUb1BsYXkoKSB7XG4gICAgICAvLyBTdGF0ZSAyIG1lYW5zIFwiYXQgbGVhc3QgZW5vdWdoIGRhdGEgdG8gcGxheSBvbmUgZnJhbWVcIlxuICAgICAgcmV0dXJuIGFsbFZpZGVvcy5ldmVyeShyID0+IChyLmN1cnJlbnQ/LnJlYWR5U3RhdGUgPz8gMCkgPj0gMik7XG4gICAgfSxcbiAgICBwbGF5KCkge1xuICAgICAgYWxsVmlkZW9zLmZvckVhY2gociA9PiByLmN1cnJlbnQ/LnBsYXkoKSk7XG4gICAgICBvblBhdXNlUGxheShmYWxzZSk7XG4gICAgfSxcbiAgICBwYXVzZSgpIHtcbiAgICAgIGFsbFZpZGVvcy5mb3JFYWNoKHIgPT4gci5jdXJyZW50Py5wYXVzZSgpKTtcbiAgICAgIG9uUGF1c2VQbGF5KHRydWUpO1xuICAgIH0sXG4gIH0pKTtcblxuICAvLyBTb21lIGJyb3dzZXJzIGRvbid0IGNhbGN1bGF0ZSB0aGUgZHVyYXRpb24gZm9yIHRoZSByZWNvcmRlZCB2aWRlb3NcbiAgLy8gcHJldmVudGluZyB1cyBmcm9tIHNlZWtpbmcgaW4gdGhlIHZpZGVvLiBXZSBmb3JjZSBpdCBiZWxvd1xuICAvLyBpbiB0aGUgZXZlbnQgaGFuZGxlcnMgb2YgdGhlIHZpZGVvIGVsZW1lbnRzLCBidXQgd2Ugd2FudCB0byBob2xkIG9mZlxuICAvLyBvbiBzb21lIGVmZmVjdHMgdW50aWwgdGhhdCBjYWxjdWxhdGlvbiBpcyBkb25lLlxuICB0eXBlIER1cmF0aW9uQ2FsY1N0YXRlID0gXCJkb25lXCIgfCBcInN0YXJ0ZWRcIjtcbiAgY29uc3QgZHVyYXRpb25DYWxjdWxhdGlvblByb2dyZXNzID0gW1xuICAgIHVzZVJlZjxEdXJhdGlvbkNhbGNTdGF0ZT4oKSxcbiAgICB1c2VSZWY8RHVyYXRpb25DYWxjU3RhdGU+KCksXG4gIF07XG4gIGNvbnN0IFtkdXJhdGlvbnNDYWxjdWxhdGVkLCBzZXREdXJhdGlvbnNDYWxjdWxhdGVkXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcblxuICAvLyBTb21lIGxvZ2ljIHRvIGRlY2lkZSB3aGV0aGVyIHdlIGN1cnJlbnRseSBhcmUgaW4gYSBwYXJ0IG9mIHRoZSB2aWRlbyB0aGF0XG4gIC8vIHdpbGwgYmUgcmVtb3ZlZC4gVGhlIHN0YXRlIHdpbGwgYmUgdXBkYXRlZCBpbiBgb25UaW1lVXBkYXRlYCBiZWxvdyBhbmQgaXNcbiAgLy8gb25seSBoZXJlIHRvIHRyaWdnZXIgYSByZXJlbmRlcjogdGhlIGNvbmRpdGlvbiBmb3IgcmVuZGVyaW5nIHRoZSBvdmVybGF5IGlzXG4gIC8vIGJlbG93LlxuICBjb25zdCBpc0luQ3V0UmVnaW9uID0gKHRpbWU6IG51bWJlcikgPT5cbiAgICAoc3RhcnQgIT09IG51bGwgJiYgdGltZSA8IHN0YXJ0KSB8fCAoZW5kICE9PSBudWxsICYmIHRpbWUgPiBlbmQpO1xuICBjb25zdCBjdXJyZW50VGltZSA9IHZpZGVvUmVmc1tsYXN0T3JpZ2luLmN1cnJlbnQgPz8gMF0uY3VycmVudD8uY3VycmVudFRpbWUgfHwgMDtcbiAgY29uc3Qgb3ZlcmxheVZpc2libGUgPSBpc0luQ3V0UmVnaW9uKGN1cnJlbnRUaW1lKTtcbiAgY29uc3QgWywgc2V0T3ZlcmxheVZpc2libGVdID0gdXNlU3RhdGUob3ZlcmxheVZpc2libGUpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGR1cmF0aW9uc0NhbGN1bGF0ZWQpIHtcbiAgICAgIG9uUmVhZHkoKTtcbiAgICB9XG4gIH0sIFtvblJlYWR5LCBkdXJhdGlvbnNDYWxjdWxhdGVkXSk7XG5cbiAgLy8gU2V0dXAgYmFja3VwIHN5bmNocm9uaXphdGlvbiBiZXR3ZWVuIGJvdGggdmlkZW8gZWxlbWVudHNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWR1cmF0aW9uc0NhbGN1bGF0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZGVza3RvcEluZGV4ICE9IG51bGwpIHtcbiAgICAgIC8vIElmIHdlIGhhdmUgdHdvIHJlY29yZGluZ3MsIGJvdGggd2lsbCBoYXZlIGF1ZGlvLiBCdXQgdGhlIHVzZXIgZG9lc24ndFxuICAgICAgLy8gd2FudCB0byBoZWFyIGF1ZGlvIHR3aWNlLCBzbyB3ZSBtdXRlIG9uZSB2aWRlbyBlbGVtZW50LiBQYXJ0aWN1bGFybHksXG4gICAgICAvLyB3ZSBtdXRlIHRoZSBkZXNrdG9wIHZpZGVvLCBhcyB0aGVyZSB0aGUgYXVkaW8vdmlkZW8gc3luY2hyb25pemF0aW9uIGlzXG4gICAgICAvLyBub3QgYXMgY3JpdGljYWwuXG4gICAgICBub3ROdWxsaXNoKHZpZGVvUmVmc1tkZXNrdG9wSW5kZXhdLmN1cnJlbnQpLnZvbHVtZSA9IDA7XG5cbiAgICAgIGNvbnN0IHZhID0gbm90TnVsbGlzaCh2aWRlb1JlZnNbMF0uY3VycmVudCk7XG4gICAgICBjb25zdCB2YiA9IG5vdE51bGxpc2godmlkZW9SZWZzWzFdLmN1cnJlbnQpO1xuXG4gICAgICAvLyBXZSByZWd1bGFybHkgY2hlY2sgaWYgYm90aCB2aWRlbyBlbGVtZW50cyBkaXZlcmdlIHRvbyBtdWNoIGZyb20gb25lXG4gICAgICAvLyBhbm90aGVyLlxuICAgICAgbGV0IGZyYW1lQ291bnRlciA9IDA7XG4gICAgICBsZXQgZml4UmVxdWVzdDogbnVtYmVyO1xuICAgICAgY29uc3QgZml4VGltZSA9ICgpID0+IHtcbiAgICAgICAgLy8gT25seSBydW4gZXZlcnkgNjAgZnJhbWVzLlxuICAgICAgICBpZiAoZnJhbWVDb3VudGVyICUgNjAgPT09IDApIHtcbiAgICAgICAgICAvLyBXZSB3YW50IHRoZSBkaWZmZXJlbmNlIHRvIGJlIGJlbG93IDE1MG1zLiBVc3VhbGx5LCBldmVuIHdpdGhvdXRcbiAgICAgICAgICAvLyB0aGlzIGJhY2t1cCBzb2x1dGlvbiwgaXQgc2hvdWxkIGJlIGJlbG93IDUwbXMgYXQgYWxsIHRpbWUuIFRoYXQnc1xuICAgICAgICAgIC8vIHdoYXQgdGVzdGluZyBzaG93ZWQuXG4gICAgICAgICAgY29uc3QgZGlmZiA9IE1hdGguYWJzKHZhLmN1cnJlbnRUaW1lIC0gdmIuY3VycmVudFRpbWUpO1xuICAgICAgICAgIGlmIChkaWZmID4gMC4xNSAmJiBsYXN0T3JpZ2luLmN1cnJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3Qgb3JpZ2luID0gdmlkZW9SZWZzW2xhc3RPcmlnaW4uY3VycmVudF0uY3VycmVudDtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHZpZGVvUmVmc1tsYXN0T3JpZ2luLmN1cnJlbnQgPT09IDAgPyAxIDogMF0uY3VycmVudDtcbiAgICAgICAgICAgIG5vdE51bGxpc2godGFyZ2V0KS5jdXJyZW50VGltZSA9IG5vdE51bGxpc2gob3JpZ2luKS5jdXJyZW50VGltZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmcmFtZUNvdW50ZXIrKztcbiAgICAgICAgZml4UmVxdWVzdCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZml4VGltZSk7XG4gICAgICB9O1xuICAgICAgZml4UmVxdWVzdCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZml4VGltZSk7XG5cbiAgICAgIHJldHVybiAoKSA9PiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoZml4UmVxdWVzdCk7XG4gICAgfVxuICB9KTtcblxuXG4gIGNvbnN0IGp1bXBJblRpbWUgPSAoZGlmZjogbnVtYmVyKSA9PlxuICAgIHNldFRpbWUobm90TnVsbGlzaCh2aWRlb1JlZnNbbGFzdE9yaWdpbi5jdXJyZW50ID8/IDBdLmN1cnJlbnQ/LmN1cnJlbnRUaW1lKSArIGRpZmYpO1xuXG4gIC8vIFRPRE86IFRoaXMgaXMgb2J2aW91c2x5IG5vdCBhbHdheXMgY29ycmVjdC4gRmluZGluZyBvdXQgdGhlIEZQUyBvZiB0aGVcbiAgLy8gcmVjb3JkaW5nIGlzIHN1cnByaXNpbmdseSB0cmlja3kuIEFuZCBhY3R1YWxseSwgYnJvd3NlcnMgc2VlbSB0byByZWNvcmRcbiAgLy8gd2l0aCAzMGZwcyBhbG1vc3QgYWxsIG9mIHRoZSB0aW1lIHJpZ2h0IG5vdyBhbndheS5cbiAgY29uc3QgZnBzID0gMzA7XG4gIHVzZVNob3J0Y3V0KFNIT1JUQ1VUUy5yZXZpZXcuZm9yd2FyZHM1c2VjcywgKCkgPT4ganVtcEluVGltZSg1KSk7XG4gIHVzZVNob3J0Y3V0KFNIT1JUQ1VUUy5yZXZpZXcuYmFja3dhcmRzNXNlY3MsICgpID0+IGp1bXBJblRpbWUoLTUpKTtcbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLnJldmlldy5mb3J3YXJkc0ZyYW1lLCAoKSA9PiBqdW1wSW5UaW1lKDEgLyBmcHMpKTtcbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLnJldmlldy5iYWNrd2FyZHNGcmFtZSwgKCkgPT4ganVtcEluVGltZSgtMSAvIGZwcykpO1xuXG5cbiAgY29uc3QgY2hpbGRyZW4gPSByZWNvcmRpbmdzLm1hcCgocmVjb3JkaW5nLCBpbmRleCkgPT4gKHtcbiAgICBkaW1lbnNpb25zOiAoKSA9PiByZWNvcmRpbmcuZGltZW5zaW9ucyxcbiAgICBib2R5OiAoXG4gICAgICA8ZGl2IGNzcz17eyBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLCB3aWR0aDogXCIxMDAlXCIsIGhlaWdodDogXCIxMDAlXCIgfX0+XG4gICAgICAgIHtvdmVybGF5VmlzaWJsZSAmJiAoXG4gICAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICBib3R0b206IDAsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAwLjY1KVwiLFxuICAgICAgICAgICAgY29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJzdGFydFwiLFxuICAgICAgICAgICAgcGFkZGluZ1RvcDogMTYsXG4gICAgICAgICAgICBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIixcbiAgICAgICAgICB9fT5cbiAgICAgICAgICAgIDxDdXRPdXRJY29uIGNzcz17eyBmb250U2l6ZTogXCIzZW1cIiB9fS8+XG4gICAgICAgICAgICA8cCBjc3M9e3sgbWFyZ2luOiBcIjhweCAwXCIgfX0+e3QoXCJzdGVwcy5yZXZpZXcucGFydC13aWxsLWJlLXJlbW92ZWRcIil9PC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgICA8dmlkZW9cbiAgICAgICAgICByZWY9e3ZpZGVvUmVmc1tpbmRleF19XG4gICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICBzcmM9e3JlY29yZGluZy51cmx9XG4gICAgICAgICAgb25Mb2FkZWREYXRhPXtldmVudCA9PiB7XG4gICAgICAgICAgICAvLyBGb3JjZSB0aGUgYnJvd3NlciB0byBjYWxjdWxhdGUgdGhlIGR1cmF0aW9uIG9mIHRoZSBzdHJlYW1cbiAgICAgICAgICAgIC8vIGJ5IHNlZWtpbmcgd2F5IHBhc3QgaXRzIGVuZC4gKmZpbmdlcnMgY3Jvc3NlZCpcbiAgICAgICAgICAgIC8vIFdlIHJlc2V0IHRoaXMgbGF0ZXIgaW4gYW4gZWZmZWN0LiAoU2VlIGFib3ZlLilcbiAgICAgICAgICAgIC8vIEFsc28gd2l0aG91dCBzZXR0aW5nIHRoZSBjdXJyZW50IHRpbWUgb25jZSBpbml0aWFsbHksXG4gICAgICAgICAgICAvLyBzb21lIGJyb3dzZXJzIHNob3cgYSBibGFjayB2aWRlbyBlbGVtZW50IGluc3RlYWQgb2YgdGhlIGZpcnN0IGZyYW1lLlxuICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jdXJyZW50VGltZSA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgICAgICBkdXJhdGlvbkNhbGN1bGF0aW9uUHJvZ3Jlc3NbaW5kZXhdLmN1cnJlbnQgPSBcInN0YXJ0ZWRcIjtcbiAgICAgICAgICB9fVxuICAgICAgICAgIG9uU2Vla2VkPXsoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZHVyYXRpb25zQ2FsY3VsYXRlZCkge1xuICAgICAgICAgICAgICBjb25zdCBpc090aGVyU2Vla2luZyA9IHZpZGVvUmVmc1tpbmRleCA9PSAwID8gMSA6IDBdLmN1cnJlbnQ/LnNlZWtpbmc7XG4gICAgICAgICAgICAgIGNvbnN0IHF1ZXVlZCA9IHF1ZXVlZFNlZWsuY3VycmVudDtcbiAgICAgICAgICAgICAgaWYgKCFpc090aGVyU2Vla2luZyAmJiBxdWV1ZWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGFsbFZpZGVvcy5mb3JFYWNoKHIgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKHIuY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICByLmN1cnJlbnQuY3VycmVudFRpbWUgPSBxdWV1ZWQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcXVldWVkU2Vlay5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgICAgb25UaW1lVXBkYXRlPXtldmVudCA9PiB7XG4gICAgICAgICAgICBpZiAoZHVyYXRpb25zQ2FsY3VsYXRlZCkge1xuICAgICAgICAgICAgICBzZXRPdmVybGF5VmlzaWJsZShpc0luQ3V0UmVnaW9uKGV2ZW50LmN1cnJlbnRUYXJnZXQuY3VycmVudFRpbWUpKTtcbiAgICAgICAgICAgICAgb25UaW1lVXBkYXRlKGV2ZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1hdGNoKG5vdE51bGxpc2goZHVyYXRpb25DYWxjdWxhdGlvblByb2dyZXNzW2luZGV4XS5jdXJyZW50KSwge1xuICAgICAgICAgICAgICAgIFwic3RhcnRlZFwiOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmN1cnJlbnRUaW1lID0gQUxNT1NUX1pFUk87XG4gICAgICAgICAgICAgICAgICBkdXJhdGlvbkNhbGN1bGF0aW9uUHJvZ3Jlc3NbaW5kZXhdLmN1cnJlbnQgPSBcImRvbmVcIjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiZG9uZVwiOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBmaW5pc2hlZENhbGN1bGF0aW9ucyA9IGR1cmF0aW9uQ2FsY3VsYXRpb25Qcm9ncmVzc1xuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKHAgPT4gcC5jdXJyZW50ID09PSBcImRvbmVcIilcbiAgICAgICAgICAgICAgICAgICAgLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgIGlmIChmaW5pc2hlZENhbGN1bGF0aW9ucyA9PT0gcmVjb3JkaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0RHVyYXRpb25zQ2FsY3VsYXRlZCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9fVxuXG4gICAgICAgICAgLy8gRm9yIGlPUzogd2l0aG91dCB0aGUgYXV0b3BsYXkgYXR0cmlidXRlLCB0aGUgYGxvYWRlZGRhdGFgIGV2ZW50IGlzXG4gICAgICAgICAgLy8gbmV2ZXIgZmlyZWQgZm9yIHNvbWUgcmVhc29uLiBBZGRpbmcgdGhpcyBkb2VzIG5vdCBzZWVtIHRvIGFjdHVhbGx5XG4gICAgICAgICAgLy8gY2F1c2UgU2FmYXJpIHRvIGF1dG9wbGF5LlxuICAgICAgICAgIGF1dG9QbGF5PXsvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KX1cblxuICAgICAgICAgIC8vIEFsc28gZm9yIGlPUzogd2l0aG91dCB0aGlzLCB0aGUgdmlkZW8gbWF4aW1pemVzIGF1dG9tYXRpY2FsbHkuXG4gICAgICAgICAgcGxheXNJbmxpbmVcblxuICAgICAgICAgIHByZWxvYWQ9XCJhdXRvXCJcbiAgICAgICAgICB0YWJJbmRleD17LTF9XG4gICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICAgICAgb3V0bGluZTogXCJub25lXCIsXG4gICAgICAgICAgICBib3hTaGFkb3c6IGlzSGlnaENvbnRyYXN0ID8gXCJub25lXCIgOiBcIjAgNHB4IDE2cHggdmFyKC0tc2hhZG93LWNvbG9yKVwiLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAxNixcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKSxcbiAgfSkpO1xuXG4gIHJldHVybiA8VmlkZW9Cb3ggZ2FwPXsyMH0+e2NoaWxkcmVufTwvVmlkZW9Cb3g+O1xufSk7XG4iXX0= */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref5 =  false ? 0 : {\n  name: \"mat9d4-body\",\n  styles: \"margin:8px 0;label:body;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst Preview = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((_ref, ref) => {\n  let {\n    onTimeUpdate,\n    onReady,\n    onPausePlay\n  } = _ref;\n  const {\n    recordings,\n    start,\n    end\n  } = (0,_studio_state__WEBPACK_IMPORTED_MODULE_3__.useStudioState)();\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.useColorScheme)();\n  const videoRefs = [(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null)];\n  const allVideos = videoRefs.slice(0, recordings.length);\n  const desktopIndex = recordings.length === 2 ? recordings[0].deviceType === \"desktop\" ? 0 : 1 : null;\n\n  // The index of the last video ref that received an event (0 or 1).\n  const lastOrigin = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n\n  // When updating the currenTime, i.e. the play position, we want to throttle\n  // this somehow. Just always setting `currentTime` is not ideal: consider\n  // `onMouseMove`, which would set a new value very frequently. Chrome and\n  // Firefox don't seem to handle that very well: every new time set will\n  // cancel the in-progress seeking, leading to quite large delays.\n  //\n  // What we do instead is: if we are not currently seeking, just set the time\n  // as normal. But if a seek operation is in progress, we just queue the time.\n  // Further below, the `onSeeked` event handler is the second part of the\n  // solution: when a seek operation has ended and a new time is queued, we\n  // seek to that time again. Put simply: we just wait for seek operations to\n  // finish before changing `currenTime` again.\n  const queuedSeek = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const setTime = newTime => {\n    const isSeeking = allVideos.some(v => v.current?.seeking);\n    if (isSeeking) {\n      queuedSeek.current = newTime;\n    } else {\n      allVideos.forEach(r => {\n        if (r.current) {\n          r.current.currentTime = Math.max(0, Math.min(newTime, r.current.duration));\n        }\n      });\n    }\n  };\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => ({\n    get currentTime() {\n      return (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(videoRefs[lastOrigin.current ?? 0].current?.currentTime);\n    },\n    set currentTime(newTime) {\n      setTime(newTime);\n    },\n    get duration() {\n      return (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(videoRefs[lastOrigin.current ?? 0].current?.duration);\n    },\n    get isPlaying() {\n      const v = videoRefs[lastOrigin.current ?? 0].current;\n      return v != null && v.currentTime > 0 && !v.paused && !v.ended;\n    },\n    get isReadyToPlay() {\n      // State 2 means \"at least enough data to play one frame\"\n      return allVideos.every(r => (r.current?.readyState ?? 0) >= 2);\n    },\n    play() {\n      allVideos.forEach(r => r.current?.play());\n      onPausePlay(false);\n    },\n    pause() {\n      allVideos.forEach(r => r.current?.pause());\n      onPausePlay(true);\n    }\n  }));\n\n  // Some browsers don't calculate the duration for the recorded videos\n  // preventing us from seeking in the video. We force it below\n  // in the event handlers of the video elements, but we want to hold off\n  // on some effects until that calculation is done.\n  const durationCalculationProgress = [(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)()];\n  const [durationsCalculated, setDurationsCalculated] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n\n  // Some logic to decide whether we currently are in a part of the video that\n  // will be removed. The state will be updated in `onTimeUpdate` below and is\n  // only here to trigger a rerender: the condition for rendering the overlay is\n  // below.\n  const isInCutRegion = time => start !== null && time < start || end !== null && time > end;\n  const currentTime = videoRefs[lastOrigin.current ?? 0].current?.currentTime || 0;\n  const overlayVisible = isInCutRegion(currentTime);\n  const [, setOverlayVisible] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(overlayVisible);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (durationsCalculated) {\n      onReady();\n    }\n  }, [onReady, durationsCalculated]);\n\n  // Setup backup synchronization between both video elements\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!durationsCalculated) {\n      return;\n    }\n    if (desktopIndex != null) {\n      // If we have two recordings, both will have audio. But the user doesn't\n      // want to hear audio twice, so we mute one video element. Particularly,\n      // we mute the desktop video, as there the audio/video synchronization is\n      // not as critical.\n      (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(videoRefs[desktopIndex].current).volume = 0;\n      const va = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(videoRefs[0].current);\n      const vb = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(videoRefs[1].current);\n\n      // We regularly check if both video elements diverge too much from one\n      // another.\n      let frameCounter = 0;\n      let fixRequest;\n      const fixTime = () => {\n        // Only run every 60 frames.\n        if (frameCounter % 60 === 0) {\n          // We want the difference to be below 150ms. Usually, even without\n          // this backup solution, it should be below 50ms at all time. That's\n          // what testing showed.\n          const diff = Math.abs(va.currentTime - vb.currentTime);\n          if (diff > 0.15 && lastOrigin.current != null) {\n            const origin = videoRefs[lastOrigin.current].current;\n            const target = videoRefs[lastOrigin.current === 0 ? 1 : 0].current;\n            (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(target).currentTime = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(origin).currentTime;\n          }\n        }\n        frameCounter++;\n        fixRequest = window.requestAnimationFrame(fixTime);\n      };\n      fixRequest = window.requestAnimationFrame(fixTime);\n      return () => window.cancelAnimationFrame(fixRequest);\n    }\n  });\n  const jumpInTime = diff => setTime((0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(videoRefs[lastOrigin.current ?? 0].current?.currentTime) + diff);\n\n  // TODO: This is obviously not always correct. Finding out the FPS of the\n  // recording is surprisingly tricky. And actually, browsers seem to record\n  // with 30fps almost all of the time right now anway.\n  const fps = 30;\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_7__.useShortcut)(_shortcuts__WEBPACK_IMPORTED_MODULE_7__.SHORTCUTS.review.forwards5secs, () => jumpInTime(5));\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_7__.useShortcut)(_shortcuts__WEBPACK_IMPORTED_MODULE_7__.SHORTCUTS.review.backwards5secs, () => jumpInTime(-5));\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_7__.useShortcut)(_shortcuts__WEBPACK_IMPORTED_MODULE_7__.SHORTCUTS.review.forwardsFrame, () => jumpInTime(1 / fps));\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_7__.useShortcut)(_shortcuts__WEBPACK_IMPORTED_MODULE_7__.SHORTCUTS.review.backwardsFrame, () => jumpInTime(-1 / fps));\n  const children = recordings.map((recording, index) => ({\n    dimensions: () => recording.dimensions,\n    body: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(\"div\", {\n      css: _ref2,\n      children: [overlayVisible && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(\"div\", {\n        css: _ref3,\n        children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_cut_out_icon_svg__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n          css: _ref4\n        }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"p\", {\n          css: _ref5,\n          children: t(\"steps.review.part-will-be-removed\")\n        })]\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"video\", {\n        ref: videoRefs[index],\n        src: recording.url,\n        onLoadedData: event => {\n          // Force the browser to calculate the duration of the stream\n          // by seeking way past its end. *fingers crossed*\n          // We reset this later in an effect. (See above.)\n          // Also without setting the current time once initially,\n          // some browsers show a black video element instead of the first frame.\n          event.currentTarget.currentTime = Number.MAX_VALUE;\n          durationCalculationProgress[index].current = \"started\";\n        },\n        onSeeked: () => {\n          if (durationsCalculated) {\n            const isOtherSeeking = videoRefs[index == 0 ? 1 : 0].current?.seeking;\n            const queued = queuedSeek.current;\n            if (!isOtherSeeking && queued != null) {\n              allVideos.forEach(r => {\n                if (r.current) {\n                  r.current.currentTime = queued;\n                }\n              });\n              queuedSeek.current = null;\n            }\n          }\n        },\n        onTimeUpdate: event => {\n          if (durationsCalculated) {\n            setOverlayVisible(isInCutRegion(event.currentTarget.currentTime));\n            onTimeUpdate(event);\n          } else {\n            (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.match)((0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.notNullish)(durationCalculationProgress[index].current), {\n              \"started\": () => {\n                event.currentTarget.currentTime = ___WEBPACK_IMPORTED_MODULE_6__.ALMOST_ZERO;\n                durationCalculationProgress[index].current = \"done\";\n              },\n              \"done\": () => {\n                const finishedCalculations = durationCalculationProgress.filter(p => p.current === \"done\").length;\n                if (finishedCalculations === recordings.length) {\n                  setDurationsCalculated(true);\n                }\n              }\n            });\n          }\n        }\n\n        // For iOS: without the autoplay attribute, the `loadeddata` event is\n        // never fired for some reason. Adding this does not seem to actually\n        // cause Safari to autoplay.\n        ,\n        autoPlay: /iPad|iPhone|iPod/.test(navigator.userAgent)\n\n        // Also for iOS: without this, the video maximizes automatically.\n        ,\n        playsInline: true,\n        preload: \"auto\",\n        tabIndex: -1,\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n          width: \"100%\",\n          height: \"100%\",\n          outline: \"none\",\n          boxShadow: isHighContrast ? \"none\" : \"0 4px 16px var(--shadow-color)\",\n          borderRadius: 16\n        },  false ? 0 : \";label:body;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n      }, index)]\n    })\n  }));\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_ui_VideoBox__WEBPACK_IMPORTED_MODULE_5__.VideoBox, {\n    gap: 20,\n    children: children\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/steps/review/preview.tsx\n");

/***/ }),

/***/ "./src/steps/video-setup/index.tsx":
/*!*****************************************!*\
  !*** ./src/steps/video-setup/index.tsx ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VideoSetup: function() { return /* binding */ VideoSetup; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var _studio_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../studio-state */ \"./src/studio-state.tsx\");\n/* harmony import */ var _capturer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../capturer */ \"./src/capturer.tsx\");\n/* harmony import */ var _preview__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./preview */ \"./src/steps/video-setup/preview.tsx\");\n/* harmony import */ var _prefs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./prefs */ \"./src/steps/video-setup/prefs.tsx\");\n/* harmony import */ var _elements__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../elements */ \"./src/steps/elements.tsx\");\n/* harmony import */ var _source_select__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./source-select */ \"./src/steps/video-setup/source-select.tsx\");\n/* harmony import */ var _ui_ErrorBox__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../ui/ErrorBox */ \"./src/ui/ErrorBox.tsx\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst VideoSetup = _ref => {\n  let {\n    goToNextStep\n  } = _ref;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const dispatch = (0,_studio_state__WEBPACK_IMPORTED_MODULE_3__.useDispatch)();\n  const state = (0,_studio_state__WEBPACK_IMPORTED_MODULE_3__.useStudioState)();\n  const {\n    displayStream,\n    userStream,\n    videoChoice: activeSource\n  } = state;\n  const hasStreams = !!displayStream || !!userStream;\n  const setActiveSource = s => dispatch({\n    type: \"CHOOSE_VIDEO\",\n    choice: s\n  });\n  const reselectSource = () => {\n    setActiveSource(\"none\");\n    (0,_capturer__WEBPACK_IMPORTED_MODULE_4__.stopUserCapture)(userStream, dispatch);\n    (0,_capturer__WEBPACK_IMPORTED_MODULE_4__.stopDisplayCapture)(displayStream, dispatch);\n  };\n  const userInput = {\n    isDesktop: false,\n    stream: userStream,\n    allowed: state.userAllowed,\n    unexpectedEnd: state.userUnexpectedEnd\n  };\n  const displayInput = {\n    isDesktop: true,\n    stream: displayStream,\n    allowed: state.displayAllowed,\n    unexpectedEnd: state.displayUnexpectedEnd\n  };\n  const buttons = {\n    prevButton: {\n      onClick: reselectSource,\n      disabled: false,\n      label: t(\"steps.video.reselect-source\")\n    },\n    nextButton: {\n      onClick: () => goToNextStep(),\n      disabled: activeSource === \"both\" ? !displayStream || !userStream : !hasStreams\n    }\n  };\n  const someProblem = state.userAllowed === false || state.userUnexpectedEnd || state.displayAllowed === false || state.displayUnexpectedEnd;\n  return (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.match)(activeSource, {\n    \"none\": () => {\n      return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(_elements__WEBPACK_IMPORTED_MODULE_7__.StepContainer, {\n        title: t(\"steps.video.question\"),\n        children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Warnings, {}), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_source_select__WEBPACK_IMPORTED_MODULE_8__.SourceSelection, {\n          displayConstraints: (0,_prefs__WEBPACK_IMPORTED_MODULE_6__.prefsToConstraints)((0,_prefs__WEBPACK_IMPORTED_MODULE_6__.loadDisplayPrefs)()),\n          userConstraints: (0,_prefs__WEBPACK_IMPORTED_MODULE_6__.prefsToConstraints)((0,_prefs__WEBPACK_IMPORTED_MODULE_6__.loadCameraPrefs)()),\n          setActiveSource: setActiveSource\n        })]\n      });\n    },\n    \"user\": () => {\n      const showButtons = userStream || someProblem;\n      return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_elements__WEBPACK_IMPORTED_MODULE_7__.StepContainer, {\n        title: t(\"steps.video.user-selected\"),\n        ...(showButtons && buttons),\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_preview__WEBPACK_IMPORTED_MODULE_5__.SourcePreview, {\n          inputs: [userInput]\n        })\n      });\n    },\n    \"display\": () => {\n      const showButtons = displayStream || someProblem;\n      return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_elements__WEBPACK_IMPORTED_MODULE_7__.StepContainer, {\n        title: t(\"steps.video.display-selected\"),\n        ...(showButtons && buttons),\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_preview__WEBPACK_IMPORTED_MODULE_5__.SourcePreview, {\n          inputs: [displayInput]\n        })\n      });\n    },\n    \"both\": () => {\n      const showButtons = userStream && displayStream || someProblem;\n      return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_elements__WEBPACK_IMPORTED_MODULE_7__.StepContainer, {\n        title: t(\"steps.video.display-and-user-selected\"),\n        ...(showButtons && buttons),\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_preview__WEBPACK_IMPORTED_MODULE_5__.SourcePreview, {\n          inputs: [displayInput, userInput]\n        })\n      });\n    }\n  });\n};\n\n/** Conditionally shows a number of warnings to help the user identify problems. */\nconst Warnings = () => {\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const warnings = [];\n\n  // We allow HTTP connections to localhost, as most browsers also seem to allow\n  // video capture in those cases.\n  const usingUnsecureConnection = window.location.protocol !== \"https:\" && window.location.hostname !== \"localhost\" && window.location.hostname !== \"127.0.0.1\";\n  if (usingUnsecureConnection) {\n    warnings.push((0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_ui_ErrorBox__WEBPACK_IMPORTED_MODULE_9__.ErrorBox, {\n      body: t(\"warning-https\")\n    }));\n  }\n\n  // Warning about missing `MediaRecorder` support\n  if (!(0,_util__WEBPACK_IMPORTED_MODULE_10__.isRecordingSupported)()) {\n    let msg = t(\"warning-recorder-not-supported\");\n    if ((0,_util__WEBPACK_IMPORTED_MODULE_10__.onSafari)()) {\n      msg += \" \" + t(\"warning-recorder-safari-hint\");\n    }\n    warnings.push((0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_ui_ErrorBox__WEBPACK_IMPORTED_MODULE_9__.ErrorBox, {\n      body: msg\n    }));\n  }\n  return warnings.length > 0 ? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n    children: warnings\n  }) : null;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RlcHMvdmlkZW8tc2V0dXAvaW5kZXgudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFVQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7QUFDQTs7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmNhc3Qtc3R1ZGlvLy4vc3JjL3N0ZXBzL3ZpZGVvLXNldHVwL2luZGV4LnRzeD8zZWVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCB7IG1hdGNoIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcblxuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVN0dWRpb1N0YXRlLCBWaWRlb1NvdXJjZSB9IGZyb20gXCIuLi8uLi9zdHVkaW8tc3RhdGVcIjtcbmltcG9ydCB7IHN0b3BEaXNwbGF5Q2FwdHVyZSwgc3RvcFVzZXJDYXB0dXJlIH0gZnJvbSBcIi4uLy4uL2NhcHR1cmVyXCI7XG5pbXBvcnQgeyBTb3VyY2VQcmV2aWV3IH0gZnJvbSBcIi4vcHJldmlld1wiO1xuaW1wb3J0IHsgbG9hZENhbWVyYVByZWZzLCBsb2FkRGlzcGxheVByZWZzLCBwcmVmc1RvQ29uc3RyYWludHMgfSBmcm9tIFwiLi9wcmVmc1wiO1xuaW1wb3J0IHsgU3RlcFByb3BzIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyBTdGVwQ29udGFpbmVyIH0gZnJvbSBcIi4uL2VsZW1lbnRzXCI7XG5pbXBvcnQgeyBTb3VyY2VTZWxlY3Rpb24gfSBmcm9tIFwiLi9zb3VyY2Utc2VsZWN0XCI7XG5pbXBvcnQgeyBFcnJvckJveCB9IGZyb20gXCIuLi8uLi91aS9FcnJvckJveFwiO1xuaW1wb3J0IHsgaXNSZWNvcmRpbmdTdXBwb3J0ZWQsIG9uU2FmYXJpIH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcblxuXG5leHBvcnQgdHlwZSBJbnB1dCA9IHtcbiAgaXNEZXNrdG9wOiBib29sZWFuO1xuICBzdHJlYW06IE1lZGlhU3RyZWFtIHwgbnVsbDtcbiAgYWxsb3dlZDogYm9vbGVhbiB8IG51bGw7XG4gIHVuZXhwZWN0ZWRFbmQ6IGJvb2xlYW4gfCBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IFZpZGVvU2V0dXA6IFJlYWN0LkZDPFN0ZXBQcm9wcz4gPSAoeyBnb1RvTmV4dFN0ZXAgfSkgPT4ge1xuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG5cbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBzdGF0ZSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IHsgZGlzcGxheVN0cmVhbSwgdXNlclN0cmVhbSwgdmlkZW9DaG9pY2U6IGFjdGl2ZVNvdXJjZSB9ID0gc3RhdGU7XG4gIGNvbnN0IGhhc1N0cmVhbXMgPSAhIWRpc3BsYXlTdHJlYW0gfHwgISF1c2VyU3RyZWFtO1xuXG4gIGNvbnN0IHNldEFjdGl2ZVNvdXJjZSA9IChzOiBWaWRlb1NvdXJjZSkgPT4gZGlzcGF0Y2goeyB0eXBlOiBcIkNIT09TRV9WSURFT1wiLCBjaG9pY2U6IHMgfSk7XG4gIGNvbnN0IHJlc2VsZWN0U291cmNlID0gKCkgPT4ge1xuICAgIHNldEFjdGl2ZVNvdXJjZShcIm5vbmVcIik7XG4gICAgc3RvcFVzZXJDYXB0dXJlKHVzZXJTdHJlYW0sIGRpc3BhdGNoKTtcbiAgICBzdG9wRGlzcGxheUNhcHR1cmUoZGlzcGxheVN0cmVhbSwgZGlzcGF0Y2gpO1xuICB9O1xuXG5cbiAgY29uc3QgdXNlcklucHV0ID0ge1xuICAgIGlzRGVza3RvcDogZmFsc2UsXG4gICAgc3RyZWFtOiB1c2VyU3RyZWFtLFxuICAgIGFsbG93ZWQ6IHN0YXRlLnVzZXJBbGxvd2VkLFxuICAgIHVuZXhwZWN0ZWRFbmQ6IHN0YXRlLnVzZXJVbmV4cGVjdGVkRW5kLFxuICB9O1xuICBjb25zdCBkaXNwbGF5SW5wdXQgPSB7XG4gICAgaXNEZXNrdG9wOiB0cnVlLFxuICAgIHN0cmVhbTogZGlzcGxheVN0cmVhbSxcbiAgICBhbGxvd2VkOiBzdGF0ZS5kaXNwbGF5QWxsb3dlZCxcbiAgICB1bmV4cGVjdGVkRW5kOiBzdGF0ZS5kaXNwbGF5VW5leHBlY3RlZEVuZCxcbiAgfTtcblxuICBjb25zdCBidXR0b25zID0ge1xuICAgIHByZXZCdXR0b246IHtcbiAgICAgIG9uQ2xpY2s6IHJlc2VsZWN0U291cmNlLFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgbGFiZWw6IHQoXCJzdGVwcy52aWRlby5yZXNlbGVjdC1zb3VyY2VcIiksXG4gICAgfSxcbiAgICBuZXh0QnV0dG9uOiB7XG4gICAgICBvbkNsaWNrOiAoKSA9PiBnb1RvTmV4dFN0ZXAoKSxcbiAgICAgIGRpc2FibGVkOiBhY3RpdmVTb3VyY2UgPT09IFwiYm90aFwiID8gKCFkaXNwbGF5U3RyZWFtIHx8ICF1c2VyU3RyZWFtKSA6ICFoYXNTdHJlYW1zLFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3Qgc29tZVByb2JsZW0gPSBzdGF0ZS51c2VyQWxsb3dlZCA9PT0gZmFsc2UgfHwgc3RhdGUudXNlclVuZXhwZWN0ZWRFbmRcbiAgICB8fCBzdGF0ZS5kaXNwbGF5QWxsb3dlZCA9PT0gZmFsc2UgfHwgc3RhdGUuZGlzcGxheVVuZXhwZWN0ZWRFbmQ7XG5cbiAgcmV0dXJuIG1hdGNoKGFjdGl2ZVNvdXJjZSwge1xuICAgIFwibm9uZVwiOiAoKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8U3RlcENvbnRhaW5lciB0aXRsZT17dChcInN0ZXBzLnZpZGVvLnF1ZXN0aW9uXCIpfT5cbiAgICAgICAgICA8V2FybmluZ3MgLz5cbiAgICAgICAgICA8U291cmNlU2VsZWN0aW9uXG4gICAgICAgICAgICBkaXNwbGF5Q29uc3RyYWludHM9e3ByZWZzVG9Db25zdHJhaW50cyhsb2FkRGlzcGxheVByZWZzKCkpfVxuICAgICAgICAgICAgdXNlckNvbnN0cmFpbnRzPXtwcmVmc1RvQ29uc3RyYWludHMobG9hZENhbWVyYVByZWZzKCkpfVxuICAgICAgICAgICAgc2V0QWN0aXZlU291cmNlPXtzZXRBY3RpdmVTb3VyY2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9TdGVwQ29udGFpbmVyPlxuICAgICAgKTtcbiAgICB9LFxuXG4gICAgXCJ1c2VyXCI6ICgpID0+IHtcbiAgICAgIGNvbnN0IHNob3dCdXR0b25zID0gdXNlclN0cmVhbSB8fCBzb21lUHJvYmxlbTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxTdGVwQ29udGFpbmVyXG4gICAgICAgICAgdGl0bGU9e3QoXCJzdGVwcy52aWRlby51c2VyLXNlbGVjdGVkXCIpfVxuICAgICAgICAgIHsuLi5zaG93QnV0dG9ucyAmJiBidXR0b25zfVxuICAgICAgICA+XG4gICAgICAgICAgPFNvdXJjZVByZXZpZXcgaW5wdXRzPXtbdXNlcklucHV0XX0gLz5cbiAgICAgICAgPC9TdGVwQ29udGFpbmVyPlxuICAgICAgKTtcbiAgICB9LFxuXG4gICAgXCJkaXNwbGF5XCI6ICgpID0+IHtcbiAgICAgIGNvbnN0IHNob3dCdXR0b25zID0gZGlzcGxheVN0cmVhbSB8fCBzb21lUHJvYmxlbTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxTdGVwQ29udGFpbmVyXG4gICAgICAgICAgdGl0bGU9e3QoXCJzdGVwcy52aWRlby5kaXNwbGF5LXNlbGVjdGVkXCIpfVxuICAgICAgICAgIHsuLi5zaG93QnV0dG9ucyAmJiBidXR0b25zfVxuICAgICAgICA+XG4gICAgICAgICAgPFNvdXJjZVByZXZpZXcgaW5wdXRzPXtbZGlzcGxheUlucHV0XX0gLz5cbiAgICAgICAgPC9TdGVwQ29udGFpbmVyPlxuICAgICAgKTtcbiAgICB9LFxuXG4gICAgXCJib3RoXCI6ICgpID0+IHtcbiAgICAgIGNvbnN0IHNob3dCdXR0b25zID0gKHVzZXJTdHJlYW0gJiYgZGlzcGxheVN0cmVhbSkgfHwgc29tZVByb2JsZW07XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8U3RlcENvbnRhaW5lclxuICAgICAgICAgIHRpdGxlPXt0KFwic3RlcHMudmlkZW8uZGlzcGxheS1hbmQtdXNlci1zZWxlY3RlZFwiKX1cbiAgICAgICAgICB7Li4uc2hvd0J1dHRvbnMgJiYgYnV0dG9uc31cbiAgICAgICAgPlxuICAgICAgICAgIDxTb3VyY2VQcmV2aWV3IGlucHV0cz17W2Rpc3BsYXlJbnB1dCwgdXNlcklucHV0XX0gLz5cbiAgICAgICAgPC9TdGVwQ29udGFpbmVyPlxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcbn07XG5cblxuXG4vKiogQ29uZGl0aW9uYWxseSBzaG93cyBhIG51bWJlciBvZiB3YXJuaW5ncyB0byBoZWxwIHRoZSB1c2VyIGlkZW50aWZ5IHByb2JsZW1zLiAqL1xuY29uc3QgV2FybmluZ3MgPSAoKSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcblxuICBjb25zdCB3YXJuaW5nczogSlNYLkVsZW1lbnRbXSA9IFtdO1xuXG4gIC8vIFdlIGFsbG93IEhUVFAgY29ubmVjdGlvbnMgdG8gbG9jYWxob3N0LCBhcyBtb3N0IGJyb3dzZXJzIGFsc28gc2VlbSB0byBhbGxvd1xuICAvLyB2aWRlbyBjYXB0dXJlIGluIHRob3NlIGNhc2VzLlxuICBjb25zdCB1c2luZ1Vuc2VjdXJlQ29ubmVjdGlvbiA9IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAhPT0gXCJodHRwczpcIiAmJlxuICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSAhPT0gXCJsb2NhbGhvc3RcIiAmJlxuICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSAhPT0gXCIxMjcuMC4wLjFcIjtcbiAgaWYgKHVzaW5nVW5zZWN1cmVDb25uZWN0aW9uKSB7XG4gICAgd2FybmluZ3MucHVzaChcbiAgICAgIDxFcnJvckJveCBib2R5PXt0KFwid2FybmluZy1odHRwc1wiKX0gLz5cbiAgICApO1xuICB9XG5cbiAgLy8gV2FybmluZyBhYm91dCBtaXNzaW5nIGBNZWRpYVJlY29yZGVyYCBzdXBwb3J0XG4gIGlmICghaXNSZWNvcmRpbmdTdXBwb3J0ZWQoKSkge1xuICAgIGxldCBtc2cgPSB0KFwid2FybmluZy1yZWNvcmRlci1ub3Qtc3VwcG9ydGVkXCIpO1xuICAgIGlmIChvblNhZmFyaSgpKSB7XG4gICAgICBtc2cgKz0gXCIgXCIgKyB0KFwid2FybmluZy1yZWNvcmRlci1zYWZhcmktaGludFwiKTtcbiAgICB9XG4gICAgd2FybmluZ3MucHVzaCg8RXJyb3JCb3ggYm9keT17bXNnfSAvPik7XG4gIH1cblxuXG4gIHJldHVybiB3YXJuaW5ncy5sZW5ndGggPiAwXG4gICAgPyA8ZGl2Pnsgd2FybmluZ3MgfTwvZGl2PlxuICAgIDogbnVsbDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/steps/video-setup/index.tsx\n");

/***/ }),

/***/ "./src/steps/video-setup/prefs.tsx":
/*!*****************************************!*\
  !*** ./src/steps/video-setup/prefs.tsx ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StreamSettings: function() { return /* binding */ StreamSettings; },\n/* harmony export */   deviceIdOf: function() { return /* binding */ deviceIdOf; },\n/* harmony export */   loadCameraPrefs: function() { return /* binding */ loadCameraPrefs; },\n/* harmony export */   loadDisplayPrefs: function() { return /* binding */ loadDisplayPrefs; },\n/* harmony export */   prefsToConstraints: function() { return /* binding */ prefsToConstraints; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../settings */ \"./src/settings.tsx\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _studio_state__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../studio-state */ \"./src/studio-state.tsx\");\n/* harmony import */ var _capturer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../capturer */ \"./src/capturer.tsx\");\n/* harmony import */ var _ui_Select__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../ui/Select */ \"./src/ui/Select.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n// Everything related to video stream preferences that the user can modify.\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Creates a valid constraints object from the given preferences. The mapping\n * is as follows:\n *\n * - deviceId: falsy values are ignored, any other value is passed on, either as\n *   `ideal` (if `exactDevice` is `false`) or `exact` (if `exactDevice` is\n *   `true`).\n * - aspectRatio: values in `ASPECT_RATIOS` are passed as `ideal`, everything\n *   else is ignored.\n * - quality: valid quality labels are passed on as `ideal` height, invalid ones\n *   are ignored.\n */\n\n\n\nconst prefsToConstraints = function (prefs) {\n  let exactDevice = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const deviceConstraint = \"deviceId\" in prefs && {\n    deviceId: {\n      [exactDevice ? \"exact\" : \"ideal\"]: prefs.deviceId\n    }\n  };\n  const aspectRatioConstraint = \"aspectRatio\" in prefs && {\n    aspectRatio: {\n      ideal: prefs.aspectRatio ? parseAspectRatio(prefs.aspectRatio) : undefined\n    }\n  };\n  const heightConstraint = \"quality\" in prefs && {\n    height: {\n      ideal: prefs.quality ? parseQuality(prefs.quality) : undefined\n    }\n  };\n  return {\n    ...deviceConstraint,\n    ...aspectRatioConstraint,\n    ...heightConstraint\n  };\n};\n\n// All aspect ratios the user can choose from.\nconst ASPECT_RATIOS = [\"4:3\", \"16:9\"];\n\n// All quality options given to the user respecting the `maxHeight` from the\n// settings.\nconst qualityOptions = maxHeight => {\n  const defaults = [360, 480, 720, 1080, 1440, 2160];\n  const out = defaults.filter(q => !maxHeight || q <= maxHeight);\n  if (maxHeight && (out.length === 0 || out[out.length - 1] !== maxHeight)) {\n    out.push(maxHeight);\n  }\n  return out.map(n => `${n}p`);\n};\n\n// Converts the given aspect ratio label (one of the elements in\n// `ASPECT_RATIOS`) into the numerical ratio, e.g. 4/3 = 1.333. If the argument\n// is not a valid label, `null` is returned.\nconst parseAspectRatio = label => {\n  const mapping = {\n    \"4:3\": 4 / 3,\n    \"16:9\": 16 / 9\n  };\n  return mapping[label] ?? undefined;\n};\n\n// Converts the given quality label to the actual height as number. If the\n// argument is not a valid quality label (e.g. '720p'), `null` is returned.\nconst parseQuality = label => {\n  if (!/^[0-9]+p$/.test(label)) {\n    return undefined;\n  }\n  return parseInt(label);\n};\n\n// Local storage keys\nconst LAST_VIDEO_DEVICE_KEY = \"ocStudioLastVideoDevice\";\nconst CAMERA_ASPECT_RATIO_KEY = \"ocStudioCameraAspectRatio\";\nconst CAMERA_QUALITY_KEY = \"ocStudioCameraQuality\";\nconst DISPLAY_QUALITY_KEY = \"ocStudioDisplayQuality\";\n// Loads the initial camera preferences from local storage.\nconst loadCameraPrefs = () => ({\n  deviceId: window.localStorage.getItem(LAST_VIDEO_DEVICE_KEY) ?? undefined,\n  aspectRatio: window.localStorage.getItem(CAMERA_ASPECT_RATIO_KEY) || \"auto\",\n  quality: window.localStorage.getItem(CAMERA_QUALITY_KEY) || \"auto\"\n});\n\n// Loads the initial display preferences from local storage.\nconst loadDisplayPrefs = () => ({\n  quality: window.localStorage.getItem(DISPLAY_QUALITY_KEY) || \"auto\"\n});\nvar _ref2 =  false ? 0 : {\n  name: \"1dzsu68-StreamSettings\",\n  styles: \"position:absolute;right:8px;bottom:8px;label:StreamSettings;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref3 =  false ? 0 : {\n  name: \"1edk1g9-StreamSettings\",\n  styles: \"max-width:min(670px, 100vw - 16px);label:StreamSettings;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst StreamSettings = _ref => {\n  let {\n    isDesktop,\n    stream\n  } = _ref;\n  const dispatch = (0,_studio_state__WEBPACK_IMPORTED_MODULE_5__.useDispatch)();\n  const settings = (0,_settings__WEBPACK_IMPORTED_MODULE_3__.useSettings)();\n  const floatRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const isLight = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.useColorScheme)().scheme === \"light\";\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.useColorScheme)();\n\n  // The current preferences and the callback to update them.\n  const prefs = isDesktop ? loadDisplayPrefs() : loadCameraPrefs();\n  const updatePrefs = newPrefs => {\n    // Merge and update preferences.\n    const merged = {\n      ...prefs,\n      ...newPrefs\n    };\n    const constraints = prefsToConstraints(merged, true);\n    const setOpt = (key, v) => {\n      if (v != null) {\n        window.localStorage.setItem(key, v);\n      }\n    };\n\n    // Update preferences in local storage and re-request stream. The latter\n    // will cause the rerender.\n    if (isDesktop) {\n      setOpt(DISPLAY_QUALITY_KEY, merged.quality);\n      (0,_capturer__WEBPACK_IMPORTED_MODULE_6__.stopDisplayCapture)(stream, dispatch);\n      (0,_capturer__WEBPACK_IMPORTED_MODULE_6__.startDisplayCapture)(dispatch, settings, constraints);\n    } else {\n      setOpt(LAST_VIDEO_DEVICE_KEY, merged[\"deviceId\"]);\n      setOpt(CAMERA_ASPECT_RATIO_KEY, merged[\"aspectRatio\"]);\n      setOpt(CAMERA_QUALITY_KEY, merged.quality);\n      (0,_capturer__WEBPACK_IMPORTED_MODULE_6__.stopUserCapture)(stream, dispatch);\n      (0,_capturer__WEBPACK_IMPORTED_MODULE_6__.startUserCapture)(dispatch, settings, constraints);\n    }\n  };\n\n  // Store the camera device ID in local storage. We also do this here, as we\n  // also want to remember the device the user initially selected in the browser\n  // popup.\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const cameraDeviceId = deviceIdOf(stream);\n    if (!isDesktop && cameraDeviceId) {\n      window.localStorage.setItem(LAST_VIDEO_DEVICE_KEY, cameraDeviceId);\n    }\n  });\n\n  // State about expanding and hiding the settings.\n  const [isExpanded, setIsExpanded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const label = t(`steps.video.video-settings-${isExpanded ? \"close\" : \"open\"}`);\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.Fragment, {\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"div\", {\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n        display: isExpanded ? \"initial\" : \"none\",\n        position: \"absolute\",\n        top: 12,\n        left: 0,\n        right: 0,\n        textAlign: \"center\"\n      },  false ? 0 : \";label:StreamSettings;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n      children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"span\", {\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n          color: isLight ? _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral70 : _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral90,\n          backgroundColor: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral05,\n          borderRadius: \"10px\",\n          padding: \"4px 8px\",\n          boxShadow: isHighContrast ? \"none\" : \"0 0 12px rgba(0, 0, 0, 30%)\"\n        },  false ? 0 : \";label:StreamSettings;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n        children: streamInfo(stream)\n      })\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.FloatingContainer, {\n      ref: floatRef,\n      placement: \"top-end\",\n      ariaRole: \"dialog\",\n      open: isExpanded,\n      onClose: () => setIsExpanded(false),\n      borderRadius: 8,\n      viewPortMargin: 8,\n      css: _ref2,\n      children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.FloatingTrigger, {\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.WithTooltip, {\n          placement: \"bottom\",\n          tooltip: label,\n          children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.ProtoButton, {\n            onClick: () => setIsExpanded(old => !old),\n            \"aria-label\": label,\n            css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n              border: \"none\",\n              display: \"inline-block\",\n              backgroundColor: \"rgba(0, 0, 0, 0.3)\",\n              color: \"white\",\n              padding: 8,\n              fontSize: 26,\n              backdropFilter: \"invert(0.3) blur(4px)\",\n              lineHeight: 0,\n              borderRadius: \"10px\",\n              cursor: \"pointer\",\n              \"&:hover, &:focus-visible\": {\n                backgroundColor: \"rgba(0, 0, 0, 0.5)\"\n              },\n              \"> svg\": {\n                transition: \"transform 0.2s\"\n              },\n              \"&:hover > svg, &:focus > svg\": {\n                transform: isExpanded ? \"none\" : \"rotate(45deg)\"\n              },\n              \"&:focus-visible\": {\n                outline: \"5px dashed white\",\n                outlineOffset: -2.5\n              }\n            },  false ? 0 : \";label:StreamSettings;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n            children: isExpanded ? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_10__.FiX, {}) : (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_10__.FiSettings, {})\n          })\n        })\n      }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.Floating, {\n        css: _ref3,\n        borderWidth: isLight ? 0 : 1,\n        shadowBlur: 16,\n        padding: 18,\n        children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(\"div\", {\n          css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n            display: \"grid\",\n            width: \"100%\",\n            gridTemplateColumns: \"auto 1fr\",\n            gridGap: \"14px 32px\",\n            paddingLeft: 4,\n            [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.screenWidthAtMost)(450)]: {\n              columnGap: 8\n            },\n            [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.screenWidthAtMost)(360)]: {\n              gridTemplateColumns: \"1fr\",\n              rowGap: 0\n            },\n            fontSize: 14,\n            \"@media (min-width: 420px) and (min-height: 440px)\": {\n              fontSize: 16\n            }\n          },  false ? 0 : \";label:StreamSettings;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n          children: [!isDesktop && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(UserSettings, {\n            updatePrefs,\n            prefs,\n            isExpanded\n          }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(UniveralSettings, {\n            isDesktop,\n            updatePrefs,\n            prefs,\n            stream,\n            settings,\n            isExpanded\n          })]\n        }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"div\", {\n          css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n            backgroundColor: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral15,\n            marginTop: 8,\n            padding: \"8px 12px\",\n            fontSize: 12,\n            lineHeight: 1.25,\n            borderRadius: 6,\n            \"@media (min-width: 420px) and (min-height: 440px)\": {\n              fontSize: 14\n            }\n          },  false ? 0 : \";label:StreamSettings;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n          children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(react_i18next__WEBPACK_IMPORTED_MODULE_1__.Trans, {\n            i18nKey: \"steps.video.preferences-note\",\n            children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"strong\", {\n              children: \"Note:\"\n            }), \" Explanation.\"]\n          })\n        })]\n      })]\n    })]\n  });\n};\nconst streamInfo = stream => {\n  const s = stream?.getVideoTracks()?.[0]?.getSettings();\n  const sizeInfo = s && s.width && s.height ? `${s.width}×${s.height}` : \"\";\n  const fpsInfo = s && s.frameRate ? `${s.frameRate} fps` : \"\";\n  return s ? [sizeInfo, fpsInfo].join(\", \") : \"...\";\n};\n\n/** Div for the name of a value, e.g. quality, aspect ratio, .. */\nconst PrefKey = _ref4 => {\n  let {\n    children\n  } = _ref4;\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.screenWidthAtMost)(360)]: {\n        marginTop: 4\n      }\n    },  false ? 0 : \";label:PrefKey;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    children: children\n  });\n};\n\n/** Container for the value selection of an option, e.g. all available qualities. */\nvar _ref6 =  false ? 0 : {\n  name: \"oyra00-PrefValue\",\n  styles: \"display:flex;flex-wrap:wrap;gap:6px;label:PrefValue;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst PrefValue = _ref5 => {\n  let {\n    children\n  } = _ref5;\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"div\", {\n    css: _ref6,\n    children: children\n  });\n};\nconst UniveralSettings = _ref7 => {\n  let {\n    isDesktop,\n    updatePrefs,\n    prefs,\n    settings\n  } = _ref7;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const changeQuality = quality => updatePrefs({\n    quality\n  });\n  const maxHeight = isDesktop ? settings.display?.maxHeight : settings.camera?.maxHeight;\n  const qualities = qualityOptions(maxHeight);\n  const kind = isDesktop ? \"desktop\" : \"user\";\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.Fragment, {\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(PrefKey, {\n      children: t(\"steps.video.quality\")\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(PrefValue, {\n      children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(RadioButton, {\n        id: `quality-auto-${kind}`,\n        value: \"auto\",\n        name: `quality-${kind}`,\n        label: t(\"steps.video.quality-auto\"),\n        onChange: changeQuality,\n        checked: qualities.every(q => prefs.quality !== q)\n      }), qualities.map(q => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(RadioButton, {\n        id: `quality-${q}-${kind}`,\n        value: q,\n        name: `quality-${kind}`,\n        onChange: changeQuality,\n        checked: prefs.quality === q\n      }, `${q}-${kind}`))]\n    })]\n  });\n};\nvar _ref9 =  false ? 0 : {\n  name: \"4ux26s-UserSettings\",\n  styles: \"width:100%;label:UserSettings;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3ZpZGVvLXNldHVwL3ByZWZzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUErWVEiLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvdmlkZW8tc2V0dXAvcHJlZnMudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiLy8gRXZlcnl0aGluZyByZWxhdGVkIHRvIHZpZGVvIHN0cmVhbSBwcmVmZXJlbmNlcyB0aGF0IHRoZSB1c2VyIGNhbiBtb2RpZnkuXG5cbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24sIFRyYW5zIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCB7XG4gIEZsb2F0aW5nLCBGbG9hdGluZ0NvbnRhaW5lciwgRmxvYXRpbmdIYW5kbGUsIEZsb2F0aW5nVHJpZ2dlciwgUHJvdG9CdXR0b24sXG4gIFdpdGhUb29sdGlwLCBzY3JlZW5XaWR0aEF0TW9zdCwgdXNlQ29sb3JTY2hlbWUsXG59IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5pbXBvcnQgeyBGaVNldHRpbmdzLCBGaVggfSBmcm9tIFwicmVhY3QtaWNvbnMvZmlcIjtcblxuaW1wb3J0IHsgU2V0dGluZ3MsIHVzZVNldHRpbmdzIH0gZnJvbSBcIi4uLy4uL3NldHRpbmdzXCI7XG5pbXBvcnQgeyBDT0xPUlMsIGdldFVuaXF1ZURldmljZXMgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVN0dWRpb1N0YXRlIH0gZnJvbSBcIi4uLy4uL3N0dWRpby1zdGF0ZVwiO1xuaW1wb3J0IHtcbiAgc3RhcnREaXNwbGF5Q2FwdHVyZSxcbiAgc3RhcnRVc2VyQ2FwdHVyZSxcbiAgc3RvcERpc3BsYXlDYXB0dXJlLFxuICBzdG9wVXNlckNhcHR1cmUsXG59IGZyb20gXCIuLi8uLi9jYXB0dXJlclwiO1xuaW1wb3J0IHsgU2VsZWN0IH0gZnJvbSBcIi4uLy4uL3VpL1NlbGVjdFwiO1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIHZhbGlkIGNvbnN0cmFpbnRzIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBwcmVmZXJlbmNlcy4gVGhlIG1hcHBpbmdcbiAqIGlzIGFzIGZvbGxvd3M6XG4gKlxuICogLSBkZXZpY2VJZDogZmFsc3kgdmFsdWVzIGFyZSBpZ25vcmVkLCBhbnkgb3RoZXIgdmFsdWUgaXMgcGFzc2VkIG9uLCBlaXRoZXIgYXNcbiAqICAgYGlkZWFsYCAoaWYgYGV4YWN0RGV2aWNlYCBpcyBgZmFsc2VgKSBvciBgZXhhY3RgIChpZiBgZXhhY3REZXZpY2VgIGlzXG4gKiAgIGB0cnVlYCkuXG4gKiAtIGFzcGVjdFJhdGlvOiB2YWx1ZXMgaW4gYEFTUEVDVF9SQVRJT1NgIGFyZSBwYXNzZWQgYXMgYGlkZWFsYCwgZXZlcnl0aGluZ1xuICogICBlbHNlIGlzIGlnbm9yZWQuXG4gKiAtIHF1YWxpdHk6IHZhbGlkIHF1YWxpdHkgbGFiZWxzIGFyZSBwYXNzZWQgb24gYXMgYGlkZWFsYCBoZWlnaHQsIGludmFsaWQgb25lc1xuICogICBhcmUgaWdub3JlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHByZWZzVG9Db25zdHJhaW50cyA9IChcbiAgcHJlZnM6IENhbWVyYVByZWZzIHwgRGlzcGxheVByZWZzLFxuICBleGFjdERldmljZSA9IGZhbHNlLFxuKTogTWVkaWFUcmFja0NvbnN0cmFpbnRzID0+IHtcbiAgY29uc3QgZGV2aWNlQ29uc3RyYWludCA9IFwiZGV2aWNlSWRcIiBpbiBwcmVmc1xuICAgICYmIHsgZGV2aWNlSWQ6IHsgW2V4YWN0RGV2aWNlID8gXCJleGFjdFwiIDogXCJpZGVhbFwiXTogcHJlZnMuZGV2aWNlSWQgfSB9O1xuXG4gIGNvbnN0IGFzcGVjdFJhdGlvQ29uc3RyYWludCA9IFwiYXNwZWN0UmF0aW9cIiBpbiBwcmVmcyAmJiB7XG4gICAgYXNwZWN0UmF0aW86IHsgaWRlYWw6IHByZWZzLmFzcGVjdFJhdGlvID8gcGFyc2VBc3BlY3RSYXRpbyhwcmVmcy5hc3BlY3RSYXRpbykgOiB1bmRlZmluZWQgfSxcbiAgfTtcblxuICBjb25zdCBoZWlnaHRDb25zdHJhaW50ID0gXCJxdWFsaXR5XCIgaW4gcHJlZnMgJiYge1xuICAgIGhlaWdodDogeyBpZGVhbDogcHJlZnMucXVhbGl0eSA/IHBhcnNlUXVhbGl0eShwcmVmcy5xdWFsaXR5KSA6IHVuZGVmaW5lZCB9LFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgLi4uZGV2aWNlQ29uc3RyYWludCxcbiAgICAuLi5hc3BlY3RSYXRpb0NvbnN0cmFpbnQsXG4gICAgLi4uaGVpZ2h0Q29uc3RyYWludCxcbiAgfTtcbn07XG5cbi8vIEFsbCBhc3BlY3QgcmF0aW9zIHRoZSB1c2VyIGNhbiBjaG9vc2UgZnJvbS5cbmNvbnN0IEFTUEVDVF9SQVRJT1MgPSBbXCI0OjNcIiwgXCIxNjo5XCJdO1xuXG4vLyBBbGwgcXVhbGl0eSBvcHRpb25zIGdpdmVuIHRvIHRoZSB1c2VyIHJlc3BlY3RpbmcgdGhlIGBtYXhIZWlnaHRgIGZyb20gdGhlXG4vLyBzZXR0aW5ncy5cbmNvbnN0IHF1YWxpdHlPcHRpb25zID0gKG1heEhlaWdodDogbnVtYmVyIHwgdW5kZWZpbmVkKSA9PiB7XG4gIGNvbnN0IGRlZmF1bHRzID0gWzM2MCwgNDgwLCA3MjAsIDEwODAsIDE0NDAsIDIxNjBdO1xuICBjb25zdCBvdXQgPSBkZWZhdWx0cy5maWx0ZXIocSA9PiAhbWF4SGVpZ2h0IHx8IHEgPD0gbWF4SGVpZ2h0KTtcbiAgaWYgKG1heEhlaWdodCAmJiAob3V0Lmxlbmd0aCA9PT0gMCB8fCBvdXRbb3V0Lmxlbmd0aCAtIDFdICE9PSBtYXhIZWlnaHQpKSB7XG4gICAgb3V0LnB1c2gobWF4SGVpZ2h0KTtcbiAgfVxuXG4gIHJldHVybiBvdXQubWFwKG4gPT4gYCR7bn1wYCk7XG59O1xuXG4vLyBDb252ZXJ0cyB0aGUgZ2l2ZW4gYXNwZWN0IHJhdGlvIGxhYmVsIChvbmUgb2YgdGhlIGVsZW1lbnRzIGluXG4vLyBgQVNQRUNUX1JBVElPU2ApIGludG8gdGhlIG51bWVyaWNhbCByYXRpbywgZS5nLiA0LzMgPSAxLjMzMy4gSWYgdGhlIGFyZ3VtZW50XG4vLyBpcyBub3QgYSB2YWxpZCBsYWJlbCwgYG51bGxgIGlzIHJldHVybmVkLlxuY29uc3QgcGFyc2VBc3BlY3RSYXRpbyA9IChsYWJlbDogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IG1hcHBpbmcgPSB7XG4gICAgXCI0OjNcIjogNCAvIDMsXG4gICAgXCIxNjo5XCI6IDE2IC8gOSxcbiAgfTtcblxuICByZXR1cm4gKG1hcHBpbmcgYXMgUmVjb3JkPHN0cmluZywgbnVtYmVyPilbbGFiZWxdID8/IHVuZGVmaW5lZDtcbn07XG5cbi8vIENvbnZlcnRzIHRoZSBnaXZlbiBxdWFsaXR5IGxhYmVsIHRvIHRoZSBhY3R1YWwgaGVpZ2h0IGFzIG51bWJlci4gSWYgdGhlXG4vLyBhcmd1bWVudCBpcyBub3QgYSB2YWxpZCBxdWFsaXR5IGxhYmVsIChlLmcuICc3MjBwJyksIGBudWxsYCBpcyByZXR1cm5lZC5cbmNvbnN0IHBhcnNlUXVhbGl0eSA9IChsYWJlbDogc3RyaW5nKSA9PiB7XG4gIGlmICghL15bMC05XStwJC8udGVzdChsYWJlbCkpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlSW50KGxhYmVsKTtcbn07XG5cbi8vIExvY2FsIHN0b3JhZ2Uga2V5c1xuY29uc3QgTEFTVF9WSURFT19ERVZJQ0VfS0VZID0gXCJvY1N0dWRpb0xhc3RWaWRlb0RldmljZVwiO1xuY29uc3QgQ0FNRVJBX0FTUEVDVF9SQVRJT19LRVkgPSBcIm9jU3R1ZGlvQ2FtZXJhQXNwZWN0UmF0aW9cIjtcbmNvbnN0IENBTUVSQV9RVUFMSVRZX0tFWSA9IFwib2NTdHVkaW9DYW1lcmFRdWFsaXR5XCI7XG5jb25zdCBESVNQTEFZX1FVQUxJVFlfS0VZID0gXCJvY1N0dWRpb0Rpc3BsYXlRdWFsaXR5XCI7XG5cbnR5cGUgQ2FtZXJhUHJlZnMgPSB7XG4gIGRldmljZUlkPzogc3RyaW5nO1xuICBhc3BlY3RSYXRpbz86IHN0cmluZztcbiAgcXVhbGl0eT86IHN0cmluZztcbn07XG5cbnR5cGUgRGlzcGxheVByZWZzID0ge1xuICBxdWFsaXR5Pzogc3RyaW5nO1xufTtcblxuLy8gTG9hZHMgdGhlIGluaXRpYWwgY2FtZXJhIHByZWZlcmVuY2VzIGZyb20gbG9jYWwgc3RvcmFnZS5cbmV4cG9ydCBjb25zdCBsb2FkQ2FtZXJhUHJlZnMgPSAoKTogQ2FtZXJhUHJlZnMgPT4gKHtcbiAgZGV2aWNlSWQ6IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShMQVNUX1ZJREVPX0RFVklDRV9LRVkpID8/IHVuZGVmaW5lZCxcbiAgYXNwZWN0UmF0aW86IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShDQU1FUkFfQVNQRUNUX1JBVElPX0tFWSkgfHwgXCJhdXRvXCIsXG4gIHF1YWxpdHk6IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShDQU1FUkFfUVVBTElUWV9LRVkpIHx8IFwiYXV0b1wiLFxufSk7XG5cbi8vIExvYWRzIHRoZSBpbml0aWFsIGRpc3BsYXkgcHJlZmVyZW5jZXMgZnJvbSBsb2NhbCBzdG9yYWdlLlxuZXhwb3J0IGNvbnN0IGxvYWREaXNwbGF5UHJlZnMgPSAoKTogRGlzcGxheVByZWZzID0+ICh7XG4gIHF1YWxpdHk6IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShESVNQTEFZX1FVQUxJVFlfS0VZKSB8fCBcImF1dG9cIixcbn0pO1xuXG50eXBlIFN0cmVhbVNldHRpbmdzUHJvcHMgPSB7XG4gIGlzRGVza3RvcDogYm9vbGVhbjtcbiAgc3RyZWFtOiBNZWRpYVN0cmVhbSB8IG51bGw7XG59XG5cbmV4cG9ydCBjb25zdCBTdHJlYW1TZXR0aW5nczogUmVhY3QuRkM8U3RyZWFtU2V0dGluZ3NQcm9wcz4gPSAoeyBpc0Rlc2t0b3AsIHN0cmVhbSB9KSA9PiB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3Qgc2V0dGluZ3MgPSB1c2VTZXR0aW5ncygpO1xuICBjb25zdCBmbG9hdFJlZiA9IHVzZVJlZjxGbG9hdGluZ0hhbmRsZT4obnVsbCk7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgaXNMaWdodCA9IHVzZUNvbG9yU2NoZW1lKCkuc2NoZW1lID09PSBcImxpZ2h0XCI7XG4gIGNvbnN0IHsgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG5cbiAgLy8gVGhlIGN1cnJlbnQgcHJlZmVyZW5jZXMgYW5kIHRoZSBjYWxsYmFjayB0byB1cGRhdGUgdGhlbS5cbiAgY29uc3QgcHJlZnMgPSBpc0Rlc2t0b3AgPyBsb2FkRGlzcGxheVByZWZzKCkgOiBsb2FkQ2FtZXJhUHJlZnMoKTtcbiAgY29uc3QgdXBkYXRlUHJlZnMgPSAobmV3UHJlZnM6IENhbWVyYVByZWZzIHwgRGlzcGxheVByZWZzKSA9PiB7XG4gICAgLy8gTWVyZ2UgYW5kIHVwZGF0ZSBwcmVmZXJlbmNlcy5cbiAgICBjb25zdCBtZXJnZWQgPSB7IC4uLnByZWZzLCAuLi5uZXdQcmVmcyB9O1xuICAgIGNvbnN0IGNvbnN0cmFpbnRzID0gcHJlZnNUb0NvbnN0cmFpbnRzKG1lcmdlZCwgdHJ1ZSk7XG5cbiAgICBjb25zdCBzZXRPcHQgPSAoa2V5OiBzdHJpbmcsIHY6IHN0cmluZyB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgaWYgKHYgIT0gbnVsbCkge1xuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gVXBkYXRlIHByZWZlcmVuY2VzIGluIGxvY2FsIHN0b3JhZ2UgYW5kIHJlLXJlcXVlc3Qgc3RyZWFtLiBUaGUgbGF0dGVyXG4gICAgLy8gd2lsbCBjYXVzZSB0aGUgcmVyZW5kZXIuXG4gICAgaWYgKGlzRGVza3RvcCkge1xuICAgICAgc2V0T3B0KERJU1BMQVlfUVVBTElUWV9LRVksIG1lcmdlZC5xdWFsaXR5KTtcblxuICAgICAgc3RvcERpc3BsYXlDYXB0dXJlKHN0cmVhbSwgZGlzcGF0Y2gpO1xuICAgICAgc3RhcnREaXNwbGF5Q2FwdHVyZShkaXNwYXRjaCwgc2V0dGluZ3MsIGNvbnN0cmFpbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0T3B0KExBU1RfVklERU9fREVWSUNFX0tFWSwgKG1lcmdlZCBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KVtcImRldmljZUlkXCJdKTtcbiAgICAgIHNldE9wdChDQU1FUkFfQVNQRUNUX1JBVElPX0tFWSwgKG1lcmdlZCBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KVtcImFzcGVjdFJhdGlvXCJdKTtcbiAgICAgIHNldE9wdChDQU1FUkFfUVVBTElUWV9LRVksIG1lcmdlZC5xdWFsaXR5KTtcblxuICAgICAgc3RvcFVzZXJDYXB0dXJlKHN0cmVhbSwgZGlzcGF0Y2gpO1xuICAgICAgc3RhcnRVc2VyQ2FwdHVyZShkaXNwYXRjaCwgc2V0dGluZ3MsIGNvbnN0cmFpbnRzKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gU3RvcmUgdGhlIGNhbWVyYSBkZXZpY2UgSUQgaW4gbG9jYWwgc3RvcmFnZS4gV2UgYWxzbyBkbyB0aGlzIGhlcmUsIGFzIHdlXG4gIC8vIGFsc28gd2FudCB0byByZW1lbWJlciB0aGUgZGV2aWNlIHRoZSB1c2VyIGluaXRpYWxseSBzZWxlY3RlZCBpbiB0aGUgYnJvd3NlclxuICAvLyBwb3B1cC5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBjYW1lcmFEZXZpY2VJZCA9IGRldmljZUlkT2Yoc3RyZWFtKTtcbiAgICBpZiAoIWlzRGVza3RvcCAmJiBjYW1lcmFEZXZpY2VJZCkge1xuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKExBU1RfVklERU9fREVWSUNFX0tFWSwgY2FtZXJhRGV2aWNlSWQpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gU3RhdGUgYWJvdXQgZXhwYW5kaW5nIGFuZCBoaWRpbmcgdGhlIHNldHRpbmdzLlxuICBjb25zdCBbaXNFeHBhbmRlZCwgc2V0SXNFeHBhbmRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IGxhYmVsID0gdChgc3RlcHMudmlkZW8udmlkZW8tc2V0dGluZ3MtJHtpc0V4cGFuZGVkID8gXCJjbG9zZVwiIDogXCJvcGVuXCJ9YCk7XG5cbiAgcmV0dXJuIDw+XG4gICAgey8qIFN0cmVhbSBpbmZvIGF0IHRoZSB0b3AgKi99XG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIGRpc3BsYXk6IGlzRXhwYW5kZWQgPyBcImluaXRpYWxcIiA6IFwibm9uZVwiLFxuICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgIHRvcDogMTIsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgfX0+XG4gICAgICA8c3BhbiBjc3M9e3tcbiAgICAgICAgY29sb3I6IGlzTGlnaHQgPyBDT0xPUlMubmV1dHJhbDcwIDogQ09MT1JTLm5ldXRyYWw5MCxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgICBib3JkZXJSYWRpdXM6IFwiMTBweFwiLFxuICAgICAgICBwYWRkaW5nOiBcIjRweCA4cHhcIixcbiAgICAgICAgYm94U2hhZG93OiBpc0hpZ2hDb250cmFzdCA/IFwibm9uZVwiIDogXCIwIDAgMTJweCByZ2JhKDAsIDAsIDAsIDMwJSlcIixcbiAgICAgIH19PlxuICAgICAgICB7c3RyZWFtSW5mbyhzdHJlYW0pfVxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuXG4gICAgey8qIFRoZSBzZXR0aW5ncyBidXR0b24gYW5kIHRoZSBwb3BvdmVyIGRpYWxvZyAqL31cbiAgICA8RmxvYXRpbmdDb250YWluZXJcbiAgICAgIHJlZj17ZmxvYXRSZWZ9XG4gICAgICBwbGFjZW1lbnQ9XCJ0b3AtZW5kXCJcbiAgICAgIGFyaWFSb2xlPVwiZGlhbG9nXCJcbiAgICAgIG9wZW49e2lzRXhwYW5kZWR9XG4gICAgICBvbkNsb3NlPXsoKSA9PiBzZXRJc0V4cGFuZGVkKGZhbHNlKX1cbiAgICAgIGJvcmRlclJhZGl1cz17OH1cbiAgICAgIHZpZXdQb3J0TWFyZ2luPXs4fVxuICAgICAgY3NzPXt7XG4gICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgIHJpZ2h0OiA4LFxuICAgICAgICBib3R0b206IDgsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxGbG9hdGluZ1RyaWdnZXI+XG4gICAgICAgIDxXaXRoVG9vbHRpcCBwbGFjZW1lbnQ9XCJib3R0b21cIiB0b29sdGlwPXtsYWJlbH0+XG4gICAgICAgICAgPFByb3RvQnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRJc0V4cGFuZGVkKG9sZCA9PiAhb2xkKX1cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9e2xhYmVsfVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGJvcmRlcjogXCJub25lXCIsXG4gICAgICAgICAgICAgIGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCIsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDAsIDAsIDAsIDAuMylcIixcbiAgICAgICAgICAgICAgY29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgICAgICAgcGFkZGluZzogOCxcbiAgICAgICAgICAgICAgZm9udFNpemU6IDI2LFxuICAgICAgICAgICAgICBiYWNrZHJvcEZpbHRlcjogXCJpbnZlcnQoMC4zKSBibHVyKDRweClcIixcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogMCxcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjEwcHhcIixcbiAgICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgICAgICAgICAgXCImOmhvdmVyLCAmOmZvY3VzLXZpc2libGVcIjoge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDAsIDAsIDAsIDAuNSlcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCI+IHN2Z1wiOiB7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogXCJ0cmFuc2Zvcm0gMC4yc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcIiY6aG92ZXIgPiBzdmcsICY6Zm9jdXMgPiBzdmdcIjoge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogaXNFeHBhbmRlZCA/IFwibm9uZVwiIDogXCJyb3RhdGUoNDVkZWcpXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiJjpmb2N1cy12aXNpYmxlXCI6IHtcbiAgICAgICAgICAgICAgICBvdXRsaW5lOiBcIjVweCBkYXNoZWQgd2hpdGVcIixcbiAgICAgICAgICAgICAgICBvdXRsaW5lT2Zmc2V0OiAtMi41LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7aXNFeHBhbmRlZCA/IDxGaVggLz4gOiA8RmlTZXR0aW5ncyAvPn1cbiAgICAgICAgICA8L1Byb3RvQnV0dG9uPlxuICAgICAgICA8L1dpdGhUb29sdGlwPlxuICAgICAgPC9GbG9hdGluZ1RyaWdnZXI+XG4gICAgICA8RmxvYXRpbmdcbiAgICAgICAgY3NzPXt7IG1heFdpZHRoOiBcIm1pbig2NzBweCwgMTAwdncgLSAxNnB4KVwiIH19XG4gICAgICAgIGJvcmRlcldpZHRoPXtpc0xpZ2h0ID8gMCA6IDF9XG4gICAgICAgIHNoYWRvd0JsdXI9ezE2fVxuICAgICAgICBwYWRkaW5nPXsxOH1cbiAgICAgID5cbiAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICBkaXNwbGF5OiBcImdyaWRcIixcbiAgICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogXCJhdXRvIDFmclwiLFxuICAgICAgICAgIGdyaWRHYXA6IFwiMTRweCAzMnB4XCIsXG4gICAgICAgICAgcGFkZGluZ0xlZnQ6IDQsXG4gICAgICAgICAgW3NjcmVlbldpZHRoQXRNb3N0KDQ1MCldOiB7XG4gICAgICAgICAgICBjb2x1bW5HYXA6IDgsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbc2NyZWVuV2lkdGhBdE1vc3QoMzYwKV06IHtcbiAgICAgICAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6IFwiMWZyXCIsXG4gICAgICAgICAgICByb3dHYXA6IDAsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmb250U2l6ZTogMTQsXG4gICAgICAgICAgXCJAbWVkaWEgKG1pbi13aWR0aDogNDIwcHgpIGFuZCAobWluLWhlaWdodDogNDQwcHgpXCI6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiAxNixcbiAgICAgICAgICB9LFxuICAgICAgICB9fT5cbiAgICAgICAgICB7IWlzRGVza3RvcCAmJiA8VXNlclNldHRpbmdzIHsuLi57IHVwZGF0ZVByZWZzLCBwcmVmcywgaXNFeHBhbmRlZCB9fSAvPn1cbiAgICAgICAgICA8VW5pdmVyYWxTZXR0aW5ncyB7Li4ueyBpc0Rlc2t0b3AsIHVwZGF0ZVByZWZzLCBwcmVmcywgc3RyZWFtLCBzZXR0aW5ncywgaXNFeHBhbmRlZCB9fSAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNzcz17e1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwxNSxcbiAgICAgICAgICBtYXJnaW5Ub3A6IDgsXG4gICAgICAgICAgcGFkZGluZzogXCI4cHggMTJweFwiLFxuICAgICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjI1LFxuICAgICAgICAgIGJvcmRlclJhZGl1czogNixcbiAgICAgICAgICBcIkBtZWRpYSAobWluLXdpZHRoOiA0MjBweCkgYW5kIChtaW4taGVpZ2h0OiA0NDBweClcIjoge1xuICAgICAgICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgICAgIH0sXG4gICAgICAgIH19PlxuICAgICAgICAgIDxUcmFucyBpMThuS2V5PVwic3RlcHMudmlkZW8ucHJlZmVyZW5jZXMtbm90ZVwiPlxuICAgICAgICAgICAgPHN0cm9uZz5Ob3RlOjwvc3Ryb25nPiBFeHBsYW5hdGlvbi5cbiAgICAgICAgICA8L1RyYW5zPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRmxvYXRpbmc+XG4gICAgPC9GbG9hdGluZ0NvbnRhaW5lcj5cbiAgPC8+O1xufTtcblxuY29uc3Qgc3RyZWFtSW5mbyA9IChzdHJlYW06IE1lZGlhU3RyZWFtIHwgbnVsbCkgPT4ge1xuICBjb25zdCBzID0gc3RyZWFtPy5nZXRWaWRlb1RyYWNrcygpPy5bMF0/LmdldFNldHRpbmdzKCk7XG4gIGNvbnN0IHNpemVJbmZvID0gKHMgJiYgcy53aWR0aCAmJiBzLmhlaWdodCkgPyBgJHtzLndpZHRofcOXJHtzLmhlaWdodH1gIDogXCJcIjtcbiAgY29uc3QgZnBzSW5mbyA9IChzICYmIHMuZnJhbWVSYXRlKSA/IGAke3MuZnJhbWVSYXRlfSBmcHNgIDogXCJcIjtcblxuICByZXR1cm4gcyA/IFtzaXplSW5mbywgZnBzSW5mb10uam9pbihcIiwgXCIpIDogXCIuLi5cIjtcbn07XG5cbi8qKiBEaXYgZm9yIHRoZSBuYW1lIG9mIGEgdmFsdWUsIGUuZy4gcXVhbGl0eSwgYXNwZWN0IHJhdGlvLCAuLiAqL1xuY29uc3QgUHJlZktleTogUmVhY3QuRkM8UmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW4+ID0gKHsgY2hpbGRyZW4gfSkgPT4gKFxuICA8ZGl2IGNzcz17e1xuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgW3NjcmVlbldpZHRoQXRNb3N0KDM2MCldOiB7XG4gICAgICBtYXJnaW5Ub3A6IDQsXG4gICAgfSxcbiAgfX0+XG4gICAgeyBjaGlsZHJlbiB9XG4gIDwvZGl2PlxuKTtcblxuLyoqIENvbnRhaW5lciBmb3IgdGhlIHZhbHVlIHNlbGVjdGlvbiBvZiBhbiBvcHRpb24sIGUuZy4gYWxsIGF2YWlsYWJsZSBxdWFsaXRpZXMuICovXG5jb25zdCBQcmVmVmFsdWU6IFJlYWN0LkZDPFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPiA9ICh7IGNoaWxkcmVuIH0pID0+IChcbiAgPGRpdiBjc3M9e3tcbiAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICBmbGV4V3JhcDogXCJ3cmFwXCIsXG4gICAgZ2FwOiA2LFxuICB9fT5cbiAgICB7IGNoaWxkcmVuIH1cbiAgPC9kaXY+XG4pO1xuXG50eXBlIFVuaXZlcmFsU2V0dGluZ3NQcm9wcyA9IHtcbiAgaXNEZXNrdG9wOiBib29sZWFuO1xuICB1cGRhdGVQcmVmczogKHA6IENhbWVyYVByZWZzIHwgRGlzcGxheVByZWZzKSA9PiB2b2lkO1xuICBwcmVmczogQ2FtZXJhUHJlZnMgfCBEaXNwbGF5UHJlZnM7XG4gIHNldHRpbmdzOiBTZXR0aW5ncztcbn07XG5cbmNvbnN0IFVuaXZlcmFsU2V0dGluZ3M6IFJlYWN0LkZDPFVuaXZlcmFsU2V0dGluZ3NQcm9wcz4gPSAoXG4gIHsgaXNEZXNrdG9wLCB1cGRhdGVQcmVmcywgcHJlZnMsIHNldHRpbmdzIH1cbikgPT4ge1xuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG5cbiAgY29uc3QgY2hhbmdlUXVhbGl0eSA9IChxdWFsaXR5OiBzdHJpbmcpID0+IHVwZGF0ZVByZWZzKHsgcXVhbGl0eSB9KTtcbiAgY29uc3QgbWF4SGVpZ2h0ID0gaXNEZXNrdG9wID8gc2V0dGluZ3MuZGlzcGxheT8ubWF4SGVpZ2h0IDogc2V0dGluZ3MuY2FtZXJhPy5tYXhIZWlnaHQ7XG4gIGNvbnN0IHF1YWxpdGllcyA9IHF1YWxpdHlPcHRpb25zKG1heEhlaWdodCk7XG4gIGNvbnN0IGtpbmQgPSBpc0Rlc2t0b3AgPyBcImRlc2t0b3BcIiA6IFwidXNlclwiO1xuXG4gIHJldHVybiA8PlxuICAgIDxQcmVmS2V5Pnt0KFwic3RlcHMudmlkZW8ucXVhbGl0eVwiKX08L1ByZWZLZXk+XG4gICAgPFByZWZWYWx1ZT5cbiAgICAgIDxSYWRpb0J1dHRvblxuICAgICAgICBpZD17YHF1YWxpdHktYXV0by0ke2tpbmR9YH1cbiAgICAgICAgdmFsdWU9XCJhdXRvXCJcbiAgICAgICAgbmFtZT17YHF1YWxpdHktJHtraW5kfWB9XG4gICAgICAgIGxhYmVsPXt0KFwic3RlcHMudmlkZW8ucXVhbGl0eS1hdXRvXCIpfVxuICAgICAgICBvbkNoYW5nZT17Y2hhbmdlUXVhbGl0eX1cbiAgICAgICAgY2hlY2tlZD17cXVhbGl0aWVzLmV2ZXJ5KHEgPT4gcHJlZnMucXVhbGl0eSAhPT0gcSl9XG4gICAgICAvPlxuICAgICAge1xuICAgICAgICBxdWFsaXRpZXMubWFwKHEgPT4gKFxuICAgICAgICAgIDxSYWRpb0J1dHRvblxuICAgICAgICAgICAga2V5PXtgJHtxfS0ke2tpbmR9YH1cbiAgICAgICAgICAgIGlkPXtgcXVhbGl0eS0ke3F9LSR7a2luZH1gfVxuICAgICAgICAgICAgdmFsdWU9e3F9XG4gICAgICAgICAgICBuYW1lPXtgcXVhbGl0eS0ke2tpbmR9YH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtjaGFuZ2VRdWFsaXR5fVxuICAgICAgICAgICAgY2hlY2tlZD17cHJlZnMucXVhbGl0eSA9PT0gcX1cbiAgICAgICAgICAvPlxuICAgICAgICApKVxuICAgICAgfVxuICAgIDwvUHJlZlZhbHVlPlxuICA8Lz47XG59O1xuXG50eXBlIFVzZXJTZXR0aW5nc1Byb3BzID0ge1xuICB1cGRhdGVQcmVmczogKHA6IENhbWVyYVByZWZzIHwgRGlzcGxheVByZWZzKSA9PiB2b2lkO1xuICBwcmVmczogQ2FtZXJhUHJlZnM7XG59O1xuXG5cbmNvbnN0IFVzZXJTZXR0aW5nczogUmVhY3QuRkM8VXNlclNldHRpbmdzUHJvcHM+ID0gKHsgdXBkYXRlUHJlZnMsIHByZWZzIH0pID0+IHtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCBzdGF0ZSA9IHVzZVN0dWRpb1N0YXRlKCk7XG5cbiAgY29uc3QgY3VycmVudERldmljZUlkID0gZGV2aWNlSWRPZihzdGF0ZS51c2VyU3RyZWFtKTtcbiAgY29uc3QgZGV2aWNlcyA9IGdldFVuaXF1ZURldmljZXMoc3RhdGUubWVkaWFEZXZpY2VzLCBcInZpZGVvaW5wdXRcIik7XG5cbiAgY29uc3QgY2hhbmdlRGV2aWNlID0gKGlkOiBzdHJpbmcpID0+IHVwZGF0ZVByZWZzKHsgZGV2aWNlSWQ6IGlkIH0pO1xuICBjb25zdCBjaGFuZ2VBc3BlY3RSYXRpbyA9IChyYXRpbzogc3RyaW5nKSA9PiB1cGRhdGVQcmVmcyh7IGFzcGVjdFJhdGlvOiByYXRpbyB9KTtcblxuICByZXR1cm4gPD5cbiAgICA8UHJlZktleT5cbiAgICAgIDxsYWJlbCBodG1sRm9yPVwic291cmNlcy12aWRlby1kZXZpY2VcIj57dChcInN0ZXBzLnZpZGVvLmRldmljZVwiKX08L2xhYmVsPlxuICAgIDwvUHJlZktleT5cbiAgICA8UHJlZlZhbHVlPlxuICAgICAgPFNlbGVjdFxuICAgICAgICBpZD1cInNvdXJjZXMtdmlkZW8tZGV2aWNlXCJcbiAgICAgICAgdmFsdWU9e2N1cnJlbnREZXZpY2VJZH1cbiAgICAgICAgb25DaGFuZ2U9e2UgPT4gY2hhbmdlRGV2aWNlKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgY3NzPXt7IHdpZHRoOiBcIjEwMCVcIiB9fVxuICAgICAgPlxuICAgICAgICB7ZGV2aWNlcy5tYXAoZCA9PiA8b3B0aW9uIGtleT17ZC5kZXZpY2VJZH0gdmFsdWU9e2QuZGV2aWNlSWR9PntkLmxhYmVsfTwvb3B0aW9uPil9XG4gICAgICA8L1NlbGVjdD5cbiAgICA8L1ByZWZWYWx1ZT5cblxuICAgIDxQcmVmS2V5Pnt0KFwic3RlcHMudmlkZW8uYXNwZWN0LXJhdGlvXCIpfTwvUHJlZktleT5cbiAgICA8UHJlZlZhbHVlPlxuICAgICAgPFJhZGlvQnV0dG9uXG4gICAgICAgIGlkPVwiYXItYXV0b1wiXG4gICAgICAgIHZhbHVlPVwiYXV0b1wiXG4gICAgICAgIG5hbWU9XCJhc3BlY3RSYXRpb1wiXG4gICAgICAgIGxhYmVsPXt0KFwic3RlcHMudmlkZW8uYXNwZWN0LXJhdGlvLWF1dG9cIil9XG4gICAgICAgIG9uQ2hhbmdlPXtjaGFuZ2VBc3BlY3RSYXRpb31cbiAgICAgICAgY2hlY2tlZD17QVNQRUNUX1JBVElPUy5ldmVyeSh4ID0+IHByZWZzLmFzcGVjdFJhdGlvICE9PSB4KX1cbiAgICAgIC8+XG4gICAgICB7QVNQRUNUX1JBVElPUy5tYXAoYXIgPT4gKFxuICAgICAgICA8UmFkaW9CdXR0b25cbiAgICAgICAgICBrZXk9e2FyfVxuICAgICAgICAgIGlkPXtgYXItJHthcn1gfVxuICAgICAgICAgIHZhbHVlPXthcn1cbiAgICAgICAgICBuYW1lPVwiYXNwZWN0UmF0aW9cIlxuICAgICAgICAgIG9uQ2hhbmdlPXtjaGFuZ2VBc3BlY3RSYXRpb31cbiAgICAgICAgICBjaGVja2VkPXtwcmVmcy5hc3BlY3RSYXRpbyA9PT0gYXJ9XG4gICAgICAgIC8+XG4gICAgICApKX1cbiAgICA8L1ByZWZWYWx1ZT5cbiAgPC8+O1xufTtcblxudHlwZSBSYWRpb0J1dHRvblByb3BzID0ge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIGNoZWNrZWQ6IGJvb2xlYW47XG4gIGxhYmVsPzogc3RyaW5nO1xuICBvbkNoYW5nZTogKHY6IHN0cmluZykgPT4gdm9pZDtcbn07XG5cbi8vIEEgc3R5bGVkIHJhZGlvIGlucHV0IHdoaWNoIGxvb2tzIGxpa2UgYSBidXR0b24uXG5jb25zdCBSYWRpb0J1dHRvbjogUmVhY3QuRkM8UmFkaW9CdXR0b25Qcm9wcz4gPSAoe1xuICBpZCwgdmFsdWUsIGNoZWNrZWQsIG5hbWUsIG9uQ2hhbmdlLCBsYWJlbCxcbn0pID0+IHtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICByZXR1cm4gPGRpdj5cbiAgICA8aW5wdXRcbiAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICBvbkNoYW5nZT17ZSA9PiBvbkNoYW5nZShlLnRhcmdldC52YWx1ZSl9XG4gICAgICB7Li4ueyBpZCwgdmFsdWUsIGNoZWNrZWQsIG5hbWUgfX1cbiAgICAgIGNzcz17e1xuICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIixcbiAgICAgICAgXCImK2xhYmVsXCI6IHtcbiAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWwyNX1gLFxuICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMixcbiAgICAgICAgICBwYWRkaW5nOiBcIjRweCAxMHB4XCIsXG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiA2LFxuICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwxMCxcbiAgICAgICAgICAgIGJvcmRlckNvbG9yOiBDT0xPUlMubmV1dHJhbDQwLFxuICAgICAgICAgICAgLi4uaXNIaWdoQ29udHJhc3QgJiYge1xuICAgICAgICAgICAgICBvdXRsaW5lOiBgMnB4IHNvbGlkICR7Q09MT1JTLmFjY2VudDR9YCxcbiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwidHJhbnNwYXJlbnRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgXCImOmNoZWNrZWQrbGFiZWxcIjoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLmFjY2VudDYsXG4gICAgICAgICAgYm9yZGVyQ29sb3I6IENPTE9SUy5hY2NlbnQ2LFxuICAgICAgICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgICAgIGN1cnNvcjogXCJkZWZhdWx0XCIsXG4gICAgICAgIH0sXG4gICAgICB9fVxuICAgIC8+XG4gICAgPGxhYmVsXG4gICAgICB0YWJJbmRleD17MH1cbiAgICAgIG9uS2V5RG93bj17ZSA9PiAoZS5rZXkgPT09IFwiRW50ZXJcIiB8fCBlLmtleSA9PT0gXCIgXCIpICYmIG9uQ2hhbmdlKHZhbHVlKX1cbiAgICAgIGh0bWxGb3I9e2lkfVxuICAgID57bGFiZWwgPz8gdmFsdWV9PC9sYWJlbD5cbiAgPC9kaXY+O1xufTtcblxuLy8gUmV0dXJucyB0aGUgZGV2aWRlIElEIG9mIHRoZSB2aWRlbyB0cmFjayBvZiB0aGUgZ2l2ZW4gc3RyZWFtLlxuZXhwb3J0IGNvbnN0IGRldmljZUlkT2YgPSAoc3RyZWFtOiBNZWRpYVN0cmVhbSB8IG51bGwpID0+XG4gIHN0cmVhbT8uZ2V0VmlkZW9UcmFja3MoKT8uWzBdPy5nZXRTZXR0aW5ncygpPy5kZXZpY2VJZDtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst UserSettings = _ref8 => {\n  let {\n    updatePrefs,\n    prefs\n  } = _ref8;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const state = (0,_studio_state__WEBPACK_IMPORTED_MODULE_5__.useStudioState)();\n  const currentDeviceId = deviceIdOf(state.userStream);\n  const devices = (0,_util__WEBPACK_IMPORTED_MODULE_4__.getUniqueDevices)(state.mediaDevices, \"videoinput\");\n  const changeDevice = id => updatePrefs({\n    deviceId: id\n  });\n  const changeAspectRatio = ratio => updatePrefs({\n    aspectRatio: ratio\n  });\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.Fragment, {\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(PrefKey, {\n      children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"label\", {\n        htmlFor: \"sources-video-device\",\n        children: t(\"steps.video.device\")\n      })\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(PrefValue, {\n      children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_ui_Select__WEBPACK_IMPORTED_MODULE_7__.Select, {\n        id: \"sources-video-device\",\n        value: currentDeviceId,\n        onChange: e => changeDevice(e.target.value),\n        css: _ref9,\n        children: devices.map(d => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"option\", {\n          value: d.deviceId,\n          children: d.label\n        }, d.deviceId))\n      })\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(PrefKey, {\n      children: t(\"steps.video.aspect-ratio\")\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(PrefValue, {\n      children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(RadioButton, {\n        id: \"ar-auto\",\n        value: \"auto\",\n        name: \"aspectRatio\",\n        label: t(\"steps.video.aspect-ratio-auto\"),\n        onChange: changeAspectRatio,\n        checked: ASPECT_RATIOS.every(x => prefs.aspectRatio !== x)\n      }), ASPECT_RATIOS.map(ar => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(RadioButton, {\n        id: `ar-${ar}`,\n        value: ar,\n        name: \"aspectRatio\",\n        onChange: changeAspectRatio,\n        checked: prefs.aspectRatio === ar\n      }, ar))]\n    })]\n  });\n};\n// A styled radio input which looks like a button.\nconst RadioButton = _ref10 => {\n  let {\n    id,\n    value,\n    checked,\n    name,\n    onChange,\n    label\n  } = _ref10;\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.useColorScheme)();\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(\"div\", {\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"input\", {\n      type: \"radio\",\n      onChange: e => onChange(e.target.value),\n      id,\n      value,\n      checked,\n      name,\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.css)({\n        display: \"none\",\n        \"&+label\": {\n          display: \"block\",\n          border: `1px solid ${_util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral25}`,\n          lineHeight: 1.2,\n          padding: \"4px 10px\",\n          borderRadius: 6,\n          fontWeight: 500,\n          cursor: \"pointer\",\n          \":hover\": {\n            backgroundColor: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral10,\n            borderColor: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral40,\n            ...(isHighContrast && {\n              outline: `2px solid ${_util__WEBPACK_IMPORTED_MODULE_4__.COLORS.accent4}`,\n              borderColor: \"transparent\"\n            })\n          }\n        },\n        \"&:checked+label\": {\n          backgroundColor: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.accent6,\n          borderColor: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.accent6,\n          color: _util__WEBPACK_IMPORTED_MODULE_4__.COLORS.neutral05,\n          cursor: \"default\"\n        }\n      },  false ? 0 : \";label:RadioButton;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"label\", {\n      tabIndex: 0,\n      onKeyDown: e => (e.key === \"Enter\" || e.key === \" \") && onChange(value),\n      htmlFor: id,\n      children: label ?? value\n    })]\n  });\n};\n\n// Returns the devide ID of the video track of the given stream.\nconst deviceIdOf = stream => stream?.getVideoTracks()?.[0]?.getSettings()?.deviceId;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/steps/video-setup/prefs.tsx\n");

/***/ }),

/***/ "./src/steps/video-setup/preview.tsx":
/*!*******************************************!*\
  !*** ./src/steps/video-setup/preview.tsx ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SourcePreview: function() { return /* binding */ SourcePreview; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _prefs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./prefs */ \"./src/steps/video-setup/prefs.tsx\");\n/* harmony import */ var _ui_VideoBox__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../ui/VideoBox */ \"./src/ui/VideoBox.tsx\");\n/* harmony import */ var _ui_ErrorBox__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../ui/ErrorBox */ \"./src/ui/ErrorBox.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\n\n/**\n * Shows the preview for one or two input streams. The previews also show\n * preferences allowing the user to change the webcam and the like.\n */\nconst SourcePreview = _ref => {\n  let {\n    inputs\n  } = _ref;\n  const children = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_1__.match)(inputs.length, {\n    1: () => [{\n      body: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(StreamPreview, {\n        input: inputs[0]\n      }),\n      dimensions: () => (0,_util__WEBPACK_IMPORTED_MODULE_3__.dimensionsOf)(inputs[0].stream),\n      autoSize: inputHasError(inputs[0])\n    }],\n    2: () => [{\n      body: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(StreamPreview, {\n        input: inputs[0]\n      }),\n      dimensions: () => (0,_util__WEBPACK_IMPORTED_MODULE_3__.dimensionsOf)(inputs[0].stream),\n      autoSize: inputHasError(inputs[0])\n    }, {\n      body: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(StreamPreview, {\n        input: inputs[1]\n      }),\n      dimensions: () => (0,_util__WEBPACK_IMPORTED_MODULE_3__.dimensionsOf)(inputs[1].stream),\n      autoSize: inputHasError(inputs[1])\n    }]\n  }, _opencast_appkit__WEBPACK_IMPORTED_MODULE_1__.unreachable);\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_ui_VideoBox__WEBPACK_IMPORTED_MODULE_5__.VideoBox, {\n    gap: 20,\n    children: children\n  });\n};\nconst inputHasError = input => input.allowed === false || !!input.unexpectedEnd;\n\n/** Shows a single stream as preview, deals with potential errors and shows preferences UI */\nconst StreamPreview = _ref2 => {\n  let {\n    input\n  } = _ref2;\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_1__.useColorScheme)();\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_8__.css)({\n      height: \"100%\",\n      backgroundColor: _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral05,\n      borderRadius: 12,\n      position: \"relative\",\n      ...(!inputHasError(input) && {\n        boxShadow: isHighContrast ? \"none\" : \"0 6px 16px rgba(0, 0, 0, 0.2)\"\n      }),\n      ...(isHighContrast && {\n        outline: `1px solid ${_util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral90}`\n      })\n    },  false ? 0 : \";label:StreamPreview;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3ZpZGVvLXNldHVwL3ByZXZpZXcudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9EUyIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9zdGVwcy92aWRlby1zZXR1cC9wcmV2aWV3LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTcGlubmVyLCBtYXRjaCwgdW5yZWFjaGFibGUsIHVzZUNvbG9yU2NoZW1lIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcblxuaW1wb3J0IHsgQ09MT1JTLCBkaW1lbnNpb25zT2YgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgU3RyZWFtU2V0dGluZ3MgfSBmcm9tIFwiLi9wcmVmc1wiO1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgVmlkZW9Cb3gsIHVzZVZpZGVvQm94UmVzaXplIH0gZnJvbSBcIi4uLy4uL3VpL1ZpZGVvQm94XCI7XG5pbXBvcnQgeyBFcnJvckJveCB9IGZyb20gXCIuLi8uLi91aS9FcnJvckJveFwiO1xuXG5cblxuZXhwb3J0IHR5cGUgU291cmNlUHJldmlld1Byb3BzID0ge1xuICBpbnB1dHM6IElucHV0W107XG59XG5cbi8qKlxuICogU2hvd3MgdGhlIHByZXZpZXcgZm9yIG9uZSBvciB0d28gaW5wdXQgc3RyZWFtcy4gVGhlIHByZXZpZXdzIGFsc28gc2hvd1xuICogcHJlZmVyZW5jZXMgYWxsb3dpbmcgdGhlIHVzZXIgdG8gY2hhbmdlIHRoZSB3ZWJjYW0gYW5kIHRoZSBsaWtlLlxuICovXG5leHBvcnQgY29uc3QgU291cmNlUHJldmlldzogUmVhY3QuRkM8U291cmNlUHJldmlld1Byb3BzPiA9ICh7IGlucHV0cyB9KSA9PiB7XG4gIGNvbnN0IGNoaWxkcmVuID0gbWF0Y2goaW5wdXRzLmxlbmd0aCwge1xuICAgIDE6ICgpID0+IFt7XG4gICAgICBib2R5OiA8U3RyZWFtUHJldmlldyBpbnB1dD17aW5wdXRzWzBdfSAvPixcbiAgICAgIGRpbWVuc2lvbnM6ICgpID0+IGRpbWVuc2lvbnNPZihpbnB1dHNbMF0uc3RyZWFtKSxcbiAgICAgIGF1dG9TaXplOiBpbnB1dEhhc0Vycm9yKGlucHV0c1swXSksXG4gICAgfV0sXG4gICAgMjogKCkgPT4gW1xuICAgICAge1xuICAgICAgICBib2R5OiA8U3RyZWFtUHJldmlldyBpbnB1dD17aW5wdXRzWzBdfSAvPixcbiAgICAgICAgZGltZW5zaW9uczogKCkgPT4gZGltZW5zaW9uc09mKGlucHV0c1swXS5zdHJlYW0pLFxuICAgICAgICBhdXRvU2l6ZTogaW5wdXRIYXNFcnJvcihpbnB1dHNbMF0pLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYm9keTogPFN0cmVhbVByZXZpZXcgaW5wdXQ9e2lucHV0c1sxXX0gLz4sXG4gICAgICAgIGRpbWVuc2lvbnM6ICgpID0+IGRpbWVuc2lvbnNPZihpbnB1dHNbMV0uc3RyZWFtKSxcbiAgICAgICAgYXV0b1NpemU6IGlucHV0SGFzRXJyb3IoaW5wdXRzWzFdKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSwgdW5yZWFjaGFibGUpO1xuXG4gIHJldHVybiA8VmlkZW9Cb3ggZ2FwPXsyMH0+e2NoaWxkcmVufTwvVmlkZW9Cb3g+O1xufTtcblxuY29uc3QgaW5wdXRIYXNFcnJvciA9IChpbnB1dDogSW5wdXQpOiBib29sZWFuID0+XG4gIGlucHV0LmFsbG93ZWQgPT09IGZhbHNlIHx8ICEhaW5wdXQudW5leHBlY3RlZEVuZDtcblxuLyoqIFNob3dzIGEgc2luZ2xlIHN0cmVhbSBhcyBwcmV2aWV3LCBkZWFscyB3aXRoIHBvdGVudGlhbCBlcnJvcnMgYW5kIHNob3dzIHByZWZlcmVuY2VzIFVJICovXG5jb25zdCBTdHJlYW1QcmV2aWV3OiBSZWFjdC5GQzx7IGlucHV0OiBJbnB1dCB9PiA9ICh7IGlucHV0IH0pID0+IHtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7XG4gICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgYm9yZGVyUmFkaXVzOiAxMixcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAuLi4haW5wdXRIYXNFcnJvcihpbnB1dCkgJiYge1xuICAgICAgICBib3hTaGFkb3c6IGlzSGlnaENvbnRyYXN0ID8gXCJub25lXCIgOiBcIjAgNnB4IDE2cHggcmdiYSgwLCAwLCAwLCAwLjIpXCIsXG4gICAgICB9LFxuICAgICAgLi4uaXNIaWdoQ29udHJhc3QgJiYge1xuICAgICAgICBvdXRsaW5lOiBgMXB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWw5MH1gLFxuICAgICAgfSxcbiAgICB9fT5cbiAgICAgIDxQcmV2aWV3VmlkZW8gaW5wdXQ9e2lucHV0fSAvPlxuICAgICAge2lucHV0LnN0cmVhbSAmJiA8U3RyZWFtU2V0dGluZ3MgaXNEZXNrdG9wPXtpbnB1dC5pc0Rlc2t0b3B9IHN0cmVhbT17aW5wdXQuc3RyZWFtfSAvPn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IFByZXZpZXdWaWRlbzogUmVhY3QuRkM8eyBpbnB1dDogSW5wdXQgfT4gPSAoeyBpbnB1dCB9KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBhbGxvd2VkLCBzdHJlYW0sIHVuZXhwZWN0ZWRFbmQgfSA9IGlucHV0O1xuICBjb25zdCByZXNpemVWaWRlb0JveCA9IHVzZVZpZGVvQm94UmVzaXplKCk7XG5cbiAgY29uc3QgdmlkZW9SZWYgPSB1c2VSZWY8SFRNTFZpZGVvRWxlbWVudD4obnVsbCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdiA9IHZpZGVvUmVmLmN1cnJlbnQ7XG4gICAgaWYgKHYpIHtcbiAgICAgIGlmICghdi5zcmNPYmplY3QpIHtcbiAgICAgICAgdi5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgICB9XG4gICAgICB2LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVmlkZW9Cb3gpO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAodikge1xuICAgICAgICB2LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVmlkZW9Cb3gpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtzdHJlYW0sIHJlc2l6ZVZpZGVvQm94XSk7XG5cbiAgaWYgKCFzdHJlYW0pIHtcbiAgICBsZXQgaW5uZXI6IEpTWC5FbGVtZW50O1xuICAgIGlmIChhbGxvd2VkID09PSBmYWxzZSB8fCB1bmV4cGVjdGVkRW5kKSB7XG4gICAgICBpbm5lciA9IDxkaXY+XG4gICAgICAgIHthbGxvd2VkID09PSBmYWxzZSAmJiA8RXJyb3JCb3hcbiAgICAgICAgICBjc3M9e3sgbWFyZ2luOiAwIH19XG4gICAgICAgICAgdGl0bGU9e3QoYHN0ZXBzLnZpZGVvLiR7aW5wdXQuaXNEZXNrdG9wID8gXCJkaXNwbGF5XCIgOiBcInVzZXJcIn0tbm90LWFsbG93ZWQtdGl0bGVgKX1cbiAgICAgICAgICBib2R5PXt0KGBzdGVwcy52aWRlby4ke2lucHV0LmlzRGVza3RvcCA/IFwiZGlzcGxheVwiIDogXCJ1c2VyXCJ9LW5vdC1hbGxvd2VkLXRleHRgKX1cbiAgICAgICAgLz59XG4gICAgICAgIHsvKiBUT0RPOiBkaWZmZXJlbnRpYXRlIGJldHdlZW4gZGVza3RvcCBhbmQgY2FtZXJhIGZvciBiZXR0ZXIgZXJyb3IgKi99XG4gICAgICAgIHt1bmV4cGVjdGVkRW5kICYmIDxFcnJvckJveCBjc3M9e3sgbWFyZ2luOiAwIH19IGJvZHk9e3QoXCJlcnJvci1sb3N0LXZpZGVvLXN0cmVhbVwiKX0gLz59XG4gICAgICA8L2Rpdj47XG4gICAgfSBlbHNlIHtcbiAgICAgIGlubmVyID0gPFNwaW5uZXIgc2l6ZT17NzV9IGNzcz17eyBjb2xvcjogQ09MT1JTLm5ldXRyYWw2MCB9fSAvPjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIH19PlxuICAgICAgICA8ZGl2IGNzcz17e1xuICAgICAgICAgIGZsZXg6IFwiMVwiLFxuICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIH19PlxuICAgICAgICAgIHtpbm5lcn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICB9fT5cbiAgICAgIDx2aWRlb1xuICAgICAgICByZWY9e3ZpZGVvUmVmfVxuICAgICAgICBhdXRvUGxheVxuICAgICAgICBtdXRlZFxuICAgICAgICBwbGF5c0lubGluZVxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBtaW5IZWlnaHQ6IDAsXG4gICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICAgIGJvcmRlclJhZGl1czogMTIsXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdfQ== */\"),\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(PreviewVideo, {\n      input: input\n    }), input.stream && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_prefs__WEBPACK_IMPORTED_MODULE_4__.StreamSettings, {\n      isDesktop: input.isDesktop,\n      stream: input.stream\n    })]\n  });\n};\nvar _ref4 =  false ? 0 : {\n  name: \"1tklc1f-inner\",\n  styles: \"margin:0;label:inner;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3ZpZGVvLXNldHVwL3ByZXZpZXcudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlHVSIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9zdGVwcy92aWRlby1zZXR1cC9wcmV2aWV3LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTcGlubmVyLCBtYXRjaCwgdW5yZWFjaGFibGUsIHVzZUNvbG9yU2NoZW1lIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcblxuaW1wb3J0IHsgQ09MT1JTLCBkaW1lbnNpb25zT2YgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgU3RyZWFtU2V0dGluZ3MgfSBmcm9tIFwiLi9wcmVmc1wiO1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgVmlkZW9Cb3gsIHVzZVZpZGVvQm94UmVzaXplIH0gZnJvbSBcIi4uLy4uL3VpL1ZpZGVvQm94XCI7XG5pbXBvcnQgeyBFcnJvckJveCB9IGZyb20gXCIuLi8uLi91aS9FcnJvckJveFwiO1xuXG5cblxuZXhwb3J0IHR5cGUgU291cmNlUHJldmlld1Byb3BzID0ge1xuICBpbnB1dHM6IElucHV0W107XG59XG5cbi8qKlxuICogU2hvd3MgdGhlIHByZXZpZXcgZm9yIG9uZSBvciB0d28gaW5wdXQgc3RyZWFtcy4gVGhlIHByZXZpZXdzIGFsc28gc2hvd1xuICogcHJlZmVyZW5jZXMgYWxsb3dpbmcgdGhlIHVzZXIgdG8gY2hhbmdlIHRoZSB3ZWJjYW0gYW5kIHRoZSBsaWtlLlxuICovXG5leHBvcnQgY29uc3QgU291cmNlUHJldmlldzogUmVhY3QuRkM8U291cmNlUHJldmlld1Byb3BzPiA9ICh7IGlucHV0cyB9KSA9PiB7XG4gIGNvbnN0IGNoaWxkcmVuID0gbWF0Y2goaW5wdXRzLmxlbmd0aCwge1xuICAgIDE6ICgpID0+IFt7XG4gICAgICBib2R5OiA8U3RyZWFtUHJldmlldyBpbnB1dD17aW5wdXRzWzBdfSAvPixcbiAgICAgIGRpbWVuc2lvbnM6ICgpID0+IGRpbWVuc2lvbnNPZihpbnB1dHNbMF0uc3RyZWFtKSxcbiAgICAgIGF1dG9TaXplOiBpbnB1dEhhc0Vycm9yKGlucHV0c1swXSksXG4gICAgfV0sXG4gICAgMjogKCkgPT4gW1xuICAgICAge1xuICAgICAgICBib2R5OiA8U3RyZWFtUHJldmlldyBpbnB1dD17aW5wdXRzWzBdfSAvPixcbiAgICAgICAgZGltZW5zaW9uczogKCkgPT4gZGltZW5zaW9uc09mKGlucHV0c1swXS5zdHJlYW0pLFxuICAgICAgICBhdXRvU2l6ZTogaW5wdXRIYXNFcnJvcihpbnB1dHNbMF0pLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYm9keTogPFN0cmVhbVByZXZpZXcgaW5wdXQ9e2lucHV0c1sxXX0gLz4sXG4gICAgICAgIGRpbWVuc2lvbnM6ICgpID0+IGRpbWVuc2lvbnNPZihpbnB1dHNbMV0uc3RyZWFtKSxcbiAgICAgICAgYXV0b1NpemU6IGlucHV0SGFzRXJyb3IoaW5wdXRzWzFdKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSwgdW5yZWFjaGFibGUpO1xuXG4gIHJldHVybiA8VmlkZW9Cb3ggZ2FwPXsyMH0+e2NoaWxkcmVufTwvVmlkZW9Cb3g+O1xufTtcblxuY29uc3QgaW5wdXRIYXNFcnJvciA9IChpbnB1dDogSW5wdXQpOiBib29sZWFuID0+XG4gIGlucHV0LmFsbG93ZWQgPT09IGZhbHNlIHx8ICEhaW5wdXQudW5leHBlY3RlZEVuZDtcblxuLyoqIFNob3dzIGEgc2luZ2xlIHN0cmVhbSBhcyBwcmV2aWV3LCBkZWFscyB3aXRoIHBvdGVudGlhbCBlcnJvcnMgYW5kIHNob3dzIHByZWZlcmVuY2VzIFVJICovXG5jb25zdCBTdHJlYW1QcmV2aWV3OiBSZWFjdC5GQzx7IGlucHV0OiBJbnB1dCB9PiA9ICh7IGlucHV0IH0pID0+IHtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7XG4gICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgYm9yZGVyUmFkaXVzOiAxMixcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAuLi4haW5wdXRIYXNFcnJvcihpbnB1dCkgJiYge1xuICAgICAgICBib3hTaGFkb3c6IGlzSGlnaENvbnRyYXN0ID8gXCJub25lXCIgOiBcIjAgNnB4IDE2cHggcmdiYSgwLCAwLCAwLCAwLjIpXCIsXG4gICAgICB9LFxuICAgICAgLi4uaXNIaWdoQ29udHJhc3QgJiYge1xuICAgICAgICBvdXRsaW5lOiBgMXB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWw5MH1gLFxuICAgICAgfSxcbiAgICB9fT5cbiAgICAgIDxQcmV2aWV3VmlkZW8gaW5wdXQ9e2lucHV0fSAvPlxuICAgICAge2lucHV0LnN0cmVhbSAmJiA8U3RyZWFtU2V0dGluZ3MgaXNEZXNrdG9wPXtpbnB1dC5pc0Rlc2t0b3B9IHN0cmVhbT17aW5wdXQuc3RyZWFtfSAvPn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IFByZXZpZXdWaWRlbzogUmVhY3QuRkM8eyBpbnB1dDogSW5wdXQgfT4gPSAoeyBpbnB1dCB9KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBhbGxvd2VkLCBzdHJlYW0sIHVuZXhwZWN0ZWRFbmQgfSA9IGlucHV0O1xuICBjb25zdCByZXNpemVWaWRlb0JveCA9IHVzZVZpZGVvQm94UmVzaXplKCk7XG5cbiAgY29uc3QgdmlkZW9SZWYgPSB1c2VSZWY8SFRNTFZpZGVvRWxlbWVudD4obnVsbCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdiA9IHZpZGVvUmVmLmN1cnJlbnQ7XG4gICAgaWYgKHYpIHtcbiAgICAgIGlmICghdi5zcmNPYmplY3QpIHtcbiAgICAgICAgdi5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgICB9XG4gICAgICB2LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVmlkZW9Cb3gpO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAodikge1xuICAgICAgICB2LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVmlkZW9Cb3gpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtzdHJlYW0sIHJlc2l6ZVZpZGVvQm94XSk7XG5cbiAgaWYgKCFzdHJlYW0pIHtcbiAgICBsZXQgaW5uZXI6IEpTWC5FbGVtZW50O1xuICAgIGlmIChhbGxvd2VkID09PSBmYWxzZSB8fCB1bmV4cGVjdGVkRW5kKSB7XG4gICAgICBpbm5lciA9IDxkaXY+XG4gICAgICAgIHthbGxvd2VkID09PSBmYWxzZSAmJiA8RXJyb3JCb3hcbiAgICAgICAgICBjc3M9e3sgbWFyZ2luOiAwIH19XG4gICAgICAgICAgdGl0bGU9e3QoYHN0ZXBzLnZpZGVvLiR7aW5wdXQuaXNEZXNrdG9wID8gXCJkaXNwbGF5XCIgOiBcInVzZXJcIn0tbm90LWFsbG93ZWQtdGl0bGVgKX1cbiAgICAgICAgICBib2R5PXt0KGBzdGVwcy52aWRlby4ke2lucHV0LmlzRGVza3RvcCA/IFwiZGlzcGxheVwiIDogXCJ1c2VyXCJ9LW5vdC1hbGxvd2VkLXRleHRgKX1cbiAgICAgICAgLz59XG4gICAgICAgIHsvKiBUT0RPOiBkaWZmZXJlbnRpYXRlIGJldHdlZW4gZGVza3RvcCBhbmQgY2FtZXJhIGZvciBiZXR0ZXIgZXJyb3IgKi99XG4gICAgICAgIHt1bmV4cGVjdGVkRW5kICYmIDxFcnJvckJveCBjc3M9e3sgbWFyZ2luOiAwIH19IGJvZHk9e3QoXCJlcnJvci1sb3N0LXZpZGVvLXN0cmVhbVwiKX0gLz59XG4gICAgICA8L2Rpdj47XG4gICAgfSBlbHNlIHtcbiAgICAgIGlubmVyID0gPFNwaW5uZXIgc2l6ZT17NzV9IGNzcz17eyBjb2xvcjogQ09MT1JTLm5ldXRyYWw2MCB9fSAvPjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIH19PlxuICAgICAgICA8ZGl2IGNzcz17e1xuICAgICAgICAgIGZsZXg6IFwiMVwiLFxuICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIH19PlxuICAgICAgICAgIHtpbm5lcn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICB9fT5cbiAgICAgIDx2aWRlb1xuICAgICAgICByZWY9e3ZpZGVvUmVmfVxuICAgICAgICBhdXRvUGxheVxuICAgICAgICBtdXRlZFxuICAgICAgICBwbGF5c0lubGluZVxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBtaW5IZWlnaHQ6IDAsXG4gICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICAgIGJvcmRlclJhZGl1czogMTIsXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref5 =  false ? 0 : {\n  name: \"1tklc1f-inner\",\n  styles: \"margin:0;label:inner;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3ZpZGVvLXNldHVwL3ByZXZpZXcudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNHb0MiLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvdmlkZW8tc2V0dXAvcHJldmlldy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgU3Bpbm5lciwgbWF0Y2gsIHVucmVhY2hhYmxlLCB1c2VDb2xvclNjaGVtZSB9IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5cbmltcG9ydCB7IENPTE9SUywgZGltZW5zaW9uc09mIH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcbmltcG9ydCB7IFN0cmVhbVNldHRpbmdzIH0gZnJvbSBcIi4vcHJlZnNcIjtcbmltcG9ydCB7IElucHV0IH0gZnJvbSBcIi5cIjtcbmltcG9ydCB7IFZpZGVvQm94LCB1c2VWaWRlb0JveFJlc2l6ZSB9IGZyb20gXCIuLi8uLi91aS9WaWRlb0JveFwiO1xuaW1wb3J0IHsgRXJyb3JCb3ggfSBmcm9tIFwiLi4vLi4vdWkvRXJyb3JCb3hcIjtcblxuXG5cbmV4cG9ydCB0eXBlIFNvdXJjZVByZXZpZXdQcm9wcyA9IHtcbiAgaW5wdXRzOiBJbnB1dFtdO1xufVxuXG4vKipcbiAqIFNob3dzIHRoZSBwcmV2aWV3IGZvciBvbmUgb3IgdHdvIGlucHV0IHN0cmVhbXMuIFRoZSBwcmV2aWV3cyBhbHNvIHNob3dcbiAqIHByZWZlcmVuY2VzIGFsbG93aW5nIHRoZSB1c2VyIHRvIGNoYW5nZSB0aGUgd2ViY2FtIGFuZCB0aGUgbGlrZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFNvdXJjZVByZXZpZXc6IFJlYWN0LkZDPFNvdXJjZVByZXZpZXdQcm9wcz4gPSAoeyBpbnB1dHMgfSkgPT4ge1xuICBjb25zdCBjaGlsZHJlbiA9IG1hdGNoKGlucHV0cy5sZW5ndGgsIHtcbiAgICAxOiAoKSA9PiBbe1xuICAgICAgYm9keTogPFN0cmVhbVByZXZpZXcgaW5wdXQ9e2lucHV0c1swXX0gLz4sXG4gICAgICBkaW1lbnNpb25zOiAoKSA9PiBkaW1lbnNpb25zT2YoaW5wdXRzWzBdLnN0cmVhbSksXG4gICAgICBhdXRvU2l6ZTogaW5wdXRIYXNFcnJvcihpbnB1dHNbMF0pLFxuICAgIH1dLFxuICAgIDI6ICgpID0+IFtcbiAgICAgIHtcbiAgICAgICAgYm9keTogPFN0cmVhbVByZXZpZXcgaW5wdXQ9e2lucHV0c1swXX0gLz4sXG4gICAgICAgIGRpbWVuc2lvbnM6ICgpID0+IGRpbWVuc2lvbnNPZihpbnB1dHNbMF0uc3RyZWFtKSxcbiAgICAgICAgYXV0b1NpemU6IGlucHV0SGFzRXJyb3IoaW5wdXRzWzBdKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGJvZHk6IDxTdHJlYW1QcmV2aWV3IGlucHV0PXtpbnB1dHNbMV19IC8+LFxuICAgICAgICBkaW1lbnNpb25zOiAoKSA9PiBkaW1lbnNpb25zT2YoaW5wdXRzWzFdLnN0cmVhbSksXG4gICAgICAgIGF1dG9TaXplOiBpbnB1dEhhc0Vycm9yKGlucHV0c1sxXSksXG4gICAgICB9LFxuICAgIF0sXG4gIH0sIHVucmVhY2hhYmxlKTtcblxuICByZXR1cm4gPFZpZGVvQm94IGdhcD17MjB9PntjaGlsZHJlbn08L1ZpZGVvQm94Pjtcbn07XG5cbmNvbnN0IGlucHV0SGFzRXJyb3IgPSAoaW5wdXQ6IElucHV0KTogYm9vbGVhbiA9PlxuICBpbnB1dC5hbGxvd2VkID09PSBmYWxzZSB8fCAhIWlucHV0LnVuZXhwZWN0ZWRFbmQ7XG5cbi8qKiBTaG93cyBhIHNpbmdsZSBzdHJlYW0gYXMgcHJldmlldywgZGVhbHMgd2l0aCBwb3RlbnRpYWwgZXJyb3JzIGFuZCBzaG93cyBwcmVmZXJlbmNlcyBVSSAqL1xuY29uc3QgU3RyZWFtUHJldmlldzogUmVhY3QuRkM8eyBpbnB1dDogSW5wdXQgfT4gPSAoeyBpbnB1dCB9KSA9PiB7XG4gIGNvbnN0IHsgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICAgIGJvcmRlclJhZGl1czogMTIsXG4gICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgLi4uIWlucHV0SGFzRXJyb3IoaW5wdXQpICYmIHtcbiAgICAgICAgYm94U2hhZG93OiBpc0hpZ2hDb250cmFzdCA/IFwibm9uZVwiIDogXCIwIDZweCAxNnB4IHJnYmEoMCwgMCwgMCwgMC4yKVwiLFxuICAgICAgfSxcbiAgICAgIC4uLmlzSGlnaENvbnRyYXN0ICYmIHtcbiAgICAgICAgb3V0bGluZTogYDFweCBzb2xpZCAke0NPTE9SUy5uZXV0cmFsOTB9YCxcbiAgICAgIH0sXG4gICAgfX0+XG4gICAgICA8UHJldmlld1ZpZGVvIGlucHV0PXtpbnB1dH0gLz5cbiAgICAgIHtpbnB1dC5zdHJlYW0gJiYgPFN0cmVhbVNldHRpbmdzIGlzRGVza3RvcD17aW5wdXQuaXNEZXNrdG9wfSBzdHJlYW09e2lucHV0LnN0cmVhbX0gLz59XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBQcmV2aWV3VmlkZW86IFJlYWN0LkZDPHsgaW5wdXQ6IElucHV0IH0+ID0gKHsgaW5wdXQgfSkgPT4ge1xuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IHsgYWxsb3dlZCwgc3RyZWFtLCB1bmV4cGVjdGVkRW5kIH0gPSBpbnB1dDtcbiAgY29uc3QgcmVzaXplVmlkZW9Cb3ggPSB1c2VWaWRlb0JveFJlc2l6ZSgpO1xuXG4gIGNvbnN0IHZpZGVvUmVmID0gdXNlUmVmPEhUTUxWaWRlb0VsZW1lbnQ+KG51bGwpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHYgPSB2aWRlb1JlZi5jdXJyZW50O1xuICAgIGlmICh2KSB7XG4gICAgICBpZiAoIXYuc3JjT2JqZWN0KSB7XG4gICAgICAgIHYuc3JjT2JqZWN0ID0gc3RyZWFtO1xuICAgICAgfVxuICAgICAgdi5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHJlc2l6ZVZpZGVvQm94KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHYpIHtcbiAgICAgICAgdi5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHJlc2l6ZVZpZGVvQm94KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbc3RyZWFtLCByZXNpemVWaWRlb0JveF0pO1xuXG4gIGlmICghc3RyZWFtKSB7XG4gICAgbGV0IGlubmVyOiBKU1guRWxlbWVudDtcbiAgICBpZiAoYWxsb3dlZCA9PT0gZmFsc2UgfHwgdW5leHBlY3RlZEVuZCkge1xuICAgICAgaW5uZXIgPSA8ZGl2PlxuICAgICAgICB7YWxsb3dlZCA9PT0gZmFsc2UgJiYgPEVycm9yQm94XG4gICAgICAgICAgY3NzPXt7IG1hcmdpbjogMCB9fVxuICAgICAgICAgIHRpdGxlPXt0KGBzdGVwcy52aWRlby4ke2lucHV0LmlzRGVza3RvcCA/IFwiZGlzcGxheVwiIDogXCJ1c2VyXCJ9LW5vdC1hbGxvd2VkLXRpdGxlYCl9XG4gICAgICAgICAgYm9keT17dChgc3RlcHMudmlkZW8uJHtpbnB1dC5pc0Rlc2t0b3AgPyBcImRpc3BsYXlcIiA6IFwidXNlclwifS1ub3QtYWxsb3dlZC10ZXh0YCl9XG4gICAgICAgIC8+fVxuICAgICAgICB7LyogVE9ETzogZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGRlc2t0b3AgYW5kIGNhbWVyYSBmb3IgYmV0dGVyIGVycm9yICovfVxuICAgICAgICB7dW5leHBlY3RlZEVuZCAmJiA8RXJyb3JCb3ggY3NzPXt7IG1hcmdpbjogMCB9fSBib2R5PXt0KFwiZXJyb3ItbG9zdC12aWRlby1zdHJlYW1cIil9IC8+fVxuICAgICAgPC9kaXY+O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbm5lciA9IDxTcGlubmVyIHNpemU9ezc1fSBjc3M9e3sgY29sb3I6IENPTE9SUy5uZXV0cmFsNjAgfX0gLz47XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICB9fT5cbiAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICBmbGV4OiBcIjFcIixcbiAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICB9fT5cbiAgICAgICAgICB7aW5uZXJ9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfX0+XG4gICAgICA8dmlkZW9cbiAgICAgICAgcmVmPXt2aWRlb1JlZn1cbiAgICAgICAgYXV0b1BsYXlcbiAgICAgICAgbXV0ZWRcbiAgICAgICAgcGxheXNJbmxpbmVcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgbWluSGVpZ2h0OiAwLFxuICAgICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDEyLFxuICAgICAgICB9fVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iXX0= */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref6 =  false ? 0 : {\n  name: \"b7urh9-PreviewVideo\",\n  styles: \"display:flex;flex-direction:column;width:100%;height:100%;label:PreviewVideo;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3ZpZGVvLXNldHVwL3ByZXZpZXcudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZHVyIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9zdGVwcy92aWRlby1zZXR1cC9wcmV2aWV3LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTcGlubmVyLCBtYXRjaCwgdW5yZWFjaGFibGUsIHVzZUNvbG9yU2NoZW1lIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcblxuaW1wb3J0IHsgQ09MT1JTLCBkaW1lbnNpb25zT2YgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgU3RyZWFtU2V0dGluZ3MgfSBmcm9tIFwiLi9wcmVmc1wiO1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgVmlkZW9Cb3gsIHVzZVZpZGVvQm94UmVzaXplIH0gZnJvbSBcIi4uLy4uL3VpL1ZpZGVvQm94XCI7XG5pbXBvcnQgeyBFcnJvckJveCB9IGZyb20gXCIuLi8uLi91aS9FcnJvckJveFwiO1xuXG5cblxuZXhwb3J0IHR5cGUgU291cmNlUHJldmlld1Byb3BzID0ge1xuICBpbnB1dHM6IElucHV0W107XG59XG5cbi8qKlxuICogU2hvd3MgdGhlIHByZXZpZXcgZm9yIG9uZSBvciB0d28gaW5wdXQgc3RyZWFtcy4gVGhlIHByZXZpZXdzIGFsc28gc2hvd1xuICogcHJlZmVyZW5jZXMgYWxsb3dpbmcgdGhlIHVzZXIgdG8gY2hhbmdlIHRoZSB3ZWJjYW0gYW5kIHRoZSBsaWtlLlxuICovXG5leHBvcnQgY29uc3QgU291cmNlUHJldmlldzogUmVhY3QuRkM8U291cmNlUHJldmlld1Byb3BzPiA9ICh7IGlucHV0cyB9KSA9PiB7XG4gIGNvbnN0IGNoaWxkcmVuID0gbWF0Y2goaW5wdXRzLmxlbmd0aCwge1xuICAgIDE6ICgpID0+IFt7XG4gICAgICBib2R5OiA8U3RyZWFtUHJldmlldyBpbnB1dD17aW5wdXRzWzBdfSAvPixcbiAgICAgIGRpbWVuc2lvbnM6ICgpID0+IGRpbWVuc2lvbnNPZihpbnB1dHNbMF0uc3RyZWFtKSxcbiAgICAgIGF1dG9TaXplOiBpbnB1dEhhc0Vycm9yKGlucHV0c1swXSksXG4gICAgfV0sXG4gICAgMjogKCkgPT4gW1xuICAgICAge1xuICAgICAgICBib2R5OiA8U3RyZWFtUHJldmlldyBpbnB1dD17aW5wdXRzWzBdfSAvPixcbiAgICAgICAgZGltZW5zaW9uczogKCkgPT4gZGltZW5zaW9uc09mKGlucHV0c1swXS5zdHJlYW0pLFxuICAgICAgICBhdXRvU2l6ZTogaW5wdXRIYXNFcnJvcihpbnB1dHNbMF0pLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYm9keTogPFN0cmVhbVByZXZpZXcgaW5wdXQ9e2lucHV0c1sxXX0gLz4sXG4gICAgICAgIGRpbWVuc2lvbnM6ICgpID0+IGRpbWVuc2lvbnNPZihpbnB1dHNbMV0uc3RyZWFtKSxcbiAgICAgICAgYXV0b1NpemU6IGlucHV0SGFzRXJyb3IoaW5wdXRzWzFdKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSwgdW5yZWFjaGFibGUpO1xuXG4gIHJldHVybiA8VmlkZW9Cb3ggZ2FwPXsyMH0+e2NoaWxkcmVufTwvVmlkZW9Cb3g+O1xufTtcblxuY29uc3QgaW5wdXRIYXNFcnJvciA9IChpbnB1dDogSW5wdXQpOiBib29sZWFuID0+XG4gIGlucHV0LmFsbG93ZWQgPT09IGZhbHNlIHx8ICEhaW5wdXQudW5leHBlY3RlZEVuZDtcblxuLyoqIFNob3dzIGEgc2luZ2xlIHN0cmVhbSBhcyBwcmV2aWV3LCBkZWFscyB3aXRoIHBvdGVudGlhbCBlcnJvcnMgYW5kIHNob3dzIHByZWZlcmVuY2VzIFVJICovXG5jb25zdCBTdHJlYW1QcmV2aWV3OiBSZWFjdC5GQzx7IGlucHV0OiBJbnB1dCB9PiA9ICh7IGlucHV0IH0pID0+IHtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7XG4gICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgYm9yZGVyUmFkaXVzOiAxMixcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAuLi4haW5wdXRIYXNFcnJvcihpbnB1dCkgJiYge1xuICAgICAgICBib3hTaGFkb3c6IGlzSGlnaENvbnRyYXN0ID8gXCJub25lXCIgOiBcIjAgNnB4IDE2cHggcmdiYSgwLCAwLCAwLCAwLjIpXCIsXG4gICAgICB9LFxuICAgICAgLi4uaXNIaWdoQ29udHJhc3QgJiYge1xuICAgICAgICBvdXRsaW5lOiBgMXB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWw5MH1gLFxuICAgICAgfSxcbiAgICB9fT5cbiAgICAgIDxQcmV2aWV3VmlkZW8gaW5wdXQ9e2lucHV0fSAvPlxuICAgICAge2lucHV0LnN0cmVhbSAmJiA8U3RyZWFtU2V0dGluZ3MgaXNEZXNrdG9wPXtpbnB1dC5pc0Rlc2t0b3B9IHN0cmVhbT17aW5wdXQuc3RyZWFtfSAvPn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IFByZXZpZXdWaWRlbzogUmVhY3QuRkM8eyBpbnB1dDogSW5wdXQgfT4gPSAoeyBpbnB1dCB9KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBhbGxvd2VkLCBzdHJlYW0sIHVuZXhwZWN0ZWRFbmQgfSA9IGlucHV0O1xuICBjb25zdCByZXNpemVWaWRlb0JveCA9IHVzZVZpZGVvQm94UmVzaXplKCk7XG5cbiAgY29uc3QgdmlkZW9SZWYgPSB1c2VSZWY8SFRNTFZpZGVvRWxlbWVudD4obnVsbCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdiA9IHZpZGVvUmVmLmN1cnJlbnQ7XG4gICAgaWYgKHYpIHtcbiAgICAgIGlmICghdi5zcmNPYmplY3QpIHtcbiAgICAgICAgdi5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgICB9XG4gICAgICB2LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVmlkZW9Cb3gpO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAodikge1xuICAgICAgICB2LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVmlkZW9Cb3gpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtzdHJlYW0sIHJlc2l6ZVZpZGVvQm94XSk7XG5cbiAgaWYgKCFzdHJlYW0pIHtcbiAgICBsZXQgaW5uZXI6IEpTWC5FbGVtZW50O1xuICAgIGlmIChhbGxvd2VkID09PSBmYWxzZSB8fCB1bmV4cGVjdGVkRW5kKSB7XG4gICAgICBpbm5lciA9IDxkaXY+XG4gICAgICAgIHthbGxvd2VkID09PSBmYWxzZSAmJiA8RXJyb3JCb3hcbiAgICAgICAgICBjc3M9e3sgbWFyZ2luOiAwIH19XG4gICAgICAgICAgdGl0bGU9e3QoYHN0ZXBzLnZpZGVvLiR7aW5wdXQuaXNEZXNrdG9wID8gXCJkaXNwbGF5XCIgOiBcInVzZXJcIn0tbm90LWFsbG93ZWQtdGl0bGVgKX1cbiAgICAgICAgICBib2R5PXt0KGBzdGVwcy52aWRlby4ke2lucHV0LmlzRGVza3RvcCA/IFwiZGlzcGxheVwiIDogXCJ1c2VyXCJ9LW5vdC1hbGxvd2VkLXRleHRgKX1cbiAgICAgICAgLz59XG4gICAgICAgIHsvKiBUT0RPOiBkaWZmZXJlbnRpYXRlIGJldHdlZW4gZGVza3RvcCBhbmQgY2FtZXJhIGZvciBiZXR0ZXIgZXJyb3IgKi99XG4gICAgICAgIHt1bmV4cGVjdGVkRW5kICYmIDxFcnJvckJveCBjc3M9e3sgbWFyZ2luOiAwIH19IGJvZHk9e3QoXCJlcnJvci1sb3N0LXZpZGVvLXN0cmVhbVwiKX0gLz59XG4gICAgICA8L2Rpdj47XG4gICAgfSBlbHNlIHtcbiAgICAgIGlubmVyID0gPFNwaW5uZXIgc2l6ZT17NzV9IGNzcz17eyBjb2xvcjogQ09MT1JTLm5ldXRyYWw2MCB9fSAvPjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIH19PlxuICAgICAgICA8ZGl2IGNzcz17e1xuICAgICAgICAgIGZsZXg6IFwiMVwiLFxuICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIH19PlxuICAgICAgICAgIHtpbm5lcn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICB9fT5cbiAgICAgIDx2aWRlb1xuICAgICAgICByZWY9e3ZpZGVvUmVmfVxuICAgICAgICBhdXRvUGxheVxuICAgICAgICBtdXRlZFxuICAgICAgICBwbGF5c0lubGluZVxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBtaW5IZWlnaHQ6IDAsXG4gICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICAgIGJvcmRlclJhZGl1czogMTIsXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref7 =  false ? 0 : {\n  name: \"9kiqnf-PreviewVideo\",\n  styles: \"flex:1;display:flex;justify-content:center;align-items:center;label:PreviewVideo;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3ZpZGVvLXNldHVwL3ByZXZpZXcudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1IYSIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9zdGVwcy92aWRlby1zZXR1cC9wcmV2aWV3LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTcGlubmVyLCBtYXRjaCwgdW5yZWFjaGFibGUsIHVzZUNvbG9yU2NoZW1lIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcblxuaW1wb3J0IHsgQ09MT1JTLCBkaW1lbnNpb25zT2YgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgU3RyZWFtU2V0dGluZ3MgfSBmcm9tIFwiLi9wcmVmc1wiO1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgVmlkZW9Cb3gsIHVzZVZpZGVvQm94UmVzaXplIH0gZnJvbSBcIi4uLy4uL3VpL1ZpZGVvQm94XCI7XG5pbXBvcnQgeyBFcnJvckJveCB9IGZyb20gXCIuLi8uLi91aS9FcnJvckJveFwiO1xuXG5cblxuZXhwb3J0IHR5cGUgU291cmNlUHJldmlld1Byb3BzID0ge1xuICBpbnB1dHM6IElucHV0W107XG59XG5cbi8qKlxuICogU2hvd3MgdGhlIHByZXZpZXcgZm9yIG9uZSBvciB0d28gaW5wdXQgc3RyZWFtcy4gVGhlIHByZXZpZXdzIGFsc28gc2hvd1xuICogcHJlZmVyZW5jZXMgYWxsb3dpbmcgdGhlIHVzZXIgdG8gY2hhbmdlIHRoZSB3ZWJjYW0gYW5kIHRoZSBsaWtlLlxuICovXG5leHBvcnQgY29uc3QgU291cmNlUHJldmlldzogUmVhY3QuRkM8U291cmNlUHJldmlld1Byb3BzPiA9ICh7IGlucHV0cyB9KSA9PiB7XG4gIGNvbnN0IGNoaWxkcmVuID0gbWF0Y2goaW5wdXRzLmxlbmd0aCwge1xuICAgIDE6ICgpID0+IFt7XG4gICAgICBib2R5OiA8U3RyZWFtUHJldmlldyBpbnB1dD17aW5wdXRzWzBdfSAvPixcbiAgICAgIGRpbWVuc2lvbnM6ICgpID0+IGRpbWVuc2lvbnNPZihpbnB1dHNbMF0uc3RyZWFtKSxcbiAgICAgIGF1dG9TaXplOiBpbnB1dEhhc0Vycm9yKGlucHV0c1swXSksXG4gICAgfV0sXG4gICAgMjogKCkgPT4gW1xuICAgICAge1xuICAgICAgICBib2R5OiA8U3RyZWFtUHJldmlldyBpbnB1dD17aW5wdXRzWzBdfSAvPixcbiAgICAgICAgZGltZW5zaW9uczogKCkgPT4gZGltZW5zaW9uc09mKGlucHV0c1swXS5zdHJlYW0pLFxuICAgICAgICBhdXRvU2l6ZTogaW5wdXRIYXNFcnJvcihpbnB1dHNbMF0pLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYm9keTogPFN0cmVhbVByZXZpZXcgaW5wdXQ9e2lucHV0c1sxXX0gLz4sXG4gICAgICAgIGRpbWVuc2lvbnM6ICgpID0+IGRpbWVuc2lvbnNPZihpbnB1dHNbMV0uc3RyZWFtKSxcbiAgICAgICAgYXV0b1NpemU6IGlucHV0SGFzRXJyb3IoaW5wdXRzWzFdKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSwgdW5yZWFjaGFibGUpO1xuXG4gIHJldHVybiA8VmlkZW9Cb3ggZ2FwPXsyMH0+e2NoaWxkcmVufTwvVmlkZW9Cb3g+O1xufTtcblxuY29uc3QgaW5wdXRIYXNFcnJvciA9IChpbnB1dDogSW5wdXQpOiBib29sZWFuID0+XG4gIGlucHV0LmFsbG93ZWQgPT09IGZhbHNlIHx8ICEhaW5wdXQudW5leHBlY3RlZEVuZDtcblxuLyoqIFNob3dzIGEgc2luZ2xlIHN0cmVhbSBhcyBwcmV2aWV3LCBkZWFscyB3aXRoIHBvdGVudGlhbCBlcnJvcnMgYW5kIHNob3dzIHByZWZlcmVuY2VzIFVJICovXG5jb25zdCBTdHJlYW1QcmV2aWV3OiBSZWFjdC5GQzx7IGlucHV0OiBJbnB1dCB9PiA9ICh7IGlucHV0IH0pID0+IHtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7XG4gICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgYm9yZGVyUmFkaXVzOiAxMixcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAuLi4haW5wdXRIYXNFcnJvcihpbnB1dCkgJiYge1xuICAgICAgICBib3hTaGFkb3c6IGlzSGlnaENvbnRyYXN0ID8gXCJub25lXCIgOiBcIjAgNnB4IDE2cHggcmdiYSgwLCAwLCAwLCAwLjIpXCIsXG4gICAgICB9LFxuICAgICAgLi4uaXNIaWdoQ29udHJhc3QgJiYge1xuICAgICAgICBvdXRsaW5lOiBgMXB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWw5MH1gLFxuICAgICAgfSxcbiAgICB9fT5cbiAgICAgIDxQcmV2aWV3VmlkZW8gaW5wdXQ9e2lucHV0fSAvPlxuICAgICAge2lucHV0LnN0cmVhbSAmJiA8U3RyZWFtU2V0dGluZ3MgaXNEZXNrdG9wPXtpbnB1dC5pc0Rlc2t0b3B9IHN0cmVhbT17aW5wdXQuc3RyZWFtfSAvPn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IFByZXZpZXdWaWRlbzogUmVhY3QuRkM8eyBpbnB1dDogSW5wdXQgfT4gPSAoeyBpbnB1dCB9KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBhbGxvd2VkLCBzdHJlYW0sIHVuZXhwZWN0ZWRFbmQgfSA9IGlucHV0O1xuICBjb25zdCByZXNpemVWaWRlb0JveCA9IHVzZVZpZGVvQm94UmVzaXplKCk7XG5cbiAgY29uc3QgdmlkZW9SZWYgPSB1c2VSZWY8SFRNTFZpZGVvRWxlbWVudD4obnVsbCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdiA9IHZpZGVvUmVmLmN1cnJlbnQ7XG4gICAgaWYgKHYpIHtcbiAgICAgIGlmICghdi5zcmNPYmplY3QpIHtcbiAgICAgICAgdi5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgICB9XG4gICAgICB2LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVmlkZW9Cb3gpO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAodikge1xuICAgICAgICB2LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVmlkZW9Cb3gpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtzdHJlYW0sIHJlc2l6ZVZpZGVvQm94XSk7XG5cbiAgaWYgKCFzdHJlYW0pIHtcbiAgICBsZXQgaW5uZXI6IEpTWC5FbGVtZW50O1xuICAgIGlmIChhbGxvd2VkID09PSBmYWxzZSB8fCB1bmV4cGVjdGVkRW5kKSB7XG4gICAgICBpbm5lciA9IDxkaXY+XG4gICAgICAgIHthbGxvd2VkID09PSBmYWxzZSAmJiA8RXJyb3JCb3hcbiAgICAgICAgICBjc3M9e3sgbWFyZ2luOiAwIH19XG4gICAgICAgICAgdGl0bGU9e3QoYHN0ZXBzLnZpZGVvLiR7aW5wdXQuaXNEZXNrdG9wID8gXCJkaXNwbGF5XCIgOiBcInVzZXJcIn0tbm90LWFsbG93ZWQtdGl0bGVgKX1cbiAgICAgICAgICBib2R5PXt0KGBzdGVwcy52aWRlby4ke2lucHV0LmlzRGVza3RvcCA/IFwiZGlzcGxheVwiIDogXCJ1c2VyXCJ9LW5vdC1hbGxvd2VkLXRleHRgKX1cbiAgICAgICAgLz59XG4gICAgICAgIHsvKiBUT0RPOiBkaWZmZXJlbnRpYXRlIGJldHdlZW4gZGVza3RvcCBhbmQgY2FtZXJhIGZvciBiZXR0ZXIgZXJyb3IgKi99XG4gICAgICAgIHt1bmV4cGVjdGVkRW5kICYmIDxFcnJvckJveCBjc3M9e3sgbWFyZ2luOiAwIH19IGJvZHk9e3QoXCJlcnJvci1sb3N0LXZpZGVvLXN0cmVhbVwiKX0gLz59XG4gICAgICA8L2Rpdj47XG4gICAgfSBlbHNlIHtcbiAgICAgIGlubmVyID0gPFNwaW5uZXIgc2l6ZT17NzV9IGNzcz17eyBjb2xvcjogQ09MT1JTLm5ldXRyYWw2MCB9fSAvPjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIH19PlxuICAgICAgICA8ZGl2IGNzcz17e1xuICAgICAgICAgIGZsZXg6IFwiMVwiLFxuICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIH19PlxuICAgICAgICAgIHtpbm5lcn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICB9fT5cbiAgICAgIDx2aWRlb1xuICAgICAgICByZWY9e3ZpZGVvUmVmfVxuICAgICAgICBhdXRvUGxheVxuICAgICAgICBtdXRlZFxuICAgICAgICBwbGF5c0lubGluZVxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBtaW5IZWlnaHQ6IDAsXG4gICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICAgIGJvcmRlclJhZGl1czogMTIsXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref8 =  false ? 0 : {\n  name: \"1ps4ay9-PreviewVideo\",\n  styles: \"position:relative;label:PreviewVideo;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3ZpZGVvLXNldHVwL3ByZXZpZXcudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdJUyIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9zdGVwcy92aWRlby1zZXR1cC9wcmV2aWV3LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTcGlubmVyLCBtYXRjaCwgdW5yZWFjaGFibGUsIHVzZUNvbG9yU2NoZW1lIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcblxuaW1wb3J0IHsgQ09MT1JTLCBkaW1lbnNpb25zT2YgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgU3RyZWFtU2V0dGluZ3MgfSBmcm9tIFwiLi9wcmVmc1wiO1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgVmlkZW9Cb3gsIHVzZVZpZGVvQm94UmVzaXplIH0gZnJvbSBcIi4uLy4uL3VpL1ZpZGVvQm94XCI7XG5pbXBvcnQgeyBFcnJvckJveCB9IGZyb20gXCIuLi8uLi91aS9FcnJvckJveFwiO1xuXG5cblxuZXhwb3J0IHR5cGUgU291cmNlUHJldmlld1Byb3BzID0ge1xuICBpbnB1dHM6IElucHV0W107XG59XG5cbi8qKlxuICogU2hvd3MgdGhlIHByZXZpZXcgZm9yIG9uZSBvciB0d28gaW5wdXQgc3RyZWFtcy4gVGhlIHByZXZpZXdzIGFsc28gc2hvd1xuICogcHJlZmVyZW5jZXMgYWxsb3dpbmcgdGhlIHVzZXIgdG8gY2hhbmdlIHRoZSB3ZWJjYW0gYW5kIHRoZSBsaWtlLlxuICovXG5leHBvcnQgY29uc3QgU291cmNlUHJldmlldzogUmVhY3QuRkM8U291cmNlUHJldmlld1Byb3BzPiA9ICh7IGlucHV0cyB9KSA9PiB7XG4gIGNvbnN0IGNoaWxkcmVuID0gbWF0Y2goaW5wdXRzLmxlbmd0aCwge1xuICAgIDE6ICgpID0+IFt7XG4gICAgICBib2R5OiA8U3RyZWFtUHJldmlldyBpbnB1dD17aW5wdXRzWzBdfSAvPixcbiAgICAgIGRpbWVuc2lvbnM6ICgpID0+IGRpbWVuc2lvbnNPZihpbnB1dHNbMF0uc3RyZWFtKSxcbiAgICAgIGF1dG9TaXplOiBpbnB1dEhhc0Vycm9yKGlucHV0c1swXSksXG4gICAgfV0sXG4gICAgMjogKCkgPT4gW1xuICAgICAge1xuICAgICAgICBib2R5OiA8U3RyZWFtUHJldmlldyBpbnB1dD17aW5wdXRzWzBdfSAvPixcbiAgICAgICAgZGltZW5zaW9uczogKCkgPT4gZGltZW5zaW9uc09mKGlucHV0c1swXS5zdHJlYW0pLFxuICAgICAgICBhdXRvU2l6ZTogaW5wdXRIYXNFcnJvcihpbnB1dHNbMF0pLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYm9keTogPFN0cmVhbVByZXZpZXcgaW5wdXQ9e2lucHV0c1sxXX0gLz4sXG4gICAgICAgIGRpbWVuc2lvbnM6ICgpID0+IGRpbWVuc2lvbnNPZihpbnB1dHNbMV0uc3RyZWFtKSxcbiAgICAgICAgYXV0b1NpemU6IGlucHV0SGFzRXJyb3IoaW5wdXRzWzFdKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSwgdW5yZWFjaGFibGUpO1xuXG4gIHJldHVybiA8VmlkZW9Cb3ggZ2FwPXsyMH0+e2NoaWxkcmVufTwvVmlkZW9Cb3g+O1xufTtcblxuY29uc3QgaW5wdXRIYXNFcnJvciA9IChpbnB1dDogSW5wdXQpOiBib29sZWFuID0+XG4gIGlucHV0LmFsbG93ZWQgPT09IGZhbHNlIHx8ICEhaW5wdXQudW5leHBlY3RlZEVuZDtcblxuLyoqIFNob3dzIGEgc2luZ2xlIHN0cmVhbSBhcyBwcmV2aWV3LCBkZWFscyB3aXRoIHBvdGVudGlhbCBlcnJvcnMgYW5kIHNob3dzIHByZWZlcmVuY2VzIFVJICovXG5jb25zdCBTdHJlYW1QcmV2aWV3OiBSZWFjdC5GQzx7IGlucHV0OiBJbnB1dCB9PiA9ICh7IGlucHV0IH0pID0+IHtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7XG4gICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgYm9yZGVyUmFkaXVzOiAxMixcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAuLi4haW5wdXRIYXNFcnJvcihpbnB1dCkgJiYge1xuICAgICAgICBib3hTaGFkb3c6IGlzSGlnaENvbnRyYXN0ID8gXCJub25lXCIgOiBcIjAgNnB4IDE2cHggcmdiYSgwLCAwLCAwLCAwLjIpXCIsXG4gICAgICB9LFxuICAgICAgLi4uaXNIaWdoQ29udHJhc3QgJiYge1xuICAgICAgICBvdXRsaW5lOiBgMXB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWw5MH1gLFxuICAgICAgfSxcbiAgICB9fT5cbiAgICAgIDxQcmV2aWV3VmlkZW8gaW5wdXQ9e2lucHV0fSAvPlxuICAgICAge2lucHV0LnN0cmVhbSAmJiA8U3RyZWFtU2V0dGluZ3MgaXNEZXNrdG9wPXtpbnB1dC5pc0Rlc2t0b3B9IHN0cmVhbT17aW5wdXQuc3RyZWFtfSAvPn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IFByZXZpZXdWaWRlbzogUmVhY3QuRkM8eyBpbnB1dDogSW5wdXQgfT4gPSAoeyBpbnB1dCB9KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBhbGxvd2VkLCBzdHJlYW0sIHVuZXhwZWN0ZWRFbmQgfSA9IGlucHV0O1xuICBjb25zdCByZXNpemVWaWRlb0JveCA9IHVzZVZpZGVvQm94UmVzaXplKCk7XG5cbiAgY29uc3QgdmlkZW9SZWYgPSB1c2VSZWY8SFRNTFZpZGVvRWxlbWVudD4obnVsbCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdiA9IHZpZGVvUmVmLmN1cnJlbnQ7XG4gICAgaWYgKHYpIHtcbiAgICAgIGlmICghdi5zcmNPYmplY3QpIHtcbiAgICAgICAgdi5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgICB9XG4gICAgICB2LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVmlkZW9Cb3gpO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAodikge1xuICAgICAgICB2LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVmlkZW9Cb3gpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtzdHJlYW0sIHJlc2l6ZVZpZGVvQm94XSk7XG5cbiAgaWYgKCFzdHJlYW0pIHtcbiAgICBsZXQgaW5uZXI6IEpTWC5FbGVtZW50O1xuICAgIGlmIChhbGxvd2VkID09PSBmYWxzZSB8fCB1bmV4cGVjdGVkRW5kKSB7XG4gICAgICBpbm5lciA9IDxkaXY+XG4gICAgICAgIHthbGxvd2VkID09PSBmYWxzZSAmJiA8RXJyb3JCb3hcbiAgICAgICAgICBjc3M9e3sgbWFyZ2luOiAwIH19XG4gICAgICAgICAgdGl0bGU9e3QoYHN0ZXBzLnZpZGVvLiR7aW5wdXQuaXNEZXNrdG9wID8gXCJkaXNwbGF5XCIgOiBcInVzZXJcIn0tbm90LWFsbG93ZWQtdGl0bGVgKX1cbiAgICAgICAgICBib2R5PXt0KGBzdGVwcy52aWRlby4ke2lucHV0LmlzRGVza3RvcCA/IFwiZGlzcGxheVwiIDogXCJ1c2VyXCJ9LW5vdC1hbGxvd2VkLXRleHRgKX1cbiAgICAgICAgLz59XG4gICAgICAgIHsvKiBUT0RPOiBkaWZmZXJlbnRpYXRlIGJldHdlZW4gZGVza3RvcCBhbmQgY2FtZXJhIGZvciBiZXR0ZXIgZXJyb3IgKi99XG4gICAgICAgIHt1bmV4cGVjdGVkRW5kICYmIDxFcnJvckJveCBjc3M9e3sgbWFyZ2luOiAwIH19IGJvZHk9e3QoXCJlcnJvci1sb3N0LXZpZGVvLXN0cmVhbVwiKX0gLz59XG4gICAgICA8L2Rpdj47XG4gICAgfSBlbHNlIHtcbiAgICAgIGlubmVyID0gPFNwaW5uZXIgc2l6ZT17NzV9IGNzcz17eyBjb2xvcjogQ09MT1JTLm5ldXRyYWw2MCB9fSAvPjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIH19PlxuICAgICAgICA8ZGl2IGNzcz17e1xuICAgICAgICAgIGZsZXg6IFwiMVwiLFxuICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIH19PlxuICAgICAgICAgIHtpbm5lcn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICB9fT5cbiAgICAgIDx2aWRlb1xuICAgICAgICByZWY9e3ZpZGVvUmVmfVxuICAgICAgICBhdXRvUGxheVxuICAgICAgICBtdXRlZFxuICAgICAgICBwbGF5c0lubGluZVxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBtaW5IZWlnaHQ6IDAsXG4gICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICAgIGJvcmRlclJhZGl1czogMTIsXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref9 =  false ? 0 : {\n  name: \"vv03k7-PreviewVideo\",\n  styles: \"min-height:0;display:block;width:100%;height:100%;border-radius:12px;label:PreviewVideo;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3ZpZGVvLXNldHVwL3ByZXZpZXcudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdJUSIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9zdGVwcy92aWRlby1zZXR1cC9wcmV2aWV3LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTcGlubmVyLCBtYXRjaCwgdW5yZWFjaGFibGUsIHVzZUNvbG9yU2NoZW1lIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcblxuaW1wb3J0IHsgQ09MT1JTLCBkaW1lbnNpb25zT2YgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgU3RyZWFtU2V0dGluZ3MgfSBmcm9tIFwiLi9wcmVmc1wiO1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgVmlkZW9Cb3gsIHVzZVZpZGVvQm94UmVzaXplIH0gZnJvbSBcIi4uLy4uL3VpL1ZpZGVvQm94XCI7XG5pbXBvcnQgeyBFcnJvckJveCB9IGZyb20gXCIuLi8uLi91aS9FcnJvckJveFwiO1xuXG5cblxuZXhwb3J0IHR5cGUgU291cmNlUHJldmlld1Byb3BzID0ge1xuICBpbnB1dHM6IElucHV0W107XG59XG5cbi8qKlxuICogU2hvd3MgdGhlIHByZXZpZXcgZm9yIG9uZSBvciB0d28gaW5wdXQgc3RyZWFtcy4gVGhlIHByZXZpZXdzIGFsc28gc2hvd1xuICogcHJlZmVyZW5jZXMgYWxsb3dpbmcgdGhlIHVzZXIgdG8gY2hhbmdlIHRoZSB3ZWJjYW0gYW5kIHRoZSBsaWtlLlxuICovXG5leHBvcnQgY29uc3QgU291cmNlUHJldmlldzogUmVhY3QuRkM8U291cmNlUHJldmlld1Byb3BzPiA9ICh7IGlucHV0cyB9KSA9PiB7XG4gIGNvbnN0IGNoaWxkcmVuID0gbWF0Y2goaW5wdXRzLmxlbmd0aCwge1xuICAgIDE6ICgpID0+IFt7XG4gICAgICBib2R5OiA8U3RyZWFtUHJldmlldyBpbnB1dD17aW5wdXRzWzBdfSAvPixcbiAgICAgIGRpbWVuc2lvbnM6ICgpID0+IGRpbWVuc2lvbnNPZihpbnB1dHNbMF0uc3RyZWFtKSxcbiAgICAgIGF1dG9TaXplOiBpbnB1dEhhc0Vycm9yKGlucHV0c1swXSksXG4gICAgfV0sXG4gICAgMjogKCkgPT4gW1xuICAgICAge1xuICAgICAgICBib2R5OiA8U3RyZWFtUHJldmlldyBpbnB1dD17aW5wdXRzWzBdfSAvPixcbiAgICAgICAgZGltZW5zaW9uczogKCkgPT4gZGltZW5zaW9uc09mKGlucHV0c1swXS5zdHJlYW0pLFxuICAgICAgICBhdXRvU2l6ZTogaW5wdXRIYXNFcnJvcihpbnB1dHNbMF0pLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYm9keTogPFN0cmVhbVByZXZpZXcgaW5wdXQ9e2lucHV0c1sxXX0gLz4sXG4gICAgICAgIGRpbWVuc2lvbnM6ICgpID0+IGRpbWVuc2lvbnNPZihpbnB1dHNbMV0uc3RyZWFtKSxcbiAgICAgICAgYXV0b1NpemU6IGlucHV0SGFzRXJyb3IoaW5wdXRzWzFdKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSwgdW5yZWFjaGFibGUpO1xuXG4gIHJldHVybiA8VmlkZW9Cb3ggZ2FwPXsyMH0+e2NoaWxkcmVufTwvVmlkZW9Cb3g+O1xufTtcblxuY29uc3QgaW5wdXRIYXNFcnJvciA9IChpbnB1dDogSW5wdXQpOiBib29sZWFuID0+XG4gIGlucHV0LmFsbG93ZWQgPT09IGZhbHNlIHx8ICEhaW5wdXQudW5leHBlY3RlZEVuZDtcblxuLyoqIFNob3dzIGEgc2luZ2xlIHN0cmVhbSBhcyBwcmV2aWV3LCBkZWFscyB3aXRoIHBvdGVudGlhbCBlcnJvcnMgYW5kIHNob3dzIHByZWZlcmVuY2VzIFVJICovXG5jb25zdCBTdHJlYW1QcmV2aWV3OiBSZWFjdC5GQzx7IGlucHV0OiBJbnB1dCB9PiA9ICh7IGlucHV0IH0pID0+IHtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7XG4gICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgYm9yZGVyUmFkaXVzOiAxMixcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAuLi4haW5wdXRIYXNFcnJvcihpbnB1dCkgJiYge1xuICAgICAgICBib3hTaGFkb3c6IGlzSGlnaENvbnRyYXN0ID8gXCJub25lXCIgOiBcIjAgNnB4IDE2cHggcmdiYSgwLCAwLCAwLCAwLjIpXCIsXG4gICAgICB9LFxuICAgICAgLi4uaXNIaWdoQ29udHJhc3QgJiYge1xuICAgICAgICBvdXRsaW5lOiBgMXB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWw5MH1gLFxuICAgICAgfSxcbiAgICB9fT5cbiAgICAgIDxQcmV2aWV3VmlkZW8gaW5wdXQ9e2lucHV0fSAvPlxuICAgICAge2lucHV0LnN0cmVhbSAmJiA8U3RyZWFtU2V0dGluZ3MgaXNEZXNrdG9wPXtpbnB1dC5pc0Rlc2t0b3B9IHN0cmVhbT17aW5wdXQuc3RyZWFtfSAvPn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IFByZXZpZXdWaWRlbzogUmVhY3QuRkM8eyBpbnB1dDogSW5wdXQgfT4gPSAoeyBpbnB1dCB9KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBhbGxvd2VkLCBzdHJlYW0sIHVuZXhwZWN0ZWRFbmQgfSA9IGlucHV0O1xuICBjb25zdCByZXNpemVWaWRlb0JveCA9IHVzZVZpZGVvQm94UmVzaXplKCk7XG5cbiAgY29uc3QgdmlkZW9SZWYgPSB1c2VSZWY8SFRNTFZpZGVvRWxlbWVudD4obnVsbCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdiA9IHZpZGVvUmVmLmN1cnJlbnQ7XG4gICAgaWYgKHYpIHtcbiAgICAgIGlmICghdi5zcmNPYmplY3QpIHtcbiAgICAgICAgdi5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgICB9XG4gICAgICB2LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVmlkZW9Cb3gpO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAodikge1xuICAgICAgICB2LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVmlkZW9Cb3gpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtzdHJlYW0sIHJlc2l6ZVZpZGVvQm94XSk7XG5cbiAgaWYgKCFzdHJlYW0pIHtcbiAgICBsZXQgaW5uZXI6IEpTWC5FbGVtZW50O1xuICAgIGlmIChhbGxvd2VkID09PSBmYWxzZSB8fCB1bmV4cGVjdGVkRW5kKSB7XG4gICAgICBpbm5lciA9IDxkaXY+XG4gICAgICAgIHthbGxvd2VkID09PSBmYWxzZSAmJiA8RXJyb3JCb3hcbiAgICAgICAgICBjc3M9e3sgbWFyZ2luOiAwIH19XG4gICAgICAgICAgdGl0bGU9e3QoYHN0ZXBzLnZpZGVvLiR7aW5wdXQuaXNEZXNrdG9wID8gXCJkaXNwbGF5XCIgOiBcInVzZXJcIn0tbm90LWFsbG93ZWQtdGl0bGVgKX1cbiAgICAgICAgICBib2R5PXt0KGBzdGVwcy52aWRlby4ke2lucHV0LmlzRGVza3RvcCA/IFwiZGlzcGxheVwiIDogXCJ1c2VyXCJ9LW5vdC1hbGxvd2VkLXRleHRgKX1cbiAgICAgICAgLz59XG4gICAgICAgIHsvKiBUT0RPOiBkaWZmZXJlbnRpYXRlIGJldHdlZW4gZGVza3RvcCBhbmQgY2FtZXJhIGZvciBiZXR0ZXIgZXJyb3IgKi99XG4gICAgICAgIHt1bmV4cGVjdGVkRW5kICYmIDxFcnJvckJveCBjc3M9e3sgbWFyZ2luOiAwIH19IGJvZHk9e3QoXCJlcnJvci1sb3N0LXZpZGVvLXN0cmVhbVwiKX0gLz59XG4gICAgICA8L2Rpdj47XG4gICAgfSBlbHNlIHtcbiAgICAgIGlubmVyID0gPFNwaW5uZXIgc2l6ZT17NzV9IGNzcz17eyBjb2xvcjogQ09MT1JTLm5ldXRyYWw2MCB9fSAvPjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIH19PlxuICAgICAgICA8ZGl2IGNzcz17e1xuICAgICAgICAgIGZsZXg6IFwiMVwiLFxuICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIH19PlxuICAgICAgICAgIHtpbm5lcn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICB9fT5cbiAgICAgIDx2aWRlb1xuICAgICAgICByZWY9e3ZpZGVvUmVmfVxuICAgICAgICBhdXRvUGxheVxuICAgICAgICBtdXRlZFxuICAgICAgICBwbGF5c0lubGluZVxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBtaW5IZWlnaHQ6IDAsXG4gICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICAgIGJvcmRlclJhZGl1czogMTIsXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst PreviewVideo = _ref3 => {\n  let {\n    input\n  } = _ref3;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_2__.useTranslation)();\n  const {\n    allowed,\n    stream,\n    unexpectedEnd\n  } = input;\n  const resizeVideoBox = (0,_ui_VideoBox__WEBPACK_IMPORTED_MODULE_5__.useVideoBoxResize)();\n  const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const v = videoRef.current;\n    if (v) {\n      if (!v.srcObject) {\n        v.srcObject = stream;\n      }\n      v.addEventListener(\"resize\", resizeVideoBox);\n    }\n    return () => {\n      if (v) {\n        v.removeEventListener(\"resize\", resizeVideoBox);\n      }\n    };\n  }, [stream, resizeVideoBox]);\n  if (!stream) {\n    let inner;\n    if (allowed === false || unexpectedEnd) {\n      inner = (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n        children: [allowed === false && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_ui_ErrorBox__WEBPACK_IMPORTED_MODULE_6__.ErrorBox, {\n          css: _ref4,\n          title: t(`steps.video.${input.isDesktop ? \"display\" : \"user\"}-not-allowed-title`),\n          body: t(`steps.video.${input.isDesktop ? \"display\" : \"user\"}-not-allowed-text`)\n        }), unexpectedEnd && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_ui_ErrorBox__WEBPACK_IMPORTED_MODULE_6__.ErrorBox, {\n          css: _ref5,\n          body: t(\"error-lost-video-stream\")\n        })]\n      });\n    } else {\n      inner = (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_1__.Spinner, {\n        size: 75,\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_8__.css)({\n          color: _util__WEBPACK_IMPORTED_MODULE_3__.COLORS.neutral60\n        },  false ? 0 : \";label:inner;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3ZpZGVvLXNldHVwL3ByZXZpZXcudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlHaUMiLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvc3RlcHMvdmlkZW8tc2V0dXAvcHJldmlldy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgU3Bpbm5lciwgbWF0Y2gsIHVucmVhY2hhYmxlLCB1c2VDb2xvclNjaGVtZSB9IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5cbmltcG9ydCB7IENPTE9SUywgZGltZW5zaW9uc09mIH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcbmltcG9ydCB7IFN0cmVhbVNldHRpbmdzIH0gZnJvbSBcIi4vcHJlZnNcIjtcbmltcG9ydCB7IElucHV0IH0gZnJvbSBcIi5cIjtcbmltcG9ydCB7IFZpZGVvQm94LCB1c2VWaWRlb0JveFJlc2l6ZSB9IGZyb20gXCIuLi8uLi91aS9WaWRlb0JveFwiO1xuaW1wb3J0IHsgRXJyb3JCb3ggfSBmcm9tIFwiLi4vLi4vdWkvRXJyb3JCb3hcIjtcblxuXG5cbmV4cG9ydCB0eXBlIFNvdXJjZVByZXZpZXdQcm9wcyA9IHtcbiAgaW5wdXRzOiBJbnB1dFtdO1xufVxuXG4vKipcbiAqIFNob3dzIHRoZSBwcmV2aWV3IGZvciBvbmUgb3IgdHdvIGlucHV0IHN0cmVhbXMuIFRoZSBwcmV2aWV3cyBhbHNvIHNob3dcbiAqIHByZWZlcmVuY2VzIGFsbG93aW5nIHRoZSB1c2VyIHRvIGNoYW5nZSB0aGUgd2ViY2FtIGFuZCB0aGUgbGlrZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFNvdXJjZVByZXZpZXc6IFJlYWN0LkZDPFNvdXJjZVByZXZpZXdQcm9wcz4gPSAoeyBpbnB1dHMgfSkgPT4ge1xuICBjb25zdCBjaGlsZHJlbiA9IG1hdGNoKGlucHV0cy5sZW5ndGgsIHtcbiAgICAxOiAoKSA9PiBbe1xuICAgICAgYm9keTogPFN0cmVhbVByZXZpZXcgaW5wdXQ9e2lucHV0c1swXX0gLz4sXG4gICAgICBkaW1lbnNpb25zOiAoKSA9PiBkaW1lbnNpb25zT2YoaW5wdXRzWzBdLnN0cmVhbSksXG4gICAgICBhdXRvU2l6ZTogaW5wdXRIYXNFcnJvcihpbnB1dHNbMF0pLFxuICAgIH1dLFxuICAgIDI6ICgpID0+IFtcbiAgICAgIHtcbiAgICAgICAgYm9keTogPFN0cmVhbVByZXZpZXcgaW5wdXQ9e2lucHV0c1swXX0gLz4sXG4gICAgICAgIGRpbWVuc2lvbnM6ICgpID0+IGRpbWVuc2lvbnNPZihpbnB1dHNbMF0uc3RyZWFtKSxcbiAgICAgICAgYXV0b1NpemU6IGlucHV0SGFzRXJyb3IoaW5wdXRzWzBdKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGJvZHk6IDxTdHJlYW1QcmV2aWV3IGlucHV0PXtpbnB1dHNbMV19IC8+LFxuICAgICAgICBkaW1lbnNpb25zOiAoKSA9PiBkaW1lbnNpb25zT2YoaW5wdXRzWzFdLnN0cmVhbSksXG4gICAgICAgIGF1dG9TaXplOiBpbnB1dEhhc0Vycm9yKGlucHV0c1sxXSksXG4gICAgICB9LFxuICAgIF0sXG4gIH0sIHVucmVhY2hhYmxlKTtcblxuICByZXR1cm4gPFZpZGVvQm94IGdhcD17MjB9PntjaGlsZHJlbn08L1ZpZGVvQm94Pjtcbn07XG5cbmNvbnN0IGlucHV0SGFzRXJyb3IgPSAoaW5wdXQ6IElucHV0KTogYm9vbGVhbiA9PlxuICBpbnB1dC5hbGxvd2VkID09PSBmYWxzZSB8fCAhIWlucHV0LnVuZXhwZWN0ZWRFbmQ7XG5cbi8qKiBTaG93cyBhIHNpbmdsZSBzdHJlYW0gYXMgcHJldmlldywgZGVhbHMgd2l0aCBwb3RlbnRpYWwgZXJyb3JzIGFuZCBzaG93cyBwcmVmZXJlbmNlcyBVSSAqL1xuY29uc3QgU3RyZWFtUHJldmlldzogUmVhY3QuRkM8eyBpbnB1dDogSW5wdXQgfT4gPSAoeyBpbnB1dCB9KSA9PiB7XG4gIGNvbnN0IHsgaXNIaWdoQ29udHJhc3QgfSA9IHVzZUNvbG9yU2NoZW1lKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICAgIGJvcmRlclJhZGl1czogMTIsXG4gICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgLi4uIWlucHV0SGFzRXJyb3IoaW5wdXQpICYmIHtcbiAgICAgICAgYm94U2hhZG93OiBpc0hpZ2hDb250cmFzdCA/IFwibm9uZVwiIDogXCIwIDZweCAxNnB4IHJnYmEoMCwgMCwgMCwgMC4yKVwiLFxuICAgICAgfSxcbiAgICAgIC4uLmlzSGlnaENvbnRyYXN0ICYmIHtcbiAgICAgICAgb3V0bGluZTogYDFweCBzb2xpZCAke0NPTE9SUy5uZXV0cmFsOTB9YCxcbiAgICAgIH0sXG4gICAgfX0+XG4gICAgICA8UHJldmlld1ZpZGVvIGlucHV0PXtpbnB1dH0gLz5cbiAgICAgIHtpbnB1dC5zdHJlYW0gJiYgPFN0cmVhbVNldHRpbmdzIGlzRGVza3RvcD17aW5wdXQuaXNEZXNrdG9wfSBzdHJlYW09e2lucHV0LnN0cmVhbX0gLz59XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBQcmV2aWV3VmlkZW86IFJlYWN0LkZDPHsgaW5wdXQ6IElucHV0IH0+ID0gKHsgaW5wdXQgfSkgPT4ge1xuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IHsgYWxsb3dlZCwgc3RyZWFtLCB1bmV4cGVjdGVkRW5kIH0gPSBpbnB1dDtcbiAgY29uc3QgcmVzaXplVmlkZW9Cb3ggPSB1c2VWaWRlb0JveFJlc2l6ZSgpO1xuXG4gIGNvbnN0IHZpZGVvUmVmID0gdXNlUmVmPEhUTUxWaWRlb0VsZW1lbnQ+KG51bGwpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHYgPSB2aWRlb1JlZi5jdXJyZW50O1xuICAgIGlmICh2KSB7XG4gICAgICBpZiAoIXYuc3JjT2JqZWN0KSB7XG4gICAgICAgIHYuc3JjT2JqZWN0ID0gc3RyZWFtO1xuICAgICAgfVxuICAgICAgdi5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHJlc2l6ZVZpZGVvQm94KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHYpIHtcbiAgICAgICAgdi5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHJlc2l6ZVZpZGVvQm94KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbc3RyZWFtLCByZXNpemVWaWRlb0JveF0pO1xuXG4gIGlmICghc3RyZWFtKSB7XG4gICAgbGV0IGlubmVyOiBKU1guRWxlbWVudDtcbiAgICBpZiAoYWxsb3dlZCA9PT0gZmFsc2UgfHwgdW5leHBlY3RlZEVuZCkge1xuICAgICAgaW5uZXIgPSA8ZGl2PlxuICAgICAgICB7YWxsb3dlZCA9PT0gZmFsc2UgJiYgPEVycm9yQm94XG4gICAgICAgICAgY3NzPXt7IG1hcmdpbjogMCB9fVxuICAgICAgICAgIHRpdGxlPXt0KGBzdGVwcy52aWRlby4ke2lucHV0LmlzRGVza3RvcCA/IFwiZGlzcGxheVwiIDogXCJ1c2VyXCJ9LW5vdC1hbGxvd2VkLXRpdGxlYCl9XG4gICAgICAgICAgYm9keT17dChgc3RlcHMudmlkZW8uJHtpbnB1dC5pc0Rlc2t0b3AgPyBcImRpc3BsYXlcIiA6IFwidXNlclwifS1ub3QtYWxsb3dlZC10ZXh0YCl9XG4gICAgICAgIC8+fVxuICAgICAgICB7LyogVE9ETzogZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGRlc2t0b3AgYW5kIGNhbWVyYSBmb3IgYmV0dGVyIGVycm9yICovfVxuICAgICAgICB7dW5leHBlY3RlZEVuZCAmJiA8RXJyb3JCb3ggY3NzPXt7IG1hcmdpbjogMCB9fSBib2R5PXt0KFwiZXJyb3ItbG9zdC12aWRlby1zdHJlYW1cIil9IC8+fVxuICAgICAgPC9kaXY+O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbm5lciA9IDxTcGlubmVyIHNpemU9ezc1fSBjc3M9e3sgY29sb3I6IENPTE9SUy5uZXV0cmFsNjAgfX0gLz47XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICB9fT5cbiAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICBmbGV4OiBcIjFcIixcbiAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICB9fT5cbiAgICAgICAgICB7aW5uZXJ9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3tcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgfX0+XG4gICAgICA8dmlkZW9cbiAgICAgICAgcmVmPXt2aWRlb1JlZn1cbiAgICAgICAgYXV0b1BsYXlcbiAgICAgICAgbXV0ZWRcbiAgICAgICAgcGxheXNJbmxpbmVcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgbWluSGVpZ2h0OiAwLFxuICAgICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDEyLFxuICAgICAgICB9fVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iXX0= */\")\n      });\n    }\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n      css: _ref6,\n      children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n        css: _ref7,\n        children: inner\n      })\n    });\n  }\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n    css: _ref8,\n    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      muted: true,\n      playsInline: true,\n      css: _ref9\n    })\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RlcHMvdmlkZW8tc2V0dXAvcHJldmlldy50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTs7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFHQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5jYXN0LXN0dWRpby8uL3NyYy9zdGVwcy92aWRlby1zZXR1cC9wcmV2aWV3LnRzeD80Yzg5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTcGlubmVyLCBtYXRjaCwgdW5yZWFjaGFibGUsIHVzZUNvbG9yU2NoZW1lIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcblxuaW1wb3J0IHsgQ09MT1JTLCBkaW1lbnNpb25zT2YgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgU3RyZWFtU2V0dGluZ3MgfSBmcm9tIFwiLi9wcmVmc1wiO1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgVmlkZW9Cb3gsIHVzZVZpZGVvQm94UmVzaXplIH0gZnJvbSBcIi4uLy4uL3VpL1ZpZGVvQm94XCI7XG5pbXBvcnQgeyBFcnJvckJveCB9IGZyb20gXCIuLi8uLi91aS9FcnJvckJveFwiO1xuXG5cblxuZXhwb3J0IHR5cGUgU291cmNlUHJldmlld1Byb3BzID0ge1xuICBpbnB1dHM6IElucHV0W107XG59XG5cbi8qKlxuICogU2hvd3MgdGhlIHByZXZpZXcgZm9yIG9uZSBvciB0d28gaW5wdXQgc3RyZWFtcy4gVGhlIHByZXZpZXdzIGFsc28gc2hvd1xuICogcHJlZmVyZW5jZXMgYWxsb3dpbmcgdGhlIHVzZXIgdG8gY2hhbmdlIHRoZSB3ZWJjYW0gYW5kIHRoZSBsaWtlLlxuICovXG5leHBvcnQgY29uc3QgU291cmNlUHJldmlldzogUmVhY3QuRkM8U291cmNlUHJldmlld1Byb3BzPiA9ICh7IGlucHV0cyB9KSA9PiB7XG4gIGNvbnN0IGNoaWxkcmVuID0gbWF0Y2goaW5wdXRzLmxlbmd0aCwge1xuICAgIDE6ICgpID0+IFt7XG4gICAgICBib2R5OiA8U3RyZWFtUHJldmlldyBpbnB1dD17aW5wdXRzWzBdfSAvPixcbiAgICAgIGRpbWVuc2lvbnM6ICgpID0+IGRpbWVuc2lvbnNPZihpbnB1dHNbMF0uc3RyZWFtKSxcbiAgICAgIGF1dG9TaXplOiBpbnB1dEhhc0Vycm9yKGlucHV0c1swXSksXG4gICAgfV0sXG4gICAgMjogKCkgPT4gW1xuICAgICAge1xuICAgICAgICBib2R5OiA8U3RyZWFtUHJldmlldyBpbnB1dD17aW5wdXRzWzBdfSAvPixcbiAgICAgICAgZGltZW5zaW9uczogKCkgPT4gZGltZW5zaW9uc09mKGlucHV0c1swXS5zdHJlYW0pLFxuICAgICAgICBhdXRvU2l6ZTogaW5wdXRIYXNFcnJvcihpbnB1dHNbMF0pLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYm9keTogPFN0cmVhbVByZXZpZXcgaW5wdXQ9e2lucHV0c1sxXX0gLz4sXG4gICAgICAgIGRpbWVuc2lvbnM6ICgpID0+IGRpbWVuc2lvbnNPZihpbnB1dHNbMV0uc3RyZWFtKSxcbiAgICAgICAgYXV0b1NpemU6IGlucHV0SGFzRXJyb3IoaW5wdXRzWzFdKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSwgdW5yZWFjaGFibGUpO1xuXG4gIHJldHVybiA8VmlkZW9Cb3ggZ2FwPXsyMH0+e2NoaWxkcmVufTwvVmlkZW9Cb3g+O1xufTtcblxuY29uc3QgaW5wdXRIYXNFcnJvciA9IChpbnB1dDogSW5wdXQpOiBib29sZWFuID0+XG4gIGlucHV0LmFsbG93ZWQgPT09IGZhbHNlIHx8ICEhaW5wdXQudW5leHBlY3RlZEVuZDtcblxuLyoqIFNob3dzIGEgc2luZ2xlIHN0cmVhbSBhcyBwcmV2aWV3LCBkZWFscyB3aXRoIHBvdGVudGlhbCBlcnJvcnMgYW5kIHNob3dzIHByZWZlcmVuY2VzIFVJICovXG5jb25zdCBTdHJlYW1QcmV2aWV3OiBSZWFjdC5GQzx7IGlucHV0OiBJbnB1dCB9PiA9ICh7IGlucHV0IH0pID0+IHtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXt7XG4gICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgYm9yZGVyUmFkaXVzOiAxMixcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAuLi4haW5wdXRIYXNFcnJvcihpbnB1dCkgJiYge1xuICAgICAgICBib3hTaGFkb3c6IGlzSGlnaENvbnRyYXN0ID8gXCJub25lXCIgOiBcIjAgNnB4IDE2cHggcmdiYSgwLCAwLCAwLCAwLjIpXCIsXG4gICAgICB9LFxuICAgICAgLi4uaXNIaWdoQ29udHJhc3QgJiYge1xuICAgICAgICBvdXRsaW5lOiBgMXB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWw5MH1gLFxuICAgICAgfSxcbiAgICB9fT5cbiAgICAgIDxQcmV2aWV3VmlkZW8gaW5wdXQ9e2lucHV0fSAvPlxuICAgICAge2lucHV0LnN0cmVhbSAmJiA8U3RyZWFtU2V0dGluZ3MgaXNEZXNrdG9wPXtpbnB1dC5pc0Rlc2t0b3B9IHN0cmVhbT17aW5wdXQuc3RyZWFtfSAvPn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IFByZXZpZXdWaWRlbzogUmVhY3QuRkM8eyBpbnB1dDogSW5wdXQgfT4gPSAoeyBpbnB1dCB9KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgY29uc3QgeyBhbGxvd2VkLCBzdHJlYW0sIHVuZXhwZWN0ZWRFbmQgfSA9IGlucHV0O1xuICBjb25zdCByZXNpemVWaWRlb0JveCA9IHVzZVZpZGVvQm94UmVzaXplKCk7XG5cbiAgY29uc3QgdmlkZW9SZWYgPSB1c2VSZWY8SFRNTFZpZGVvRWxlbWVudD4obnVsbCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdiA9IHZpZGVvUmVmLmN1cnJlbnQ7XG4gICAgaWYgKHYpIHtcbiAgICAgIGlmICghdi5zcmNPYmplY3QpIHtcbiAgICAgICAgdi5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgICB9XG4gICAgICB2LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVmlkZW9Cb3gpO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAodikge1xuICAgICAgICB2LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVmlkZW9Cb3gpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtzdHJlYW0sIHJlc2l6ZVZpZGVvQm94XSk7XG5cbiAgaWYgKCFzdHJlYW0pIHtcbiAgICBsZXQgaW5uZXI6IEpTWC5FbGVtZW50O1xuICAgIGlmIChhbGxvd2VkID09PSBmYWxzZSB8fCB1bmV4cGVjdGVkRW5kKSB7XG4gICAgICBpbm5lciA9IDxkaXY+XG4gICAgICAgIHthbGxvd2VkID09PSBmYWxzZSAmJiA8RXJyb3JCb3hcbiAgICAgICAgICBjc3M9e3sgbWFyZ2luOiAwIH19XG4gICAgICAgICAgdGl0bGU9e3QoYHN0ZXBzLnZpZGVvLiR7aW5wdXQuaXNEZXNrdG9wID8gXCJkaXNwbGF5XCIgOiBcInVzZXJcIn0tbm90LWFsbG93ZWQtdGl0bGVgKX1cbiAgICAgICAgICBib2R5PXt0KGBzdGVwcy52aWRlby4ke2lucHV0LmlzRGVza3RvcCA/IFwiZGlzcGxheVwiIDogXCJ1c2VyXCJ9LW5vdC1hbGxvd2VkLXRleHRgKX1cbiAgICAgICAgLz59XG4gICAgICAgIHsvKiBUT0RPOiBkaWZmZXJlbnRpYXRlIGJldHdlZW4gZGVza3RvcCBhbmQgY2FtZXJhIGZvciBiZXR0ZXIgZXJyb3IgKi99XG4gICAgICAgIHt1bmV4cGVjdGVkRW5kICYmIDxFcnJvckJveCBjc3M9e3sgbWFyZ2luOiAwIH19IGJvZHk9e3QoXCJlcnJvci1sb3N0LXZpZGVvLXN0cmVhbVwiKX0gLz59XG4gICAgICA8L2Rpdj47XG4gICAgfSBlbHNlIHtcbiAgICAgIGlubmVyID0gPFNwaW5uZXIgc2l6ZT17NzV9IGNzcz17eyBjb2xvcjogQ09MT1JTLm5ldXRyYWw2MCB9fSAvPjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIH19PlxuICAgICAgICA8ZGl2IGNzcz17e1xuICAgICAgICAgIGZsZXg6IFwiMVwiLFxuICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIH19PlxuICAgICAgICAgIHtpbm5lcn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17e1xuICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICB9fT5cbiAgICAgIDx2aWRlb1xuICAgICAgICByZWY9e3ZpZGVvUmVmfVxuICAgICAgICBhdXRvUGxheVxuICAgICAgICBtdXRlZFxuICAgICAgICBwbGF5c0lubGluZVxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBtaW5IZWlnaHQ6IDAsXG4gICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICAgIGJvcmRlclJhZGl1czogMTIsXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/steps/video-setup/preview.tsx\n");

/***/ }),

/***/ "./src/steps/video-setup/source-select.tsx":
/*!*************************************************!*\
  !*** ./src/steps/video-setup/source-select.tsx ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SourceSelection: function() { return /* binding */ SourceSelection; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var _studio_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../studio-state */ \"./src/studio-state.tsx\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../settings */ \"./src/settings.tsx\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _capturer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../capturer */ \"./src/capturer.tsx\");\n/* harmony import */ var _ui_ErrorBox__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../ui/ErrorBox */ \"./src/ui/ErrorBox.tsx\");\n/* harmony import */ var _shortcuts__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../shortcuts */ \"./src/shortcuts.tsx\");\n/* harmony import */ var _ui_SourceOptionButton__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../ui/SourceOptionButton */ \"./src/ui/SourceOptionButton.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst SourceSelection = _ref => {\n  let {\n    setActiveSource,\n    userConstraints,\n    displayConstraints\n  } = _ref;\n  const {\n    t\n  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();\n  const settings = (0,_settings__WEBPACK_IMPORTED_MODULE_4__.useSettings)();\n  const dispatch = (0,_studio_state__WEBPACK_IMPORTED_MODULE_3__.useDispatch)();\n  const state = (0,_studio_state__WEBPACK_IMPORTED_MODULE_3__.useStudioState)();\n  const {\n    displaySupported,\n    userSupported\n  } = state;\n  const clickUser = async () => {\n    setActiveSource(\"user\");\n    await (0,_capturer__WEBPACK_IMPORTED_MODULE_6__.startUserCapture)(dispatch, settings, userConstraints);\n    await (0,_util__WEBPACK_IMPORTED_MODULE_5__.queryMediaDevices)(dispatch);\n  };\n  const clickDisplay = async () => {\n    setActiveSource(\"display\");\n    await (0,_capturer__WEBPACK_IMPORTED_MODULE_6__.startDisplayCapture)(dispatch, settings, displayConstraints);\n  };\n  const clickBoth = async () => {\n    setActiveSource(\"both\");\n    // Safari needs the display capture to be called first as otherwise\n    // it thinks `getDisplayMedia` is called without user gesture and\n    // throws an error.\n    if ((0,_util__WEBPACK_IMPORTED_MODULE_5__.onSafari)()) {\n      await (0,_capturer__WEBPACK_IMPORTED_MODULE_6__.startDisplayCapture)(dispatch, settings, displayConstraints);\n      await (0,_capturer__WEBPACK_IMPORTED_MODULE_6__.startUserCapture)(dispatch, settings, userConstraints);\n      await (0,_util__WEBPACK_IMPORTED_MODULE_5__.queryMediaDevices)(dispatch);\n    } else {\n      await (0,_capturer__WEBPACK_IMPORTED_MODULE_6__.startUserCapture)(dispatch, settings, userConstraints);\n      await Promise.all([(0,_util__WEBPACK_IMPORTED_MODULE_5__.queryMediaDevices)(dispatch), (0,_capturer__WEBPACK_IMPORTED_MODULE_6__.startDisplayCapture)(dispatch, settings, displayConstraints)]);\n    }\n  };\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_8__.useShortcut)(_shortcuts__WEBPACK_IMPORTED_MODULE_8__.SHORTCUTS.videoSetup.selectScreen, clickDisplay);\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_8__.useShortcut)(_shortcuts__WEBPACK_IMPORTED_MODULE_8__.SHORTCUTS.videoSetup.selectBoth, clickBoth);\n  (0,_shortcuts__WEBPACK_IMPORTED_MODULE_8__.useShortcut)(_shortcuts__WEBPACK_IMPORTED_MODULE_8__.SHORTCUTS.videoSetup.selectUser, clickUser);\n  const showShortcuts = (0,_shortcuts__WEBPACK_IMPORTED_MODULE_8__.useShowAvailableShortcuts)();\n  if (!displaySupported && !userSupported) {\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_ui_ErrorBox__WEBPACK_IMPORTED_MODULE_7__.ErrorBox, {\n      body: t(\"steps.video.none-available\")\n    });\n  }\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n      display: \"flex\",\n      gap: 24,\n      padding: 8,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      flex: \"1\",\n      [(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.screenWidthAtMost)(_util__WEBPACK_IMPORTED_MODULE_5__.BREAKPOINTS.medium)]: {\n        flexDirection: \"column\"\n      }\n    },  false ? 0 : \";label:SourceSelection;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3ZpZGVvLXNldHVwL3NvdXJjZS1zZWxlY3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlFTSIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9zdGVwcy92aWRlby1zZXR1cC9zb3VyY2Utc2VsZWN0LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCB7IHNjcmVlbldpZHRoQXRNb3N0IH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcbmltcG9ydCB7IEZpTW9uaXRvciwgRmlVc2VyIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTdHVkaW9TdGF0ZSwgVmlkZW9Tb3VyY2UgfSBmcm9tIFwiLi4vLi4vc3R1ZGlvLXN0YXRlXCI7XG5pbXBvcnQgeyB1c2VTZXR0aW5ncyB9IGZyb20gXCIuLi8uLi9zZXR0aW5nc1wiO1xuaW1wb3J0IHsgcXVlcnlNZWRpYURldmljZXMsIG9uTW9iaWxlRGV2aWNlLCBCUkVBS1BPSU5UUywgb25TYWZhcmkgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgc3RhcnREaXNwbGF5Q2FwdHVyZSwgc3RhcnRVc2VyQ2FwdHVyZSB9IGZyb20gXCIuLi8uLi9jYXB0dXJlclwiO1xuaW1wb3J0IHsgRXJyb3JCb3ggfSBmcm9tIFwiLi4vLi4vdWkvRXJyb3JCb3hcIjtcbmltcG9ydCB7IFNIT1JUQ1VUUywgdXNlU2hvcnRjdXQsIHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMgfSBmcm9tIFwiLi4vLi4vc2hvcnRjdXRzXCI7XG5pbXBvcnQgeyBTb3VyY2VPcHRpb25CdXR0b24gfSBmcm9tIFwiLi4vLi4vdWkvU291cmNlT3B0aW9uQnV0dG9uXCI7XG5cblxuXG50eXBlIFNvdXJjZVNlbGVjdGlvblByb3BzID0ge1xuICBzZXRBY3RpdmVTb3VyY2U6IChzOiBWaWRlb1NvdXJjZSkgPT4gdm9pZDtcbiAgdXNlckNvbnN0cmFpbnRzOiBNZWRpYVRyYWNrQ29uc3RyYWludHM7XG4gIGRpc3BsYXlDb25zdHJhaW50czogTWVkaWFUcmFja0NvbnN0cmFpbnRzO1xufTtcblxuZXhwb3J0IGNvbnN0IFNvdXJjZVNlbGVjdGlvbjogUmVhY3QuRkM8U291cmNlU2VsZWN0aW9uUHJvcHM+ID0gKHtcbiAgc2V0QWN0aXZlU291cmNlLFxuICB1c2VyQ29uc3RyYWludHMsXG4gIGRpc3BsYXlDb25zdHJhaW50cyxcbn0pID0+IHtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuXG4gIGNvbnN0IHNldHRpbmdzID0gdXNlU2V0dGluZ3MoKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBzdGF0ZSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IHsgZGlzcGxheVN1cHBvcnRlZCwgdXNlclN1cHBvcnRlZCB9ID0gc3RhdGU7XG5cbiAgY29uc3QgY2xpY2tVc2VyID0gYXN5bmMgKCkgPT4ge1xuICAgIHNldEFjdGl2ZVNvdXJjZShcInVzZXJcIik7XG4gICAgYXdhaXQgc3RhcnRVc2VyQ2FwdHVyZShkaXNwYXRjaCwgc2V0dGluZ3MsIHVzZXJDb25zdHJhaW50cyk7XG4gICAgYXdhaXQgcXVlcnlNZWRpYURldmljZXMoZGlzcGF0Y2gpO1xuICB9O1xuXG4gIGNvbnN0IGNsaWNrRGlzcGxheSA9IGFzeW5jICgpID0+IHtcbiAgICBzZXRBY3RpdmVTb3VyY2UoXCJkaXNwbGF5XCIpO1xuICAgIGF3YWl0IHN0YXJ0RGlzcGxheUNhcHR1cmUoZGlzcGF0Y2gsIHNldHRpbmdzLCBkaXNwbGF5Q29uc3RyYWludHMpO1xuICB9O1xuXG4gIGNvbnN0IGNsaWNrQm90aCA9IGFzeW5jICgpID0+IHtcbiAgICBzZXRBY3RpdmVTb3VyY2UoXCJib3RoXCIpO1xuICAgIC8vIFNhZmFyaSBuZWVkcyB0aGUgZGlzcGxheSBjYXB0dXJlIHRvIGJlIGNhbGxlZCBmaXJzdCBhcyBvdGhlcndpc2VcbiAgICAvLyBpdCB0aGlua3MgYGdldERpc3BsYXlNZWRpYWAgaXMgY2FsbGVkIHdpdGhvdXQgdXNlciBnZXN0dXJlIGFuZFxuICAgIC8vIHRocm93cyBhbiBlcnJvci5cbiAgICBpZiAob25TYWZhcmkoKSkge1xuICAgICAgYXdhaXQgc3RhcnREaXNwbGF5Q2FwdHVyZShkaXNwYXRjaCwgc2V0dGluZ3MsIGRpc3BsYXlDb25zdHJhaW50cyk7XG4gICAgICBhd2FpdCBzdGFydFVzZXJDYXB0dXJlKGRpc3BhdGNoLCBzZXR0aW5ncywgdXNlckNvbnN0cmFpbnRzKTtcbiAgICAgIGF3YWl0IHF1ZXJ5TWVkaWFEZXZpY2VzKGRpc3BhdGNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgc3RhcnRVc2VyQ2FwdHVyZShkaXNwYXRjaCwgc2V0dGluZ3MsIHVzZXJDb25zdHJhaW50cyk7XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIHF1ZXJ5TWVkaWFEZXZpY2VzKGRpc3BhdGNoKSxcbiAgICAgICAgc3RhcnREaXNwbGF5Q2FwdHVyZShkaXNwYXRjaCwgc2V0dGluZ3MsIGRpc3BsYXlDb25zdHJhaW50cyksXG4gICAgICBdKTtcbiAgICB9XG4gIH07XG5cbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLnZpZGVvU2V0dXAuc2VsZWN0U2NyZWVuLCBjbGlja0Rpc3BsYXkpO1xuICB1c2VTaG9ydGN1dChTSE9SVENVVFMudmlkZW9TZXR1cC5zZWxlY3RCb3RoLCBjbGlja0JvdGgpO1xuICB1c2VTaG9ydGN1dChTSE9SVENVVFMudmlkZW9TZXR1cC5zZWxlY3RVc2VyLCBjbGlja1VzZXIpO1xuICBjb25zdCBzaG93U2hvcnRjdXRzID0gdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cygpO1xuXG4gIGlmICghZGlzcGxheVN1cHBvcnRlZCAmJiAhdXNlclN1cHBvcnRlZCkge1xuICAgIHJldHVybiA8RXJyb3JCb3ggYm9keT17dChcInN0ZXBzLnZpZGVvLm5vbmUtYXZhaWxhYmxlXCIpfSAvPjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY3NzPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBnYXA6IDI0LFxuICAgICAgICBwYWRkaW5nOiA4LFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgZmxleDogXCIxXCIsXG4gICAgICAgIFtzY3JlZW5XaWR0aEF0TW9zdChCUkVBS1BPSU5UUy5tZWRpdW0pXToge1xuICAgICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIH0sXG4gICAgICB9fVxuICAgID5cbiAgICAgIHsoZGlzcGxheVN1cHBvcnRlZCB8fCAhb25Nb2JpbGVEZXZpY2UoKSkgJiYgPFNvdXJjZU9wdGlvbkJ1dHRvblxuICAgICAgICBsYWJlbD17dChcInNvdXJjZXMtc2NlbmFyaW8tZGlzcGxheVwiKX1cbiAgICAgICAgYXJpYUxhYmVsPXt0KFwic3RlcHMudmlkZW8uc2hhcmUtZGlzcGxheVwiKX1cbiAgICAgICAgaWNvbj17PEZpTW9uaXRvciAvPn1cbiAgICAgICAgb25DbGljaz17Y2xpY2tEaXNwbGF5fVxuICAgICAgICBkaXNhYmxlZFRleHQ9e2Rpc3BsYXlTdXBwb3J0ZWQgPyBmYWxzZSA6IHQoXCJzdGVwcy52aWRlby5kaXNwbGF5LW5vdC1zdXBwb3J0ZWRcIil9XG4gICAgICAgIHNob3J0Y3V0PXtzaG93U2hvcnRjdXRzID8gU0hPUlRDVVRTLnZpZGVvU2V0dXAuc2VsZWN0U2NyZWVuIDogdW5kZWZpbmVkfVxuICAgICAgLz59XG4gICAgICB7KGRpc3BsYXlTdXBwb3J0ZWQgfHwgIW9uTW9iaWxlRGV2aWNlKCkpICYmIHVzZXJTdXBwb3J0ZWQgJiYgPFNvdXJjZU9wdGlvbkJ1dHRvblxuICAgICAgICBsYWJlbD17dChcInNvdXJjZXMtc2NlbmFyaW8tZGlzcGxheS1hbmQtdXNlclwiKX1cbiAgICAgICAgYXJpYUxhYmVsPXt0KFwic3RlcHMudmlkZW8uc2hhcmUtZGlzcGxheS1hbmQtdXNlclwiKX1cbiAgICAgICAgaWNvbj17KFxuICAgICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiAwLFxuICAgICAgICAgICAgLy8gVGhlIHR3byBpY29ucyBhcmUgYSBiaXQgc21hbGxlciwgYnV0IHdlIG1ha2Ugc3VyZSB0aGF0IHRoZXkgaGF2ZVxuICAgICAgICAgICAgLy8gdGhlIHNhbWUgYWJzb2x1dGUgc3Ryb2tlIHdpZHRoLlxuICAgICAgICAgICAgZm9udFNpemU6IFwiMC44ZW1cIixcbiAgICAgICAgICAgIHN2ZzogeyBzdHJva2VXaWR0aDogMiAvIDAuOCB9LFxuICAgICAgICAgIH19PlxuICAgICAgICAgICAgPEZpTW9uaXRvciAvPlxuICAgICAgICAgICAgPEZpVXNlciAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgICBvbkNsaWNrPXtjbGlja0JvdGh9XG4gICAgICAgIGRpc2FibGVkVGV4dD17XG4gICAgICAgICAgZGlzcGxheVN1cHBvcnRlZFxuICAgICAgICAgICAgPyAoc3RhdGUuaGFzV2ViY2FtID8gZmFsc2UgOiB0KFwic3RlcHMudmlkZW8ubm8tY2FtLWRldGVjdGVkXCIpKVxuICAgICAgICAgICAgOiB0KFwic3RlcHMudmlkZW8uZGlzcGxheS1ub3Qtc3VwcG9ydGVkXCIpXG4gICAgICAgIH1cbiAgICAgICAgc2hvcnRjdXQ9e3Nob3dTaG9ydGN1dHMgPyBTSE9SVENVVFMudmlkZW9TZXR1cC5zZWxlY3RCb3RoIDogdW5kZWZpbmVkfVxuICAgICAgLz59XG4gICAgICB7dXNlclN1cHBvcnRlZCAmJiA8U291cmNlT3B0aW9uQnV0dG9uXG4gICAgICAgIGxhYmVsPXt0KFwic291cmNlcy1zY2VuYXJpby11c2VyXCIpfVxuICAgICAgICBhcmlhTGFiZWw9e3QoXCJzdGVwcy52aWRlby5zaGFyZS11c2VyXCIpfVxuICAgICAgICBpY29uPXs8RmlVc2VyIC8+fVxuICAgICAgICBvbkNsaWNrPXtjbGlja1VzZXJ9XG4gICAgICAgIGRpc2FibGVkVGV4dD17c3RhdGUuaGFzV2ViY2FtID8gZmFsc2UgOiB0KFwic3RlcHMudmlkZW8ubm8tY2FtLWRldGVjdGVkXCIpfVxuICAgICAgICBzaG9ydGN1dD17c2hvd1Nob3J0Y3V0cyA/IFNIT1JUQ1VUUy52aWRlb1NldHVwLnNlbGVjdFVzZXIgOiB1bmRlZmluZWR9XG4gICAgICAvPn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iXX0= */\"),\n    children: [(displaySupported || !(0,_util__WEBPACK_IMPORTED_MODULE_5__.onMobileDevice)()) && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_ui_SourceOptionButton__WEBPACK_IMPORTED_MODULE_9__.SourceOptionButton, {\n      label: t(\"sources-scenario-display\"),\n      ariaLabel: t(\"steps.video.share-display\"),\n      icon: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_12__.FiMonitor, {}),\n      onClick: clickDisplay,\n      disabledText: displaySupported ? false : t(\"steps.video.display-not-supported\"),\n      shortcut: showShortcuts ? _shortcuts__WEBPACK_IMPORTED_MODULE_8__.SHORTCUTS.videoSetup.selectScreen : undefined\n    }), (displaySupported || !(0,_util__WEBPACK_IMPORTED_MODULE_5__.onMobileDevice)()) && userSupported && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_ui_SourceOptionButton__WEBPACK_IMPORTED_MODULE_9__.SourceOptionButton, {\n      label: t(\"sources-scenario-display-and-user\"),\n      ariaLabel: t(\"steps.video.share-display-and-user\"),\n      icon: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n        css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_11__.css)({\n          lineHeight: 0,\n          // The two icons are a bit smaller, but we make sure that they have\n          // the same absolute stroke width.\n          fontSize: \"0.8em\",\n          svg: {\n            strokeWidth: 2 / 0.8\n          }\n        },  false ? 0 : \";label:SourceSelection;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3N0ZXBzL3ZpZGVvLXNldHVwL3NvdXJjZS1zZWxlY3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlHZSIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy9zdGVwcy92aWRlby1zZXR1cC9zb3VyY2Utc2VsZWN0LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCB7IHNjcmVlbldpZHRoQXRNb3N0IH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcbmltcG9ydCB7IEZpTW9uaXRvciwgRmlVc2VyIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTdHVkaW9TdGF0ZSwgVmlkZW9Tb3VyY2UgfSBmcm9tIFwiLi4vLi4vc3R1ZGlvLXN0YXRlXCI7XG5pbXBvcnQgeyB1c2VTZXR0aW5ncyB9IGZyb20gXCIuLi8uLi9zZXR0aW5nc1wiO1xuaW1wb3J0IHsgcXVlcnlNZWRpYURldmljZXMsIG9uTW9iaWxlRGV2aWNlLCBCUkVBS1BPSU5UUywgb25TYWZhcmkgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgc3RhcnREaXNwbGF5Q2FwdHVyZSwgc3RhcnRVc2VyQ2FwdHVyZSB9IGZyb20gXCIuLi8uLi9jYXB0dXJlclwiO1xuaW1wb3J0IHsgRXJyb3JCb3ggfSBmcm9tIFwiLi4vLi4vdWkvRXJyb3JCb3hcIjtcbmltcG9ydCB7IFNIT1JUQ1VUUywgdXNlU2hvcnRjdXQsIHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMgfSBmcm9tIFwiLi4vLi4vc2hvcnRjdXRzXCI7XG5pbXBvcnQgeyBTb3VyY2VPcHRpb25CdXR0b24gfSBmcm9tIFwiLi4vLi4vdWkvU291cmNlT3B0aW9uQnV0dG9uXCI7XG5cblxuXG50eXBlIFNvdXJjZVNlbGVjdGlvblByb3BzID0ge1xuICBzZXRBY3RpdmVTb3VyY2U6IChzOiBWaWRlb1NvdXJjZSkgPT4gdm9pZDtcbiAgdXNlckNvbnN0cmFpbnRzOiBNZWRpYVRyYWNrQ29uc3RyYWludHM7XG4gIGRpc3BsYXlDb25zdHJhaW50czogTWVkaWFUcmFja0NvbnN0cmFpbnRzO1xufTtcblxuZXhwb3J0IGNvbnN0IFNvdXJjZVNlbGVjdGlvbjogUmVhY3QuRkM8U291cmNlU2VsZWN0aW9uUHJvcHM+ID0gKHtcbiAgc2V0QWN0aXZlU291cmNlLFxuICB1c2VyQ29uc3RyYWludHMsXG4gIGRpc3BsYXlDb25zdHJhaW50cyxcbn0pID0+IHtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuXG4gIGNvbnN0IHNldHRpbmdzID0gdXNlU2V0dGluZ3MoKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBzdGF0ZSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IHsgZGlzcGxheVN1cHBvcnRlZCwgdXNlclN1cHBvcnRlZCB9ID0gc3RhdGU7XG5cbiAgY29uc3QgY2xpY2tVc2VyID0gYXN5bmMgKCkgPT4ge1xuICAgIHNldEFjdGl2ZVNvdXJjZShcInVzZXJcIik7XG4gICAgYXdhaXQgc3RhcnRVc2VyQ2FwdHVyZShkaXNwYXRjaCwgc2V0dGluZ3MsIHVzZXJDb25zdHJhaW50cyk7XG4gICAgYXdhaXQgcXVlcnlNZWRpYURldmljZXMoZGlzcGF0Y2gpO1xuICB9O1xuXG4gIGNvbnN0IGNsaWNrRGlzcGxheSA9IGFzeW5jICgpID0+IHtcbiAgICBzZXRBY3RpdmVTb3VyY2UoXCJkaXNwbGF5XCIpO1xuICAgIGF3YWl0IHN0YXJ0RGlzcGxheUNhcHR1cmUoZGlzcGF0Y2gsIHNldHRpbmdzLCBkaXNwbGF5Q29uc3RyYWludHMpO1xuICB9O1xuXG4gIGNvbnN0IGNsaWNrQm90aCA9IGFzeW5jICgpID0+IHtcbiAgICBzZXRBY3RpdmVTb3VyY2UoXCJib3RoXCIpO1xuICAgIC8vIFNhZmFyaSBuZWVkcyB0aGUgZGlzcGxheSBjYXB0dXJlIHRvIGJlIGNhbGxlZCBmaXJzdCBhcyBvdGhlcndpc2VcbiAgICAvLyBpdCB0aGlua3MgYGdldERpc3BsYXlNZWRpYWAgaXMgY2FsbGVkIHdpdGhvdXQgdXNlciBnZXN0dXJlIGFuZFxuICAgIC8vIHRocm93cyBhbiBlcnJvci5cbiAgICBpZiAob25TYWZhcmkoKSkge1xuICAgICAgYXdhaXQgc3RhcnREaXNwbGF5Q2FwdHVyZShkaXNwYXRjaCwgc2V0dGluZ3MsIGRpc3BsYXlDb25zdHJhaW50cyk7XG4gICAgICBhd2FpdCBzdGFydFVzZXJDYXB0dXJlKGRpc3BhdGNoLCBzZXR0aW5ncywgdXNlckNvbnN0cmFpbnRzKTtcbiAgICAgIGF3YWl0IHF1ZXJ5TWVkaWFEZXZpY2VzKGRpc3BhdGNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgc3RhcnRVc2VyQ2FwdHVyZShkaXNwYXRjaCwgc2V0dGluZ3MsIHVzZXJDb25zdHJhaW50cyk7XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIHF1ZXJ5TWVkaWFEZXZpY2VzKGRpc3BhdGNoKSxcbiAgICAgICAgc3RhcnREaXNwbGF5Q2FwdHVyZShkaXNwYXRjaCwgc2V0dGluZ3MsIGRpc3BsYXlDb25zdHJhaW50cyksXG4gICAgICBdKTtcbiAgICB9XG4gIH07XG5cbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLnZpZGVvU2V0dXAuc2VsZWN0U2NyZWVuLCBjbGlja0Rpc3BsYXkpO1xuICB1c2VTaG9ydGN1dChTSE9SVENVVFMudmlkZW9TZXR1cC5zZWxlY3RCb3RoLCBjbGlja0JvdGgpO1xuICB1c2VTaG9ydGN1dChTSE9SVENVVFMudmlkZW9TZXR1cC5zZWxlY3RVc2VyLCBjbGlja1VzZXIpO1xuICBjb25zdCBzaG93U2hvcnRjdXRzID0gdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cygpO1xuXG4gIGlmICghZGlzcGxheVN1cHBvcnRlZCAmJiAhdXNlclN1cHBvcnRlZCkge1xuICAgIHJldHVybiA8RXJyb3JCb3ggYm9keT17dChcInN0ZXBzLnZpZGVvLm5vbmUtYXZhaWxhYmxlXCIpfSAvPjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY3NzPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBnYXA6IDI0LFxuICAgICAgICBwYWRkaW5nOiA4LFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgZmxleDogXCIxXCIsXG4gICAgICAgIFtzY3JlZW5XaWR0aEF0TW9zdChCUkVBS1BPSU5UUy5tZWRpdW0pXToge1xuICAgICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIH0sXG4gICAgICB9fVxuICAgID5cbiAgICAgIHsoZGlzcGxheVN1cHBvcnRlZCB8fCAhb25Nb2JpbGVEZXZpY2UoKSkgJiYgPFNvdXJjZU9wdGlvbkJ1dHRvblxuICAgICAgICBsYWJlbD17dChcInNvdXJjZXMtc2NlbmFyaW8tZGlzcGxheVwiKX1cbiAgICAgICAgYXJpYUxhYmVsPXt0KFwic3RlcHMudmlkZW8uc2hhcmUtZGlzcGxheVwiKX1cbiAgICAgICAgaWNvbj17PEZpTW9uaXRvciAvPn1cbiAgICAgICAgb25DbGljaz17Y2xpY2tEaXNwbGF5fVxuICAgICAgICBkaXNhYmxlZFRleHQ9e2Rpc3BsYXlTdXBwb3J0ZWQgPyBmYWxzZSA6IHQoXCJzdGVwcy52aWRlby5kaXNwbGF5LW5vdC1zdXBwb3J0ZWRcIil9XG4gICAgICAgIHNob3J0Y3V0PXtzaG93U2hvcnRjdXRzID8gU0hPUlRDVVRTLnZpZGVvU2V0dXAuc2VsZWN0U2NyZWVuIDogdW5kZWZpbmVkfVxuICAgICAgLz59XG4gICAgICB7KGRpc3BsYXlTdXBwb3J0ZWQgfHwgIW9uTW9iaWxlRGV2aWNlKCkpICYmIHVzZXJTdXBwb3J0ZWQgJiYgPFNvdXJjZU9wdGlvbkJ1dHRvblxuICAgICAgICBsYWJlbD17dChcInNvdXJjZXMtc2NlbmFyaW8tZGlzcGxheS1hbmQtdXNlclwiKX1cbiAgICAgICAgYXJpYUxhYmVsPXt0KFwic3RlcHMudmlkZW8uc2hhcmUtZGlzcGxheS1hbmQtdXNlclwiKX1cbiAgICAgICAgaWNvbj17KFxuICAgICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiAwLFxuICAgICAgICAgICAgLy8gVGhlIHR3byBpY29ucyBhcmUgYSBiaXQgc21hbGxlciwgYnV0IHdlIG1ha2Ugc3VyZSB0aGF0IHRoZXkgaGF2ZVxuICAgICAgICAgICAgLy8gdGhlIHNhbWUgYWJzb2x1dGUgc3Ryb2tlIHdpZHRoLlxuICAgICAgICAgICAgZm9udFNpemU6IFwiMC44ZW1cIixcbiAgICAgICAgICAgIHN2ZzogeyBzdHJva2VXaWR0aDogMiAvIDAuOCB9LFxuICAgICAgICAgIH19PlxuICAgICAgICAgICAgPEZpTW9uaXRvciAvPlxuICAgICAgICAgICAgPEZpVXNlciAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgICBvbkNsaWNrPXtjbGlja0JvdGh9XG4gICAgICAgIGRpc2FibGVkVGV4dD17XG4gICAgICAgICAgZGlzcGxheVN1cHBvcnRlZFxuICAgICAgICAgICAgPyAoc3RhdGUuaGFzV2ViY2FtID8gZmFsc2UgOiB0KFwic3RlcHMudmlkZW8ubm8tY2FtLWRldGVjdGVkXCIpKVxuICAgICAgICAgICAgOiB0KFwic3RlcHMudmlkZW8uZGlzcGxheS1ub3Qtc3VwcG9ydGVkXCIpXG4gICAgICAgIH1cbiAgICAgICAgc2hvcnRjdXQ9e3Nob3dTaG9ydGN1dHMgPyBTSE9SVENVVFMudmlkZW9TZXR1cC5zZWxlY3RCb3RoIDogdW5kZWZpbmVkfVxuICAgICAgLz59XG4gICAgICB7dXNlclN1cHBvcnRlZCAmJiA8U291cmNlT3B0aW9uQnV0dG9uXG4gICAgICAgIGxhYmVsPXt0KFwic291cmNlcy1zY2VuYXJpby11c2VyXCIpfVxuICAgICAgICBhcmlhTGFiZWw9e3QoXCJzdGVwcy52aWRlby5zaGFyZS11c2VyXCIpfVxuICAgICAgICBpY29uPXs8RmlVc2VyIC8+fVxuICAgICAgICBvbkNsaWNrPXtjbGlja1VzZXJ9XG4gICAgICAgIGRpc2FibGVkVGV4dD17c3RhdGUuaGFzV2ViY2FtID8gZmFsc2UgOiB0KFwic3RlcHMudmlkZW8ubm8tY2FtLWRldGVjdGVkXCIpfVxuICAgICAgICBzaG9ydGN1dD17c2hvd1Nob3J0Y3V0cyA/IFNIT1JUQ1VUUy52aWRlb1NldHVwLnNlbGVjdFVzZXIgOiB1bmRlZmluZWR9XG4gICAgICAvPn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iXX0= */\"),\n        children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_12__.FiMonitor, {}), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_12__.FiUser, {})]\n      }),\n      onClick: clickBoth,\n      disabledText: displaySupported ? state.hasWebcam ? false : t(\"steps.video.no-cam-detected\") : t(\"steps.video.display-not-supported\"),\n      shortcut: showShortcuts ? _shortcuts__WEBPACK_IMPORTED_MODULE_8__.SHORTCUTS.videoSetup.selectBoth : undefined\n    }), userSupported && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_ui_SourceOptionButton__WEBPACK_IMPORTED_MODULE_9__.SourceOptionButton, {\n      label: t(\"sources-scenario-user\"),\n      ariaLabel: t(\"steps.video.share-user\"),\n      icon: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(react_icons_fi__WEBPACK_IMPORTED_MODULE_12__.FiUser, {}),\n      onClick: clickUser,\n      disabledText: state.hasWebcam ? false : t(\"steps.video.no-cam-detected\"),\n      shortcut: showShortcuts ? _shortcuts__WEBPACK_IMPORTED_MODULE_8__.SHORTCUTS.videoSetup.selectUser : undefined\n    })]\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RlcHMvdmlkZW8tc2V0dXAvc291cmNlLXNlbGVjdC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBVUE7QUFJQTtBQUhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBRUE7QUFHQTtBQUNBO0FBS0E7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5jYXN0LXN0dWRpby8uL3NyYy9zdGVwcy92aWRlby1zZXR1cC9zb3VyY2Utc2VsZWN0LnRzeD80OTE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcbmltcG9ydCB7IHNjcmVlbldpZHRoQXRNb3N0IH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcbmltcG9ydCB7IEZpTW9uaXRvciwgRmlVc2VyIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCI7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTdHVkaW9TdGF0ZSwgVmlkZW9Tb3VyY2UgfSBmcm9tIFwiLi4vLi4vc3R1ZGlvLXN0YXRlXCI7XG5pbXBvcnQgeyB1c2VTZXR0aW5ncyB9IGZyb20gXCIuLi8uLi9zZXR0aW5nc1wiO1xuaW1wb3J0IHsgcXVlcnlNZWRpYURldmljZXMsIG9uTW9iaWxlRGV2aWNlLCBCUkVBS1BPSU5UUywgb25TYWZhcmkgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgc3RhcnREaXNwbGF5Q2FwdHVyZSwgc3RhcnRVc2VyQ2FwdHVyZSB9IGZyb20gXCIuLi8uLi9jYXB0dXJlclwiO1xuaW1wb3J0IHsgRXJyb3JCb3ggfSBmcm9tIFwiLi4vLi4vdWkvRXJyb3JCb3hcIjtcbmltcG9ydCB7IFNIT1JUQ1VUUywgdXNlU2hvcnRjdXQsIHVzZVNob3dBdmFpbGFibGVTaG9ydGN1dHMgfSBmcm9tIFwiLi4vLi4vc2hvcnRjdXRzXCI7XG5pbXBvcnQgeyBTb3VyY2VPcHRpb25CdXR0b24gfSBmcm9tIFwiLi4vLi4vdWkvU291cmNlT3B0aW9uQnV0dG9uXCI7XG5cblxuXG50eXBlIFNvdXJjZVNlbGVjdGlvblByb3BzID0ge1xuICBzZXRBY3RpdmVTb3VyY2U6IChzOiBWaWRlb1NvdXJjZSkgPT4gdm9pZDtcbiAgdXNlckNvbnN0cmFpbnRzOiBNZWRpYVRyYWNrQ29uc3RyYWludHM7XG4gIGRpc3BsYXlDb25zdHJhaW50czogTWVkaWFUcmFja0NvbnN0cmFpbnRzO1xufTtcblxuZXhwb3J0IGNvbnN0IFNvdXJjZVNlbGVjdGlvbjogUmVhY3QuRkM8U291cmNlU2VsZWN0aW9uUHJvcHM+ID0gKHtcbiAgc2V0QWN0aXZlU291cmNlLFxuICB1c2VyQ29uc3RyYWludHMsXG4gIGRpc3BsYXlDb25zdHJhaW50cyxcbn0pID0+IHtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuXG4gIGNvbnN0IHNldHRpbmdzID0gdXNlU2V0dGluZ3MoKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBzdGF0ZSA9IHVzZVN0dWRpb1N0YXRlKCk7XG4gIGNvbnN0IHsgZGlzcGxheVN1cHBvcnRlZCwgdXNlclN1cHBvcnRlZCB9ID0gc3RhdGU7XG5cbiAgY29uc3QgY2xpY2tVc2VyID0gYXN5bmMgKCkgPT4ge1xuICAgIHNldEFjdGl2ZVNvdXJjZShcInVzZXJcIik7XG4gICAgYXdhaXQgc3RhcnRVc2VyQ2FwdHVyZShkaXNwYXRjaCwgc2V0dGluZ3MsIHVzZXJDb25zdHJhaW50cyk7XG4gICAgYXdhaXQgcXVlcnlNZWRpYURldmljZXMoZGlzcGF0Y2gpO1xuICB9O1xuXG4gIGNvbnN0IGNsaWNrRGlzcGxheSA9IGFzeW5jICgpID0+IHtcbiAgICBzZXRBY3RpdmVTb3VyY2UoXCJkaXNwbGF5XCIpO1xuICAgIGF3YWl0IHN0YXJ0RGlzcGxheUNhcHR1cmUoZGlzcGF0Y2gsIHNldHRpbmdzLCBkaXNwbGF5Q29uc3RyYWludHMpO1xuICB9O1xuXG4gIGNvbnN0IGNsaWNrQm90aCA9IGFzeW5jICgpID0+IHtcbiAgICBzZXRBY3RpdmVTb3VyY2UoXCJib3RoXCIpO1xuICAgIC8vIFNhZmFyaSBuZWVkcyB0aGUgZGlzcGxheSBjYXB0dXJlIHRvIGJlIGNhbGxlZCBmaXJzdCBhcyBvdGhlcndpc2VcbiAgICAvLyBpdCB0aGlua3MgYGdldERpc3BsYXlNZWRpYWAgaXMgY2FsbGVkIHdpdGhvdXQgdXNlciBnZXN0dXJlIGFuZFxuICAgIC8vIHRocm93cyBhbiBlcnJvci5cbiAgICBpZiAob25TYWZhcmkoKSkge1xuICAgICAgYXdhaXQgc3RhcnREaXNwbGF5Q2FwdHVyZShkaXNwYXRjaCwgc2V0dGluZ3MsIGRpc3BsYXlDb25zdHJhaW50cyk7XG4gICAgICBhd2FpdCBzdGFydFVzZXJDYXB0dXJlKGRpc3BhdGNoLCBzZXR0aW5ncywgdXNlckNvbnN0cmFpbnRzKTtcbiAgICAgIGF3YWl0IHF1ZXJ5TWVkaWFEZXZpY2VzKGRpc3BhdGNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgc3RhcnRVc2VyQ2FwdHVyZShkaXNwYXRjaCwgc2V0dGluZ3MsIHVzZXJDb25zdHJhaW50cyk7XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIHF1ZXJ5TWVkaWFEZXZpY2VzKGRpc3BhdGNoKSxcbiAgICAgICAgc3RhcnREaXNwbGF5Q2FwdHVyZShkaXNwYXRjaCwgc2V0dGluZ3MsIGRpc3BsYXlDb25zdHJhaW50cyksXG4gICAgICBdKTtcbiAgICB9XG4gIH07XG5cbiAgdXNlU2hvcnRjdXQoU0hPUlRDVVRTLnZpZGVvU2V0dXAuc2VsZWN0U2NyZWVuLCBjbGlja0Rpc3BsYXkpO1xuICB1c2VTaG9ydGN1dChTSE9SVENVVFMudmlkZW9TZXR1cC5zZWxlY3RCb3RoLCBjbGlja0JvdGgpO1xuICB1c2VTaG9ydGN1dChTSE9SVENVVFMudmlkZW9TZXR1cC5zZWxlY3RVc2VyLCBjbGlja1VzZXIpO1xuICBjb25zdCBzaG93U2hvcnRjdXRzID0gdXNlU2hvd0F2YWlsYWJsZVNob3J0Y3V0cygpO1xuXG4gIGlmICghZGlzcGxheVN1cHBvcnRlZCAmJiAhdXNlclN1cHBvcnRlZCkge1xuICAgIHJldHVybiA8RXJyb3JCb3ggYm9keT17dChcInN0ZXBzLnZpZGVvLm5vbmUtYXZhaWxhYmxlXCIpfSAvPjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY3NzPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBnYXA6IDI0LFxuICAgICAgICBwYWRkaW5nOiA4LFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgZmxleDogXCIxXCIsXG4gICAgICAgIFtzY3JlZW5XaWR0aEF0TW9zdChCUkVBS1BPSU5UUy5tZWRpdW0pXToge1xuICAgICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIH0sXG4gICAgICB9fVxuICAgID5cbiAgICAgIHsoZGlzcGxheVN1cHBvcnRlZCB8fCAhb25Nb2JpbGVEZXZpY2UoKSkgJiYgPFNvdXJjZU9wdGlvbkJ1dHRvblxuICAgICAgICBsYWJlbD17dChcInNvdXJjZXMtc2NlbmFyaW8tZGlzcGxheVwiKX1cbiAgICAgICAgYXJpYUxhYmVsPXt0KFwic3RlcHMudmlkZW8uc2hhcmUtZGlzcGxheVwiKX1cbiAgICAgICAgaWNvbj17PEZpTW9uaXRvciAvPn1cbiAgICAgICAgb25DbGljaz17Y2xpY2tEaXNwbGF5fVxuICAgICAgICBkaXNhYmxlZFRleHQ9e2Rpc3BsYXlTdXBwb3J0ZWQgPyBmYWxzZSA6IHQoXCJzdGVwcy52aWRlby5kaXNwbGF5LW5vdC1zdXBwb3J0ZWRcIil9XG4gICAgICAgIHNob3J0Y3V0PXtzaG93U2hvcnRjdXRzID8gU0hPUlRDVVRTLnZpZGVvU2V0dXAuc2VsZWN0U2NyZWVuIDogdW5kZWZpbmVkfVxuICAgICAgLz59XG4gICAgICB7KGRpc3BsYXlTdXBwb3J0ZWQgfHwgIW9uTW9iaWxlRGV2aWNlKCkpICYmIHVzZXJTdXBwb3J0ZWQgJiYgPFNvdXJjZU9wdGlvbkJ1dHRvblxuICAgICAgICBsYWJlbD17dChcInNvdXJjZXMtc2NlbmFyaW8tZGlzcGxheS1hbmQtdXNlclwiKX1cbiAgICAgICAgYXJpYUxhYmVsPXt0KFwic3RlcHMudmlkZW8uc2hhcmUtZGlzcGxheS1hbmQtdXNlclwiKX1cbiAgICAgICAgaWNvbj17KFxuICAgICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiAwLFxuICAgICAgICAgICAgLy8gVGhlIHR3byBpY29ucyBhcmUgYSBiaXQgc21hbGxlciwgYnV0IHdlIG1ha2Ugc3VyZSB0aGF0IHRoZXkgaGF2ZVxuICAgICAgICAgICAgLy8gdGhlIHNhbWUgYWJzb2x1dGUgc3Ryb2tlIHdpZHRoLlxuICAgICAgICAgICAgZm9udFNpemU6IFwiMC44ZW1cIixcbiAgICAgICAgICAgIHN2ZzogeyBzdHJva2VXaWR0aDogMiAvIDAuOCB9LFxuICAgICAgICAgIH19PlxuICAgICAgICAgICAgPEZpTW9uaXRvciAvPlxuICAgICAgICAgICAgPEZpVXNlciAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgICBvbkNsaWNrPXtjbGlja0JvdGh9XG4gICAgICAgIGRpc2FibGVkVGV4dD17XG4gICAgICAgICAgZGlzcGxheVN1cHBvcnRlZFxuICAgICAgICAgICAgPyAoc3RhdGUuaGFzV2ViY2FtID8gZmFsc2UgOiB0KFwic3RlcHMudmlkZW8ubm8tY2FtLWRldGVjdGVkXCIpKVxuICAgICAgICAgICAgOiB0KFwic3RlcHMudmlkZW8uZGlzcGxheS1ub3Qtc3VwcG9ydGVkXCIpXG4gICAgICAgIH1cbiAgICAgICAgc2hvcnRjdXQ9e3Nob3dTaG9ydGN1dHMgPyBTSE9SVENVVFMudmlkZW9TZXR1cC5zZWxlY3RCb3RoIDogdW5kZWZpbmVkfVxuICAgICAgLz59XG4gICAgICB7dXNlclN1cHBvcnRlZCAmJiA8U291cmNlT3B0aW9uQnV0dG9uXG4gICAgICAgIGxhYmVsPXt0KFwic291cmNlcy1zY2VuYXJpby11c2VyXCIpfVxuICAgICAgICBhcmlhTGFiZWw9e3QoXCJzdGVwcy52aWRlby5zaGFyZS11c2VyXCIpfVxuICAgICAgICBpY29uPXs8RmlVc2VyIC8+fVxuICAgICAgICBvbkNsaWNrPXtjbGlja1VzZXJ9XG4gICAgICAgIGRpc2FibGVkVGV4dD17c3RhdGUuaGFzV2ViY2FtID8gZmFsc2UgOiB0KFwic3RlcHMudmlkZW8ubm8tY2FtLWRldGVjdGVkXCIpfVxuICAgICAgICBzaG9ydGN1dD17c2hvd1Nob3J0Y3V0cyA/IFNIT1JUQ1VUUy52aWRlb1NldHVwLnNlbGVjdFVzZXIgOiB1bmRlZmluZWR9XG4gICAgICAvPn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/steps/video-setup/source-select.tsx\n");

/***/ }),

/***/ "./src/ui/ErrorBox.tsx":
/*!*****************************!*\
  !*** ./src/ui/ErrorBox.tsx ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorBox: function() { return /* binding */ ErrorBox; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\nvar _ref2 =  false ? 0 : {\n  name: \"1oy3z6s-ErrorBox\",\n  styles: \"display:block;font-size:17px;margin-bottom:8px;label:ErrorBox;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL0Vycm9yQm94LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQnNCIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL0Vycm9yQm94LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENPTE9SUyB9IGZyb20gXCIuLi91dGlsXCI7XG5cblxudHlwZSBFcnJvckJveFByb3BzID0ge1xuICB0aXRsZT86IHN0cmluZztcbiAgYm9keTogc3RyaW5nO1xuICBleHRyYUJvZHk/OiBzdHJpbmc7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbn07XG5cbmV4cG9ydCBjb25zdCBFcnJvckJveDogUmVhY3QuRkM8RXJyb3JCb3hQcm9wcz4gPSAoeyB0aXRsZSwgYm9keSwgZXh0cmFCb2R5LCAuLi5yZXN0IH0pID0+IChcbiAgPGRpdlxuICAgIGFyaWEtbGl2ZT1cInBvbGl0ZVwiXG4gICAgY3NzPXt7XG4gICAgICBwYWRkaW5nOiBcIjE2cHggMjJweFwiLFxuICAgICAgbWFyZ2luOiAxMixcbiAgICAgIGJvcmRlclJhZGl1czogOCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLmRhbmdlcjEsXG4gICAgICBjb2xvcjogQ09MT1JTLmRhbmdlcjUsXG4gICAgfX1cbiAgICB7Li4ucmVzdH1cbiAgPlxuICAgIHt0aXRsZSAmJiA8c3Ryb25nIGNzcz17eyBkaXNwbGF5OiBcImJsb2NrXCIsIGZvbnRTaXplOiAxNywgbWFyZ2luQm90dG9tOiA4IH19Pnt0aXRsZX08L3N0cm9uZz59XG4gICAgPGRpdiBjc3M9e3sgZm9udFNpemU6IDE1LCBtYXhXaWR0aDogXCIxMDBjaFwiIH19Pntib2R5fTwvZGl2PlxuICAgIHtleHRyYUJvZHkgJiYgPGRpdiBjc3M9e3sgZm9udFNpemU6IDE1LCBtYXhXaWR0aDogXCIxMDBjaFwiLCBtYXJnaW5Ub3A6IDggfX0+e2V4dHJhQm9keX08L2Rpdj59XG4gIDwvZGl2PlxuKTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref3 =  false ? 0 : {\n  name: \"dfl459-ErrorBox\",\n  styles: \"font-size:15px;max-width:100ch;label:ErrorBox;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL0Vycm9yQm94LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1QlMiLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvb3BlbmNhc3Qtc3R1ZGlvL29wZW5jYXN0LXN0dWRpby9zcmMvdWkvRXJyb3JCb3gudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSBcIi4uL3V0aWxcIjtcblxuXG50eXBlIEVycm9yQm94UHJvcHMgPSB7XG4gIHRpdGxlPzogc3RyaW5nO1xuICBib2R5OiBzdHJpbmc7XG4gIGV4dHJhQm9keT86IHN0cmluZztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNvbnN0IEVycm9yQm94OiBSZWFjdC5GQzxFcnJvckJveFByb3BzPiA9ICh7IHRpdGxlLCBib2R5LCBleHRyYUJvZHksIC4uLnJlc3QgfSkgPT4gKFxuICA8ZGl2XG4gICAgYXJpYS1saXZlPVwicG9saXRlXCJcbiAgICBjc3M9e3tcbiAgICAgIHBhZGRpbmc6IFwiMTZweCAyMnB4XCIsXG4gICAgICBtYXJnaW46IDEyLFxuICAgICAgYm9yZGVyUmFkaXVzOiA4LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMuZGFuZ2VyMSxcbiAgICAgIGNvbG9yOiBDT0xPUlMuZGFuZ2VyNSxcbiAgICB9fVxuICAgIHsuLi5yZXN0fVxuICA+XG4gICAge3RpdGxlICYmIDxzdHJvbmcgY3NzPXt7IGRpc3BsYXk6IFwiYmxvY2tcIiwgZm9udFNpemU6IDE3LCBtYXJnaW5Cb3R0b206IDggfX0+e3RpdGxlfTwvc3Ryb25nPn1cbiAgICA8ZGl2IGNzcz17eyBmb250U2l6ZTogMTUsIG1heFdpZHRoOiBcIjEwMGNoXCIgfX0+e2JvZHl9PC9kaXY+XG4gICAge2V4dHJhQm9keSAmJiA8ZGl2IGNzcz17eyBmb250U2l6ZTogMTUsIG1heFdpZHRoOiBcIjEwMGNoXCIsIG1hcmdpblRvcDogOCB9fT57ZXh0cmFCb2R5fTwvZGl2Pn1cbiAgPC9kaXY+XG4pO1xuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref4 =  false ? 0 : {\n  name: \"1izjhz4-ErrorBox\",\n  styles: \"font-size:15px;max-width:100ch;margin-top:8px;label:ErrorBox;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL0Vycm9yQm94LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3QnVCIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL0Vycm9yQm94LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENPTE9SUyB9IGZyb20gXCIuLi91dGlsXCI7XG5cblxudHlwZSBFcnJvckJveFByb3BzID0ge1xuICB0aXRsZT86IHN0cmluZztcbiAgYm9keTogc3RyaW5nO1xuICBleHRyYUJvZHk/OiBzdHJpbmc7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbn07XG5cbmV4cG9ydCBjb25zdCBFcnJvckJveDogUmVhY3QuRkM8RXJyb3JCb3hQcm9wcz4gPSAoeyB0aXRsZSwgYm9keSwgZXh0cmFCb2R5LCAuLi5yZXN0IH0pID0+IChcbiAgPGRpdlxuICAgIGFyaWEtbGl2ZT1cInBvbGl0ZVwiXG4gICAgY3NzPXt7XG4gICAgICBwYWRkaW5nOiBcIjE2cHggMjJweFwiLFxuICAgICAgbWFyZ2luOiAxMixcbiAgICAgIGJvcmRlclJhZGl1czogOCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLmRhbmdlcjEsXG4gICAgICBjb2xvcjogQ09MT1JTLmRhbmdlcjUsXG4gICAgfX1cbiAgICB7Li4ucmVzdH1cbiAgPlxuICAgIHt0aXRsZSAmJiA8c3Ryb25nIGNzcz17eyBkaXNwbGF5OiBcImJsb2NrXCIsIGZvbnRTaXplOiAxNywgbWFyZ2luQm90dG9tOiA4IH19Pnt0aXRsZX08L3N0cm9uZz59XG4gICAgPGRpdiBjc3M9e3sgZm9udFNpemU6IDE1LCBtYXhXaWR0aDogXCIxMDBjaFwiIH19Pntib2R5fTwvZGl2PlxuICAgIHtleHRyYUJvZHkgJiYgPGRpdiBjc3M9e3sgZm9udFNpemU6IDE1LCBtYXhXaWR0aDogXCIxMDBjaFwiLCBtYXJnaW5Ub3A6IDggfX0+e2V4dHJhQm9keX08L2Rpdj59XG4gIDwvZGl2PlxuKTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst ErrorBox = _ref => {\n  let {\n    title,\n    body,\n    extraBody,\n    ...rest\n  } = _ref;\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n    \"aria-live\": \"polite\",\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.css)({\n      padding: \"16px 22px\",\n      margin: 12,\n      borderRadius: 8,\n      backgroundColor: _util__WEBPACK_IMPORTED_MODULE_0__.COLORS.danger1,\n      color: _util__WEBPACK_IMPORTED_MODULE_0__.COLORS.danger5\n    },  false ? 0 : \";label:ErrorBox;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL0Vycm9yQm94LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFhSSIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy91aS9FcnJvckJveC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDT0xPUlMgfSBmcm9tIFwiLi4vdXRpbFwiO1xuXG5cbnR5cGUgRXJyb3JCb3hQcm9wcyA9IHtcbiAgdGl0bGU/OiBzdHJpbmc7XG4gIGJvZHk6IHN0cmluZztcbiAgZXh0cmFCb2R5Pzogc3RyaW5nO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgRXJyb3JCb3g6IFJlYWN0LkZDPEVycm9yQm94UHJvcHM+ID0gKHsgdGl0bGUsIGJvZHksIGV4dHJhQm9keSwgLi4ucmVzdCB9KSA9PiAoXG4gIDxkaXZcbiAgICBhcmlhLWxpdmU9XCJwb2xpdGVcIlxuICAgIGNzcz17e1xuICAgICAgcGFkZGluZzogXCIxNnB4IDIycHhcIixcbiAgICAgIG1hcmdpbjogMTIsXG4gICAgICBib3JkZXJSYWRpdXM6IDgsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5kYW5nZXIxLFxuICAgICAgY29sb3I6IENPTE9SUy5kYW5nZXI1LFxuICAgIH19XG4gICAgey4uLnJlc3R9XG4gID5cbiAgICB7dGl0bGUgJiYgPHN0cm9uZyBjc3M9e3sgZGlzcGxheTogXCJibG9ja1wiLCBmb250U2l6ZTogMTcsIG1hcmdpbkJvdHRvbTogOCB9fT57dGl0bGV9PC9zdHJvbmc+fVxuICAgIDxkaXYgY3NzPXt7IGZvbnRTaXplOiAxNSwgbWF4V2lkdGg6IFwiMTAwY2hcIiB9fT57Ym9keX08L2Rpdj5cbiAgICB7ZXh0cmFCb2R5ICYmIDxkaXYgY3NzPXt7IGZvbnRTaXplOiAxNSwgbWF4V2lkdGg6IFwiMTAwY2hcIiwgbWFyZ2luVG9wOiA4IH19PntleHRyYUJvZHl9PC9kaXY+fVxuICA8L2Rpdj5cbik7XG4iXX0= */\"),\n    ...rest,\n    children: [title && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"strong\", {\n      css: _ref2,\n      children: title\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      css: _ref3,\n      children: body\n    }), extraBody && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      css: _ref4,\n      children: extraBody\n    })]\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdWkvRXJyb3JCb3gudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQVVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuY2FzdC1zdHVkaW8vLi9zcmMvdWkvRXJyb3JCb3gudHN4PzllN2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSBcIi4uL3V0aWxcIjtcblxuXG50eXBlIEVycm9yQm94UHJvcHMgPSB7XG4gIHRpdGxlPzogc3RyaW5nO1xuICBib2R5OiBzdHJpbmc7XG4gIGV4dHJhQm9keT86IHN0cmluZztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNvbnN0IEVycm9yQm94OiBSZWFjdC5GQzxFcnJvckJveFByb3BzPiA9ICh7IHRpdGxlLCBib2R5LCBleHRyYUJvZHksIC4uLnJlc3QgfSkgPT4gKFxuICA8ZGl2XG4gICAgYXJpYS1saXZlPVwicG9saXRlXCJcbiAgICBjc3M9e3tcbiAgICAgIHBhZGRpbmc6IFwiMTZweCAyMnB4XCIsXG4gICAgICBtYXJnaW46IDEyLFxuICAgICAgYm9yZGVyUmFkaXVzOiA4LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMuZGFuZ2VyMSxcbiAgICAgIGNvbG9yOiBDT0xPUlMuZGFuZ2VyNSxcbiAgICB9fVxuICAgIHsuLi5yZXN0fVxuICA+XG4gICAge3RpdGxlICYmIDxzdHJvbmcgY3NzPXt7IGRpc3BsYXk6IFwiYmxvY2tcIiwgZm9udFNpemU6IDE3LCBtYXJnaW5Cb3R0b206IDggfX0+e3RpdGxlfTwvc3Ryb25nPn1cbiAgICA8ZGl2IGNzcz17eyBmb250U2l6ZTogMTUsIG1heFdpZHRoOiBcIjEwMGNoXCIgfX0+e2JvZHl9PC9kaXY+XG4gICAge2V4dHJhQm9keSAmJiA8ZGl2IGNzcz17eyBmb250U2l6ZTogMTUsIG1heFdpZHRoOiBcIjEwMGNoXCIsIG1hcmdpblRvcDogOCB9fT57ZXh0cmFCb2R5fTwvZGl2Pn1cbiAgPC9kaXY+XG4pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ui/ErrorBox.tsx\n");

/***/ }),

/***/ "./src/ui/Select.tsx":
/*!***************************!*\
  !*** ./src/ui/Select.tsx ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Select: function() { return /* binding */ Select; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\n\n\n\n\n/** Styled `<select>` */\nconst Select = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().forwardRef((props, ref) => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"select\", {\n  ref: ref,\n  ...props,\n  css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_4__.css)({\n    position: \"relative\",\n    borderRadius: 6,\n    padding: \"6px 12px\",\n    paddingRight: 32,\n    backgroundColor: \"transparent\",\n    border: `1px solid ${_util__WEBPACK_IMPORTED_MODULE_1__.COLORS.neutral25}`,\n    // Remove any browser styles and re-add custom arrow\n    appearance: \"none\",\n    background: 'url(\"data:image/svg+xml;utf8,' + \"<svg xmlns='http://www.w3.org/2000/svg' width='2' height='1' \" + `fill='${(0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_2__.useColorScheme)().scheme === \"light\" ? \"%23555\" : \"%23aaa\"}'>` + \"<polygon points='0,0 2,0 1,1'/>\" + '</svg>\") no-repeat',\n    backgroundSize: 12,\n    backgroundPosition: \"calc(100% - 12px) center\",\n    option: {\n      backgroundColor: _util__WEBPACK_IMPORTED_MODULE_1__.COLORS.neutral05,\n      color: _util__WEBPACK_IMPORTED_MODULE_1__.COLORS.neutral90\n    },\n    ...(0,_util__WEBPACK_IMPORTED_MODULE_1__.focusStyle)({\n      offset: -1\n    })\n  },  false ? 0 : \";label:Select;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL1NlbGVjdC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVStCIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL1NlbGVjdC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IENPTE9SUywgZm9jdXNTdHlsZSB9IGZyb20gXCIuLi91dGlsXCI7XG5pbXBvcnQgeyB1c2VDb2xvclNjaGVtZSB9IGZyb20gXCJAb3BlbmNhc3QvYXBwa2l0XCI7XG5cblxudHlwZSBQcm9wcyA9IEpTWC5JbnRyaW5zaWNFbGVtZW50c1tcInNlbGVjdFwiXTtcblxuLyoqIFN0eWxlZCBgPHNlbGVjdD5gICovXG5leHBvcnQgY29uc3QgU2VsZWN0ID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MU2VsZWN0RWxlbWVudCwgUHJvcHM+KChwcm9wcywgcmVmKSA9PiAoXG4gIDxzZWxlY3QgcmVmPXtyZWZ9IHsuLi5wcm9wc30gY3NzPXt7XG4gICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICBib3JkZXJSYWRpdXM6IDYsXG4gICAgcGFkZGluZzogXCI2cHggMTJweFwiLFxuICAgIHBhZGRpbmdSaWdodDogMzIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBcInRyYW5zcGFyZW50XCIsXG4gICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWwyNX1gLFxuXG4gICAgLy8gUmVtb3ZlIGFueSBicm93c2VyIHN0eWxlcyBhbmQgcmUtYWRkIGN1c3RvbSBhcnJvd1xuICAgIGFwcGVhcmFuY2U6IFwibm9uZVwiLFxuICAgIGJhY2tncm91bmQ6ICd1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWw7dXRmOCwnXG4gICAgICArIFwiPHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHdpZHRoPScyJyBoZWlnaHQ9JzEnIFwiXG4gICAgICArIGBmaWxsPScke3VzZUNvbG9yU2NoZW1lKCkuc2NoZW1lID09PSBcImxpZ2h0XCIgPyBcIiUyMzU1NVwiIDogXCIlMjNhYWFcIn0nPmBcbiAgICAgICsgXCI8cG9seWdvbiBwb2ludHM9JzAsMCAyLDAgMSwxJy8+XCJcbiAgICAgICsgJzwvc3ZnPlwiKSBuby1yZXBlYXQnLFxuICAgIGJhY2tncm91bmRTaXplOiAxMixcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFwiY2FsYygxMDAlIC0gMTJweCkgY2VudGVyXCIsXG5cbiAgICBvcHRpb246IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwwNSxcbiAgICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDkwLFxuICAgIH0sXG4gICAgLi4uZm9jdXNTdHlsZSh7IG9mZnNldDogLTEgfSksXG4gIH19Pntwcm9wcy5jaGlsZHJlbn08L3NlbGVjdD5cbikpO1xuIl19 */\"),\n  children: props.children\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdWkvU2VsZWN0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFDQTtBQUFBO0FBS0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5jYXN0LXN0dWRpby8uL3NyYy91aS9TZWxlY3QudHN4PzQ1YTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBDT0xPUlMsIGZvY3VzU3R5bGUgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHsgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5cbnR5cGUgUHJvcHMgPSBKU1guSW50cmluc2ljRWxlbWVudHNbXCJzZWxlY3RcIl07XG5cbi8qKiBTdHlsZWQgYDxzZWxlY3Q+YCAqL1xuZXhwb3J0IGNvbnN0IFNlbGVjdCA9IFJlYWN0LmZvcndhcmRSZWY8SFRNTFNlbGVjdEVsZW1lbnQsIFByb3BzPigocHJvcHMsIHJlZikgPT4gKFxuICA8c2VsZWN0IHJlZj17cmVmfSB7Li4ucHJvcHN9IGNzcz17e1xuICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgYm9yZGVyUmFkaXVzOiA2LFxuICAgIHBhZGRpbmc6IFwiNnB4IDEycHhcIixcbiAgICBwYWRkaW5nUmlnaHQ6IDMyLFxuICAgIGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGJvcmRlcjogYDFweCBzb2xpZCAke0NPTE9SUy5uZXV0cmFsMjV9YCxcblxuICAgIC8vIFJlbW92ZSBhbnkgYnJvd3NlciBzdHlsZXMgYW5kIHJlLWFkZCBjdXN0b20gYXJyb3dcbiAgICBhcHBlYXJhbmNlOiBcIm5vbmVcIixcbiAgICBiYWNrZ3JvdW5kOiAndXJsKFwiZGF0YTppbWFnZS9zdmcreG1sO3V0ZjgsJ1xuICAgICAgKyBcIjxzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB3aWR0aD0nMicgaGVpZ2h0PScxJyBcIlxuICAgICAgKyBgZmlsbD0nJHt1c2VDb2xvclNjaGVtZSgpLnNjaGVtZSA9PT0gXCJsaWdodFwiID8gXCIlMjM1NTVcIiA6IFwiJTIzYWFhXCJ9Jz5gXG4gICAgICArIFwiPHBvbHlnb24gcG9pbnRzPScwLDAgMiwwIDEsMScvPlwiXG4gICAgICArICc8L3N2Zz5cIikgbm8tcmVwZWF0JyxcbiAgICBiYWNrZ3JvdW5kU2l6ZTogMTIsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcImNhbGMoMTAwJSAtIDEycHgpIGNlbnRlclwiLFxuXG4gICAgb3B0aW9uOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgICBjb2xvcjogQ09MT1JTLm5ldXRyYWw5MCxcbiAgICB9LFxuICAgIC4uLmZvY3VzU3R5bGUoeyBvZmZzZXQ6IC0xIH0pLFxuICB9fT57cHJvcHMuY2hpbGRyZW59PC9zZWxlY3Q+XG4pKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/ui/Select.tsx\n");

/***/ }),

/***/ "./src/ui/SourceOptionButton.tsx":
/*!***************************************!*\
  !*** ./src/ui/SourceOptionButton.tsx ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SourceOptionButton: function() { return /* binding */ SourceOptionButton; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _shortcuts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shortcuts */ \"./src/shortcuts.tsx\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\nvar _ref2 =  false ? 0 : {\n  name: \"kspr2a-SourceOptionButton\",\n  styles: \"font-size:18px;font-weight:700;label:SourceOptionButton;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL1NvdXJjZU9wdGlvbkJ1dHRvbi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkVXIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL1NvdXJjZU9wdGlvbkJ1dHRvbi50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBQcm90b0J1dHRvbiwgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5pbXBvcnQgeyBDT0xPUlMsIGZvY3VzU3R5bGUgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHsgU2hvcnRjdXRLZXlzIH0gZnJvbSBcIi4uL3Nob3J0Y3V0c1wiO1xuXG5cblxuZXhwb3J0IHR5cGUgU291cmNlT3B0aW9uQnV0dG9uUHJvcHMgPSB7XG4gIGljb246IEpTWC5FbGVtZW50O1xuICBsYWJlbDogc3RyaW5nO1xuICBvbkNsaWNrOiAoKSA9PiB2b2lkO1xuICBkaXNhYmxlZFRleHQ/OiBmYWxzZSB8IHN0cmluZztcbiAgc2hvcnRjdXQ/OiBzdHJpbmc7XG4gIGFyaWFMYWJlbD86IHN0cmluZztcbn07XG5cbmV4cG9ydCBjb25zdCBTb3VyY2VPcHRpb25CdXR0b246IFJlYWN0LkZDPFNvdXJjZU9wdGlvbkJ1dHRvblByb3BzPiA9IChcbiAgeyBpY29uLCBsYWJlbCwgb25DbGljaywgc2hvcnRjdXQsIGRpc2FibGVkVGV4dCwgYXJpYUxhYmVsIH1cbikgPT4ge1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuXG4gIHJldHVybiAoXG4gICAgPFByb3RvQnV0dG9uXG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgZGlzYWJsZWQ9eyEhZGlzYWJsZWRUZXh0fVxuICAgICAgYXJpYS1sYWJlbD17YXJpYUxhYmVsfVxuICAgICAgY3NzPXt7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiaW5saW5lLWZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgbWF4SGVpZ2h0OiAyNTAsXG4gICAgICAgIG1heFdpZHRoOiA0MjAsXG4gICAgICAgIHBhZGRpbmc6IDEyLFxuICAgICAgICBmbGV4OiBcIjFcIixcblxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgICAgIGNvbG9yOiBDT0xPUlMuYWNjZW50NyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiA4LFxuICAgICAgICBib3JkZXI6IGAxcHggc29saWQgJHtDT0xPUlMubmV1dHJhbDIwfWAsXG5cbiAgICAgICAgXCImW2Rpc2FibGVkXVwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDEwLFxuICAgICAgICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDUwLFxuICAgICAgICAgIGJvcmRlckNvbG9yOiBDT0xPUlMubmV1dHJhbDE1LFxuICAgICAgICB9LFxuXG4gICAgICAgIFwiJjpub3QoW2Rpc2FibGVkXSk6aG92ZXIsICY6bm90KFtkaXNhYmxlZF0pOmZvY3VzLXZpc2libGVcIjoge1xuICAgICAgICAgIGNvbG9yOiBDT0xPUlMuYWNjZW50OCxcbiAgICAgICAgICBib3JkZXJDb2xvcjogQ09MT1JTLm5ldXRyYWwzMCxcbiAgICAgICAgICBib3hTaGFkb3c6IFwiMCAwIDE2cHggdmFyKC0tc2hhZG93LWNvbG9yKVwiLFxuICAgICAgICAgIC4uLmlzSGlnaENvbnRyYXN0ICYmIHtcbiAgICAgICAgICAgIG91dGxpbmU6IGAycHggc29saWQgJHtDT0xPUlMuYWNjZW50NH1gLFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwidHJhbnNwYXJlbnRcIixcbiAgICAgICAgICAgIGJveFNoYWRvdzogXCJub25lXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgLi4uZm9jdXNTdHlsZSh7IG9mZnNldDogLTEgfSksXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBmb250U2l6ZTogNDAsXG4gICAgICAgIHdpZHRoOiA4MCxcbiAgICAgICAgaGVpZ2h0OiA4MCxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDEwLFxuICAgICAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgICB9fT5cbiAgICAgICAge2ljb259XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXt7IGZvbnRTaXplOiAxOCwgZm9udFdlaWdodDogNzAwIH19PntsYWJlbH08L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXt7IGhlaWdodDogXCIxbGhcIiwgZm9udFNpemU6IDE0LCBtYXJnaW5Ub3A6IDQgfX0+e2Rpc2FibGVkVGV4dH08L2Rpdj5cbiAgICAgIHtzaG9ydGN1dCAmJiA8ZGl2IGNzcz17e1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICByaWdodDogOCxcbiAgICAgICAgYm90dG9tOiA4LFxuICAgICAgfX0+PFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17c2hvcnRjdXR9IC8+PC9kaXY+fVxuICAgIDwvUHJvdG9CdXR0b24+XG4gICk7XG59O1xuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref3 =  false ? 0 : {\n  name: \"ckht7m-SourceOptionButton\",\n  styles: \"height:1lh;font-size:14px;margin-top:4px;label:SourceOptionButton;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL1NvdXJjZU9wdGlvbkJ1dHRvbi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOEVXIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL1NvdXJjZU9wdGlvbkJ1dHRvbi50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBQcm90b0J1dHRvbiwgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5pbXBvcnQgeyBDT0xPUlMsIGZvY3VzU3R5bGUgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHsgU2hvcnRjdXRLZXlzIH0gZnJvbSBcIi4uL3Nob3J0Y3V0c1wiO1xuXG5cblxuZXhwb3J0IHR5cGUgU291cmNlT3B0aW9uQnV0dG9uUHJvcHMgPSB7XG4gIGljb246IEpTWC5FbGVtZW50O1xuICBsYWJlbDogc3RyaW5nO1xuICBvbkNsaWNrOiAoKSA9PiB2b2lkO1xuICBkaXNhYmxlZFRleHQ/OiBmYWxzZSB8IHN0cmluZztcbiAgc2hvcnRjdXQ/OiBzdHJpbmc7XG4gIGFyaWFMYWJlbD86IHN0cmluZztcbn07XG5cbmV4cG9ydCBjb25zdCBTb3VyY2VPcHRpb25CdXR0b246IFJlYWN0LkZDPFNvdXJjZU9wdGlvbkJ1dHRvblByb3BzPiA9IChcbiAgeyBpY29uLCBsYWJlbCwgb25DbGljaywgc2hvcnRjdXQsIGRpc2FibGVkVGV4dCwgYXJpYUxhYmVsIH1cbikgPT4ge1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuXG4gIHJldHVybiAoXG4gICAgPFByb3RvQnV0dG9uXG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgZGlzYWJsZWQ9eyEhZGlzYWJsZWRUZXh0fVxuICAgICAgYXJpYS1sYWJlbD17YXJpYUxhYmVsfVxuICAgICAgY3NzPXt7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiaW5saW5lLWZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgbWF4SGVpZ2h0OiAyNTAsXG4gICAgICAgIG1heFdpZHRoOiA0MjAsXG4gICAgICAgIHBhZGRpbmc6IDEyLFxuICAgICAgICBmbGV4OiBcIjFcIixcblxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgICAgIGNvbG9yOiBDT0xPUlMuYWNjZW50NyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiA4LFxuICAgICAgICBib3JkZXI6IGAxcHggc29saWQgJHtDT0xPUlMubmV1dHJhbDIwfWAsXG5cbiAgICAgICAgXCImW2Rpc2FibGVkXVwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDEwLFxuICAgICAgICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDUwLFxuICAgICAgICAgIGJvcmRlckNvbG9yOiBDT0xPUlMubmV1dHJhbDE1LFxuICAgICAgICB9LFxuXG4gICAgICAgIFwiJjpub3QoW2Rpc2FibGVkXSk6aG92ZXIsICY6bm90KFtkaXNhYmxlZF0pOmZvY3VzLXZpc2libGVcIjoge1xuICAgICAgICAgIGNvbG9yOiBDT0xPUlMuYWNjZW50OCxcbiAgICAgICAgICBib3JkZXJDb2xvcjogQ09MT1JTLm5ldXRyYWwzMCxcbiAgICAgICAgICBib3hTaGFkb3c6IFwiMCAwIDE2cHggdmFyKC0tc2hhZG93LWNvbG9yKVwiLFxuICAgICAgICAgIC4uLmlzSGlnaENvbnRyYXN0ICYmIHtcbiAgICAgICAgICAgIG91dGxpbmU6IGAycHggc29saWQgJHtDT0xPUlMuYWNjZW50NH1gLFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwidHJhbnNwYXJlbnRcIixcbiAgICAgICAgICAgIGJveFNoYWRvdzogXCJub25lXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgLi4uZm9jdXNTdHlsZSh7IG9mZnNldDogLTEgfSksXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBmb250U2l6ZTogNDAsXG4gICAgICAgIHdpZHRoOiA4MCxcbiAgICAgICAgaGVpZ2h0OiA4MCxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDEwLFxuICAgICAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgICB9fT5cbiAgICAgICAge2ljb259XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXt7IGZvbnRTaXplOiAxOCwgZm9udFdlaWdodDogNzAwIH19PntsYWJlbH08L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXt7IGhlaWdodDogXCIxbGhcIiwgZm9udFNpemU6IDE0LCBtYXJnaW5Ub3A6IDQgfX0+e2Rpc2FibGVkVGV4dH08L2Rpdj5cbiAgICAgIHtzaG9ydGN1dCAmJiA8ZGl2IGNzcz17e1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICByaWdodDogOCxcbiAgICAgICAgYm90dG9tOiA4LFxuICAgICAgfX0+PFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17c2hvcnRjdXR9IC8+PC9kaXY+fVxuICAgIDwvUHJvdG9CdXR0b24+XG4gICk7XG59O1xuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref4 =  false ? 0 : {\n  name: \"dm9al0-SourceOptionButton\",\n  styles: \"position:absolute;right:8px;bottom:8px;label:SourceOptionButton;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL1NvdXJjZU9wdGlvbkJ1dHRvbi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0V3QiIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy91aS9Tb3VyY2VPcHRpb25CdXR0b24udHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgUHJvdG9CdXR0b24sIHVzZUNvbG9yU2NoZW1lIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcblxuaW1wb3J0IHsgQ09MT1JTLCBmb2N1c1N0eWxlIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7IFNob3J0Y3V0S2V5cyB9IGZyb20gXCIuLi9zaG9ydGN1dHNcIjtcblxuXG5cbmV4cG9ydCB0eXBlIFNvdXJjZU9wdGlvbkJ1dHRvblByb3BzID0ge1xuICBpY29uOiBKU1guRWxlbWVudDtcbiAgbGFiZWw6IHN0cmluZztcbiAgb25DbGljazogKCkgPT4gdm9pZDtcbiAgZGlzYWJsZWRUZXh0PzogZmFsc2UgfCBzdHJpbmc7XG4gIHNob3J0Y3V0Pzogc3RyaW5nO1xuICBhcmlhTGFiZWw/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgU291cmNlT3B0aW9uQnV0dG9uOiBSZWFjdC5GQzxTb3VyY2VPcHRpb25CdXR0b25Qcm9wcz4gPSAoXG4gIHsgaWNvbiwgbGFiZWwsIG9uQ2xpY2ssIHNob3J0Y3V0LCBkaXNhYmxlZFRleHQsIGFyaWFMYWJlbCB9XG4pID0+IHtcbiAgY29uc3QgeyBpc0hpZ2hDb250cmFzdCB9ID0gdXNlQ29sb3JTY2hlbWUoKTtcblxuICByZXR1cm4gKFxuICAgIDxQcm90b0J1dHRvblxuICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgIGRpc2FibGVkPXshIWRpc2FibGVkVGV4dH1cbiAgICAgIGFyaWEtbGFiZWw9e2FyaWFMYWJlbH1cbiAgICAgIGNzcz17e1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICBkaXNwbGF5OiBcImlubGluZS1mbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgIG1heEhlaWdodDogMjUwLFxuICAgICAgICBtYXhXaWR0aDogNDIwLFxuICAgICAgICBwYWRkaW5nOiAxMixcbiAgICAgICAgZmxleDogXCIxXCIsXG5cbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDA1LFxuICAgICAgICBjb2xvcjogQ09MT1JTLmFjY2VudDcsXG4gICAgICAgIGJvcmRlclJhZGl1czogOCxcbiAgICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7Q09MT1JTLm5ldXRyYWwyMH1gLFxuXG4gICAgICAgIFwiJltkaXNhYmxlZF1cIjoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwxMCxcbiAgICAgICAgICBjb2xvcjogQ09MT1JTLm5ldXRyYWw1MCxcbiAgICAgICAgICBib3JkZXJDb2xvcjogQ09MT1JTLm5ldXRyYWwxNSxcbiAgICAgICAgfSxcblxuICAgICAgICBcIiY6bm90KFtkaXNhYmxlZF0pOmhvdmVyLCAmOm5vdChbZGlzYWJsZWRdKTpmb2N1cy12aXNpYmxlXCI6IHtcbiAgICAgICAgICBjb2xvcjogQ09MT1JTLmFjY2VudDgsXG4gICAgICAgICAgYm9yZGVyQ29sb3I6IENPTE9SUy5uZXV0cmFsMzAsXG4gICAgICAgICAgYm94U2hhZG93OiBcIjAgMCAxNnB4IHZhcigtLXNoYWRvdy1jb2xvcilcIixcbiAgICAgICAgICAuLi5pc0hpZ2hDb250cmFzdCAmJiB7XG4gICAgICAgICAgICBvdXRsaW5lOiBgMnB4IHNvbGlkICR7Q09MT1JTLmFjY2VudDR9YCxcbiAgICAgICAgICAgIGJvcmRlckNvbG9yOiBcInRyYW5zcGFyZW50XCIsXG4gICAgICAgICAgICBib3hTaGFkb3c6IFwibm9uZVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIC4uLmZvY3VzU3R5bGUoeyBvZmZzZXQ6IC0xIH0pLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8ZGl2IGNzcz17e1xuICAgICAgICBib3JkZXJSYWRpdXM6IFwiNTAlXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgZm9udFNpemU6IDQwLFxuICAgICAgICB3aWR0aDogODAsXG4gICAgICAgIGhlaWdodDogODAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1JTLm5ldXRyYWwxMCxcbiAgICAgICAgbWFyZ2luQm90dG9tOiA4LFxuICAgICAgfX0+XG4gICAgICAgIHtpY29ufVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNzcz17eyBmb250U2l6ZTogMTgsIGZvbnRXZWlnaHQ6IDcwMCB9fT57bGFiZWx9PC9kaXY+XG4gICAgICA8ZGl2IGNzcz17eyBoZWlnaHQ6IFwiMWxoXCIsIGZvbnRTaXplOiAxNCwgbWFyZ2luVG9wOiA0IH19PntkaXNhYmxlZFRleHR9PC9kaXY+XG4gICAgICB7c2hvcnRjdXQgJiYgPGRpdiBjc3M9e3tcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgcmlnaHQ6IDgsXG4gICAgICAgIGJvdHRvbTogOCxcbiAgICAgIH19PjxTaG9ydGN1dEtleXMgc2hvcnRjdXQ9e3Nob3J0Y3V0fSAvPjwvZGl2Pn1cbiAgICA8L1Byb3RvQnV0dG9uPlxuICApO1xufTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nconst SourceOptionButton = _ref => {\n  let {\n    icon,\n    label,\n    onClick,\n    shortcut,\n    disabledText,\n    ariaLabel\n  } = _ref;\n  const {\n    isHighContrast\n  } = (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_1__.useColorScheme)();\n  return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(_opencast_appkit__WEBPACK_IMPORTED_MODULE_1__.ProtoButton, {\n    onClick: onClick,\n    disabled: !!disabledText,\n    \"aria-label\": ariaLabel,\n    css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_5__.css)({\n      position: \"relative\",\n      display: \"inline-flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      width: \"100%\",\n      height: \"100%\",\n      maxHeight: 250,\n      maxWidth: 420,\n      padding: 12,\n      flex: \"1\",\n      backgroundColor: _util__WEBPACK_IMPORTED_MODULE_2__.COLORS.neutral05,\n      color: _util__WEBPACK_IMPORTED_MODULE_2__.COLORS.accent7,\n      borderRadius: 8,\n      border: `1px solid ${_util__WEBPACK_IMPORTED_MODULE_2__.COLORS.neutral20}`,\n      \"&[disabled]\": {\n        backgroundColor: _util__WEBPACK_IMPORTED_MODULE_2__.COLORS.neutral10,\n        color: _util__WEBPACK_IMPORTED_MODULE_2__.COLORS.neutral50,\n        borderColor: _util__WEBPACK_IMPORTED_MODULE_2__.COLORS.neutral15\n      },\n      \"&:not([disabled]):hover, &:not([disabled]):focus-visible\": {\n        color: _util__WEBPACK_IMPORTED_MODULE_2__.COLORS.accent8,\n        borderColor: _util__WEBPACK_IMPORTED_MODULE_2__.COLORS.neutral30,\n        boxShadow: \"0 0 16px var(--shadow-color)\",\n        ...(isHighContrast && {\n          outline: `2px solid ${_util__WEBPACK_IMPORTED_MODULE_2__.COLORS.accent4}`,\n          borderColor: \"transparent\",\n          boxShadow: \"none\"\n        })\n      },\n      ...(0,_util__WEBPACK_IMPORTED_MODULE_2__.focusStyle)({\n        offset: -1\n      })\n    },  false ? 0 : \";label:SourceOptionButton;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL1NvdXJjZU9wdGlvbkJ1dHRvbi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkJNIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL1NvdXJjZU9wdGlvbkJ1dHRvbi50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBQcm90b0J1dHRvbiwgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5pbXBvcnQgeyBDT0xPUlMsIGZvY3VzU3R5bGUgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHsgU2hvcnRjdXRLZXlzIH0gZnJvbSBcIi4uL3Nob3J0Y3V0c1wiO1xuXG5cblxuZXhwb3J0IHR5cGUgU291cmNlT3B0aW9uQnV0dG9uUHJvcHMgPSB7XG4gIGljb246IEpTWC5FbGVtZW50O1xuICBsYWJlbDogc3RyaW5nO1xuICBvbkNsaWNrOiAoKSA9PiB2b2lkO1xuICBkaXNhYmxlZFRleHQ/OiBmYWxzZSB8IHN0cmluZztcbiAgc2hvcnRjdXQ/OiBzdHJpbmc7XG4gIGFyaWFMYWJlbD86IHN0cmluZztcbn07XG5cbmV4cG9ydCBjb25zdCBTb3VyY2VPcHRpb25CdXR0b246IFJlYWN0LkZDPFNvdXJjZU9wdGlvbkJ1dHRvblByb3BzPiA9IChcbiAgeyBpY29uLCBsYWJlbCwgb25DbGljaywgc2hvcnRjdXQsIGRpc2FibGVkVGV4dCwgYXJpYUxhYmVsIH1cbikgPT4ge1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuXG4gIHJldHVybiAoXG4gICAgPFByb3RvQnV0dG9uXG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgZGlzYWJsZWQ9eyEhZGlzYWJsZWRUZXh0fVxuICAgICAgYXJpYS1sYWJlbD17YXJpYUxhYmVsfVxuICAgICAgY3NzPXt7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiaW5saW5lLWZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgbWF4SGVpZ2h0OiAyNTAsXG4gICAgICAgIG1heFdpZHRoOiA0MjAsXG4gICAgICAgIHBhZGRpbmc6IDEyLFxuICAgICAgICBmbGV4OiBcIjFcIixcblxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgICAgIGNvbG9yOiBDT0xPUlMuYWNjZW50NyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiA4LFxuICAgICAgICBib3JkZXI6IGAxcHggc29saWQgJHtDT0xPUlMubmV1dHJhbDIwfWAsXG5cbiAgICAgICAgXCImW2Rpc2FibGVkXVwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDEwLFxuICAgICAgICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDUwLFxuICAgICAgICAgIGJvcmRlckNvbG9yOiBDT0xPUlMubmV1dHJhbDE1LFxuICAgICAgICB9LFxuXG4gICAgICAgIFwiJjpub3QoW2Rpc2FibGVkXSk6aG92ZXIsICY6bm90KFtkaXNhYmxlZF0pOmZvY3VzLXZpc2libGVcIjoge1xuICAgICAgICAgIGNvbG9yOiBDT0xPUlMuYWNjZW50OCxcbiAgICAgICAgICBib3JkZXJDb2xvcjogQ09MT1JTLm5ldXRyYWwzMCxcbiAgICAgICAgICBib3hTaGFkb3c6IFwiMCAwIDE2cHggdmFyKC0tc2hhZG93LWNvbG9yKVwiLFxuICAgICAgICAgIC4uLmlzSGlnaENvbnRyYXN0ICYmIHtcbiAgICAgICAgICAgIG91dGxpbmU6IGAycHggc29saWQgJHtDT0xPUlMuYWNjZW50NH1gLFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwidHJhbnNwYXJlbnRcIixcbiAgICAgICAgICAgIGJveFNoYWRvdzogXCJub25lXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgLi4uZm9jdXNTdHlsZSh7IG9mZnNldDogLTEgfSksXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBmb250U2l6ZTogNDAsXG4gICAgICAgIHdpZHRoOiA4MCxcbiAgICAgICAgaGVpZ2h0OiA4MCxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDEwLFxuICAgICAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgICB9fT5cbiAgICAgICAge2ljb259XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXt7IGZvbnRTaXplOiAxOCwgZm9udFdlaWdodDogNzAwIH19PntsYWJlbH08L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXt7IGhlaWdodDogXCIxbGhcIiwgZm9udFNpemU6IDE0LCBtYXJnaW5Ub3A6IDQgfX0+e2Rpc2FibGVkVGV4dH08L2Rpdj5cbiAgICAgIHtzaG9ydGN1dCAmJiA8ZGl2IGNzcz17e1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICByaWdodDogOCxcbiAgICAgICAgYm90dG9tOiA4LFxuICAgICAgfX0+PFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17c2hvcnRjdXR9IC8+PC9kaXY+fVxuICAgIDwvUHJvdG9CdXR0b24+XG4gICk7XG59O1xuIl19 */\"),\n    children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n      css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_5__.css)({\n        borderRadius: \"50%\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        fontSize: 40,\n        width: 80,\n        height: 80,\n        backgroundColor: _util__WEBPACK_IMPORTED_MODULE_2__.COLORS.neutral10,\n        marginBottom: 8\n      },  false ? 0 : \";label:SourceOptionButton;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL1NvdXJjZU9wdGlvbkJ1dHRvbi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0VXIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL1NvdXJjZU9wdGlvbkJ1dHRvbi50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBQcm90b0J1dHRvbiwgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5pbXBvcnQgeyBDT0xPUlMsIGZvY3VzU3R5bGUgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHsgU2hvcnRjdXRLZXlzIH0gZnJvbSBcIi4uL3Nob3J0Y3V0c1wiO1xuXG5cblxuZXhwb3J0IHR5cGUgU291cmNlT3B0aW9uQnV0dG9uUHJvcHMgPSB7XG4gIGljb246IEpTWC5FbGVtZW50O1xuICBsYWJlbDogc3RyaW5nO1xuICBvbkNsaWNrOiAoKSA9PiB2b2lkO1xuICBkaXNhYmxlZFRleHQ/OiBmYWxzZSB8IHN0cmluZztcbiAgc2hvcnRjdXQ/OiBzdHJpbmc7XG4gIGFyaWFMYWJlbD86IHN0cmluZztcbn07XG5cbmV4cG9ydCBjb25zdCBTb3VyY2VPcHRpb25CdXR0b246IFJlYWN0LkZDPFNvdXJjZU9wdGlvbkJ1dHRvblByb3BzPiA9IChcbiAgeyBpY29uLCBsYWJlbCwgb25DbGljaywgc2hvcnRjdXQsIGRpc2FibGVkVGV4dCwgYXJpYUxhYmVsIH1cbikgPT4ge1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuXG4gIHJldHVybiAoXG4gICAgPFByb3RvQnV0dG9uXG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgZGlzYWJsZWQ9eyEhZGlzYWJsZWRUZXh0fVxuICAgICAgYXJpYS1sYWJlbD17YXJpYUxhYmVsfVxuICAgICAgY3NzPXt7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiaW5saW5lLWZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgbWF4SGVpZ2h0OiAyNTAsXG4gICAgICAgIG1heFdpZHRoOiA0MjAsXG4gICAgICAgIHBhZGRpbmc6IDEyLFxuICAgICAgICBmbGV4OiBcIjFcIixcblxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgICAgIGNvbG9yOiBDT0xPUlMuYWNjZW50NyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiA4LFxuICAgICAgICBib3JkZXI6IGAxcHggc29saWQgJHtDT0xPUlMubmV1dHJhbDIwfWAsXG5cbiAgICAgICAgXCImW2Rpc2FibGVkXVwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDEwLFxuICAgICAgICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDUwLFxuICAgICAgICAgIGJvcmRlckNvbG9yOiBDT0xPUlMubmV1dHJhbDE1LFxuICAgICAgICB9LFxuXG4gICAgICAgIFwiJjpub3QoW2Rpc2FibGVkXSk6aG92ZXIsICY6bm90KFtkaXNhYmxlZF0pOmZvY3VzLXZpc2libGVcIjoge1xuICAgICAgICAgIGNvbG9yOiBDT0xPUlMuYWNjZW50OCxcbiAgICAgICAgICBib3JkZXJDb2xvcjogQ09MT1JTLm5ldXRyYWwzMCxcbiAgICAgICAgICBib3hTaGFkb3c6IFwiMCAwIDE2cHggdmFyKC0tc2hhZG93LWNvbG9yKVwiLFxuICAgICAgICAgIC4uLmlzSGlnaENvbnRyYXN0ICYmIHtcbiAgICAgICAgICAgIG91dGxpbmU6IGAycHggc29saWQgJHtDT0xPUlMuYWNjZW50NH1gLFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwidHJhbnNwYXJlbnRcIixcbiAgICAgICAgICAgIGJveFNoYWRvdzogXCJub25lXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgLi4uZm9jdXNTdHlsZSh7IG9mZnNldDogLTEgfSksXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBmb250U2l6ZTogNDAsXG4gICAgICAgIHdpZHRoOiA4MCxcbiAgICAgICAgaGVpZ2h0OiA4MCxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDEwLFxuICAgICAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgICB9fT5cbiAgICAgICAge2ljb259XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXt7IGZvbnRTaXplOiAxOCwgZm9udFdlaWdodDogNzAwIH19PntsYWJlbH08L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXt7IGhlaWdodDogXCIxbGhcIiwgZm9udFNpemU6IDE0LCBtYXJnaW5Ub3A6IDQgfX0+e2Rpc2FibGVkVGV4dH08L2Rpdj5cbiAgICAgIHtzaG9ydGN1dCAmJiA8ZGl2IGNzcz17e1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICByaWdodDogOCxcbiAgICAgICAgYm90dG9tOiA4LFxuICAgICAgfX0+PFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17c2hvcnRjdXR9IC8+PC9kaXY+fVxuICAgIDwvUHJvdG9CdXR0b24+XG4gICk7XG59O1xuIl19 */\"),\n      children: icon\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n      css: _ref2,\n      children: label\n    }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n      css: _ref3,\n      children: disabledText\n    }), shortcut && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n      css: _ref4,\n      children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_shortcuts__WEBPACK_IMPORTED_MODULE_3__.ShortcutKeys, {\n        shortcut: shortcut\n      })\n    })]\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdWkvU291cmNlT3B0aW9uQnV0dG9uLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBYUE7QUFFQTtBQURBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFBQTtBQUFBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBSUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbmNhc3Qtc3R1ZGlvLy4vc3JjL3VpL1NvdXJjZU9wdGlvbkJ1dHRvbi50c3g/ZmY0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBQcm90b0J1dHRvbiwgdXNlQ29sb3JTY2hlbWUgfSBmcm9tIFwiQG9wZW5jYXN0L2FwcGtpdFwiO1xuXG5pbXBvcnQgeyBDT0xPUlMsIGZvY3VzU3R5bGUgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHsgU2hvcnRjdXRLZXlzIH0gZnJvbSBcIi4uL3Nob3J0Y3V0c1wiO1xuXG5cblxuZXhwb3J0IHR5cGUgU291cmNlT3B0aW9uQnV0dG9uUHJvcHMgPSB7XG4gIGljb246IEpTWC5FbGVtZW50O1xuICBsYWJlbDogc3RyaW5nO1xuICBvbkNsaWNrOiAoKSA9PiB2b2lkO1xuICBkaXNhYmxlZFRleHQ/OiBmYWxzZSB8IHN0cmluZztcbiAgc2hvcnRjdXQ/OiBzdHJpbmc7XG4gIGFyaWFMYWJlbD86IHN0cmluZztcbn07XG5cbmV4cG9ydCBjb25zdCBTb3VyY2VPcHRpb25CdXR0b246IFJlYWN0LkZDPFNvdXJjZU9wdGlvbkJ1dHRvblByb3BzPiA9IChcbiAgeyBpY29uLCBsYWJlbCwgb25DbGljaywgc2hvcnRjdXQsIGRpc2FibGVkVGV4dCwgYXJpYUxhYmVsIH1cbikgPT4ge1xuICBjb25zdCB7IGlzSGlnaENvbnRyYXN0IH0gPSB1c2VDb2xvclNjaGVtZSgpO1xuXG4gIHJldHVybiAoXG4gICAgPFByb3RvQnV0dG9uXG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgZGlzYWJsZWQ9eyEhZGlzYWJsZWRUZXh0fVxuICAgICAgYXJpYS1sYWJlbD17YXJpYUxhYmVsfVxuICAgICAgY3NzPXt7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiaW5saW5lLWZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgbWF4SGVpZ2h0OiAyNTAsXG4gICAgICAgIG1heFdpZHRoOiA0MjAsXG4gICAgICAgIHBhZGRpbmc6IDEyLFxuICAgICAgICBmbGV4OiBcIjFcIixcblxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5uZXV0cmFsMDUsXG4gICAgICAgIGNvbG9yOiBDT0xPUlMuYWNjZW50NyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiA4LFxuICAgICAgICBib3JkZXI6IGAxcHggc29saWQgJHtDT0xPUlMubmV1dHJhbDIwfWAsXG5cbiAgICAgICAgXCImW2Rpc2FibGVkXVwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDEwLFxuICAgICAgICAgIGNvbG9yOiBDT0xPUlMubmV1dHJhbDUwLFxuICAgICAgICAgIGJvcmRlckNvbG9yOiBDT0xPUlMubmV1dHJhbDE1LFxuICAgICAgICB9LFxuXG4gICAgICAgIFwiJjpub3QoW2Rpc2FibGVkXSk6aG92ZXIsICY6bm90KFtkaXNhYmxlZF0pOmZvY3VzLXZpc2libGVcIjoge1xuICAgICAgICAgIGNvbG9yOiBDT0xPUlMuYWNjZW50OCxcbiAgICAgICAgICBib3JkZXJDb2xvcjogQ09MT1JTLm5ldXRyYWwzMCxcbiAgICAgICAgICBib3hTaGFkb3c6IFwiMCAwIDE2cHggdmFyKC0tc2hhZG93LWNvbG9yKVwiLFxuICAgICAgICAgIC4uLmlzSGlnaENvbnRyYXN0ICYmIHtcbiAgICAgICAgICAgIG91dGxpbmU6IGAycHggc29saWQgJHtDT0xPUlMuYWNjZW50NH1gLFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwidHJhbnNwYXJlbnRcIixcbiAgICAgICAgICAgIGJveFNoYWRvdzogXCJub25lXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgLi4uZm9jdXNTdHlsZSh7IG9mZnNldDogLTEgfSksXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBmb250U2l6ZTogNDAsXG4gICAgICAgIHdpZHRoOiA4MCxcbiAgICAgICAgaGVpZ2h0OiA4MCxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMubmV1dHJhbDEwLFxuICAgICAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgICB9fT5cbiAgICAgICAge2ljb259XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXt7IGZvbnRTaXplOiAxOCwgZm9udFdlaWdodDogNzAwIH19PntsYWJlbH08L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXt7IGhlaWdodDogXCIxbGhcIiwgZm9udFNpemU6IDE0LCBtYXJnaW5Ub3A6IDQgfX0+e2Rpc2FibGVkVGV4dH08L2Rpdj5cbiAgICAgIHtzaG9ydGN1dCAmJiA8ZGl2IGNzcz17e1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICByaWdodDogOCxcbiAgICAgICAgYm90dG9tOiA4LFxuICAgICAgfX0+PFNob3J0Y3V0S2V5cyBzaG9ydGN1dD17c2hvcnRjdXR9IC8+PC9kaXY+fVxuICAgIDwvUHJvdG9CdXR0b24+XG4gICk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ui/SourceOptionButton.tsx\n");

/***/ }),

/***/ "./src/ui/VideoBox.tsx":
/*!*****************************!*\
  !*** ./src/ui/VideoBox.tsx ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VideoBox: function() { return /* binding */ VideoBox; },\n/* harmony export */   useVideoBoxResize: function() { return /* binding */ useVideoBoxResize; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var use_resize_observer_polyfilled__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! use-resize-observer/polyfilled */ \"./node_modules/use-resize-observer/polyfilled.js\");\n/* harmony import */ var use_resize_observer_polyfilled__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(use_resize_observer_polyfilled__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fast-deep-equal */ \"./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ \"./src/util/index.tsx\");\n/* harmony import */ var _opencast_appkit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opencast/appkit */ \"./node_modules/@opencast/appkit/dist/index.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n\n\n\n\n\n\n\n\nconst VideoBoxResizeContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createContext(null);\nconst useVideoBoxResize = () => (0,_util__WEBPACK_IMPORTED_MODULE_2__.usePresentContext)(VideoBoxResizeContext, \"useVideoBoxResize\");\n// Manages one or two children with given aspect ratio.\n//\n// Each child is given an aspect ratio. The child will be rendered within a\n// `<div>` that maintains this exact aspect ratio. In the one child case, that\n// `<div>` also perfectly fits within the parent container. In the case of two\n// children, those children are laid out in such a way that the utilized screen\n// space is maximized while both children have the same width or height.\n//\n// `children` has to be the length 1 or 2! The parameter `gap` specifies the\n// width of the empty space between the two children in the case that two\n// children are given.\n//\n// Each child in `children` needs to be an object with the following fields:\n//\n// - `body`: the rendered DOM.\n// - `dimensions`: a function returning `[width, height]` of the child (also\n//   defining the aspect ratio). We require the dimensions instead of only the\n//   aspect ratio to better detect changes in the video stream.\nconst VideoBox = _ref => {\n  let {\n    gap = 0,\n    minWidth = 180,\n    minHeight = 140,\n    children\n  } = _ref;\n  const {\n    ref,\n    width = 1,\n    height = 1\n  } = use_resize_observer_polyfilled__WEBPACK_IMPORTED_MODULE_4___default()();\n\n  // This is a dummy state to force a rerender.\n  const [, setForceCounter] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  const forceRender = () => setForceCounter(v => v + 1);\n\n  // We try to remember the last valid dimension. Otherwise, changing video\n  // preferences for a non-16:9 strean leads to visual noise: the box always\n  // changes between its aspect ratio and the fallback 16:9 ratio.\n  const lastDimensions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(children.map(() => null));\n  const updateLastDimensions = newDimensions => {\n    newDimensions.forEach((dimension, i) => {\n      if (dimension) {\n        lastDimensions.current[i] = dimension;\n      }\n    });\n  };\n\n  // Setup the handler for when a video stream is resized.\n  let dimensions = children.map(c => c.dimensions());\n  updateLastDimensions(dimensions);\n  const resizeVideoBox = () => {\n    const newDimensions = children.map(c => c.dimensions());\n    if (!fast_deep_equal__WEBPACK_IMPORTED_MODULE_1___default()(newDimensions, dimensions)) {\n      dimensions = newDimensions;\n      updateLastDimensions(dimensions);\n      forceRender();\n    }\n  };\n  const ar = dimensions => dimensions == null ? 16 / 9 : dimensions[0] / dimensions[1];\n  switch (children.length) {\n    case 1:\n      {\n        const child = children[0];\n        const aspectRatio = ar(lastDimensions.current[0]);\n\n        // Calculate size of child\n        let childWidth;\n        let childHeight;\n        if (width > height * aspectRatio) {\n          // Child height perfectly matches container, extra space left and right\n          childHeight = height;\n          childWidth = height * aspectRatio;\n        } else {\n          // Child width perfectly matches container, extra space top and bottom\n          childWidth = width;\n          childHeight = width / aspectRatio;\n        }\n        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(VideoBoxResizeContext.Provider, {\n          value: resizeVideoBox,\n          children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"div\", {\n            ref: ref,\n            css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.css)({\n              flex: \"1 0 0\",\n              minHeight,\n              display: \"flex\"\n            },  false ? 0 : \";label:VideoBox;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"div\", {\n              css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.css)({\n                ...(!child.autoSize && {\n                  height: childHeight,\n                  width: childWidth\n                }),\n                minWidth: `${minWidth}px`,\n                margin: \"auto\"\n              },  false ? 0 : \";label:VideoBox;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL1ZpZGVvQm94LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUErR2lCIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL1ZpZGVvQm94LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1c2VSZXNpemVPYnNlcnZlciBmcm9tIFwidXNlLXJlc2l6ZS1vYnNlcnZlci9wb2x5ZmlsbGVkXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IGVxdWFsIGZyb20gXCJmYXN0LWRlZXAtZXF1YWxcIjtcblxuaW1wb3J0IHsgdXNlUHJlc2VudENvbnRleHQgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHsgYnVnIH0gZnJvbSBcIkBvcGVuY2FzdC9hcHBraXRcIjtcblxuXG5jb25zdCBWaWRlb0JveFJlc2l6ZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PCgoKSA9PiB2b2lkKSB8IG51bGw+KG51bGwpO1xuXG5leHBvcnQgY29uc3QgdXNlVmlkZW9Cb3hSZXNpemUgPSAoKSA9PlxuICB1c2VQcmVzZW50Q29udGV4dChWaWRlb0JveFJlc2l6ZUNvbnRleHQsIFwidXNlVmlkZW9Cb3hSZXNpemVcIik7XG5cbmV4cG9ydCB0eXBlIFZpZGVvQm94UHJvcHMgPSB7XG4gIGdhcD86IG51bWJlcjtcbiAgbWluV2lkdGg/OiBudW1iZXI7XG4gIG1pbkhlaWdodD86IG51bWJlcjtcbiAgY2hpbGRyZW46IFZpZGVvQm94Q2hpbGRbXTtcbn07XG5cbmV4cG9ydCB0eXBlIFZpZGVvQm94Q2hpbGQgPSB7XG4gIGJvZHk6IEpTWC5FbGVtZW50O1xuICBkaW1lbnNpb25zOiAoKSA9PiBbbnVtYmVyLCBudW1iZXJdIHwgbnVsbDtcbiAgLyoqXG4gICAqIElmIGBmYWxzZWAgKGRlZmF1bHQpLCB0aGUgY2FsY3VsYXRlZCBzaXplIGlzIHVzZWQgZm9yIHRoZSBkaXZzLiBPdGhlcndpc2UsXG4gICAqIGB3aWR0aGAgYW5kIGBoZWlnaHRgIGFyZSB1bnNldCwgd2hpY2ggbWVhbnMgdGhlIGRpdiB0YWtlcyB0aGUgc2l6ZSBvZiBpdHNcbiAgICogY2hpbGQuIFVzZWQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICAgKi9cbiAgYXV0b1NpemU/OiBib29sZWFuO1xufTtcblxuLy8gTWFuYWdlcyBvbmUgb3IgdHdvIGNoaWxkcmVuIHdpdGggZ2l2ZW4gYXNwZWN0IHJhdGlvLlxuLy9cbi8vIEVhY2ggY2hpbGQgaXMgZ2l2ZW4gYW4gYXNwZWN0IHJhdGlvLiBUaGUgY2hpbGQgd2lsbCBiZSByZW5kZXJlZCB3aXRoaW4gYVxuLy8gYDxkaXY+YCB0aGF0IG1haW50YWlucyB0aGlzIGV4YWN0IGFzcGVjdCByYXRpby4gSW4gdGhlIG9uZSBjaGlsZCBjYXNlLCB0aGF0XG4vLyBgPGRpdj5gIGFsc28gcGVyZmVjdGx5IGZpdHMgd2l0aGluIHRoZSBwYXJlbnQgY29udGFpbmVyLiBJbiB0aGUgY2FzZSBvZiB0d29cbi8vIGNoaWxkcmVuLCB0aG9zZSBjaGlsZHJlbiBhcmUgbGFpZCBvdXQgaW4gc3VjaCBhIHdheSB0aGF0IHRoZSB1dGlsaXplZCBzY3JlZW5cbi8vIHNwYWNlIGlzIG1heGltaXplZCB3aGlsZSBib3RoIGNoaWxkcmVuIGhhdmUgdGhlIHNhbWUgd2lkdGggb3IgaGVpZ2h0LlxuLy9cbi8vIGBjaGlsZHJlbmAgaGFzIHRvIGJlIHRoZSBsZW5ndGggMSBvciAyISBUaGUgcGFyYW1ldGVyIGBnYXBgIHNwZWNpZmllcyB0aGVcbi8vIHdpZHRoIG9mIHRoZSBlbXB0eSBzcGFjZSBiZXR3ZWVuIHRoZSB0d28gY2hpbGRyZW4gaW4gdGhlIGNhc2UgdGhhdCB0d29cbi8vIGNoaWxkcmVuIGFyZSBnaXZlbi5cbi8vXG4vLyBFYWNoIGNoaWxkIGluIGBjaGlsZHJlbmAgbmVlZHMgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBmaWVsZHM6XG4vL1xuLy8gLSBgYm9keWA6IHRoZSByZW5kZXJlZCBET00uXG4vLyAtIGBkaW1lbnNpb25zYDogYSBmdW5jdGlvbiByZXR1cm5pbmcgYFt3aWR0aCwgaGVpZ2h0XWAgb2YgdGhlIGNoaWxkIChhbHNvXG4vLyAgIGRlZmluaW5nIHRoZSBhc3BlY3QgcmF0aW8pLiBXZSByZXF1aXJlIHRoZSBkaW1lbnNpb25zIGluc3RlYWQgb2Ygb25seSB0aGVcbi8vICAgYXNwZWN0IHJhdGlvIHRvIGJldHRlciBkZXRlY3QgY2hhbmdlcyBpbiB0aGUgdmlkZW8gc3RyZWFtLlxuZXhwb3J0IGNvbnN0IFZpZGVvQm94OiBSZWFjdC5GQzxWaWRlb0JveFByb3BzPiA9ICh7XG4gIGdhcCA9IDAsXG4gIG1pbldpZHRoID0gMTgwLFxuICBtaW5IZWlnaHQgPSAxNDAsXG4gIGNoaWxkcmVuLFxufSkgPT4ge1xuICBjb25zdCB7IHJlZiwgd2lkdGggPSAxLCBoZWlnaHQgPSAxIH0gPSB1c2VSZXNpemVPYnNlcnZlcigpO1xuXG4gIC8vIFRoaXMgaXMgYSBkdW1teSBzdGF0ZSB0byBmb3JjZSBhIHJlcmVuZGVyLlxuICBjb25zdCBbLCBzZXRGb3JjZUNvdW50ZXJdID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IGZvcmNlUmVuZGVyID0gKCkgPT4gc2V0Rm9yY2VDb3VudGVyKHYgPT4gdiArIDEpO1xuXG4gIC8vIFdlIHRyeSB0byByZW1lbWJlciB0aGUgbGFzdCB2YWxpZCBkaW1lbnNpb24uIE90aGVyd2lzZSwgY2hhbmdpbmcgdmlkZW9cbiAgLy8gcHJlZmVyZW5jZXMgZm9yIGEgbm9uLTE2Ojkgc3RyZWFuIGxlYWRzIHRvIHZpc3VhbCBub2lzZTogdGhlIGJveCBhbHdheXNcbiAgLy8gY2hhbmdlcyBiZXR3ZWVuIGl0cyBhc3BlY3QgcmF0aW8gYW5kIHRoZSBmYWxsYmFjayAxNjo5IHJhdGlvLlxuICBjb25zdCBsYXN0RGltZW5zaW9ucyA9IHVzZVJlZjwoW251bWJlciwgbnVtYmVyXSB8IG51bGwpW10+KGNoaWxkcmVuLm1hcCgoKSA9PiBudWxsKSk7XG4gIGNvbnN0IHVwZGF0ZUxhc3REaW1lbnNpb25zID0gKG5ld0RpbWVuc2lvbnM6IChbbnVtYmVyLCBudW1iZXJdIHwgbnVsbClbXSkgPT4ge1xuICAgIG5ld0RpbWVuc2lvbnMuZm9yRWFjaCgoZGltZW5zaW9uLCBpKSA9PiB7XG4gICAgICBpZiAoZGltZW5zaW9uKSB7XG4gICAgICAgIGxhc3REaW1lbnNpb25zLmN1cnJlbnRbaV0gPSBkaW1lbnNpb247XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gU2V0dXAgdGhlIGhhbmRsZXIgZm9yIHdoZW4gYSB2aWRlbyBzdHJlYW0gaXMgcmVzaXplZC5cbiAgbGV0IGRpbWVuc2lvbnMgPSBjaGlsZHJlbi5tYXAoYyA9PiBjLmRpbWVuc2lvbnMoKSk7XG4gIHVwZGF0ZUxhc3REaW1lbnNpb25zKGRpbWVuc2lvbnMpO1xuICBjb25zdCByZXNpemVWaWRlb0JveCA9ICgpID0+IHtcbiAgICBjb25zdCBuZXdEaW1lbnNpb25zID0gY2hpbGRyZW4ubWFwKGMgPT4gYy5kaW1lbnNpb25zKCkpO1xuICAgIGlmICghZXF1YWwobmV3RGltZW5zaW9ucywgZGltZW5zaW9ucykpIHtcbiAgICAgIGRpbWVuc2lvbnMgPSBuZXdEaW1lbnNpb25zO1xuICAgICAgdXBkYXRlTGFzdERpbWVuc2lvbnMoZGltZW5zaW9ucyk7XG4gICAgICBmb3JjZVJlbmRlcigpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBhciA9IChkaW1lbnNpb25zOiBbbnVtYmVyLCBudW1iZXJdIHwgbnVsbCk6IG51bWJlciA9PlxuICAgIGRpbWVuc2lvbnMgPT0gbnVsbCA/IDE2IC8gOSA6IGRpbWVuc2lvbnNbMF0gLyBkaW1lbnNpb25zWzFdO1xuXG5cbiAgc3dpdGNoIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBjYXNlIDE6IHtcbiAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5bMF07XG4gICAgICBjb25zdCBhc3BlY3RSYXRpbyA9IGFyKGxhc3REaW1lbnNpb25zLmN1cnJlbnRbMF0pO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgc2l6ZSBvZiBjaGlsZFxuICAgICAgbGV0IGNoaWxkV2lkdGg6IG51bWJlcjtcbiAgICAgIGxldCBjaGlsZEhlaWdodDogbnVtYmVyO1xuXG4gICAgICBpZiAod2lkdGggPiBoZWlnaHQgKiBhc3BlY3RSYXRpbykge1xuICAgICAgICAvLyBDaGlsZCBoZWlnaHQgcGVyZmVjdGx5IG1hdGNoZXMgY29udGFpbmVyLCBleHRyYSBzcGFjZSBsZWZ0IGFuZCByaWdodFxuICAgICAgICBjaGlsZEhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgY2hpbGRXaWR0aCA9IGhlaWdodCAqIGFzcGVjdFJhdGlvO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ2hpbGQgd2lkdGggcGVyZmVjdGx5IG1hdGNoZXMgY29udGFpbmVyLCBleHRyYSBzcGFjZSB0b3AgYW5kIGJvdHRvbVxuICAgICAgICBjaGlsZFdpZHRoID0gd2lkdGg7XG4gICAgICAgIGNoaWxkSGVpZ2h0ID0gKHdpZHRoIC8gYXNwZWN0UmF0aW8pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8VmlkZW9Cb3hSZXNpemVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtyZXNpemVWaWRlb0JveH0+XG4gICAgICAgICAgPGRpdiByZWY9e3JlZn0gY3NzPXt7IGZsZXg6IFwiMSAwIDBcIiwgbWluSGVpZ2h0LCBkaXNwbGF5OiBcImZsZXhcIiB9fT5cbiAgICAgICAgICAgIDxkaXYgY3NzPXt7XG4gICAgICAgICAgICAgIC4uLiFjaGlsZC5hdXRvU2l6ZSAmJiB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBjaGlsZEhlaWdodCxcbiAgICAgICAgICAgICAgICB3aWR0aDogY2hpbGRXaWR0aCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWluV2lkdGg6IGAke21pbldpZHRofXB4YCxcbiAgICAgICAgICAgICAgbWFyZ2luOiBcImF1dG9cIixcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICB7IGNoaWxkLmJvZHkgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvVmlkZW9Cb3hSZXNpemVDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgKTtcbiAgICB9XG4gICAgY2FzZSAyOiB7XG4gICAgICAvLyBXZSBuZWVkIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSB0d28gdmlkZW9zIGFyZSBzaWRlIGJ5IHNpZGUgb3IgaWYgb25lXG4gICAgICAvLyBzaG91bGQgYmUgYmVsb3cgdGhlIG90aGVyLiBXZSBjYWxjdWxhdGUgdGhlIHV0aWxpemVkIHNwYWNlIGZvciBlYWNoXG4gICAgICAvLyBvcHRpb24gYW5kIHRoZW4gdGFrZSB0aGUgb3B0aW9uIHRoYXQgdXRpbGl6ZXMgbW9yZSBzcGFjZS5cbiAgICAgIC8vXG4gICAgICAvLyBCZWxvdyB3ZSBuZWVkIHRvIGZpZ3VyZSBvdXQgdGhlIGFzcGVjdCByYXRpb3Mgb2YgdGhlIGNvbWJpbmVkIHZpZGVvc1xuICAgICAgLy8gZWl0aGVyIGluIHJvdyBvciBjb2x1bW4gbGF5b3V0LiBDb25zaWRlciB0aGlzIHRhYmxlOlxuICAgICAgLy9cbiAgICAgIC8vIHwgICAgICAgICAgICAgfCBhICAgICAgfCBiICAgICAgfCByb3cgICAgfCBjb2x1bW4gfFxuICAgICAgLy8gfCAtLS0tLS0tLS0tLSB8IC0tLS0tLSB8IC0tLS0tLSB8IC0tLS0tLSB8IC0tLS0tLSB8XG4gICAgICAvLyB8IGFzcGVjdCAgICAgIHwgMTY6OSAgIHwgNDozICAgIHwgMjg6OSAgIHwgMTY6MjEgIHxcbiAgICAgIC8vIHwgbm9ybWFsaXplZCAgfCAxLjc3OjEgfCAxLjMzOjEgfCAzLjExOjEgfCAwLjc2OjEgfFxuICAgICAgLy9cbiAgICAgIC8vIEl0IHNob3dzIHRoZSB0d28gYXNwZWN0IHJhdGlvcyBhIGFuZCBiIGNvbWJpbmVkIGluIGJvdGggd2F5cy4gSW4gdGhlXG4gICAgICAvLyBcInJvd1wiIGNhc2UsIHRoZSBjb21iaW5lZCBhc3BlY3QgcmF0aW8gaXMgc2ltcGxlOiBqdXN0IGFkZCBib3RoIGNoaWxkcmVuXG4gICAgICAvLyBhc3BlY3QgcmF0aW9zLiBUaGUgY29sdW1uIGNhc2UgaXMgbW9yZSBkaWZmaWN1bHQuIEZpcnN0IHdlIGhhdmUgdG9cbiAgICAgIC8vIG5vcm1hbGl6ZSBib3RoIHdpdGggcmVzcGVjdCB0byB0aGUgd2lkdGguIFRoaXMgcmVzdWx0cyBpbiAxOjAuNTYgYW5kXG4gICAgICAvLyAxOjAuNzUgcmVzcGVjdGl2ZWx5LiBXZSBjYW4gbm93IGFkZCB0aG9zZSwgcmVzdWx0aW5nIGluIDE6MS4zMS5cbiAgICAgIC8vIEZpbmFsbHksIHdlIG5vcm1hbGl6ZSB3aXRoIHJlc3BlY3QgdG8gaGVpZ2h0IGFnYWluOiAwLjc2OjFcblxuICAgICAgY29uc3QgYXNwZWN0UmF0aW9zID0gbGFzdERpbWVuc2lvbnMuY3VycmVudC5tYXAoZCA9PiBhcihkKSk7XG5cbiAgICAgIC8vIFZpZGVvcyBzaWRlIGJ5IHNpZGUgKHJvdykuXG4gICAgICBjb25zdCB7IHJvd1dpZHRocywgcm93SGVpZ2h0cyB9ID0gKCgpID0+IHtcbiAgICAgICAgY29uc3QgYXZhaWxhYmxlV2lkdGggPSB3aWR0aCAtIGdhcDtcbiAgICAgICAgY29uc3QgY29tYmluZWRBc3BlY3RSYXRpbyA9IGFzcGVjdFJhdGlvc1swXSArIGFzcGVjdFJhdGlvc1sxXTtcbiAgICAgICAgaWYgKGF2YWlsYWJsZVdpZHRoID4gaGVpZ2h0ICogY29tYmluZWRBc3BlY3RSYXRpbykge1xuICAgICAgICAgIC8vIENoaWxkcmVuIGhlaWdodCBwZXJmZWN0bHkgbWF0Y2hlcyBjb250YWluZXIsIGV4dHJhIHNwYWNlIGxlZnQgYW5kXG4gICAgICAgICAgLy8gcmlnaHQuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJvd0hlaWdodHM6IEFycmF5KDIpLmZpbGwoaGVpZ2h0KSxcbiAgICAgICAgICAgIHJvd1dpZHRoczogYXNwZWN0UmF0aW9zLm1hcChhciA9PiBoZWlnaHQgKiBhciksXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBDaGlsZHJlbiB3aWR0aCBwZXJmZWN0bHkgbWF0Y2hlcyBjb250YWluZXIsIGV4dHJhIHNwYWNlIHRvcCBhbmRcbiAgICAgICAgICAvLyBib3R0b20uXG4gICAgICAgICAgY29uc3QgYmFzZUhlaWdodCA9IGF2YWlsYWJsZVdpZHRoIC8gY29tYmluZWRBc3BlY3RSYXRpbztcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcm93SGVpZ2h0czogY2hpbGRyZW4ubWFwKCgpID0+IGJhc2VIZWlnaHQpLFxuICAgICAgICAgICAgcm93V2lkdGhzOiBhc3BlY3RSYXRpb3MubWFwKGFyID0+IGJhc2VIZWlnaHQgKiBhciksXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSkoKTtcblxuICAgICAgLy8gT25lIHZpZGVvIGJlbG93IHRoZSBvdGhlciAoY29sL2NvbHVtbikuXG4gICAgICBjb25zdCB7IGNvbFdpZHRocywgY29sSGVpZ2h0cyB9ID0gKCgpID0+IHtcbiAgICAgICAgY29uc3QgYXZhaWxhYmxlSGVpZ2h0ID0gaGVpZ2h0IC0gZ2FwO1xuICAgICAgICBjb25zdCBjb21iaW5lZEFzcGVjdFJhdGlvID1cbiAgICAgICAgICAxIC8gKCgxIC8gYXNwZWN0UmF0aW9zWzBdKSArICgxIC8gYXNwZWN0UmF0aW9zWzFdKSk7XG5cbiAgICAgICAgaWYgKHdpZHRoID4gYXZhaWxhYmxlSGVpZ2h0ICogY29tYmluZWRBc3BlY3RSYXRpbykge1xuICAgICAgICAgIC8vIENoaWxkcmVuIGhlaWdodCBwZXJmZWN0bHkgbWF0Y2hlcyBjb250YWluZXIsIGV4dHJhIHNwYWNlIGxlZnQgYW5kXG4gICAgICAgICAgLy8gcmlnaHQuXG4gICAgICAgICAgY29uc3Qgd2lkdGggPSBhdmFpbGFibGVIZWlnaHQgKiBjb21iaW5lZEFzcGVjdFJhdGlvO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb2xIZWlnaHRzOiBjaGlsZHJlbi5tYXAoKF9jLCBpKSA9PiAod2lkdGggLyBhc3BlY3RSYXRpb3NbaV0pKSxcbiAgICAgICAgICAgIGNvbFdpZHRoczogQXJyYXkoMikuZmlsbCh3aWR0aCksXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBDaGlsZHJlbiB3aWR0aCBwZXJmZWN0bHkgbWF0Y2hlcyBjb250YWluZXIsIGV4dHJhIHNwYWNlIHRvcCBhbmRcbiAgICAgICAgICAvLyBib3R0b20uXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbEhlaWdodHM6IGNoaWxkcmVuLm1hcCgoX2MsIGkpID0+ICh3aWR0aCAvIGFzcGVjdFJhdGlvc1tpXSkpLFxuICAgICAgICAgICAgY29sV2lkdGhzOiBBcnJheSgyKS5maWxsKHdpZHRoKSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KSgpO1xuXG4gICAgICAvLyBGaW5hbGx5LCB3ZSBjb21wYXJlIHRoZSBhcmVhcyB0aGUgdHdvIGxheW91dHMgd291bGQgdXNlLiBUaGUgb25lIHdpdGhcbiAgICAgIC8vIHRoZSBsYXJnZXIgYXJlYSB1dGlsaXplZCB3aW5zLlxuICAgICAgY29uc3Qgcm93QXJlYSA9IHJvd1dpZHRoc1swXSAqIHJvd0hlaWdodHNbMF0gKyByb3dXaWR0aHNbMV0gKiByb3dIZWlnaHRzWzFdO1xuICAgICAgY29uc3QgY29sQXJlYSA9IGNvbFdpZHRoc1swXSAqIGNvbEhlaWdodHNbMF0gKyBjb2xXaWR0aHNbMV0gKiBjb2xIZWlnaHRzWzFdO1xuICAgICAgbGV0IHdpZHRoczogbnVtYmVyW107XG4gICAgICBsZXQgaGVpZ2h0czogbnVtYmVyW107XG4gICAgICBsZXQgZmxleERpcmVjdGlvbjogXCJyb3dcIiB8IFwiY29sdW1uXCI7XG4gICAgICBpZiAocm93QXJlYSA+IGNvbEFyZWEpIHtcbiAgICAgICAgZmxleERpcmVjdGlvbiA9IFwicm93XCI7XG4gICAgICAgIHdpZHRocyA9IHJvd1dpZHRocztcbiAgICAgICAgaGVpZ2h0cyA9IHJvd0hlaWdodHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmbGV4RGlyZWN0aW9uID0gXCJjb2x1bW5cIjtcbiAgICAgICAgd2lkdGhzID0gY29sV2lkdGhzO1xuICAgICAgICBoZWlnaHRzID0gY29sSGVpZ2h0cztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFZpZGVvQm94UmVzaXplQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17cmVzaXplVmlkZW9Cb3h9PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIHJlZj17cmVmfVxuICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgIGZsZXg6IFwiMSAwIDBcIixcbiAgICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICAgIGdhcDogZ2FwLFxuICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJzcGFjZS1iZXR3ZWVuXCIsXG4gICAgICAgICAgICAgIG1pbkhlaWdodCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICAgICAgLi4uIWNoaWxkcmVuWzBdLmF1dG9TaXplICYmIHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodHNbMF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoc1swXSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWluV2lkdGg6IGAke21pbldpZHRofXB4YCxcbiAgICAgICAgICAgICAgbWFyZ2luOiBcImF1dG9cIixcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICB7IGNoaWxkcmVuWzBdLmJvZHkgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNzcz17e1xuICAgICAgICAgICAgICAuLi4hY2hpbGRyZW5bMV0uYXV0b1NpemUgJiYge1xuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0c1sxXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGhzWzFdLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtaW5XaWR0aDogYCR7bWluV2lkdGh9cHhgLFxuICAgICAgICAgICAgICBtYXJnaW46IFwiYXV0b1wiLFxuICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgIHsgY2hpbGRyZW5bMV0uYm9keSB9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9WaWRlb0JveFJlc2l6ZUNvbnRleHQuUHJvdmlkZXI+XG4gICAgICApO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGJ1ZyhcIkludGVybmFsIGVycm9yOiB0b28gZmV3IG9yIHRvbyBtYW55IHZpZGVvIHN0cmVhbXNcIik7XG4gIH1cbn07XG4iXX0= */\"),\n              children: child.body\n            })\n          })\n        });\n      }\n    case 2:\n      {\n        // We need to decide whether the two videos are side by side or if one\n        // should be below the other. We calculate the utilized space for each\n        // option and then take the option that utilizes more space.\n        //\n        // Below we need to figure out the aspect ratios of the combined videos\n        // either in row or column layout. Consider this table:\n        //\n        // |             | a      | b      | row    | column |\n        // | ----------- | ------ | ------ | ------ | ------ |\n        // | aspect      | 16:9   | 4:3    | 28:9   | 16:21  |\n        // | normalized  | 1.77:1 | 1.33:1 | 3.11:1 | 0.76:1 |\n        //\n        // It shows the two aspect ratios a and b combined in both ways. In the\n        // \"row\" case, the combined aspect ratio is simple: just add both children\n        // aspect ratios. The column case is more difficult. First we have to\n        // normalize both with respect to the width. This results in 1:0.56 and\n        // 1:0.75 respectively. We can now add those, resulting in 1:1.31.\n        // Finally, we normalize with respect to height again: 0.76:1\n\n        const aspectRatios = lastDimensions.current.map(d => ar(d));\n\n        // Videos side by side (row).\n        const {\n          rowWidths,\n          rowHeights\n        } = (() => {\n          const availableWidth = width - gap;\n          const combinedAspectRatio = aspectRatios[0] + aspectRatios[1];\n          if (availableWidth > height * combinedAspectRatio) {\n            // Children height perfectly matches container, extra space left and\n            // right.\n            return {\n              rowHeights: Array(2).fill(height),\n              rowWidths: aspectRatios.map(ar => height * ar)\n            };\n          } else {\n            // Children width perfectly matches container, extra space top and\n            // bottom.\n            const baseHeight = availableWidth / combinedAspectRatio;\n            return {\n              rowHeights: children.map(() => baseHeight),\n              rowWidths: aspectRatios.map(ar => baseHeight * ar)\n            };\n          }\n        })();\n\n        // One video below the other (col/column).\n        const {\n          colWidths,\n          colHeights\n        } = (() => {\n          const availableHeight = height - gap;\n          const combinedAspectRatio = 1 / (1 / aspectRatios[0] + 1 / aspectRatios[1]);\n          if (width > availableHeight * combinedAspectRatio) {\n            // Children height perfectly matches container, extra space left and\n            // right.\n            const width = availableHeight * combinedAspectRatio;\n            return {\n              colHeights: children.map((_c, i) => width / aspectRatios[i]),\n              colWidths: Array(2).fill(width)\n            };\n          } else {\n            // Children width perfectly matches container, extra space top and\n            // bottom.\n            return {\n              colHeights: children.map((_c, i) => width / aspectRatios[i]),\n              colWidths: Array(2).fill(width)\n            };\n          }\n        })();\n\n        // Finally, we compare the areas the two layouts would use. The one with\n        // the larger area utilized wins.\n        const rowArea = rowWidths[0] * rowHeights[0] + rowWidths[1] * rowHeights[1];\n        const colArea = colWidths[0] * colHeights[0] + colWidths[1] * colHeights[1];\n        let widths;\n        let heights;\n        let flexDirection;\n        if (rowArea > colArea) {\n          flexDirection = \"row\";\n          widths = rowWidths;\n          heights = rowHeights;\n        } else {\n          flexDirection = \"column\";\n          widths = colWidths;\n          heights = colHeights;\n        }\n        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(VideoBoxResizeContext.Provider, {\n          value: resizeVideoBox,\n          children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"div\", {\n            ref: ref,\n            css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.css)({\n              flex: \"1 0 0\",\n              display: \"flex\",\n              gap: gap,\n              flexDirection,\n              justifyContent: \"space-between\",\n              minHeight\n            },  false ? 0 : \";label:VideoBox;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n            children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"div\", {\n              css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.css)({\n                ...(!children[0].autoSize && {\n                  height: heights[0],\n                  width: widths[0]\n                }),\n                minWidth: `${minWidth}px`,\n                margin: \"auto\"\n              },  false ? 0 : \";label:VideoBox;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n              children: children[0].body\n            }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"div\", {\n              css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.css)({\n                ...(!children[1].autoSize && {\n                  height: heights[1],\n                  width: widths[1]\n                }),\n                minWidth: `${minWidth}px`,\n                margin: \"auto\"\n              },  false ? 0 : \";label:VideoBox;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n              children: children[1].body\n            })]\n          })\n        });\n      }\n    default:\n      return (0,_opencast_appkit__WEBPACK_IMPORTED_MODULE_3__.bug)(\"Internal error: too few or too many video streams\");\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ui/VideoBox.tsx\n");

/***/ }),

/***/ "./src/ui/global-style.tsx":
/*!*********************************!*\
  !*** ./src/ui/global-style.tsx ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GlobalStyle: function() { return /* binding */ GlobalStyle; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n// There are also very few global styles in `index.html` as those are needed for\n// the loading indicator already.\n\n\n\nconst GlobalStyle = () => (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n  children: [(0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_emotion_react__WEBPACK_IMPORTED_MODULE_1__.Global, {\n    styles: CSS_RESETS\n  }), (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_emotion_react__WEBPACK_IMPORTED_MODULE_1__.Global, {\n    styles: GLOBAL_STYLE\n  })]\n});\n\n/** This is just styling for Tobira that we want to apply globally. */\nconst GLOBAL_STYLE =  false ? 0 : {\n  name: \"xcz4cg-GLOBAL_STYLE\",\n  styles: \":root{--min-page-width:320px;}body{font-family:'Roboto Flex Variable', sans-serif;font-weight:400;line-height:1.5;font-size:16px;min-width:var(--min-page-width);};label:GLOBAL_STYLE;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL2dsb2JhbC1zdHlsZS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBV3FCIiwiZmlsZSI6Ii9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL2dsb2JhbC1zdHlsZS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHbG9iYWwsIGNzcyB9IGZyb20gXCJAZW1vdGlvbi9yZWFjdFwiO1xuXG4vLyBUaGVyZSBhcmUgYWxzbyB2ZXJ5IGZldyBnbG9iYWwgc3R5bGVzIGluIGBpbmRleC5odG1sYCBhcyB0aG9zZSBhcmUgbmVlZGVkIGZvclxuLy8gdGhlIGxvYWRpbmcgaW5kaWNhdG9yIGFscmVhZHkuXG5leHBvcnQgY29uc3QgR2xvYmFsU3R5bGU6IFJlYWN0LkZDID0gKCkgPT4gPD5cbiAgPEdsb2JhbCBzdHlsZXM9e0NTU19SRVNFVFN9IC8+XG4gIDxHbG9iYWwgc3R5bGVzPXtHTE9CQUxfU1RZTEV9IC8+XG48Lz47XG5cblxuLyoqIFRoaXMgaXMganVzdCBzdHlsaW5nIGZvciBUb2JpcmEgdGhhdCB3ZSB3YW50IHRvIGFwcGx5IGdsb2JhbGx5LiAqL1xuY29uc3QgR0xPQkFMX1NUWUxFID0gY3NzKHtcbiAgXCI6cm9vdFwiOiB7XG4gICAgXCItLW1pbi1wYWdlLXdpZHRoXCI6IFwiMzIwcHhcIixcbiAgfSxcbiAgYm9keToge1xuICAgIC8vIC8vIEFjY2VudCBjb2xvciBmb3IgZ2VuZXJhdGVkIFVJIGNvbnRyb2wgYDxpbnB1dD5gIGVsZW1lbnRzXG4gICAgLy8gLy8gd2hlcmUgdHlwZT1cImNoZWNrYm94XCIsIFwicmFkaW9cIiBvciBcInJhbmdlXCIsXG4gICAgLy8gLy8gYXMgd2VsbCBhcyBgPHByb2dyZXNzPmAgZWxlbWVudHMuXG4gICAgLy8gYWNjZW50Q29sb3I6IENPTE9SUy5wcmltYXJ5MCxcblxuICAgIGZvbnRGYW1pbHk6IFwiJ1JvYm90byBGbGV4IFZhcmlhYmxlJywgc2Fucy1zZXJpZlwiLFxuICAgIGZvbnRXZWlnaHQ6IDQwMCxcblxuICAgIC8vIEEgcmVzZXQgdG8gYSBzZW5zaWJsZSB2YWx1ZS5cbiAgICBsaW5lSGVpZ2h0OiAxLjUsXG5cbiAgICAvLyAxNnB4IGlzIGEgZ29vZCBkZWZhdWx0IGJvZHkgdGV4dCBzaXplIGFjY29yZGluZyB0byB0aGUgaW50ZXJuZXQgKFRNKS5cbiAgICBmb250U2l6ZTogMTYsXG5cbiAgICAvLyBGcm9tIGEgc2V0IG9mIHBvcHVsYXIgcGhvbmVzLCB0aGUgaVBob25lIDUgaGFzIHRoZSBzbWFsbGVzdCB2aWV3cG9ydFxuICAgIC8vIHdpZHRoOiAzMjBweC4gSXQgZG9lcyBtYWtlIHNlbnNlIHRvIHNldCBhIG1pbmltdW0gd2lkdGggZWFybHkgb24gaW5cbiAgICAvLyBvcmRlciB0byBrbm93IHdoZXJlIHdlIGNhbiBzdG9wIGNhcmluZy5cbiAgICBtaW5XaWR0aDogXCJ2YXIoLS1taW4tcGFnZS13aWR0aClcIixcbiAgfSxcbiAgLy8gYToge1xuICAvLyAgICAgY29sb3I6IENPTE9SUy5wcmltYXJ5MCxcbiAgLy8gICAgIFwiJjpob3ZlciwgJjpmb2N1c1wiOiB7XG4gIC8vICAgICAgICAgdGV4dERlY29yYXRpb246IFwibm9uZVwiLFxuICAvLyAgICAgICAgIGNvbG9yOiBDT0xPUlMucHJpbWFyeTEsXG4gIC8vICAgICB9LFxuICAvLyAgICAgXCI6Zm9jdXMtdmlzaWJsZVwiOiB7IG91dGxpbmU6IGAyLjVweCBzb2xpZCAke0NPTE9SUy5mb2N1c31gIH0sXG4gIC8vIH0sXG59KTtcblxuLyoqXG4gKiBUaGUgZm9sbG93aW5nIGlzIGEgbWluaW1hbCBzZXQgb2YgQ1NTIHJlc2V0IHJ1bGVzIGluIG9yZGVyIHRvIGdldCByaWQgb2ZcbiAqIGJyb3dzZXIgZGVwZW5kZW50LCBpbmNvbnNpc3RlbnQgb3IgdW5leHBlY3RlZCBiZWhhdmlvci4gUGFydHMgb2YgdGhpc1xuICogYXJlIHRha2VuIGZyb20gaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL2hhbmtjaGl6bGphdy9tb2Rlcm4tY3NzLXJlc2V0XG4gKiBMaWNlbnNlZCBhcyBNSVQsIEFuZHkgQmVsbCBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKi9cbmNvbnN0IENTU19SRVNFVFMgPSBjc3Moe1xuICAvLyBFdmVyeXRoaW5nIHNob3VsZCBoYXZlIGJveC1zaXppbmcgYm9yZGVyLWJveCBieSBkZWZhdWx0IGFzIGl0J3MgbW9yZVxuICAvLyBpbnR1aXRpdmUgYW5kIGV4cGVjdGVkLlxuICBcIiosICo6OmJlZm9yZSwgKjo6YWZ0ZXJcIjoge1xuICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gIH0sXG5cbiAgLy8gUmVtb3ZlIGRlZmF1bHQgbWFyZ2lucyBvZiB0aGUgbW9zdCBpbXBvcnRhbnQgZWxlbWVudHMuXG4gIFwiYm9keSwgaDEsIGgyLCBoMywgaDQsIHAsIGxpLCBmaWd1cmUsIGZpZ2NhcHRpb24sIGJsb2NrcXVvdGUsIGRsLCBkZCwgcHJlXCI6IHtcbiAgICBtYXJnaW46IDAsXG4gIH0sXG5cbiAgXCJodG1sLCBib2R5LCBib2R5ID4gI3Jvb3RcIjoge1xuICAgIGhlaWdodDogXCIxMDAlXCIsXG4gIH0sXG5cbiAgLy8gVGhpcyBpbXByb3ZlcyB0aGUgcmVhZGFiaWxpdHkgb2YgdW5kZXJsaW5lcyBpbiBsaW5rcy5cbiAgYToge1xuICAgIHRleHREZWNvcmF0aW9uU2tpcEluazogXCJhdXRvXCIsXG4gIH0sXG5cbiAgLy8gU29tZSBlbGVtZW50cyBub3QgaW5oZXJldGluZyBmb250cyBpcyBhIHJlYWxseSBjb25mdXNpbmcgYnJvd3NlciBkZWZhdWx0LlxuICBcImlucHV0LCBidXR0b24sIHRleHRhcmVhLCBzZWxlY3RcIjoge1xuICAgIGZvbnQ6IFwiaW5oZXJpdFwiLFxuICAgIG1hcmdpbjogMCxcbiAgfSxcbn0pO1xuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\n/**\n * The following is a minimal set of CSS reset rules in order to get rid of\n * browser dependent, inconsistent or unexpected behavior. Parts of this\n * are taken from here: https://github.com/hankchizljaw/modern-css-reset\n * Licensed as MIT, Andy Bell and other contributors\n */\nconst CSS_RESETS =  false ? 0 : {\n  name: \"r2qn5n-CSS_RESETS\",\n  styles: \"*, *::before, *::after{box-sizing:border-box;}body, h1, h2, h3, h4, p, li, figure, figcaption, blockquote, dl, dd, pre{margin:0;}html, body, body > #root{height:100%;}a{text-decoration-skip-ink:auto;}input, button, textarea, select{font:inherit;margin:0;};label:CSS_RESETS;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL29wZW5jYXN0LXN0dWRpby9vcGVuY2FzdC1zdHVkaW8vc3JjL3VpL2dsb2JhbC1zdHlsZS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbURtQiIsImZpbGUiOiIvaG9tZS9ydW5uZXIvd29yay9vcGVuY2FzdC1zdHVkaW8vb3BlbmNhc3Qtc3R1ZGlvL3NyYy91aS9nbG9iYWwtc3R5bGUudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2xvYmFsLCBjc3MgfSBmcm9tIFwiQGVtb3Rpb24vcmVhY3RcIjtcblxuLy8gVGhlcmUgYXJlIGFsc28gdmVyeSBmZXcgZ2xvYmFsIHN0eWxlcyBpbiBgaW5kZXguaHRtbGAgYXMgdGhvc2UgYXJlIG5lZWRlZCBmb3Jcbi8vIHRoZSBsb2FkaW5nIGluZGljYXRvciBhbHJlYWR5LlxuZXhwb3J0IGNvbnN0IEdsb2JhbFN0eWxlOiBSZWFjdC5GQyA9ICgpID0+IDw+XG4gIDxHbG9iYWwgc3R5bGVzPXtDU1NfUkVTRVRTfSAvPlxuICA8R2xvYmFsIHN0eWxlcz17R0xPQkFMX1NUWUxFfSAvPlxuPC8+O1xuXG5cbi8qKiBUaGlzIGlzIGp1c3Qgc3R5bGluZyBmb3IgVG9iaXJhIHRoYXQgd2Ugd2FudCB0byBhcHBseSBnbG9iYWxseS4gKi9cbmNvbnN0IEdMT0JBTF9TVFlMRSA9IGNzcyh7XG4gIFwiOnJvb3RcIjoge1xuICAgIFwiLS1taW4tcGFnZS13aWR0aFwiOiBcIjMyMHB4XCIsXG4gIH0sXG4gIGJvZHk6IHtcbiAgICAvLyAvLyBBY2NlbnQgY29sb3IgZm9yIGdlbmVyYXRlZCBVSSBjb250cm9sIGA8aW5wdXQ+YCBlbGVtZW50c1xuICAgIC8vIC8vIHdoZXJlIHR5cGU9XCJjaGVja2JveFwiLCBcInJhZGlvXCIgb3IgXCJyYW5nZVwiLFxuICAgIC8vIC8vIGFzIHdlbGwgYXMgYDxwcm9ncmVzcz5gIGVsZW1lbnRzLlxuICAgIC8vIGFjY2VudENvbG9yOiBDT0xPUlMucHJpbWFyeTAsXG5cbiAgICBmb250RmFtaWx5OiBcIidSb2JvdG8gRmxleCBWYXJpYWJsZScsIHNhbnMtc2VyaWZcIixcbiAgICBmb250V2VpZ2h0OiA0MDAsXG5cbiAgICAvLyBBIHJlc2V0IHRvIGEgc2Vuc2libGUgdmFsdWUuXG4gICAgbGluZUhlaWdodDogMS41LFxuXG4gICAgLy8gMTZweCBpcyBhIGdvb2QgZGVmYXVsdCBib2R5IHRleHQgc2l6ZSBhY2NvcmRpbmcgdG8gdGhlIGludGVybmV0IChUTSkuXG4gICAgZm9udFNpemU6IDE2LFxuXG4gICAgLy8gRnJvbSBhIHNldCBvZiBwb3B1bGFyIHBob25lcywgdGhlIGlQaG9uZSA1IGhhcyB0aGUgc21hbGxlc3Qgdmlld3BvcnRcbiAgICAvLyB3aWR0aDogMzIwcHguIEl0IGRvZXMgbWFrZSBzZW5zZSB0byBzZXQgYSBtaW5pbXVtIHdpZHRoIGVhcmx5IG9uIGluXG4gICAgLy8gb3JkZXIgdG8ga25vdyB3aGVyZSB3ZSBjYW4gc3RvcCBjYXJpbmcuXG4gICAgbWluV2lkdGg6IFwidmFyKC0tbWluLXBhZ2Utd2lkdGgpXCIsXG4gIH0sXG4gIC8vIGE6IHtcbiAgLy8gICAgIGNvbG9yOiBDT0xPUlMucHJpbWFyeTAsXG4gIC8vICAgICBcIiY6aG92ZXIsICY6Zm9jdXNcIjoge1xuICAvLyAgICAgICAgIHRleHREZWNvcmF0aW9uOiBcIm5vbmVcIixcbiAgLy8gICAgICAgICBjb2xvcjogQ09MT1JTLnByaW1hcnkxLFxuICAvLyAgICAgfSxcbiAgLy8gICAgIFwiOmZvY3VzLXZpc2libGVcIjogeyBvdXRsaW5lOiBgMi41cHggc29saWQgJHtDT0xPUlMuZm9jdXN9YCB9LFxuICAvLyB9LFxufSk7XG5cbi8qKlxuICogVGhlIGZvbGxvd2luZyBpcyBhIG1pbmltYWwgc2V0IG9mIENTUyByZXNldCBydWxlcyBpbiBvcmRlciB0byBnZXQgcmlkIG9mXG4gKiBicm93c2VyIGRlcGVuZGVudCwgaW5jb25zaXN0ZW50IG9yIHVuZXhwZWN0ZWQgYmVoYXZpb3IuIFBhcnRzIG9mIHRoaXNcbiAqIGFyZSB0YWtlbiBmcm9tIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9oYW5rY2hpemxqYXcvbW9kZXJuLWNzcy1yZXNldFxuICogTGljZW5zZWQgYXMgTUlULCBBbmR5IEJlbGwgYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICovXG5jb25zdCBDU1NfUkVTRVRTID0gY3NzKHtcbiAgLy8gRXZlcnl0aGluZyBzaG91bGQgaGF2ZSBib3gtc2l6aW5nIGJvcmRlci1ib3ggYnkgZGVmYXVsdCBhcyBpdCdzIG1vcmVcbiAgLy8gaW50dWl0aXZlIGFuZCBleHBlY3RlZC5cbiAgXCIqLCAqOjpiZWZvcmUsICo6OmFmdGVyXCI6IHtcbiAgICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICB9LFxuXG4gIC8vIFJlbW92ZSBkZWZhdWx0IG1hcmdpbnMgb2YgdGhlIG1vc3QgaW1wb3J0YW50IGVsZW1lbnRzLlxuICBcImJvZHksIGgxLCBoMiwgaDMsIGg0LCBwLCBsaSwgZmlndXJlLCBmaWdjYXB0aW9uLCBibG9ja3F1b3RlLCBkbCwgZGQsIHByZVwiOiB7XG4gICAgbWFyZ2luOiAwLFxuICB9LFxuXG4gIFwiaHRtbCwgYm9keSwgYm9keSA+ICNyb290XCI6IHtcbiAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICB9LFxuXG4gIC8vIFRoaXMgaW1wcm92ZXMgdGhlIHJlYWRhYmlsaXR5IG9mIHVuZGVybGluZXMgaW4gbGlua3MuXG4gIGE6IHtcbiAgICB0ZXh0RGVjb3JhdGlvblNraXBJbms6IFwiYXV0b1wiLFxuICB9LFxuXG4gIC8vIFNvbWUgZWxlbWVudHMgbm90IGluaGVyZXRpbmcgZm9udHMgaXMgYSByZWFsbHkgY29uZnVzaW5nIGJyb3dzZXIgZGVmYXVsdC5cbiAgXCJpbnB1dCwgYnV0dG9uLCB0ZXh0YXJlYSwgc2VsZWN0XCI6IHtcbiAgICBmb250OiBcImluaGVyaXRcIixcbiAgICBtYXJnaW46IDAsXG4gIH0sXG59KTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdWkvZ2xvYmFsLXN0eWxlLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBOztBQUlBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQWtDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuY2FzdC1zdHVkaW8vLi9zcmMvdWkvZ2xvYmFsLXN0eWxlLnRzeD9iYjgzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdsb2JhbCwgY3NzIH0gZnJvbSBcIkBlbW90aW9uL3JlYWN0XCI7XG5cbi8vIFRoZXJlIGFyZSBhbHNvIHZlcnkgZmV3IGdsb2JhbCBzdHlsZXMgaW4gYGluZGV4Lmh0bWxgIGFzIHRob3NlIGFyZSBuZWVkZWQgZm9yXG4vLyB0aGUgbG9hZGluZyBpbmRpY2F0b3IgYWxyZWFkeS5cbmV4cG9ydCBjb25zdCBHbG9iYWxTdHlsZTogUmVhY3QuRkMgPSAoKSA9PiA8PlxuICA8R2xvYmFsIHN0eWxlcz17Q1NTX1JFU0VUU30gLz5cbiAgPEdsb2JhbCBzdHlsZXM9e0dMT0JBTF9TVFlMRX0gLz5cbjwvPjtcblxuXG4vKiogVGhpcyBpcyBqdXN0IHN0eWxpbmcgZm9yIFRvYmlyYSB0aGF0IHdlIHdhbnQgdG8gYXBwbHkgZ2xvYmFsbHkuICovXG5jb25zdCBHTE9CQUxfU1RZTEUgPSBjc3Moe1xuICBcIjpyb290XCI6IHtcbiAgICBcIi0tbWluLXBhZ2Utd2lkdGhcIjogXCIzMjBweFwiLFxuICB9LFxuICBib2R5OiB7XG4gICAgLy8gLy8gQWNjZW50IGNvbG9yIGZvciBnZW5lcmF0ZWQgVUkgY29udHJvbCBgPGlucHV0PmAgZWxlbWVudHNcbiAgICAvLyAvLyB3aGVyZSB0eXBlPVwiY2hlY2tib3hcIiwgXCJyYWRpb1wiIG9yIFwicmFuZ2VcIixcbiAgICAvLyAvLyBhcyB3ZWxsIGFzIGA8cHJvZ3Jlc3M+YCBlbGVtZW50cy5cbiAgICAvLyBhY2NlbnRDb2xvcjogQ09MT1JTLnByaW1hcnkwLFxuXG4gICAgZm9udEZhbWlseTogXCInUm9ib3RvIEZsZXggVmFyaWFibGUnLCBzYW5zLXNlcmlmXCIsXG4gICAgZm9udFdlaWdodDogNDAwLFxuXG4gICAgLy8gQSByZXNldCB0byBhIHNlbnNpYmxlIHZhbHVlLlxuICAgIGxpbmVIZWlnaHQ6IDEuNSxcblxuICAgIC8vIDE2cHggaXMgYSBnb29kIGRlZmF1bHQgYm9keSB0ZXh0IHNpemUgYWNjb3JkaW5nIHRvIHRoZSBpbnRlcm5ldCAoVE0pLlxuICAgIGZvbnRTaXplOiAxNixcblxuICAgIC8vIEZyb20gYSBzZXQgb2YgcG9wdWxhciBwaG9uZXMsIHRoZSBpUGhvbmUgNSBoYXMgdGhlIHNtYWxsZXN0IHZpZXdwb3J0XG4gICAgLy8gd2lkdGg6IDMyMHB4LiBJdCBkb2VzIG1ha2Ugc2Vuc2UgdG8gc2V0IGEgbWluaW11bSB3aWR0aCBlYXJseSBvbiBpblxuICAgIC8vIG9yZGVyIHRvIGtub3cgd2hlcmUgd2UgY2FuIHN0b3AgY2FyaW5nLlxuICAgIG1pbldpZHRoOiBcInZhcigtLW1pbi1wYWdlLXdpZHRoKVwiLFxuICB9LFxuICAvLyBhOiB7XG4gIC8vICAgICBjb2xvcjogQ09MT1JTLnByaW1hcnkwLFxuICAvLyAgICAgXCImOmhvdmVyLCAmOmZvY3VzXCI6IHtcbiAgLy8gICAgICAgICB0ZXh0RGVjb3JhdGlvbjogXCJub25lXCIsXG4gIC8vICAgICAgICAgY29sb3I6IENPTE9SUy5wcmltYXJ5MSxcbiAgLy8gICAgIH0sXG4gIC8vICAgICBcIjpmb2N1cy12aXNpYmxlXCI6IHsgb3V0bGluZTogYDIuNXB4IHNvbGlkICR7Q09MT1JTLmZvY3VzfWAgfSxcbiAgLy8gfSxcbn0pO1xuXG4vKipcbiAqIFRoZSBmb2xsb3dpbmcgaXMgYSBtaW5pbWFsIHNldCBvZiBDU1MgcmVzZXQgcnVsZXMgaW4gb3JkZXIgdG8gZ2V0IHJpZCBvZlxuICogYnJvd3NlciBkZXBlbmRlbnQsIGluY29uc2lzdGVudCBvciB1bmV4cGVjdGVkIGJlaGF2aW9yLiBQYXJ0cyBvZiB0aGlzXG4gKiBhcmUgdGFrZW4gZnJvbSBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vaGFua2NoaXpsamF3L21vZGVybi1jc3MtcmVzZXRcbiAqIExpY2Vuc2VkIGFzIE1JVCwgQW5keSBCZWxsIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqL1xuY29uc3QgQ1NTX1JFU0VUUyA9IGNzcyh7XG4gIC8vIEV2ZXJ5dGhpbmcgc2hvdWxkIGhhdmUgYm94LXNpemluZyBib3JkZXItYm94IGJ5IGRlZmF1bHQgYXMgaXQncyBtb3JlXG4gIC8vIGludHVpdGl2ZSBhbmQgZXhwZWN0ZWQuXG4gIFwiKiwgKjo6YmVmb3JlLCAqOjphZnRlclwiOiB7XG4gICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgfSxcblxuICAvLyBSZW1vdmUgZGVmYXVsdCBtYXJnaW5zIG9mIHRoZSBtb3N0IGltcG9ydGFudCBlbGVtZW50cy5cbiAgXCJib2R5LCBoMSwgaDIsIGgzLCBoNCwgcCwgbGksIGZpZ3VyZSwgZmlnY2FwdGlvbiwgYmxvY2txdW90ZSwgZGwsIGRkLCBwcmVcIjoge1xuICAgIG1hcmdpbjogMCxcbiAgfSxcblxuICBcImh0bWwsIGJvZHksIGJvZHkgPiAjcm9vdFwiOiB7XG4gICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgfSxcblxuICAvLyBUaGlzIGltcHJvdmVzIHRoZSByZWFkYWJpbGl0eSBvZiB1bmRlcmxpbmVzIGluIGxpbmtzLlxuICBhOiB7XG4gICAgdGV4dERlY29yYXRpb25Ta2lwSW5rOiBcImF1dG9cIixcbiAgfSxcblxuICAvLyBTb21lIGVsZW1lbnRzIG5vdCBpbmhlcmV0aW5nIGZvbnRzIGlzIGEgcmVhbGx5IGNvbmZ1c2luZyBicm93c2VyIGRlZmF1bHQuXG4gIFwiaW5wdXQsIGJ1dHRvbiwgdGV4dGFyZWEsIHNlbGVjdFwiOiB7XG4gICAgZm9udDogXCJpbmhlcml0XCIsXG4gICAgbWFyZ2luOiAwLFxuICB9LFxufSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/ui/global-style.tsx\n");

/***/ })

}]);