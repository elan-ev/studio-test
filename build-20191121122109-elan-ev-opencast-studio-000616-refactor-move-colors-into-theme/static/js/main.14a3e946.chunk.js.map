{"version":3,"sources":["style/global-style.js","theme.js","i18n/index.js","serviceWorker.js","loading.js","index.js"],"names":["GlobalStyle","heading","color","fontFamily","lineHeight","fontWeight","base","space","fonts","body","monospace","fontSizes","fontWeights","bold","lineHeights","colors","text","background","primary","secondary","muted","error","gray","buttons","bg","styles","root","h1","fontSize","h2","h3","h4","h5","h6","p","a","pre","overflowX","code","table","width","borderCollapse","borderSpacing","th","textAlign","borderBottomStyle","td","img","maxWidth","input","borderWidth","borderStyle","borderColor","height","borderRadius","px","py","outline","transition","boxShadow","theme","resources","en","translation","de","deTranslations","fa","i18n","use","initReactI18next","init","fallbackLng","lng","keySeparator","interpolation","escapeValue","Boolean","window","location","hostname","match","spin","keyframes","circleCover","Loading","props","useThemeUI","sx","position","top","left","transform","zIndex","opacity","animation","r","cx","cy","fill","stroke","strokeWidth","strokeDashoffset","strokeDasharray","transformOrigin","maxHeight","fontStyle","Sentry","dsn","App","lazy","ReactDOM","render","StrictMode","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14a3e946.chunk.js","sourcesContent":["import css from '@emotion/css/macro'\n\nconst GlobalStyle = css`\n* {\n    box-sizing: border-box;\n}\n\nhtml, body {\n    margin: 0;\n    padding: 0;\n    height: 100%;\n    min-height: 100%;\n}\n\nhtml, body, button, input {\n    font-family: Ubuntu, Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, sans-serif;\n}\n\nbody {\n    overflow-x: hidden;\n}\n\nlabel, button:not(:disabled) {\n    cursor: pointer;\n}\n\nbutton {\n    outline: none;\n}\n\n#root {\n  height: 100%;\n}\n`;\n\nexport default GlobalStyle;\n","const heading = {\n  color: 'text',\n  fontFamily: 'heading',\n  lineHeight: 'heading',\n  fontWeight: 'heading'\n};\n\nconst base = {\n  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n  fonts: {\n    body: 'Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, system-ui, sans-serif',\n    heading: 'Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, system-ui, sans-serif',\n    monospace: '\"Roboto Mono\", monospace'\n  },\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 96],\n  fontWeights: {\n    body: 400,\n    heading: 300,\n    bold: 700\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.125\n  },\n  colors: {\n    text: '#000',\n    background: '#fff',\n    primary: '#47af7a',\n    secondary: '#30c',\n    muted: '#f6f6f6',\n    error: '#f14668',\n    gray: ['#363636', '#666666', '#aaaaaa', '#dddddd']\n  },\n  buttons: {\n    primary: {\n      color: 'background',\n      bg: 'primary',\n      '&:hover': {\n        bg: 'text'\n      }\n    },\n    text: {\n      color: 'text',\n      bg: 'background'\n    }\n  },\n  styles: {\n    root: {\n      fontFamily: 'body',\n      lineHeight: 'body',\n      fontWeight: 'body'\n    },\n    h1: {\n      ...heading,\n      fontSize: 5\n    },\n    h2: {\n      ...heading,\n      fontSize: 4\n    },\n    h3: {\n      ...heading,\n      fontSize: 3\n    },\n    h4: {\n      ...heading,\n      fontSize: 2\n    },\n    h5: {\n      ...heading,\n      fontSize: 1\n    },\n    h6: {\n      ...heading,\n      fontSize: 0\n    },\n    p: {\n      color: 'text',\n      fontFamily: 'body',\n      fontWeight: 'body',\n      lineHeight: 'body'\n    },\n    a: {\n      color: 'primary'\n    },\n    pre: {\n      fontFamily: 'monospace',\n      overflowX: 'auto',\n      code: {\n        color: 'inherit'\n      }\n    },\n    code: {\n      fontFamily: 'monospace',\n      fontSize: 'inherit'\n    },\n    table: {\n      width: '100%',\n      borderCollapse: 'separate',\n      borderSpacing: 0\n    },\n    th: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid'\n    },\n    td: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid'\n    },\n    img: {\n      maxWidth: '100%'\n    },\n    input: {\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: 'gray.2',\n      height: '2rem',\n      borderRadius: 2,\n      px: 2,\n      py: 0,\n      outline: 'none',\n      transition: 'border-color 0.3s, box-shadow 0.3s',\n      width: '100%',\n      '&:focus': {\n        borderColor: 'primary',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.primary}`\n      },\n      '&[aria-invalid=\"true\"]': {\n        borderColor: 'error',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.error}`\n      }\n    }\n  }\n};\n\nexport default base;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport deTranslations from './locales/de.json';\nimport enTranslations from './locales/en.json';\nimport faTranslations from './locales/fa.json';\n\nconst resources = {\n  en: {\n    translation: enTranslations\n  },\n\n  de: {\n    translation: deTranslations\n  },\n\n  fa: {\n    translation: faTranslations\n  }\n};\n\ni18n.use(initReactI18next).init({\n  resources,\n  fallbackLng: 'en',\n  lng: 'en',\n\n  keySeparator: false,\n\n  interpolation: {\n    escapeValue: false\n  }\n});\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//; -*- mode: rjsx;-*-\n/** @jsx jsx */\nimport { jsx, useThemeUI } from 'theme-ui';\nimport { keyframes } from '@emotion/core';\n\nconst spin = keyframes`\n 0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst circleCover = keyframes`\n  0% {\n    stroke-dashoffset: 0;\n    transform: rotateX(180deg) rotateZ(90deg);\n  }\n  50% {\n    stroke-dashoffset: 515;\n    transform: rotateX(180deg) rotateZ(90deg);\n  }\n  50.01% {\n    transform: rotateX(0deg) rotateZ(-90deg);\n  }\n  100% {\n    stroke-dashoffset: 0;\n    transform: rotateX(0deg) rotateZ(-90deg);\n  }\n`;\n\nconst Loading = props => {\n  const { theme } = useThemeUI();\n\n  return (\n    <div\n      sx={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        textAlign: 'center',\n        width: '12rem',\n        height: '12rem',\n        transition: 'opacity 0.5s 0.5s, visibility 0s 1s'\n      }}\n    >\n      <svg\n        width=\"192\"\n        height=\"192\"\n        sx={{\n          width: '100%',\n          height: '100%',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          zIndex: 1,\n          opacity: 1,\n          animation: `${spin} 6s infinite linear`\n        }}\n      >\n        <circle\n          r=\"82\"\n          cx=\"96\"\n          cy=\"96\"\n          fill=\"none\"\n          stroke={theme.colors.primary}\n          strokeWidth=\"8\"\n          strokeDashoffset=\"0\"\n          strokeDasharray=\"515\"\n        ></circle>\n        <circle\n          r=\"82\"\n          cx=\"96\"\n          cy=\"96\"\n          fill=\"none\"\n          stroke=\"white\"\n          strokeWidth=\"14\"\n          strokeDashoffset=\"20\"\n          strokeDasharray=\"515\"\n          sx={{\n            animation: `${circleCover} 3s infinite linear`,\n            transformOrigin: '50% 50%'\n          }}\n        ></circle>\n      </svg>{' '}\n      <span\n        sx={{\n          textAlign: 'center',\n          position: 'absolute',\n          maxWidth: '80%',\n          maxHeight: '80%',\n          transform: 'translate(-50%, -50%)',\n          top: '50%',\n          left: '50%',\n          fontStyle: 'italic',\n          fontSize: '1.25rem',\n          color: 'gray.1'\n        }}\n      >\n        Loading...\n      </span>\n    </div>\n  );\n};\n\nexport default Loading;\n","//; -*- mode: rjsx;-*-\nimport React, { lazy, Suspense } from 'react';\nimport { Global } from '@emotion/core';\nimport ReactDOM from 'react-dom';\nimport * as Sentry from '@sentry/browser';\nimport { ThemeProvider } from 'theme-ui';\n\nimport GlobalStyle from './style/global-style';\nimport theme from './theme';\n\nimport './i18n';\nimport * as serviceWorker from './serviceWorker';\nimport Loading from './loading';\n\nSentry.init({ dsn: 'https://66e6b4dc3d59463fa34272abcb5da6b1@sentry.virtuos.uos.de/4' });\n\nconst App = lazy(() => import('./App'));\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <Global styles={GlobalStyle} />\n      <Suspense fallback={<Loading />}>\n        <App />\n      </Suspense>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}